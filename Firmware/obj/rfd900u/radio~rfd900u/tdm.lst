                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Sep  7 2022) (Linux)
                                      4 ; This file was generated Wed Sep  7 10:05:08 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module tdm
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _fhop_set_locked
                                     13 	.globl _fhop_window_change
                                     14 	.globl _fhop_receive_channel
                                     15 	.globl _fhop_transmit_channel
                                     16 	.globl _packet_inject
                                     17 	.globl _packet_set_max_xmit
                                     18 	.globl _packet_force_resend
                                     19 	.globl _packet_is_duplicate
                                     20 	.globl _packet_is_injected
                                     21 	.globl _packet_is_resend
                                     22 	.globl _packet_get_next
                                     23 	.globl _timer_entropy
                                     24 	.globl _delay_msec
                                     25 	.globl _timer2_tick
                                     26 	.globl _radio_temperature
                                     27 	.globl _MAVLink_report
                                     28 	.globl _radio_receive_in_progress
                                     29 	.globl _radio_get_transmit_power
                                     30 	.globl _radio_air_rate
                                     31 	.globl _radio_current_rssi
                                     32 	.globl _radio_last_rssi
                                     33 	.globl _radio_set_channel
                                     34 	.globl _radio_receiver_on
                                     35 	.globl _radio_transmit
                                     36 	.globl _radio_preamble_detected
                                     37 	.globl _radio_receive_packet
                                     38 	.globl _printf_end_capture
                                     39 	.globl _printf_start_capture
                                     40 	.globl _printfl
                                     41 	.globl _panic
                                     42 	.globl _at_command
                                     43 	.globl _constrain
                                     44 	.globl _param_get
                                     45 	.globl _pins_user_check
                                     46 	.globl _serial_write_buf
                                     47 	.globl _strlen
                                     48 	.globl _memset
                                     49 	.globl _memcpy
                                     50 	.globl _rand
                                     51 	.globl _NSS1
                                     52 	.globl _IRQ
                                     53 	.globl _PIN_ENABLE
                                     54 	.globl _PIN_CONFIG
                                     55 	.globl _LED_GREEN
                                     56 	.globl _LED_RED
                                     57 	.globl _SPI1EN
                                     58 	.globl _TXBMT1
                                     59 	.globl _NSS1MD0
                                     60 	.globl _NSS1MD1
                                     61 	.globl _RXOVRN1
                                     62 	.globl _MODF1
                                     63 	.globl _WCOL1
                                     64 	.globl _SPIF1
                                     65 	.globl _SPI0EN
                                     66 	.globl _TXBMT0
                                     67 	.globl _NSS0MD0
                                     68 	.globl _NSS0MD1
                                     69 	.globl _RXOVRN0
                                     70 	.globl _MODF0
                                     71 	.globl _WCOL0
                                     72 	.globl _SPIF0
                                     73 	.globl _AD0CM0
                                     74 	.globl _AD0CM1
                                     75 	.globl _AD0CM2
                                     76 	.globl _AD0WINT
                                     77 	.globl _AD0BUSY
                                     78 	.globl _AD0INT
                                     79 	.globl _BURSTEN
                                     80 	.globl _AD0EN
                                     81 	.globl _CCF0
                                     82 	.globl _CCF1
                                     83 	.globl _CCF2
                                     84 	.globl _CCF3
                                     85 	.globl _CCF4
                                     86 	.globl _CCF5
                                     87 	.globl _CR
                                     88 	.globl _CF
                                     89 	.globl _P
                                     90 	.globl _F1
                                     91 	.globl _OV
                                     92 	.globl _RS0
                                     93 	.globl _RS1
                                     94 	.globl _F0
                                     95 	.globl _AC
                                     96 	.globl _CY
                                     97 	.globl _T2XCLK
                                     98 	.globl _T2RCLK
                                     99 	.globl _TR2
                                    100 	.globl _T2SPLIT
                                    101 	.globl _TF2CEN
                                    102 	.globl _TF2LEN
                                    103 	.globl _TF2L
                                    104 	.globl _TF2H
                                    105 	.globl _SI
                                    106 	.globl _ACK
                                    107 	.globl _ARBLOST
                                    108 	.globl _ACKRQ
                                    109 	.globl _STO
                                    110 	.globl _STA
                                    111 	.globl _TXMODE
                                    112 	.globl _MASTER
                                    113 	.globl _PX0
                                    114 	.globl _PT0
                                    115 	.globl _PX1
                                    116 	.globl _PT1
                                    117 	.globl _PS0
                                    118 	.globl _PT2
                                    119 	.globl _PSPI0
                                    120 	.globl _EX0
                                    121 	.globl _ET0
                                    122 	.globl _EX1
                                    123 	.globl _ET1
                                    124 	.globl _ES0
                                    125 	.globl _ET2
                                    126 	.globl _ESPI0
                                    127 	.globl _EA
                                    128 	.globl _RI0
                                    129 	.globl _TI0
                                    130 	.globl _RB80
                                    131 	.globl _TB80
                                    132 	.globl _REN0
                                    133 	.globl _MCE0
                                    134 	.globl _S0MODE
                                    135 	.globl _IT0
                                    136 	.globl _IE0
                                    137 	.globl _IT1
                                    138 	.globl _IE1
                                    139 	.globl _TR0
                                    140 	.globl _TF0
                                    141 	.globl _TR1
                                    142 	.globl _TF1
                                    143 	.globl __XPAGE
                                    144 	.globl _PCA0CP4
                                    145 	.globl _PCA0CP0
                                    146 	.globl _PCA0
                                    147 	.globl _PCA0CP3
                                    148 	.globl _PCA0CP2
                                    149 	.globl _PCA0CP1
                                    150 	.globl _PCA0CP5
                                    151 	.globl _TMR2
                                    152 	.globl _TMR2RL
                                    153 	.globl _ADC0LT
                                    154 	.globl _ADC0GT
                                    155 	.globl _ADC0
                                    156 	.globl _TMR3
                                    157 	.globl _TMR3RL
                                    158 	.globl _TOFF
                                    159 	.globl _DP
                                    160 	.globl _PCLKEN
                                    161 	.globl _CLKMODE
                                    162 	.globl _P7MDOUT
                                    163 	.globl _P6MDOUT
                                    164 	.globl _P5MDOUT
                                    165 	.globl _P4MDOUT
                                    166 	.globl _PCLKACT
                                    167 	.globl _P6MDIN
                                    168 	.globl _P5MDIN
                                    169 	.globl _P4MDIN
                                    170 	.globl _P3MDIN
                                    171 	.globl _DEVICEID
                                    172 	.globl _REVID
                                    173 	.globl _HWID
                                    174 	.globl _P7
                                    175 	.globl _P6
                                    176 	.globl _P5
                                    177 	.globl _P4
                                    178 	.globl _TOFFH
                                    179 	.globl _TOFFL
                                    180 	.globl _ADC0TK
                                    181 	.globl _ADC0PWR
                                    182 	.globl _IREF0CF
                                    183 	.globl _FLSCL
                                    184 	.globl _OSCICL
                                    185 	.globl _OSCIFL
                                    186 	.globl _P3MDOUT
                                    187 	.globl _LCD0BUFCF
                                    188 	.globl _P7DRV
                                    189 	.globl _P6DRV
                                    190 	.globl _P2DRV
                                    191 	.globl _P1DRV
                                    192 	.globl _P0DRV
                                    193 	.globl _P5DRV
                                    194 	.globl _P4DRV
                                    195 	.globl _P3DRV
                                    196 	.globl _LCD0BUFCN
                                    197 	.globl _CRC0CNT
                                    198 	.globl _CRC0AUTO
                                    199 	.globl _CRC0FLIP
                                    200 	.globl _CRC0IN
                                    201 	.globl _CRC0CN
                                    202 	.globl _CRC0DAT
                                    203 	.globl _SFRPGCN
                                    204 	.globl _DC0RDY
                                    205 	.globl _PC0INT1
                                    206 	.globl _PC0INT0
                                    207 	.globl _PC0DCH
                                    208 	.globl _PC0DCL
                                    209 	.globl _SPI1CN
                                    210 	.globl _AES0YOUT
                                    211 	.globl _PC0HIST
                                    212 	.globl _PC0CMP1H
                                    213 	.globl _PC0CMP1M
                                    214 	.globl _PC0CMP1L
                                    215 	.globl _AES0KBA
                                    216 	.globl _AES0DBA
                                    217 	.globl _AES0KIN
                                    218 	.globl _AES0XIN
                                    219 	.globl _AES0BIN
                                    220 	.globl _AES0DCFG
                                    221 	.globl _AES0BCFG
                                    222 	.globl _PC0TH
                                    223 	.globl _PC0CMP0H
                                    224 	.globl _PC0CMP0M
                                    225 	.globl _PC0CMP0L
                                    226 	.globl _PC0CTR1H
                                    227 	.globl _PC0CTR1M
                                    228 	.globl _PC0CTR1L
                                    229 	.globl _PC0CTR0H
                                    230 	.globl _PC0CTR0M
                                    231 	.globl _PC0CTR0L
                                    232 	.globl _PC0MD
                                    233 	.globl _PC0PCF
                                    234 	.globl _DMA0NMD
                                    235 	.globl _DMA0BUSY
                                    236 	.globl _DMA0MINT
                                    237 	.globl _DMA0INT
                                    238 	.globl _DMA0EN
                                    239 	.globl _DMA0SEL
                                    240 	.globl _DMA0NSZH
                                    241 	.globl _DMA0NSZL
                                    242 	.globl _DMA0NAOH
                                    243 	.globl _DMA0NAOL
                                    244 	.globl _DMA0NBAH
                                    245 	.globl _DMA0NBAL
                                    246 	.globl _DMA0NCF
                                    247 	.globl _VREGINSDH
                                    248 	.globl _VREGINSDL
                                    249 	.globl _ENC0CN
                                    250 	.globl _ENC0H
                                    251 	.globl _ENC0M
                                    252 	.globl _ENC0L
                                    253 	.globl _PC0STAT
                                    254 	.globl _CRC1CN
                                    255 	.globl _CRC1POLH
                                    256 	.globl _CRC1POLL
                                    257 	.globl _CRC1OUTH
                                    258 	.globl _CRC1OUTL
                                    259 	.globl _CRC1IN
                                    260 	.globl _LCD0BUFMD
                                    261 	.globl _LCD0CHPCN
                                    262 	.globl _DC0MD
                                    263 	.globl _DC0CF
                                    264 	.globl _DC0CN
                                    265 	.globl _LCD0VBMCF
                                    266 	.globl _LCD0CHPMD
                                    267 	.globl _LCD0CHPCF
                                    268 	.globl _LCD0MSCF
                                    269 	.globl _LCD0MSCN
                                    270 	.globl _LCD0CLKDIVH
                                    271 	.globl _LCD0CLKDIVL
                                    272 	.globl _LCD0VBMCN
                                    273 	.globl _LCD0CF
                                    274 	.globl _LCD0PWR
                                    275 	.globl _SPI1DAT
                                    276 	.globl _SPI1CKR
                                    277 	.globl _SPI1CFG
                                    278 	.globl _LCD0TOGR
                                    279 	.globl _LCD0BLINK
                                    280 	.globl _LCD0CN
                                    281 	.globl _LCD0CNTRST
                                    282 	.globl _LCD0DF
                                    283 	.globl _LCD0DE
                                    284 	.globl _LCD0DD
                                    285 	.globl _LCD0DC
                                    286 	.globl _LCD0DB
                                    287 	.globl _LCD0DA
                                    288 	.globl _LCD0D9
                                    289 	.globl _LCD0D8
                                    290 	.globl _LCD0D7
                                    291 	.globl _LCD0D6
                                    292 	.globl _LCD0D5
                                    293 	.globl _LCD0D4
                                    294 	.globl _LCD0D3
                                    295 	.globl _LCD0D2
                                    296 	.globl _LCD0D1
                                    297 	.globl _LCD0D0
                                    298 	.globl _VDM0CN
                                    299 	.globl _PCA0CPH4
                                    300 	.globl _PCA0CPL4
                                    301 	.globl _PCA0CPH0
                                    302 	.globl _PCA0CPL0
                                    303 	.globl _PCA0H
                                    304 	.globl _PCA0L
                                    305 	.globl _SPI0CN
                                    306 	.globl _EIP2
                                    307 	.globl _EIP1
                                    308 	.globl _SMB0ADM
                                    309 	.globl _SMB0ADR
                                    310 	.globl _P2MDIN
                                    311 	.globl _P1MDIN
                                    312 	.globl _P0MDIN
                                    313 	.globl _B
                                    314 	.globl _RSTSRC
                                    315 	.globl _PCA0CPH3
                                    316 	.globl _PCA0CPL3
                                    317 	.globl _PCA0CPH2
                                    318 	.globl _PCA0CPL2
                                    319 	.globl _PCA0CPH1
                                    320 	.globl _PCA0CPL1
                                    321 	.globl _ADC0CN
                                    322 	.globl _EIE2
                                    323 	.globl _EIE1
                                    324 	.globl _FLWR
                                    325 	.globl _IT01CF
                                    326 	.globl _XBR2
                                    327 	.globl _XBR1
                                    328 	.globl _XBR0
                                    329 	.globl _ACC
                                    330 	.globl _PCA0PWM
                                    331 	.globl _PCA0CPM4
                                    332 	.globl _PCA0CPM3
                                    333 	.globl _PCA0CPM2
                                    334 	.globl _PCA0CPM1
                                    335 	.globl _PCA0CPM0
                                    336 	.globl _PCA0MD
                                    337 	.globl _PCA0CN
                                    338 	.globl _P0MAT
                                    339 	.globl _P2SKIP
                                    340 	.globl _P1SKIP
                                    341 	.globl _P0SKIP
                                    342 	.globl _PCA0CPH5
                                    343 	.globl _PCA0CPL5
                                    344 	.globl _REF0CN
                                    345 	.globl _PSW
                                    346 	.globl _P1MAT
                                    347 	.globl _PCA0CPM5
                                    348 	.globl _TMR2H
                                    349 	.globl _TMR2L
                                    350 	.globl _TMR2RLH
                                    351 	.globl _TMR2RLL
                                    352 	.globl _REG0CN
                                    353 	.globl _TMR2CN
                                    354 	.globl _P0MASK
                                    355 	.globl _ADC0LTH
                                    356 	.globl _ADC0LTL
                                    357 	.globl _ADC0GTH
                                    358 	.globl _ADC0GTL
                                    359 	.globl _SMB0DAT
                                    360 	.globl _SMB0CF
                                    361 	.globl _SMB0CN
                                    362 	.globl _P1MASK
                                    363 	.globl _ADC0H
                                    364 	.globl _ADC0L
                                    365 	.globl _ADC0CF
                                    366 	.globl _ADC0MX
                                    367 	.globl _ADC0AC
                                    368 	.globl _IREF0CN
                                    369 	.globl _IP
                                    370 	.globl _FLKEY
                                    371 	.globl _PMU0FL
                                    372 	.globl _PMU0CF
                                    373 	.globl _PMU0MD
                                    374 	.globl _OSCICN
                                    375 	.globl _OSCXCN
                                    376 	.globl _P3
                                    377 	.globl _EMI0TC
                                    378 	.globl _RTC0KEY
                                    379 	.globl _RTC0DAT
                                    380 	.globl _RTC0ADR
                                    381 	.globl _EMI0CF
                                    382 	.globl _EMI0CN
                                    383 	.globl _CLKSEL
                                    384 	.globl _IE
                                    385 	.globl _SFRPAGE
                                    386 	.globl _P2MDOUT
                                    387 	.globl _P1MDOUT
                                    388 	.globl _P0MDOUT
                                    389 	.globl _SPI0DAT
                                    390 	.globl _SPI0CKR
                                    391 	.globl _SPI0CFG
                                    392 	.globl _P2
                                    393 	.globl _CPT0MX
                                    394 	.globl _CPT1MX
                                    395 	.globl _CPT0MD
                                    396 	.globl _CPT1MD
                                    397 	.globl _CPT0CN
                                    398 	.globl _CPT1CN
                                    399 	.globl _SBUF0
                                    400 	.globl _SCON0
                                    401 	.globl _TMR3H
                                    402 	.globl _TMR3L
                                    403 	.globl _TMR3RLH
                                    404 	.globl _TMR3RLL
                                    405 	.globl _TMR3CN
                                    406 	.globl _P1
                                    407 	.globl _PSCTL
                                    408 	.globl _CKCON
                                    409 	.globl _TH1
                                    410 	.globl _TH0
                                    411 	.globl _TL1
                                    412 	.globl _TL0
                                    413 	.globl _TMOD
                                    414 	.globl _TCON
                                    415 	.globl _PCON
                                    416 	.globl _SFRLAST
                                    417 	.globl _SFRNEXT
                                    418 	.globl _PSBANK
                                    419 	.globl _DPH
                                    420 	.globl _DPL
                                    421 	.globl _SP
                                    422 	.globl _P0
                                    423 	.globl _test_display
                                    424 	.globl _pbuf
                                    425 	.globl _trailer
                                    426 	.globl _lbt_rssi
                                    427 	.globl _duty_cycle_offset
                                    428 	.globl _duty_cycle
                                    429 	.globl _transmit_wait
                                    430 	.globl __canary
                                    431 	.globl _tdm_show_rssi
                                    432 	.globl _tdm_change_phase
                                    433 	.globl _tdm_remote_at
                                    434 	.globl _tdm_serial_loop
                                    435 	.globl _tdm_init
                                    436 	.globl _tdm_report_timing
                                    437 ;--------------------------------------------------------
                                    438 ; special function registers
                                    439 ;--------------------------------------------------------
                                    440 	.area RSEG    (ABS,DATA)
      000000                        441 	.org 0x0000
                           000080   442 _P0	=	0x0080
                           000081   443 _SP	=	0x0081
                           000082   444 _DPL	=	0x0082
                           000083   445 _DPH	=	0x0083
                           000084   446 _PSBANK	=	0x0084
                           000085   447 _SFRNEXT	=	0x0085
                           000086   448 _SFRLAST	=	0x0086
                           000087   449 _PCON	=	0x0087
                           000088   450 _TCON	=	0x0088
                           000089   451 _TMOD	=	0x0089
                           00008A   452 _TL0	=	0x008a
                           00008B   453 _TL1	=	0x008b
                           00008C   454 _TH0	=	0x008c
                           00008D   455 _TH1	=	0x008d
                           00008E   456 _CKCON	=	0x008e
                           00008F   457 _PSCTL	=	0x008f
                           000090   458 _P1	=	0x0090
                           000091   459 _TMR3CN	=	0x0091
                           000092   460 _TMR3RLL	=	0x0092
                           000093   461 _TMR3RLH	=	0x0093
                           000094   462 _TMR3L	=	0x0094
                           000095   463 _TMR3H	=	0x0095
                           000098   464 _SCON0	=	0x0098
                           000099   465 _SBUF0	=	0x0099
                           00009A   466 _CPT1CN	=	0x009a
                           00009B   467 _CPT0CN	=	0x009b
                           00009C   468 _CPT1MD	=	0x009c
                           00009D   469 _CPT0MD	=	0x009d
                           00009E   470 _CPT1MX	=	0x009e
                           00009F   471 _CPT0MX	=	0x009f
                           0000A0   472 _P2	=	0x00a0
                           0000A1   473 _SPI0CFG	=	0x00a1
                           0000A2   474 _SPI0CKR	=	0x00a2
                           0000A3   475 _SPI0DAT	=	0x00a3
                           0000A4   476 _P0MDOUT	=	0x00a4
                           0000A5   477 _P1MDOUT	=	0x00a5
                           0000A6   478 _P2MDOUT	=	0x00a6
                           0000A7   479 _SFRPAGE	=	0x00a7
                           0000A8   480 _IE	=	0x00a8
                           0000A9   481 _CLKSEL	=	0x00a9
                           0000AA   482 _EMI0CN	=	0x00aa
                           0000AB   483 _EMI0CF	=	0x00ab
                           0000AC   484 _RTC0ADR	=	0x00ac
                           0000AD   485 _RTC0DAT	=	0x00ad
                           0000AE   486 _RTC0KEY	=	0x00ae
                           0000AF   487 _EMI0TC	=	0x00af
                           0000B0   488 _P3	=	0x00b0
                           0000B1   489 _OSCXCN	=	0x00b1
                           0000B2   490 _OSCICN	=	0x00b2
                           0000B3   491 _PMU0MD	=	0x00b3
                           0000B5   492 _PMU0CF	=	0x00b5
                           0000B6   493 _PMU0FL	=	0x00b6
                           0000B7   494 _FLKEY	=	0x00b7
                           0000B8   495 _IP	=	0x00b8
                           0000B9   496 _IREF0CN	=	0x00b9
                           0000BA   497 _ADC0AC	=	0x00ba
                           0000BB   498 _ADC0MX	=	0x00bb
                           0000BC   499 _ADC0CF	=	0x00bc
                           0000BD   500 _ADC0L	=	0x00bd
                           0000BE   501 _ADC0H	=	0x00be
                           0000BF   502 _P1MASK	=	0x00bf
                           0000C0   503 _SMB0CN	=	0x00c0
                           0000C1   504 _SMB0CF	=	0x00c1
                           0000C2   505 _SMB0DAT	=	0x00c2
                           0000C3   506 _ADC0GTL	=	0x00c3
                           0000C4   507 _ADC0GTH	=	0x00c4
                           0000C5   508 _ADC0LTL	=	0x00c5
                           0000C6   509 _ADC0LTH	=	0x00c6
                           0000C7   510 _P0MASK	=	0x00c7
                           0000C8   511 _TMR2CN	=	0x00c8
                           0000C9   512 _REG0CN	=	0x00c9
                           0000CA   513 _TMR2RLL	=	0x00ca
                           0000CB   514 _TMR2RLH	=	0x00cb
                           0000CC   515 _TMR2L	=	0x00cc
                           0000CD   516 _TMR2H	=	0x00cd
                           0000CE   517 _PCA0CPM5	=	0x00ce
                           0000CF   518 _P1MAT	=	0x00cf
                           0000D0   519 _PSW	=	0x00d0
                           0000D1   520 _REF0CN	=	0x00d1
                           0000D2   521 _PCA0CPL5	=	0x00d2
                           0000D3   522 _PCA0CPH5	=	0x00d3
                           0000D4   523 _P0SKIP	=	0x00d4
                           0000D5   524 _P1SKIP	=	0x00d5
                           0000D6   525 _P2SKIP	=	0x00d6
                           0000D7   526 _P0MAT	=	0x00d7
                           0000D8   527 _PCA0CN	=	0x00d8
                           0000D9   528 _PCA0MD	=	0x00d9
                           0000DA   529 _PCA0CPM0	=	0x00da
                           0000DB   530 _PCA0CPM1	=	0x00db
                           0000DC   531 _PCA0CPM2	=	0x00dc
                           0000DD   532 _PCA0CPM3	=	0x00dd
                           0000DE   533 _PCA0CPM4	=	0x00de
                           0000DF   534 _PCA0PWM	=	0x00df
                           0000E0   535 _ACC	=	0x00e0
                           0000E1   536 _XBR0	=	0x00e1
                           0000E2   537 _XBR1	=	0x00e2
                           0000E3   538 _XBR2	=	0x00e3
                           0000E4   539 _IT01CF	=	0x00e4
                           0000E5   540 _FLWR	=	0x00e5
                           0000E6   541 _EIE1	=	0x00e6
                           0000E7   542 _EIE2	=	0x00e7
                           0000E8   543 _ADC0CN	=	0x00e8
                           0000E9   544 _PCA0CPL1	=	0x00e9
                           0000EA   545 _PCA0CPH1	=	0x00ea
                           0000EB   546 _PCA0CPL2	=	0x00eb
                           0000EC   547 _PCA0CPH2	=	0x00ec
                           0000ED   548 _PCA0CPL3	=	0x00ed
                           0000EE   549 _PCA0CPH3	=	0x00ee
                           0000EF   550 _RSTSRC	=	0x00ef
                           0000F0   551 _B	=	0x00f0
                           0000F1   552 _P0MDIN	=	0x00f1
                           0000F2   553 _P1MDIN	=	0x00f2
                           0000F3   554 _P2MDIN	=	0x00f3
                           0000F4   555 _SMB0ADR	=	0x00f4
                           0000F5   556 _SMB0ADM	=	0x00f5
                           0000F6   557 _EIP1	=	0x00f6
                           0000F7   558 _EIP2	=	0x00f7
                           0000F8   559 _SPI0CN	=	0x00f8
                           0000F9   560 _PCA0L	=	0x00f9
                           0000FA   561 _PCA0H	=	0x00fa
                           0000FB   562 _PCA0CPL0	=	0x00fb
                           0000FC   563 _PCA0CPH0	=	0x00fc
                           0000FD   564 _PCA0CPL4	=	0x00fd
                           0000FE   565 _PCA0CPH4	=	0x00fe
                           0000FF   566 _VDM0CN	=	0x00ff
                           000089   567 _LCD0D0	=	0x0089
                           00008A   568 _LCD0D1	=	0x008a
                           00008B   569 _LCD0D2	=	0x008b
                           00008C   570 _LCD0D3	=	0x008c
                           00008D   571 _LCD0D4	=	0x008d
                           00008E   572 _LCD0D5	=	0x008e
                           000091   573 _LCD0D6	=	0x0091
                           000092   574 _LCD0D7	=	0x0092
                           000093   575 _LCD0D8	=	0x0093
                           000094   576 _LCD0D9	=	0x0094
                           000095   577 _LCD0DA	=	0x0095
                           000096   578 _LCD0DB	=	0x0096
                           000097   579 _LCD0DC	=	0x0097
                           000099   580 _LCD0DD	=	0x0099
                           00009A   581 _LCD0DE	=	0x009a
                           00009B   582 _LCD0DF	=	0x009b
                           00009C   583 _LCD0CNTRST	=	0x009c
                           00009D   584 _LCD0CN	=	0x009d
                           00009E   585 _LCD0BLINK	=	0x009e
                           00009F   586 _LCD0TOGR	=	0x009f
                           0000A1   587 _SPI1CFG	=	0x00a1
                           0000A2   588 _SPI1CKR	=	0x00a2
                           0000A3   589 _SPI1DAT	=	0x00a3
                           0000A4   590 _LCD0PWR	=	0x00a4
                           0000A5   591 _LCD0CF	=	0x00a5
                           0000A6   592 _LCD0VBMCN	=	0x00a6
                           0000A9   593 _LCD0CLKDIVL	=	0x00a9
                           0000AA   594 _LCD0CLKDIVH	=	0x00aa
                           0000AB   595 _LCD0MSCN	=	0x00ab
                           0000AC   596 _LCD0MSCF	=	0x00ac
                           0000AD   597 _LCD0CHPCF	=	0x00ad
                           0000AE   598 _LCD0CHPMD	=	0x00ae
                           0000AF   599 _LCD0VBMCF	=	0x00af
                           0000B1   600 _DC0CN	=	0x00b1
                           0000B2   601 _DC0CF	=	0x00b2
                           0000B3   602 _DC0MD	=	0x00b3
                           0000B5   603 _LCD0CHPCN	=	0x00b5
                           0000B6   604 _LCD0BUFMD	=	0x00b6
                           0000B9   605 _CRC1IN	=	0x00b9
                           0000BA   606 _CRC1OUTL	=	0x00ba
                           0000BB   607 _CRC1OUTH	=	0x00bb
                           0000BC   608 _CRC1POLL	=	0x00bc
                           0000BD   609 _CRC1POLH	=	0x00bd
                           0000BE   610 _CRC1CN	=	0x00be
                           0000C1   611 _PC0STAT	=	0x00c1
                           0000C2   612 _ENC0L	=	0x00c2
                           0000C3   613 _ENC0M	=	0x00c3
                           0000C4   614 _ENC0H	=	0x00c4
                           0000C5   615 _ENC0CN	=	0x00c5
                           0000C6   616 _VREGINSDL	=	0x00c6
                           0000C7   617 _VREGINSDH	=	0x00c7
                           0000C9   618 _DMA0NCF	=	0x00c9
                           0000CA   619 _DMA0NBAL	=	0x00ca
                           0000CB   620 _DMA0NBAH	=	0x00cb
                           0000CC   621 _DMA0NAOL	=	0x00cc
                           0000CD   622 _DMA0NAOH	=	0x00cd
                           0000CE   623 _DMA0NSZL	=	0x00ce
                           0000CF   624 _DMA0NSZH	=	0x00cf
                           0000D1   625 _DMA0SEL	=	0x00d1
                           0000D2   626 _DMA0EN	=	0x00d2
                           0000D3   627 _DMA0INT	=	0x00d3
                           0000D4   628 _DMA0MINT	=	0x00d4
                           0000D5   629 _DMA0BUSY	=	0x00d5
                           0000D6   630 _DMA0NMD	=	0x00d6
                           0000D7   631 _PC0PCF	=	0x00d7
                           0000D9   632 _PC0MD	=	0x00d9
                           0000DA   633 _PC0CTR0L	=	0x00da
                           0000DB   634 _PC0CTR0M	=	0x00db
                           0000DC   635 _PC0CTR0H	=	0x00dc
                           0000DD   636 _PC0CTR1L	=	0x00dd
                           0000DE   637 _PC0CTR1M	=	0x00de
                           0000DF   638 _PC0CTR1H	=	0x00df
                           0000E1   639 _PC0CMP0L	=	0x00e1
                           0000E2   640 _PC0CMP0M	=	0x00e2
                           0000E3   641 _PC0CMP0H	=	0x00e3
                           0000E4   642 _PC0TH	=	0x00e4
                           0000E9   643 _AES0BCFG	=	0x00e9
                           0000EA   644 _AES0DCFG	=	0x00ea
                           0000EB   645 _AES0BIN	=	0x00eb
                           0000EC   646 _AES0XIN	=	0x00ec
                           0000ED   647 _AES0KIN	=	0x00ed
                           0000EE   648 _AES0DBA	=	0x00ee
                           0000EF   649 _AES0KBA	=	0x00ef
                           0000F1   650 _PC0CMP1L	=	0x00f1
                           0000F2   651 _PC0CMP1M	=	0x00f2
                           0000F3   652 _PC0CMP1H	=	0x00f3
                           0000F4   653 _PC0HIST	=	0x00f4
                           0000F5   654 _AES0YOUT	=	0x00f5
                           0000F8   655 _SPI1CN	=	0x00f8
                           0000F9   656 _PC0DCL	=	0x00f9
                           0000FA   657 _PC0DCH	=	0x00fa
                           0000FB   658 _PC0INT0	=	0x00fb
                           0000FC   659 _PC0INT1	=	0x00fc
                           0000FD   660 _DC0RDY	=	0x00fd
                           00008E   661 _SFRPGCN	=	0x008e
                           000091   662 _CRC0DAT	=	0x0091
                           000092   663 _CRC0CN	=	0x0092
                           000093   664 _CRC0IN	=	0x0093
                           000094   665 _CRC0FLIP	=	0x0094
                           000096   666 _CRC0AUTO	=	0x0096
                           000097   667 _CRC0CNT	=	0x0097
                           00009C   668 _LCD0BUFCN	=	0x009c
                           0000A1   669 _P3DRV	=	0x00a1
                           0000A2   670 _P4DRV	=	0x00a2
                           0000A3   671 _P5DRV	=	0x00a3
                           0000A4   672 _P0DRV	=	0x00a4
                           0000A5   673 _P1DRV	=	0x00a5
                           0000A6   674 _P2DRV	=	0x00a6
                           0000AA   675 _P6DRV	=	0x00aa
                           0000AB   676 _P7DRV	=	0x00ab
                           0000AC   677 _LCD0BUFCF	=	0x00ac
                           0000B1   678 _P3MDOUT	=	0x00b1
                           0000B2   679 _OSCIFL	=	0x00b2
                           0000B3   680 _OSCICL	=	0x00b3
                           0000B6   681 _FLSCL	=	0x00b6
                           0000B9   682 _IREF0CF	=	0x00b9
                           0000BB   683 _ADC0PWR	=	0x00bb
                           0000BC   684 _ADC0TK	=	0x00bc
                           0000BD   685 _TOFFL	=	0x00bd
                           0000BE   686 _TOFFH	=	0x00be
                           0000D9   687 _P4	=	0x00d9
                           0000DA   688 _P5	=	0x00da
                           0000DB   689 _P6	=	0x00db
                           0000DC   690 _P7	=	0x00dc
                           0000E9   691 _HWID	=	0x00e9
                           0000EA   692 _REVID	=	0x00ea
                           0000EB   693 _DEVICEID	=	0x00eb
                           0000F1   694 _P3MDIN	=	0x00f1
                           0000F2   695 _P4MDIN	=	0x00f2
                           0000F3   696 _P5MDIN	=	0x00f3
                           0000F4   697 _P6MDIN	=	0x00f4
                           0000F5   698 _PCLKACT	=	0x00f5
                           0000F9   699 _P4MDOUT	=	0x00f9
                           0000FA   700 _P5MDOUT	=	0x00fa
                           0000FB   701 _P6MDOUT	=	0x00fb
                           0000FC   702 _P7MDOUT	=	0x00fc
                           0000FD   703 _CLKMODE	=	0x00fd
                           0000FE   704 _PCLKEN	=	0x00fe
                           008382   705 _DP	=	0x8382
                           008685   706 _TOFF	=	0x8685
                           009392   707 _TMR3RL	=	0x9392
                           009594   708 _TMR3	=	0x9594
                           00BEBD   709 _ADC0	=	0xbebd
                           00C4C3   710 _ADC0GT	=	0xc4c3
                           00C6C5   711 _ADC0LT	=	0xc6c5
                           00CBCA   712 _TMR2RL	=	0xcbca
                           00CDCC   713 _TMR2	=	0xcdcc
                           00D3D2   714 _PCA0CP5	=	0xd3d2
                           00EAE9   715 _PCA0CP1	=	0xeae9
                           00ECEB   716 _PCA0CP2	=	0xeceb
                           00EEED   717 _PCA0CP3	=	0xeeed
                           00FAF9   718 _PCA0	=	0xfaf9
                           00FCFB   719 _PCA0CP0	=	0xfcfb
                           00FEFD   720 _PCA0CP4	=	0xfefd
                           0000AA   721 __XPAGE	=	0x00aa
                                    722 ;--------------------------------------------------------
                                    723 ; special function bits
                                    724 ;--------------------------------------------------------
                                    725 	.area RSEG    (ABS,DATA)
      000000                        726 	.org 0x0000
                           00008F   727 _TF1	=	0x008f
                           00008E   728 _TR1	=	0x008e
                           00008D   729 _TF0	=	0x008d
                           00008C   730 _TR0	=	0x008c
                           00008B   731 _IE1	=	0x008b
                           00008A   732 _IT1	=	0x008a
                           000089   733 _IE0	=	0x0089
                           000088   734 _IT0	=	0x0088
                           00009F   735 _S0MODE	=	0x009f
                           00009D   736 _MCE0	=	0x009d
                           00009C   737 _REN0	=	0x009c
                           00009B   738 _TB80	=	0x009b
                           00009A   739 _RB80	=	0x009a
                           000099   740 _TI0	=	0x0099
                           000098   741 _RI0	=	0x0098
                           0000AF   742 _EA	=	0x00af
                           0000AE   743 _ESPI0	=	0x00ae
                           0000AD   744 _ET2	=	0x00ad
                           0000AC   745 _ES0	=	0x00ac
                           0000AB   746 _ET1	=	0x00ab
                           0000AA   747 _EX1	=	0x00aa
                           0000A9   748 _ET0	=	0x00a9
                           0000A8   749 _EX0	=	0x00a8
                           0000BE   750 _PSPI0	=	0x00be
                           0000BD   751 _PT2	=	0x00bd
                           0000BC   752 _PS0	=	0x00bc
                           0000BB   753 _PT1	=	0x00bb
                           0000BA   754 _PX1	=	0x00ba
                           0000B9   755 _PT0	=	0x00b9
                           0000B8   756 _PX0	=	0x00b8
                           0000C7   757 _MASTER	=	0x00c7
                           0000C6   758 _TXMODE	=	0x00c6
                           0000C5   759 _STA	=	0x00c5
                           0000C4   760 _STO	=	0x00c4
                           0000C3   761 _ACKRQ	=	0x00c3
                           0000C2   762 _ARBLOST	=	0x00c2
                           0000C1   763 _ACK	=	0x00c1
                           0000C0   764 _SI	=	0x00c0
                           0000CF   765 _TF2H	=	0x00cf
                           0000CE   766 _TF2L	=	0x00ce
                           0000CD   767 _TF2LEN	=	0x00cd
                           0000CC   768 _TF2CEN	=	0x00cc
                           0000CB   769 _T2SPLIT	=	0x00cb
                           0000CA   770 _TR2	=	0x00ca
                           0000C9   771 _T2RCLK	=	0x00c9
                           0000C8   772 _T2XCLK	=	0x00c8
                           0000D7   773 _CY	=	0x00d7
                           0000D6   774 _AC	=	0x00d6
                           0000D5   775 _F0	=	0x00d5
                           0000D4   776 _RS1	=	0x00d4
                           0000D3   777 _RS0	=	0x00d3
                           0000D2   778 _OV	=	0x00d2
                           0000D1   779 _F1	=	0x00d1
                           0000D0   780 _P	=	0x00d0
                           0000DF   781 _CF	=	0x00df
                           0000DE   782 _CR	=	0x00de
                           0000DD   783 _CCF5	=	0x00dd
                           0000DC   784 _CCF4	=	0x00dc
                           0000DB   785 _CCF3	=	0x00db
                           0000DA   786 _CCF2	=	0x00da
                           0000D9   787 _CCF1	=	0x00d9
                           0000D8   788 _CCF0	=	0x00d8
                           0000EF   789 _AD0EN	=	0x00ef
                           0000EE   790 _BURSTEN	=	0x00ee
                           0000ED   791 _AD0INT	=	0x00ed
                           0000EC   792 _AD0BUSY	=	0x00ec
                           0000EB   793 _AD0WINT	=	0x00eb
                           0000EA   794 _AD0CM2	=	0x00ea
                           0000E9   795 _AD0CM1	=	0x00e9
                           0000E8   796 _AD0CM0	=	0x00e8
                           0000FF   797 _SPIF0	=	0x00ff
                           0000FE   798 _WCOL0	=	0x00fe
                           0000FD   799 _MODF0	=	0x00fd
                           0000FC   800 _RXOVRN0	=	0x00fc
                           0000FB   801 _NSS0MD1	=	0x00fb
                           0000FA   802 _NSS0MD0	=	0x00fa
                           0000F9   803 _TXBMT0	=	0x00f9
                           0000F8   804 _SPI0EN	=	0x00f8
                           0000FF   805 _SPIF1	=	0x00ff
                           0000FE   806 _WCOL1	=	0x00fe
                           0000FD   807 _MODF1	=	0x00fd
                           0000FC   808 _RXOVRN1	=	0x00fc
                           0000FB   809 _NSS1MD1	=	0x00fb
                           0000FA   810 _NSS1MD0	=	0x00fa
                           0000F9   811 _TXBMT1	=	0x00f9
                           0000F8   812 _SPI1EN	=	0x00f8
                           0000B6   813 _LED_RED	=	0x00b6
                           0000B7   814 _LED_GREEN	=	0x00b7
                           000082   815 _PIN_CONFIG	=	0x0082
                           000083   816 _PIN_ENABLE	=	0x0083
                           000081   817 _IRQ	=	0x0081
                           0000A3   818 _NSS1	=	0x00a3
                                    819 ;--------------------------------------------------------
                                    820 ; overlayable register banks
                                    821 ;--------------------------------------------------------
                                    822 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        823 	.ds 8
                                    824 ;--------------------------------------------------------
                                    825 ; internal ram data
                                    826 ;--------------------------------------------------------
                                    827 	.area DSEG    (DATA)
      000000                        828 _tdm_show_rssi_sloc0_1_0:
      000000                        829 	.ds 2
      000002                        830 _tdm_show_rssi_sloc1_1_0:
      000002                        831 	.ds 2
      000004                        832 _tdm_show_rssi_sloc2_1_0:
      000004                        833 	.ds 2
      000006                        834 _tdm_show_rssi_sloc3_1_0:
      000006                        835 	.ds 2
      000008                        836 _tdm_show_rssi_sloc4_1_0:
      000008                        837 	.ds 2
      00000A                        838 _sync_tx_windows_old_state_1_168:
      00000A                        839 	.ds 1
      00000B                        840 _tdm_state_update_sloc0_1_0:
      00000B                        841 	.ds 2
      00000D                        842 _tdm_state_update_sloc1_1_0:
      00000D                        843 	.ds 4
      000011                        844 _tdm_state_update_sloc2_1_0:
      000011                        845 	.ds 4
      000015                        846 _tdm_init_sloc0_1_0:
      000015                        847 	.ds 4
                                    848 ;--------------------------------------------------------
                                    849 ; overlayable items in internal ram 
                                    850 ;--------------------------------------------------------
                                    851 ;--------------------------------------------------------
                                    852 ; indirectly addressable internal ram data
                                    853 ;--------------------------------------------------------
                                    854 	.area ISEG    (DATA)
                           0000FF   855 __canary	=	0x00ff
                                    856 ;--------------------------------------------------------
                                    857 ; absolute internal ram data
                                    858 ;--------------------------------------------------------
                                    859 	.area IABS    (ABS,DATA)
                                    860 	.area IABS    (ABS,DATA)
                                    861 ;--------------------------------------------------------
                                    862 ; bit data
                                    863 ;--------------------------------------------------------
                                    864 	.area BSEG    (BIT)
      000000                        865 _bonus_transmit:
      000000                        866 	.ds 1
      000001                        867 _transmit_yield:
      000001                        868 	.ds 1
      000002                        869 _blink_state:
      000002                        870 	.ds 1
      000003                        871 _received_packet:
      000003                        872 	.ds 1
      000004                        873 _duty_cycle_wait:
      000004                        874 	.ds 1
      000005                        875 _send_statistics:
      000005                        876 	.ds 1
      000006                        877 _send_at_command:
      000006                        878 	.ds 1
      000007                        879 _sync_tx_windows_sloc0_1_0:
      000007                        880 	.ds 1
      000008                        881 _tdm_state_update_sloc3_1_0:
      000008                        882 	.ds 1
      000009                        883 _tdm_serial_loop_sloc0_1_0:
      000009                        884 	.ds 1
                                    885 ;--------------------------------------------------------
                                    886 ; paged external ram data
                                    887 ;--------------------------------------------------------
                                    888 	.area PSEG    (PAG,XDATA)
      000000                        889 _tdm_state:
      000000                        890 	.ds 1
      000001                        891 _tdm_state_remaining:
      000001                        892 	.ds 2
      000003                        893 _tx_window_width:
      000003                        894 	.ds 2
      000005                        895 _max_data_packet_length:
      000005                        896 	.ds 1
      000006                        897 _silence_period:
      000006                        898 	.ds 2
      000008                        899 _packet_latency:
      000008                        900 	.ds 2
      00000A                        901 _ticks_per_byte:
      00000A                        902 	.ds 2
      00000C                        903 _transmit_wait::
      00000C                        904 	.ds 2
      00000E                        905 _duty_cycle::
      00000E                        906 	.ds 1
      00000F                        907 _average_duty_cycle:
      00000F                        908 	.ds 4
      000013                        909 _duty_cycle_offset::
      000013                        910 	.ds 1
      000014                        911 _transmitted_ticks:
      000014                        912 	.ds 2
      000016                        913 _lbt_rssi::
      000016                        914 	.ds 1
      000017                        915 _lbt_listen_time:
      000017                        916 	.ds 2
      000019                        917 _lbt_min_time:
      000019                        918 	.ds 2
      00001B                        919 _lbt_rand:
      00001B                        920 	.ds 2
      00001D                        921 _trailer::
      00001D                        922 	.ds 2
      00001F                        923 _remote_at_cmd:
      00001F                        924 	.ds 70
      000065                        925 _sync_tx_windows_delta_2_175:
      000065                        926 	.ds 2
      000067                        927 _tdm_serial_loop_len_1_219:
      000067                        928 	.ds 1
      000068                        929 _tdm_serial_loop_tdelta_1_219:
      000068                        930 	.ds 2
      00006A                        931 _tdm_serial_loop_last_t_1_219:
      00006A                        932 	.ds 2
      00006C                        933 _tdm_serial_loop_last_link_update_1_219:
      00006C                        934 	.ds 2
                                    935 ;--------------------------------------------------------
                                    936 ; external ram data
                                    937 ;--------------------------------------------------------
                                    938 	.area XSEG    (XDATA)
      000000                        939 _pbuf::
      000000                        940 	.ds 252
      0000FC                        941 _test_display::
      0000FC                        942 	.ds 1
      0000FD                        943 _link_update_unlock_count_1_198:
      0000FD                        944 	.ds 1
      0000FE                        945 _link_update_temperature_count_1_198:
      0000FE                        946 	.ds 1
      0000FF                        947 _tdm_init_i_1_259:
      0000FF                        948 	.ds 2
      000101                        949 _tdm_init_window_width_1_259:
      000101                        950 	.ds 4
                                    951 ;--------------------------------------------------------
                                    952 ; absolute external ram data
                                    953 ;--------------------------------------------------------
                                    954 	.area XABS    (ABS,XDATA)
                                    955 ;--------------------------------------------------------
                                    956 ; external initialized ram data
                                    957 ;--------------------------------------------------------
                                    958 	.area XISEG   (XDATA)
                                    959 	.area HOME    (CODE)
                                    960 	.area GSINIT0 (CODE)
                                    961 	.area GSINIT1 (CODE)
                                    962 	.area GSINIT2 (CODE)
                                    963 	.area GSINIT3 (CODE)
                                    964 	.area GSINIT4 (CODE)
                                    965 	.area GSINIT5 (CODE)
                                    966 	.area GSINIT  (CODE)
                                    967 	.area GSFINAL (CODE)
                                    968 	.area CSEG    (CODE)
                                    969 ;--------------------------------------------------------
                                    970 ; global & static initialisations
                                    971 ;--------------------------------------------------------
                                    972 	.area HOME    (CODE)
                                    973 	.area GSINIT  (CODE)
                                    974 	.area GSFINAL (CODE)
                                    975 	.area GSINIT  (CODE)
                                    976 ;------------------------------------------------------------
                                    977 ;Allocation info for local variables in function 'link_update'
                                    978 ;------------------------------------------------------------
                                    979 ;old_remaining             Allocated to registers r6 r7 
                                    980 ;unlock_count              Allocated with name '_link_update_unlock_count_1_198'
                                    981 ;temperature_count         Allocated with name '_link_update_temperature_count_1_198'
                                    982 ;------------------------------------------------------------
                                    983 ;	radio/tdm.c:383: static uint8_t unlock_count = 10, temperature_count;
      000000 90r00rFD         [24]  984 	mov	dptr,#_link_update_unlock_count_1_198
      000003 74 0A            [12]  985 	mov	a,#0x0A
      000005 F0               [24]  986 	movx	@dptr,a
                                    987 ;--------------------------------------------------------
                                    988 ; Home
                                    989 ;--------------------------------------------------------
                                    990 	.area HOME    (CODE)
                                    991 	.area HOME    (CODE)
                                    992 ;--------------------------------------------------------
                                    993 ; code
                                    994 ;--------------------------------------------------------
                                    995 	.area CSEG    (CODE)
                                    996 ;------------------------------------------------------------
                                    997 ;Allocation info for local variables in function 'tdm_show_rssi'
                                    998 ;------------------------------------------------------------
                                    999 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                                   1000 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                                   1001 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                                   1002 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                                   1003 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                                   1004 ;------------------------------------------------------------
                                   1005 ;	radio/tdm.c:162: tdm_show_rssi(void)
                                   1006 ;	-----------------------------------------
                                   1007 ;	 function tdm_show_rssi
                                   1008 ;	-----------------------------------------
      000000                       1009 _tdm_show_rssi:
                           000007  1010 	ar7 = 0x07
                           000006  1011 	ar6 = 0x06
                           000005  1012 	ar5 = 0x05
                           000004  1013 	ar4 = 0x04
                           000003  1014 	ar3 = 0x03
                           000002  1015 	ar2 = 0x02
                           000001  1016 	ar1 = 0x01
                           000000  1017 	ar0 = 0x00
                                   1018 ;	radio/tdm.c:164: printf("L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u ",
      000000 78r02            [12] 1019 	mov	r0,#(_statistics + 0x0002)
      000002 E2               [24] 1020 	movx	a,@r0
      000003 FE               [12] 1021 	mov	r6,a
      000004 08               [12] 1022 	inc	r0
      000005 E2               [24] 1023 	movx	a,@r0
      000006 FF               [12] 1024 	mov	r7,a
      000007 78r01            [12] 1025 	mov	r0,#(_remote_statistics + 0x0001)
      000009 E2               [24] 1026 	movx	a,@r0
      00000A FD               [12] 1027 	mov	r5,a
      00000B 7C 00            [12] 1028 	mov	r4,#0x00
      00000D 78r01            [12] 1029 	mov	r0,#(_statistics + 0x0001)
      00000F E2               [24] 1030 	movx	a,@r0
      000010 FB               [12] 1031 	mov	r3,a
      000011 8B*00            [24] 1032 	mov	_tdm_show_rssi_sloc0_1_0,r3
                                   1033 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc0_1_0 + 1),#0x00
      000013 8C*01            [24] 1034 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),r4
      000015 78r00            [12] 1035 	mov	r0,#_remote_statistics
      000017 E2               [24] 1036 	movx	a,@r0
      000018 FB               [12] 1037 	mov	r3,a
      000019 8B*02            [24] 1038 	mov	_tdm_show_rssi_sloc1_1_0,r3
                                   1039 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
      00001B 8C*03            [24] 1040 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),r4
      00001D 78r00            [12] 1041 	mov	r0,#_statistics
      00001F E2               [24] 1042 	movx	a,@r0
      000020 FB               [12] 1043 	mov	r3,a
      000021 7A 00            [12] 1044 	mov	r2,#0x00
      000023 C0 06            [24] 1045 	push	ar6
      000025 C0 07            [24] 1046 	push	ar7
      000027 C0 05            [24] 1047 	push	ar5
      000029 C0 04            [24] 1048 	push	ar4
      00002B C0*00            [24] 1049 	push	_tdm_show_rssi_sloc0_1_0
      00002D C0*01            [24] 1050 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      00002F C0*02            [24] 1051 	push	_tdm_show_rssi_sloc1_1_0
      000031 C0*03            [24] 1052 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      000033 C0 03            [24] 1053 	push	ar3
      000035 C0 02            [24] 1054 	push	ar2
      000037 74r00            [12] 1055 	mov	a,#___str_0
      000039 C0 E0            [24] 1056 	push	acc
      00003B 74s00            [12] 1057 	mov	a,#(___str_0 >> 8)
      00003D C0 E0            [24] 1058 	push	acc
      00003F 74 80            [12] 1059 	mov	a,#0x80
      000041 C0 E0            [24] 1060 	push	acc
      000043 12r00r00         [24] 1061 	lcall	_printfl
      000046 E5 81            [12] 1062 	mov	a,sp
      000048 24 F3            [12] 1063 	add	a,#0xf3
      00004A F5 81            [12] 1064 	mov	sp,a
                                   1065 ;	radio/tdm.c:173: printf(" txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u\n",
      00004C 78r13            [12] 1066 	mov	r0,#_duty_cycle_offset
      00004E E2               [24] 1067 	movx	a,@r0
      00004F FE               [12] 1068 	mov	r6,a
      000050 7F 00            [12] 1069 	mov	r7,#0x00
      000052 C0 07            [24] 1070 	push	ar7
      000054 C0 06            [24] 1071 	push	ar6
      000056 12r00r00         [24] 1072 	lcall	_radio_temperature
      000059 AC 82            [24] 1073 	mov	r4,dpl
      00005B AD 83            [24] 1074 	mov	r5,dph
      00005D D0 06            [24] 1075 	pop	ar6
      00005F D0 07            [24] 1076 	pop	ar7
      000061 78r0A            [12] 1077 	mov	r0,#(_errors + 0x000a)
      000063 E2               [24] 1078 	movx	a,@r0
      000064 F5*02            [12] 1079 	mov	_tdm_show_rssi_sloc1_1_0,a
      000066 08               [12] 1080 	inc	r0
      000067 E2               [24] 1081 	movx	a,@r0
      000068 F5*03            [12] 1082 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
      00006A 78r08            [12] 1083 	mov	r0,#(_errors + 0x0008)
      00006C E2               [24] 1084 	movx	a,@r0
      00006D F5*00            [12] 1085 	mov	_tdm_show_rssi_sloc0_1_0,a
      00006F 08               [12] 1086 	inc	r0
      000070 E2               [24] 1087 	movx	a,@r0
      000071 F5*01            [12] 1088 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
      000073 78r06            [12] 1089 	mov	r0,#(_errors + 0x0006)
      000075 E2               [24] 1090 	movx	a,@r0
      000076 F5*04            [12] 1091 	mov	_tdm_show_rssi_sloc2_1_0,a
      000078 08               [12] 1092 	inc	r0
      000079 E2               [24] 1093 	movx	a,@r0
      00007A F5*05            [12] 1094 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
      00007C 78r04            [12] 1095 	mov	r0,#(_errors + 0x0004)
      00007E E2               [24] 1096 	movx	a,@r0
      00007F F5*06            [12] 1097 	mov	_tdm_show_rssi_sloc3_1_0,a
      000081 08               [12] 1098 	inc	r0
      000082 E2               [24] 1099 	movx	a,@r0
      000083 F5*07            [12] 1100 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
      000085 78r00            [12] 1101 	mov	r0,#_errors
      000087 E2               [24] 1102 	movx	a,@r0
      000088 F5*08            [12] 1103 	mov	_tdm_show_rssi_sloc4_1_0,a
      00008A 08               [12] 1104 	inc	r0
      00008B E2               [24] 1105 	movx	a,@r0
      00008C F5*09            [12] 1106 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
      00008E 78r02            [12] 1107 	mov	r0,#(_errors + 0x0002)
      000090 E2               [24] 1108 	movx	a,@r0
      000091 FA               [12] 1109 	mov	r2,a
      000092 08               [12] 1110 	inc	r0
      000093 E2               [24] 1111 	movx	a,@r0
      000094 FB               [12] 1112 	mov	r3,a
      000095 C0 06            [24] 1113 	push	ar6
      000097 C0 07            [24] 1114 	push	ar7
      000099 C0 04            [24] 1115 	push	ar4
      00009B C0 05            [24] 1116 	push	ar5
      00009D C0*02            [24] 1117 	push	_tdm_show_rssi_sloc1_1_0
      00009F C0*03            [24] 1118 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      0000A1 C0*00            [24] 1119 	push	_tdm_show_rssi_sloc0_1_0
      0000A3 C0*01            [24] 1120 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      0000A5 C0*04            [24] 1121 	push	_tdm_show_rssi_sloc2_1_0
      0000A7 C0*05            [24] 1122 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
      0000A9 C0*06            [24] 1123 	push	_tdm_show_rssi_sloc3_1_0
      0000AB C0*07            [24] 1124 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
      0000AD C0*08            [24] 1125 	push	_tdm_show_rssi_sloc4_1_0
      0000AF C0*09            [24] 1126 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
      0000B1 C0 02            [24] 1127 	push	ar2
      0000B3 C0 03            [24] 1128 	push	ar3
      0000B5 74r2C            [12] 1129 	mov	a,#___str_1
      0000B7 C0 E0            [24] 1130 	push	acc
      0000B9 74s00            [12] 1131 	mov	a,#(___str_1 >> 8)
      0000BB C0 E0            [24] 1132 	push	acc
      0000BD 74 80            [12] 1133 	mov	a,#0x80
      0000BF C0 E0            [24] 1134 	push	acc
      0000C1 12r00r00         [24] 1135 	lcall	_printfl
      0000C4 E5 81            [12] 1136 	mov	a,sp
      0000C6 24 ED            [12] 1137 	add	a,#0xed
      0000C8 F5 81            [12] 1138 	mov	sp,a
                                   1139 ;	radio/tdm.c:186: statistics.receive_count = 0;
      0000CA 78r02            [12] 1140 	mov	r0,#(_statistics + 0x0002)
      0000CC E4               [12] 1141 	clr	a
      0000CD F2               [24] 1142 	movx	@r0,a
      0000CE 08               [12] 1143 	inc	r0
      0000CF F2               [24] 1144 	movx	@r0,a
      0000D0 22               [24] 1145 	ret
                                   1146 ;------------------------------------------------------------
                                   1147 ;Allocation info for local variables in function 'display_test_output'
                                   1148 ;------------------------------------------------------------
                                   1149 ;	radio/tdm.c:192: display_test_output(void)
                                   1150 ;	-----------------------------------------
                                   1151 ;	 function display_test_output
                                   1152 ;	-----------------------------------------
      0000D1                       1153 _display_test_output:
                                   1154 ;	radio/tdm.c:194: if (test_display & AT_TEST_RSSI) {
      0000D1 90r00rFC         [24] 1155 	mov	dptr,#_test_display
      0000D4 E0               [24] 1156 	movx	a,@dptr
      0000D5 FF               [12] 1157 	mov	r7,a
      0000D6 30 E0 03         [24] 1158 	jnb	acc.0,00103$
                                   1159 ;	radio/tdm.c:195: tdm_show_rssi();
      0000D9 02r00r00         [24] 1160 	ljmp	_tdm_show_rssi
      0000DC                       1161 00103$:
      0000DC 22               [24] 1162 	ret
                                   1163 ;------------------------------------------------------------
                                   1164 ;Allocation info for local variables in function 'flight_time_estimate'
                                   1165 ;------------------------------------------------------------
                                   1166 ;	radio/tdm.c:205: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                                   1167 ;	-----------------------------------------
                                   1168 ;	 function flight_time_estimate
                                   1169 ;	-----------------------------------------
      0000DD                       1170 _flight_time_estimate:
      0000DD AF 82            [24] 1171 	mov	r7,dpl
                                   1172 ;	radio/tdm.c:207: return packet_latency + (packet_len * ticks_per_byte);
      0000DF 7E 00            [12] 1173 	mov	r6,#0x00
      0000E1 78r0A            [12] 1174 	mov	r0,#_ticks_per_byte
      0000E3 90r00r00         [24] 1175 	mov	dptr,#__mulint_PARM_2
      0000E6 E2               [24] 1176 	movx	a,@r0
      0000E7 F0               [24] 1177 	movx	@dptr,a
      0000E8 08               [12] 1178 	inc	r0
      0000E9 E2               [24] 1179 	movx	a,@r0
      0000EA A3               [24] 1180 	inc	dptr
      0000EB F0               [24] 1181 	movx	@dptr,a
      0000EC 8F 82            [24] 1182 	mov	dpl,r7
      0000EE 8E 83            [24] 1183 	mov	dph,r6
      0000F0 12r00r00         [24] 1184 	lcall	__mulint
      0000F3 AE 82            [24] 1185 	mov	r6,dpl
      0000F5 AF 83            [24] 1186 	mov	r7,dph
      0000F7 78r08            [12] 1187 	mov	r0,#_packet_latency
      0000F9 E2               [24] 1188 	movx	a,@r0
      0000FA 2E               [12] 1189 	add	a,r6
      0000FB FE               [12] 1190 	mov	r6,a
      0000FC 08               [12] 1191 	inc	r0
      0000FD E2               [24] 1192 	movx	a,@r0
      0000FE 3F               [12] 1193 	addc	a,r7
      0000FF 8E 82            [24] 1194 	mov	dpl,r6
      000101 F5 83            [12] 1195 	mov	dph,a
      000103 22               [24] 1196 	ret
                                   1197 ;------------------------------------------------------------
                                   1198 ;Allocation info for local variables in function 'sync_tx_windows'
                                   1199 ;------------------------------------------------------------
                                   1200 ;old_state                 Allocated with name '_sync_tx_windows_old_state_1_168'
                                   1201 ;------------------------------------------------------------
                                   1202 ;	radio/tdm.c:221: sync_tx_windows(__pdata uint8_t packet_length)
                                   1203 ;	-----------------------------------------
                                   1204 ;	 function sync_tx_windows
                                   1205 ;	-----------------------------------------
      000104                       1206 _sync_tx_windows:
      000104 AF 82            [24] 1207 	mov	r7,dpl
                                   1208 ;	radio/tdm.c:223: __data enum tdm_state old_state = tdm_state;
      000106 78r00            [12] 1209 	mov	r0,#_tdm_state
      000108 E2               [24] 1210 	movx	a,@r0
      000109 F5*0A            [12] 1211 	mov	_sync_tx_windows_old_state_1_168,a
                                   1212 ;	radio/tdm.c:224: __pdata uint16_t old_remaining = tdm_state_remaining;
      00010B 78r01            [12] 1213 	mov	r0,#_tdm_state_remaining
      00010D E2               [24] 1214 	movx	a,@r0
      00010E FC               [12] 1215 	mov	r4,a
      00010F 08               [12] 1216 	inc	r0
      000110 E2               [24] 1217 	movx	a,@r0
      000111 FD               [12] 1218 	mov	r5,a
                                   1219 ;	radio/tdm.c:226: if (trailer.bonus) {
      000112 78r1E            [12] 1220 	mov	r0,#(_trailer + 0x0001)
      000114 E2               [24] 1221 	movx	a,@r0
      000115 30 E6 46         [24] 1222 	jnb	acc.6,00109$
                                   1223 ;	radio/tdm.c:229: if (old_state == TDM_SILENCE1) {
      000118 74 01            [12] 1224 	mov	a,#0x01
      00011A B5*0A 10         [24] 1225 	cjne	a,_sync_tx_windows_old_state_1_168,00106$
                                   1226 ;	radio/tdm.c:235: tdm_state_remaining = silence_period;
      00011D 78r06            [12] 1227 	mov	r0,#_silence_period
      00011F E2               [24] 1228 	movx	a,@r0
      000120 FA               [12] 1229 	mov	r2,a
      000121 08               [12] 1230 	inc	r0
      000122 E2               [24] 1231 	movx	a,@r0
      000123 FB               [12] 1232 	mov	r3,a
      000124 78r01            [12] 1233 	mov	r0,#_tdm_state_remaining
      000126 EA               [12] 1234 	mov	a,r2
      000127 F2               [24] 1235 	movx	@r0,a
      000128 08               [12] 1236 	inc	r0
      000129 EB               [12] 1237 	mov	a,r3
      00012A F2               [24] 1238 	movx	@r0,a
      00012B 80 46            [24] 1239 	sjmp	00110$
      00012D                       1240 00106$:
                                   1241 ;	radio/tdm.c:236: } else if (old_state == TDM_RECEIVE || old_state == TDM_SILENCE2) {
      00012D 74 02            [12] 1242 	mov	a,#0x02
      00012F B5*0A 02         [24] 1243 	cjne	a,_sync_tx_windows_old_state_1_168,00151$
      000132 80 05            [24] 1244 	sjmp	00101$
      000134                       1245 00151$:
      000134 74 03            [12] 1246 	mov	a,#0x03
      000136 B5*0A 0F         [24] 1247 	cjne	a,_sync_tx_windows_old_state_1_168,00102$
      000139                       1248 00101$:
                                   1249 ;	radio/tdm.c:241: tdm_state = TDM_SILENCE2;
      000139 78r00            [12] 1250 	mov	r0,#_tdm_state
      00013B 74 03            [12] 1251 	mov	a,#0x03
      00013D F2               [24] 1252 	movx	@r0,a
                                   1253 ;	radio/tdm.c:242: tdm_state_remaining = 1;
      00013E 78r01            [12] 1254 	mov	r0,#_tdm_state_remaining
      000140 74 01            [12] 1255 	mov	a,#0x01
      000142 F2               [24] 1256 	movx	@r0,a
      000143 08               [12] 1257 	inc	r0
      000144 E4               [12] 1258 	clr	a
      000145 F2               [24] 1259 	movx	@r0,a
      000146 80 2B            [24] 1260 	sjmp	00110$
      000148                       1261 00102$:
                                   1262 ;	radio/tdm.c:244: tdm_state = TDM_TRANSMIT;
      000148 78r00            [12] 1263 	mov	r0,#_tdm_state
      00014A E4               [12] 1264 	clr	a
      00014B F2               [24] 1265 	movx	@r0,a
                                   1266 ;	radio/tdm.c:245: tdm_state_remaining = trailer.window;
      00014C 78r1D            [12] 1267 	mov	r0,#_trailer
      00014E E2               [24] 1268 	movx	a,@r0
      00014F FA               [12] 1269 	mov	r2,a
      000150 08               [12] 1270 	inc	r0
      000151 E2               [24] 1271 	movx	a,@r0
      000152 54 1F            [12] 1272 	anl	a,#0x1F
      000154 FB               [12] 1273 	mov	r3,a
      000155 78r01            [12] 1274 	mov	r0,#_tdm_state_remaining
      000157 EA               [12] 1275 	mov	a,r2
      000158 F2               [24] 1276 	movx	@r0,a
      000159 08               [12] 1277 	inc	r0
      00015A EB               [12] 1278 	mov	a,r3
      00015B F2               [24] 1279 	movx	@r0,a
      00015C 80 15            [24] 1280 	sjmp	00110$
      00015E                       1281 00109$:
                                   1282 ;	radio/tdm.c:250: tdm_state = TDM_RECEIVE;
      00015E 78r00            [12] 1283 	mov	r0,#_tdm_state
      000160 74 02            [12] 1284 	mov	a,#0x02
      000162 F2               [24] 1285 	movx	@r0,a
                                   1286 ;	radio/tdm.c:251: tdm_state_remaining = trailer.window;
      000163 78r1D            [12] 1287 	mov	r0,#_trailer
      000165 E2               [24] 1288 	movx	a,@r0
      000166 FA               [12] 1289 	mov	r2,a
      000167 08               [12] 1290 	inc	r0
      000168 E2               [24] 1291 	movx	a,@r0
      000169 54 1F            [12] 1292 	anl	a,#0x1F
      00016B FB               [12] 1293 	mov	r3,a
      00016C 78r01            [12] 1294 	mov	r0,#_tdm_state_remaining
      00016E EA               [12] 1295 	mov	a,r2
      00016F F2               [24] 1296 	movx	@r0,a
      000170 08               [12] 1297 	inc	r0
      000171 EB               [12] 1298 	mov	a,r3
      000172 F2               [24] 1299 	movx	@r0,a
      000173                       1300 00110$:
                                   1301 ;	radio/tdm.c:256: bonus_transmit = (tdm_state == TDM_RECEIVE && packet_length==0);
      000173 78r00            [12] 1302 	mov	r0,#_tdm_state
      000175 E2               [24] 1303 	movx	a,@r0
      000176 B4 02 03         [24] 1304 	cjne	a,#0x02,00121$
      000179 EF               [12] 1305 	mov	a,r7
      00017A 60 04            [24] 1306 	jz	00122$
      00017C                       1307 00121$:
      00017C C2*07            [12] 1308 	clr	_sync_tx_windows_sloc0_1_0
      00017E 80 02            [24] 1309 	sjmp	00123$
      000180                       1310 00122$:
      000180 D2*07            [12] 1311 	setb	_sync_tx_windows_sloc0_1_0
      000182                       1312 00123$:
      000182 A2*07            [12] 1313 	mov	c,_sync_tx_windows_sloc0_1_0
      000184 92*00            [24] 1314 	mov	_bonus_transmit,c
                                   1315 ;	radio/tdm.c:259: if (tdm_state != TDM_TRANSMIT) {
      000186 78r00            [12] 1316 	mov	r0,#_tdm_state
      000188 E2               [24] 1317 	movx	a,@r0
      000189 60 02            [24] 1318 	jz	00112$
                                   1319 ;	radio/tdm.c:260: transmit_yield = 0;
      00018B C2*01            [12] 1320 	clr	_transmit_yield
      00018D                       1321 00112$:
                                   1322 ;	radio/tdm.c:263: if (at_testmode & AT_TEST_TDM) {
      00018D 78r00            [12] 1323 	mov	r0,#_at_testmode
      00018F E2               [24] 1324 	movx	a,@r0
      000190 54 02            [12] 1325 	anl	a,#0x02
      000192 70 01            [24] 1326 	jnz	00158$
      000194 22               [24] 1327 	ret
      000195                       1328 00158$:
                                   1329 ;	radio/tdm.c:265: delta = old_remaining - tdm_state_remaining;
      000195 78r01            [12] 1330 	mov	r0,#_tdm_state_remaining
      000197 79r65            [12] 1331 	mov	r1,#_sync_tx_windows_delta_2_175
      000199 D3               [12] 1332 	setb	c
      00019A E2               [24] 1333 	movx	a,@r0
      00019B 9C               [12] 1334 	subb	a,r4
      00019C F4               [12] 1335 	cpl	a
      00019D B3               [12] 1336 	cpl	c
      00019E F3               [24] 1337 	movx	@r1,a
      00019F B3               [12] 1338 	cpl	c
      0001A0 08               [12] 1339 	inc	r0
      0001A1 E2               [24] 1340 	movx	a,@r0
      0001A2 9D               [12] 1341 	subb	a,r5
      0001A3 F4               [12] 1342 	cpl	a
      0001A4 09               [12] 1343 	inc	r1
      0001A5 F3               [24] 1344 	movx	@r1,a
                                   1345 ;	radio/tdm.c:266: if (old_state != tdm_state ||
      0001A6 78r00            [12] 1346 	mov	r0,#_tdm_state
      0001A8 E2               [24] 1347 	movx	a,@r0
      0001A9 B5*0A 6E         [24] 1348 	cjne	a,_sync_tx_windows_old_state_1_168,00113$
                                   1349 ;	radio/tdm.c:267: delta > (int16_t)packet_latency/2 ||
      0001AC C0 07            [24] 1350 	push	ar7
      0001AE 78r08            [12] 1351 	mov	r0,#_packet_latency
      0001B0 E2               [24] 1352 	movx	a,@r0
      0001B1 FA               [12] 1353 	mov	r2,a
      0001B2 08               [12] 1354 	inc	r0
      0001B3 E2               [24] 1355 	movx	a,@r0
      0001B4 FB               [12] 1356 	mov	r3,a
      0001B5 90r00r00         [24] 1357 	mov	dptr,#__divsint_PARM_2
      0001B8 74 02            [12] 1358 	mov	a,#0x02
      0001BA F0               [24] 1359 	movx	@dptr,a
      0001BB E4               [12] 1360 	clr	a
      0001BC A3               [24] 1361 	inc	dptr
      0001BD F0               [24] 1362 	movx	@dptr,a
      0001BE 8A 82            [24] 1363 	mov	dpl,r2
      0001C0 8B 83            [24] 1364 	mov	dph,r3
      0001C2 C0 03            [24] 1365 	push	ar3
      0001C4 C0 02            [24] 1366 	push	ar2
      0001C6 12r00r00         [24] 1367 	lcall	__divsint
      0001C9 AE 82            [24] 1368 	mov	r6,dpl
      0001CB AF 83            [24] 1369 	mov	r7,dph
      0001CD D0 02            [24] 1370 	pop	ar2
      0001CF D0 03            [24] 1371 	pop	ar3
      0001D1 78r65            [12] 1372 	mov	r0,#_sync_tx_windows_delta_2_175
      0001D3 C3               [12] 1373 	clr	c
      0001D4 E2               [24] 1374 	movx	a,@r0
      0001D5 F5 F0            [12] 1375 	mov	b,a
      0001D7 EE               [12] 1376 	mov	a,r6
      0001D8 95 F0            [12] 1377 	subb	a,b
      0001DA 08               [12] 1378 	inc	r0
      0001DB E2               [24] 1379 	movx	a,@r0
      0001DC F5 F0            [12] 1380 	mov	b,a
      0001DE EF               [12] 1381 	mov	a,r7
      0001DF 64 80            [12] 1382 	xrl	a,#0x80
      0001E1 63 F0 80         [24] 1383 	xrl	b,#0x80
      0001E4 95 F0            [12] 1384 	subb	a,b
      0001E6 D0 07            [24] 1385 	pop	ar7
                                   1386 ;	radio/tdm.c:268: delta < -(int16_t)packet_latency/2) {
      0001E8 40 30            [24] 1387 	jc	00113$
      0001EA E4               [12] 1388 	clr	a
      0001EB 9A               [12] 1389 	subb	a,r2
      0001EC FA               [12] 1390 	mov	r2,a
      0001ED E4               [12] 1391 	clr	a
      0001EE 9B               [12] 1392 	subb	a,r3
      0001EF FB               [12] 1393 	mov	r3,a
      0001F0 90r00r00         [24] 1394 	mov	dptr,#__divsint_PARM_2
      0001F3 74 02            [12] 1395 	mov	a,#0x02
      0001F5 F0               [24] 1396 	movx	@dptr,a
      0001F6 E4               [12] 1397 	clr	a
      0001F7 A3               [24] 1398 	inc	dptr
      0001F8 F0               [24] 1399 	movx	@dptr,a
      0001F9 8A 82            [24] 1400 	mov	dpl,r2
      0001FB 8B 83            [24] 1401 	mov	dph,r3
      0001FD C0 07            [24] 1402 	push	ar7
      0001FF 12r00r00         [24] 1403 	lcall	__divsint
      000202 AB 82            [24] 1404 	mov	r3,dpl
      000204 AE 83            [24] 1405 	mov	r6,dph
      000206 D0 07            [24] 1406 	pop	ar7
      000208 78r65            [12] 1407 	mov	r0,#_sync_tx_windows_delta_2_175
      00020A C3               [12] 1408 	clr	c
      00020B E2               [24] 1409 	movx	a,@r0
      00020C 9B               [12] 1410 	subb	a,r3
      00020D 08               [12] 1411 	inc	r0
      00020E E2               [24] 1412 	movx	a,@r0
      00020F 64 80            [12] 1413 	xrl	a,#0x80
      000211 8E F0            [24] 1414 	mov	b,r6
      000213 63 F0 80         [24] 1415 	xrl	b,#0x80
      000216 95 F0            [12] 1416 	subb	a,b
      000218 50 4B            [24] 1417 	jnc	00119$
      00021A                       1418 00113$:
                                   1419 ;	radio/tdm.c:269: printf("TDM: %u/%u len=%u ",
      00021A 7E 00            [12] 1420 	mov	r6,#0x00
      00021C 78r00            [12] 1421 	mov	r0,#_tdm_state
      00021E E2               [24] 1422 	movx	a,@r0
      00021F FA               [12] 1423 	mov	r2,a
      000220 7B 00            [12] 1424 	mov	r3,#0x00
      000222 AC*0A            [24] 1425 	mov	r4,_sync_tx_windows_old_state_1_168
      000224 7D 00            [12] 1426 	mov	r5,#0x00
      000226 C0 07            [24] 1427 	push	ar7
      000228 C0 06            [24] 1428 	push	ar6
      00022A C0 02            [24] 1429 	push	ar2
      00022C C0 03            [24] 1430 	push	ar3
      00022E C0 04            [24] 1431 	push	ar4
      000230 C0 05            [24] 1432 	push	ar5
      000232 74r63            [12] 1433 	mov	a,#___str_2
      000234 C0 E0            [24] 1434 	push	acc
      000236 74s00            [12] 1435 	mov	a,#(___str_2 >> 8)
      000238 C0 E0            [24] 1436 	push	acc
      00023A 74 80            [12] 1437 	mov	a,#0x80
      00023C C0 E0            [24] 1438 	push	acc
      00023E 12r00r00         [24] 1439 	lcall	_printfl
      000241 E5 81            [12] 1440 	mov	a,sp
      000243 24 F7            [12] 1441 	add	a,#0xf7
      000245 F5 81            [12] 1442 	mov	sp,a
                                   1443 ;	radio/tdm.c:273: printf(" delta: %d\n",(int)delta);
      000247 78r65            [12] 1444 	mov	r0,#_sync_tx_windows_delta_2_175
      000249 E2               [24] 1445 	movx	a,@r0
      00024A C0 E0            [24] 1446 	push	acc
      00024C 08               [12] 1447 	inc	r0
      00024D E2               [24] 1448 	movx	a,@r0
      00024E C0 E0            [24] 1449 	push	acc
      000250 74r76            [12] 1450 	mov	a,#___str_3
      000252 C0 E0            [24] 1451 	push	acc
      000254 74s00            [12] 1452 	mov	a,#(___str_3 >> 8)
      000256 C0 E0            [24] 1453 	push	acc
      000258 74 80            [12] 1454 	mov	a,#0x80
      00025A C0 E0            [24] 1455 	push	acc
      00025C 12r00r00         [24] 1456 	lcall	_printfl
      00025F E5 81            [12] 1457 	mov	a,sp
      000261 24 FB            [12] 1458 	add	a,#0xfb
      000263 F5 81            [12] 1459 	mov	sp,a
      000265                       1460 00119$:
      000265 22               [24] 1461 	ret
                                   1462 ;------------------------------------------------------------
                                   1463 ;Allocation info for local variables in function 'tdm_state_update'
                                   1464 ;------------------------------------------------------------
                                   1465 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                                   1466 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                                   1467 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                                   1468 ;------------------------------------------------------------
                                   1469 ;	radio/tdm.c:281: tdm_state_update(__pdata uint16_t tdelta)
                                   1470 ;	-----------------------------------------
                                   1471 ;	 function tdm_state_update
                                   1472 ;	-----------------------------------------
      000266                       1473 _tdm_state_update:
      000266 AE 82            [24] 1474 	mov	r6,dpl
      000268 AF 83            [24] 1475 	mov	r7,dph
                                   1476 ;	radio/tdm.c:285: if (tdelta > transmit_wait) {
      00026A 78r0C            [12] 1477 	mov	r0,#_transmit_wait
      00026C C3               [12] 1478 	clr	c
      00026D E2               [24] 1479 	movx	a,@r0
      00026E 9E               [12] 1480 	subb	a,r6
      00026F 08               [12] 1481 	inc	r0
      000270 E2               [24] 1482 	movx	a,@r0
      000271 9F               [12] 1483 	subb	a,r7
      000272 50 08            [24] 1484 	jnc	00102$
                                   1485 ;	radio/tdm.c:286: transmit_wait = 0;
      000274 78r0C            [12] 1486 	mov	r0,#_transmit_wait
      000276 E4               [12] 1487 	clr	a
      000277 F2               [24] 1488 	movx	@r0,a
      000278 08               [12] 1489 	inc	r0
      000279 F2               [24] 1490 	movx	@r0,a
      00027A 80 0A            [24] 1491 	sjmp	00116$
      00027C                       1492 00102$:
                                   1493 ;	radio/tdm.c:288: transmit_wait -= tdelta;
      00027C 78r0C            [12] 1494 	mov	r0,#_transmit_wait
      00027E E2               [24] 1495 	movx	a,@r0
      00027F C3               [12] 1496 	clr	c
      000280 9E               [12] 1497 	subb	a,r6
      000281 F2               [24] 1498 	movx	@r0,a
      000282 08               [12] 1499 	inc	r0
      000283 E2               [24] 1500 	movx	a,@r0
      000284 9F               [12] 1501 	subb	a,r7
      000285 F2               [24] 1502 	movx	@r0,a
                                   1503 ;	radio/tdm.c:292: while (tdelta >= tdm_state_remaining) {
      000286                       1504 00116$:
      000286 78r01            [12] 1505 	mov	r0,#_tdm_state_remaining
      000288 C3               [12] 1506 	clr	c
      000289 E2               [24] 1507 	movx	a,@r0
      00028A F5 F0            [12] 1508 	mov	b,a
      00028C EE               [12] 1509 	mov	a,r6
      00028D 95 F0            [12] 1510 	subb	a,b
      00028F 08               [12] 1511 	inc	r0
      000290 E2               [24] 1512 	movx	a,@r0
      000291 F5 F0            [12] 1513 	mov	b,a
      000293 EF               [12] 1514 	mov	a,r7
      000294 95 F0            [12] 1515 	subb	a,b
      000296 50 03            [24] 1516 	jnc	00146$
      000298 02r04rD1         [24] 1517 	ljmp	00118$
      00029B                       1518 00146$:
                                   1519 ;	radio/tdm.c:294: tdm_state = (tdm_state+1) % 4;
      00029B 78r00            [12] 1520 	mov	r0,#_tdm_state
      00029D E2               [24] 1521 	movx	a,@r0
      00029E FC               [12] 1522 	mov	r4,a
      00029F 7D 00            [12] 1523 	mov	r5,#0x00
      0002A1 0C               [12] 1524 	inc	r4
      0002A2 BC 00 01         [24] 1525 	cjne	r4,#0x00,00147$
      0002A5 0D               [12] 1526 	inc	r5
      0002A6                       1527 00147$:
      0002A6 90r00r00         [24] 1528 	mov	dptr,#__modsint_PARM_2
      0002A9 74 04            [12] 1529 	mov	a,#0x04
      0002AB F0               [24] 1530 	movx	@dptr,a
      0002AC E4               [12] 1531 	clr	a
      0002AD A3               [24] 1532 	inc	dptr
      0002AE F0               [24] 1533 	movx	@dptr,a
      0002AF 8C 82            [24] 1534 	mov	dpl,r4
      0002B1 8D 83            [24] 1535 	mov	dph,r5
      0002B3 C0 07            [24] 1536 	push	ar7
      0002B5 C0 06            [24] 1537 	push	ar6
      0002B7 12r00r00         [24] 1538 	lcall	__modsint
      0002BA AC 82            [24] 1539 	mov	r4,dpl
      0002BC AD 83            [24] 1540 	mov	r5,dph
      0002BE D0 06            [24] 1541 	pop	ar6
      0002C0 D0 07            [24] 1542 	pop	ar7
      0002C2 78r00            [12] 1543 	mov	r0,#_tdm_state
      0002C4 EC               [12] 1544 	mov	a,r4
      0002C5 F2               [24] 1545 	movx	@r0,a
                                   1546 ;	radio/tdm.c:297: tdelta -= tdm_state_remaining;
      0002C6 78r01            [12] 1547 	mov	r0,#_tdm_state_remaining
      0002C8 D3               [12] 1548 	setb	c
      0002C9 E2               [24] 1549 	movx	a,@r0
      0002CA 9E               [12] 1550 	subb	a,r6
      0002CB F4               [12] 1551 	cpl	a
      0002CC B3               [12] 1552 	cpl	c
      0002CD FE               [12] 1553 	mov	r6,a
      0002CE B3               [12] 1554 	cpl	c
      0002CF 08               [12] 1555 	inc	r0
      0002D0 E2               [24] 1556 	movx	a,@r0
      0002D1 9F               [12] 1557 	subb	a,r7
      0002D2 F4               [12] 1558 	cpl	a
      0002D3 FF               [12] 1559 	mov	r7,a
                                   1560 ;	radio/tdm.c:299: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_RECEIVE) {
      0002D4 78r00            [12] 1561 	mov	r0,#_tdm_state
      0002D6 E2               [24] 1562 	movx	a,@r0
      0002D7 60 06            [24] 1563 	jz	00104$
      0002D9 78r00            [12] 1564 	mov	r0,#_tdm_state
      0002DB E2               [24] 1565 	movx	a,@r0
      0002DC B4 02 10         [24] 1566 	cjne	a,#0x02,00105$
      0002DF                       1567 00104$:
                                   1568 ;	radio/tdm.c:300: tdm_state_remaining = tx_window_width;
      0002DF 78r03            [12] 1569 	mov	r0,#_tx_window_width
      0002E1 E2               [24] 1570 	movx	a,@r0
      0002E2 FC               [12] 1571 	mov	r4,a
      0002E3 08               [12] 1572 	inc	r0
      0002E4 E2               [24] 1573 	movx	a,@r0
      0002E5 FD               [12] 1574 	mov	r5,a
      0002E6 78r01            [12] 1575 	mov	r0,#_tdm_state_remaining
      0002E8 EC               [12] 1576 	mov	a,r4
      0002E9 F2               [24] 1577 	movx	@r0,a
      0002EA 08               [12] 1578 	inc	r0
      0002EB ED               [12] 1579 	mov	a,r5
      0002EC F2               [24] 1580 	movx	@r0,a
      0002ED 80 0E            [24] 1581 	sjmp	00106$
      0002EF                       1582 00105$:
                                   1583 ;	radio/tdm.c:302: tdm_state_remaining = silence_period;
      0002EF 78r06            [12] 1584 	mov	r0,#_silence_period
      0002F1 E2               [24] 1585 	movx	a,@r0
      0002F2 FC               [12] 1586 	mov	r4,a
      0002F3 08               [12] 1587 	inc	r0
      0002F4 E2               [24] 1588 	movx	a,@r0
      0002F5 FD               [12] 1589 	mov	r5,a
      0002F6 78r01            [12] 1590 	mov	r0,#_tdm_state_remaining
      0002F8 EC               [12] 1591 	mov	a,r4
      0002F9 F2               [24] 1592 	movx	@r0,a
      0002FA 08               [12] 1593 	inc	r0
      0002FB ED               [12] 1594 	mov	a,r5
      0002FC F2               [24] 1595 	movx	@r0,a
      0002FD                       1596 00106$:
                                   1597 ;	radio/tdm.c:308: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_SILENCE1) {
      0002FD 78r00            [12] 1598 	mov	r0,#_tdm_state
      0002FF E2               [24] 1599 	movx	a,@r0
      000300 60 06            [24] 1600 	jz	00110$
      000302 78r00            [12] 1601 	mov	r0,#_tdm_state
      000304 E2               [24] 1602 	movx	a,@r0
      000305 B4 01 25         [24] 1603 	cjne	a,#0x01,00111$
      000308                       1604 00110$:
                                   1605 ;	radio/tdm.c:309: fhop_window_change();
      000308 C0 07            [24] 1606 	push	ar7
      00030A C0 06            [24] 1607 	push	ar6
      00030C 12r00r00         [24] 1608 	lcall	_fhop_window_change
                                   1609 ;	radio/tdm.c:310: radio_receiver_on();
      00030F 12r00r00         [24] 1610 	lcall	_radio_receiver_on
      000312 D0 06            [24] 1611 	pop	ar6
      000314 D0 07            [24] 1612 	pop	ar7
                                   1613 ;	radio/tdm.c:312: if (num_fh_channels > 1) {
      000316 78r00            [12] 1614 	mov	r0,#_num_fh_channels
      000318 C3               [12] 1615 	clr	c
      000319 E2               [24] 1616 	movx	a,@r0
      00031A F5 F0            [12] 1617 	mov	b,a
      00031C 74 01            [12] 1618 	mov	a,#0x01
      00031E 95 F0            [12] 1619 	subb	a,b
      000320 50 0B            [24] 1620 	jnc	00111$
                                   1621 ;	radio/tdm.c:314: lbt_listen_time = 0;
      000322 78r17            [12] 1622 	mov	r0,#_lbt_listen_time
      000324 E4               [12] 1623 	clr	a
      000325 F2               [24] 1624 	movx	@r0,a
      000326 08               [12] 1625 	inc	r0
      000327 F2               [24] 1626 	movx	@r0,a
                                   1627 ;	radio/tdm.c:315: lbt_rand = 0;
      000328 78r1B            [12] 1628 	mov	r0,#_lbt_rand
      00032A F2               [24] 1629 	movx	@r0,a
      00032B 08               [12] 1630 	inc	r0
      00032C F2               [24] 1631 	movx	@r0,a
      00032D                       1632 00111$:
                                   1633 ;	radio/tdm.c:319: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
      00032D 78r00            [12] 1634 	mov	r0,#_tdm_state
      00032F E2               [24] 1635 	movx	a,@r0
      000330 60 03            [24] 1636 	jz	00155$
      000332 02r04rC4         [24] 1637 	ljmp	00114$
      000335                       1638 00155$:
      000335 C0 06            [24] 1639 	push	ar6
      000337 C0 07            [24] 1640 	push	ar7
      000339 78r0E            [12] 1641 	mov	r0,#_duty_cycle
      00033B E2               [24] 1642 	movx	a,@r0
      00033C FC               [12] 1643 	mov	r4,a
      00033D 7D 00            [12] 1644 	mov	r5,#0x00
      00033F 78r13            [12] 1645 	mov	r0,#_duty_cycle_offset
      000341 E2               [24] 1646 	movx	a,@r0
      000342 F5*0B            [12] 1647 	mov	_tdm_state_update_sloc0_1_0,a
                                   1648 ;	1-genFromRTrack replaced	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
      000344 8D*0C            [24] 1649 	mov	(_tdm_state_update_sloc0_1_0 + 1),r5
      000346 EC               [12] 1650 	mov	a,r4
      000347 C3               [12] 1651 	clr	c
      000348 95*0B            [12] 1652 	subb	a,_tdm_state_update_sloc0_1_0
      00034A FE               [12] 1653 	mov	r6,a
      00034B ED               [12] 1654 	mov	a,r5
      00034C 95*0C            [12] 1655 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      00034E FF               [12] 1656 	mov	r7,a
      00034F BE 64 0A         [24] 1657 	cjne	r6,#0x64,00156$
      000352 BF 00 07         [24] 1658 	cjne	r7,#0x00,00156$
      000355 D0 07            [24] 1659 	pop	ar7
      000357 D0 06            [24] 1660 	pop	ar6
      000359 02r04rC4         [24] 1661 	ljmp	00114$
      00035C                       1662 00156$:
      00035C D0 07            [24] 1663 	pop	ar7
      00035E D0 06            [24] 1664 	pop	ar6
                                   1665 ;	radio/tdm.c:321: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
      000360 C0 06            [24] 1666 	push	ar6
      000362 C0 07            [24] 1667 	push	ar7
      000364 C0 07            [24] 1668 	push	ar7
      000366 C0 06            [24] 1669 	push	ar6
      000368 C0 05            [24] 1670 	push	ar5
      00036A C0 04            [24] 1671 	push	ar4
      00036C 78r0F            [12] 1672 	mov	r0,#_average_duty_cycle
      00036E E2               [24] 1673 	movx	a,@r0
      00036F C0 E0            [24] 1674 	push	acc
      000371 08               [12] 1675 	inc	r0
      000372 E2               [24] 1676 	movx	a,@r0
      000373 C0 E0            [24] 1677 	push	acc
      000375 08               [12] 1678 	inc	r0
      000376 E2               [24] 1679 	movx	a,@r0
      000377 C0 E0            [24] 1680 	push	acc
      000379 08               [12] 1681 	inc	r0
      00037A E2               [24] 1682 	movx	a,@r0
      00037B C0 E0            [24] 1683 	push	acc
      00037D 90 33 33         [24] 1684 	mov	dptr,#0x3333
      000380 75 F0 73         [24] 1685 	mov	b,#0x73
      000383 74 3F            [12] 1686 	mov	a,#0x3F
      000385 12r00r00         [24] 1687 	lcall	___fsmul
      000388 85 82*0D         [24] 1688 	mov	_tdm_state_update_sloc1_1_0,dpl
      00038B 85 83*0E         [24] 1689 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
      00038E 85 F0*0F         [24] 1690 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
      000391 F5*10            [12] 1691 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
      000393 E5 81            [12] 1692 	mov	a,sp
      000395 24 FC            [12] 1693 	add	a,#0xfc
      000397 F5 81            [12] 1694 	mov	sp,a
      000399 D0 04            [24] 1695 	pop	ar4
      00039B D0 05            [24] 1696 	pop	ar5
      00039D D0 06            [24] 1697 	pop	ar6
      00039F D0 07            [24] 1698 	pop	ar7
      0003A1 78r14            [12] 1699 	mov	r0,#_transmitted_ticks
      0003A3 E2               [24] 1700 	movx	a,@r0
      0003A4 F5 82            [12] 1701 	mov	dpl,a
      0003A6 08               [12] 1702 	inc	r0
      0003A7 E2               [24] 1703 	movx	a,@r0
      0003A8 F5 83            [12] 1704 	mov	dph,a
      0003AA C0 05            [24] 1705 	push	ar5
      0003AC C0 04            [24] 1706 	push	ar4
      0003AE 12r00r00         [24] 1707 	lcall	___uint2fs
      0003B1 AA 82            [24] 1708 	mov	r2,dpl
      0003B3 AB 83            [24] 1709 	mov	r3,dph
      0003B5 AE F0            [24] 1710 	mov	r6,b
      0003B7 FF               [12] 1711 	mov	r7,a
      0003B8 D0 04            [24] 1712 	pop	ar4
      0003BA D0 05            [24] 1713 	pop	ar5
      0003BC C0 07            [24] 1714 	push	ar7
      0003BE C0 06            [24] 1715 	push	ar6
      0003C0 C0 05            [24] 1716 	push	ar5
      0003C2 C0 04            [24] 1717 	push	ar4
      0003C4 C0 02            [24] 1718 	push	ar2
      0003C6 C0 03            [24] 1719 	push	ar3
      0003C8 C0 06            [24] 1720 	push	ar6
      0003CA C0 07            [24] 1721 	push	ar7
      0003CC 90 00 00         [24] 1722 	mov	dptr,#0x0000
      0003CF 75 F0 A0         [24] 1723 	mov	b,#0xA0
      0003D2 74 40            [12] 1724 	mov	a,#0x40
      0003D4 12r00r00         [24] 1725 	lcall	___fsmul
      0003D7 85 82*11         [24] 1726 	mov	_tdm_state_update_sloc2_1_0,dpl
      0003DA 85 83*12         [24] 1727 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
      0003DD 85 F0*13         [24] 1728 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
      0003E0 F5*14            [12] 1729 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
      0003E2 E5 81            [12] 1730 	mov	a,sp
      0003E4 24 FC            [12] 1731 	add	a,#0xfc
      0003E6 F5 81            [12] 1732 	mov	sp,a
      0003E8 D0 04            [24] 1733 	pop	ar4
      0003EA D0 05            [24] 1734 	pop	ar5
      0003EC D0 06            [24] 1735 	pop	ar6
      0003EE D0 07            [24] 1736 	pop	ar7
      0003F0 78r06            [12] 1737 	mov	r0,#_silence_period
      0003F2 79r03            [12] 1738 	mov	r1,#_tx_window_width
      0003F4 E3               [24] 1739 	movx	a,@r1
      0003F5 C5 F0            [12] 1740 	xch	a,b
      0003F7 E2               [24] 1741 	movx	a,@r0
      0003F8 25 F0            [12] 1742 	add	a,b
      0003FA FE               [12] 1743 	mov	r6,a
      0003FB 09               [12] 1744 	inc	r1
      0003FC E3               [24] 1745 	movx	a,@r1
      0003FD C5 F0            [12] 1746 	xch	a,b
      0003FF 08               [12] 1747 	inc	r0
      000400 E2               [24] 1748 	movx	a,@r0
      000401 35 F0            [12] 1749 	addc	a,b
      000403 CE               [12] 1750 	xch	a,r6
      000404 25 E0            [12] 1751 	add	a,acc
      000406 CE               [12] 1752 	xch	a,r6
      000407 33               [12] 1753 	rlc	a
      000408 FF               [12] 1754 	mov	r7,a
      000409 8E 82            [24] 1755 	mov	dpl,r6
      00040B 8F 83            [24] 1756 	mov	dph,r7
      00040D C0 05            [24] 1757 	push	ar5
      00040F C0 04            [24] 1758 	push	ar4
      000411 12r00r00         [24] 1759 	lcall	___uint2fs
      000414 AA 82            [24] 1760 	mov	r2,dpl
      000416 AB 83            [24] 1761 	mov	r3,dph
      000418 AE F0            [24] 1762 	mov	r6,b
      00041A FF               [12] 1763 	mov	r7,a
      00041B C0 02            [24] 1764 	push	ar2
      00041D C0 03            [24] 1765 	push	ar3
      00041F C0 06            [24] 1766 	push	ar6
      000421 C0 07            [24] 1767 	push	ar7
      000423 85*11 82         [24] 1768 	mov	dpl,_tdm_state_update_sloc2_1_0
      000426 85*12 83         [24] 1769 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
      000429 85*13 F0         [24] 1770 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
      00042C E5*14            [12] 1771 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
      00042E 12r00r00         [24] 1772 	lcall	___fsdiv
      000431 AA 82            [24] 1773 	mov	r2,dpl
      000433 AB 83            [24] 1774 	mov	r3,dph
      000435 AE F0            [24] 1775 	mov	r6,b
      000437 FF               [12] 1776 	mov	r7,a
      000438 E5 81            [12] 1777 	mov	a,sp
      00043A 24 FC            [12] 1778 	add	a,#0xfc
      00043C F5 81            [12] 1779 	mov	sp,a
      00043E C0 02            [24] 1780 	push	ar2
      000440 C0 03            [24] 1781 	push	ar3
      000442 C0 06            [24] 1782 	push	ar6
      000444 C0 07            [24] 1783 	push	ar7
      000446 85*0D 82         [24] 1784 	mov	dpl,_tdm_state_update_sloc1_1_0
      000449 85*0E 83         [24] 1785 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
      00044C 85*0F F0         [24] 1786 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
      00044F E5*10            [12] 1787 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
      000451 12r00r00         [24] 1788 	lcall	___fsadd
      000454 AA 82            [24] 1789 	mov	r2,dpl
      000456 AB 83            [24] 1790 	mov	r3,dph
      000458 AE F0            [24] 1791 	mov	r6,b
      00045A FF               [12] 1792 	mov	r7,a
      00045B E5 81            [12] 1793 	mov	a,sp
      00045D 24 FC            [12] 1794 	add	a,#0xfc
      00045F F5 81            [12] 1795 	mov	sp,a
      000461 D0 04            [24] 1796 	pop	ar4
      000463 D0 05            [24] 1797 	pop	ar5
      000465 78r0F            [12] 1798 	mov	r0,#_average_duty_cycle
      000467 EA               [12] 1799 	mov	a,r2
      000468 F2               [24] 1800 	movx	@r0,a
      000469 08               [12] 1801 	inc	r0
      00046A EB               [12] 1802 	mov	a,r3
      00046B F2               [24] 1803 	movx	@r0,a
      00046C 08               [12] 1804 	inc	r0
      00046D EE               [12] 1805 	mov	a,r6
      00046E F2               [24] 1806 	movx	@r0,a
      00046F 08               [12] 1807 	inc	r0
      000470 EF               [12] 1808 	mov	a,r7
      000471 F2               [24] 1809 	movx	@r0,a
                                   1810 ;	radio/tdm.c:322: transmitted_ticks = 0;
      000472 78r14            [12] 1811 	mov	r0,#_transmitted_ticks
      000474 E4               [12] 1812 	clr	a
      000475 F2               [24] 1813 	movx	@r0,a
      000476 08               [12] 1814 	inc	r0
      000477 F2               [24] 1815 	movx	@r0,a
                                   1816 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      000478 EC               [12] 1817 	mov	a,r4
      000479 C3               [12] 1818 	clr	c
      00047A 95*0B            [12] 1819 	subb	a,_tdm_state_update_sloc0_1_0
      00047C FC               [12] 1820 	mov	r4,a
      00047D ED               [12] 1821 	mov	a,r5
      00047E 95*0C            [12] 1822 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      000480 FD               [12] 1823 	mov	r5,a
      000481 8C 82            [24] 1824 	mov	dpl,r4
      000483 8D 83            [24] 1825 	mov	dph,r5
      000485 12r00r00         [24] 1826 	lcall	___sint2fs
      000488 AC 82            [24] 1827 	mov	r4,dpl
      00048A AD 83            [24] 1828 	mov	r5,dph
      00048C AE F0            [24] 1829 	mov	r6,b
      00048E FF               [12] 1830 	mov	r7,a
      00048F C0 07            [24] 1831 	push	ar7
      000491 C0 06            [24] 1832 	push	ar6
      000493 C0 04            [24] 1833 	push	ar4
      000495 C0 05            [24] 1834 	push	ar5
      000497 C0 06            [24] 1835 	push	ar6
      000499 C0 07            [24] 1836 	push	ar7
      00049B 78r0F            [12] 1837 	mov	r0,#_average_duty_cycle
      00049D E2               [24] 1838 	movx	a,@r0
      00049E F5 82            [12] 1839 	mov	dpl,a
      0004A0 08               [12] 1840 	inc	r0
      0004A1 E2               [24] 1841 	movx	a,@r0
      0004A2 F5 83            [12] 1842 	mov	dph,a
      0004A4 08               [12] 1843 	inc	r0
      0004A5 E2               [24] 1844 	movx	a,@r0
      0004A6 F5 F0            [12] 1845 	mov	b,a
      0004A8 08               [12] 1846 	inc	r0
      0004A9 E2               [24] 1847 	movx	a,@r0
      0004AA 12r00r00         [24] 1848 	lcall	___fslt
      0004AD E5 81            [12] 1849 	mov	a,sp
      0004AF 24 FC            [12] 1850 	add	a,#0xfc
      0004B1 F5 81            [12] 1851 	mov	sp,a
      0004B3 D0 06            [24] 1852 	pop	ar6
      0004B5 D0 07            [24] 1853 	pop	ar7
      0004B7 E5 82            [12] 1854 	mov	a,dpl
      0004B9 24 FF            [12] 1855 	add	a,#0xFF
      0004BB 92*08            [24] 1856 	mov  _tdm_state_update_sloc3_1_0,c
      0004BD B3               [12] 1857 	cpl	c
      0004BE 92*04            [24] 1858 	mov	_duty_cycle_wait,c
                                   1859 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004C0 D0 07            [24] 1860 	pop	ar7
      0004C2 D0 06            [24] 1861 	pop	ar6
                                   1862 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      0004C4                       1863 00114$:
                                   1864 ;	radio/tdm.c:327: bonus_transmit = 0;
      0004C4 C2*00            [12] 1865 	clr	_bonus_transmit
                                   1866 ;	radio/tdm.c:330: transmit_yield = 0;
      0004C6 C2*01            [12] 1867 	clr	_transmit_yield
                                   1868 ;	radio/tdm.c:333: transmit_wait = 0;
      0004C8 78r0C            [12] 1869 	mov	r0,#_transmit_wait
      0004CA E4               [12] 1870 	clr	a
      0004CB F2               [24] 1871 	movx	@r0,a
      0004CC 08               [12] 1872 	inc	r0
      0004CD F2               [24] 1873 	movx	@r0,a
      0004CE 02r02r86         [24] 1874 	ljmp	00116$
      0004D1                       1875 00118$:
                                   1876 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004D1 78r01            [12] 1877 	mov	r0,#_tdm_state_remaining
      0004D3 E2               [24] 1878 	movx	a,@r0
      0004D4 C3               [12] 1879 	clr	c
      0004D5 9E               [12] 1880 	subb	a,r6
      0004D6 F2               [24] 1881 	movx	@r0,a
      0004D7 08               [12] 1882 	inc	r0
      0004D8 E2               [24] 1883 	movx	a,@r0
      0004D9 9F               [12] 1884 	subb	a,r7
      0004DA F2               [24] 1885 	movx	@r0,a
      0004DB 22               [24] 1886 	ret
                                   1887 ;------------------------------------------------------------
                                   1888 ;Allocation info for local variables in function 'tdm_change_phase'
                                   1889 ;------------------------------------------------------------
                                   1890 ;	radio/tdm.c:342: tdm_change_phase(void)
                                   1891 ;	-----------------------------------------
                                   1892 ;	 function tdm_change_phase
                                   1893 ;	-----------------------------------------
      0004DC                       1894 _tdm_change_phase:
                                   1895 ;	radio/tdm.c:344: tdm_state = (tdm_state+2) % 4;
      0004DC 78r00            [12] 1896 	mov	r0,#_tdm_state
      0004DE E2               [24] 1897 	movx	a,@r0
      0004DF FE               [12] 1898 	mov	r6,a
      0004E0 7F 00            [12] 1899 	mov	r7,#0x00
      0004E2 74 02            [12] 1900 	mov	a,#0x02
      0004E4 2E               [12] 1901 	add	a,r6
      0004E5 FE               [12] 1902 	mov	r6,a
      0004E6 E4               [12] 1903 	clr	a
      0004E7 3F               [12] 1904 	addc	a,r7
      0004E8 FF               [12] 1905 	mov	r7,a
      0004E9 90r00r00         [24] 1906 	mov	dptr,#__modsint_PARM_2
      0004EC 74 04            [12] 1907 	mov	a,#0x04
      0004EE F0               [24] 1908 	movx	@dptr,a
      0004EF E4               [12] 1909 	clr	a
      0004F0 A3               [24] 1910 	inc	dptr
      0004F1 F0               [24] 1911 	movx	@dptr,a
      0004F2 8E 82            [24] 1912 	mov	dpl,r6
      0004F4 8F 83            [24] 1913 	mov	dph,r7
      0004F6 12r00r00         [24] 1914 	lcall	__modsint
      0004F9 AE 82            [24] 1915 	mov	r6,dpl
      0004FB 78r00            [12] 1916 	mov	r0,#_tdm_state
      0004FD EE               [12] 1917 	mov	a,r6
      0004FE F2               [24] 1918 	movx	@r0,a
      0004FF 22               [24] 1919 	ret
                                   1920 ;------------------------------------------------------------
                                   1921 ;Allocation info for local variables in function 'temperature_update'
                                   1922 ;------------------------------------------------------------
                                   1923 ;diff                      Allocated to registers r6 r7 
                                   1924 ;------------------------------------------------------------
                                   1925 ;	radio/tdm.c:349: static void temperature_update(void)
                                   1926 ;	-----------------------------------------
                                   1927 ;	 function temperature_update
                                   1928 ;	-----------------------------------------
      000500                       1929 _temperature_update:
                                   1930 ;	radio/tdm.c:352: if (radio_get_transmit_power() <= 20) {
      000500 12r00r00         [24] 1931 	lcall	_radio_get_transmit_power
      000503 E5 82            [12] 1932 	mov	a,dpl
      000505 FF               [12] 1933 	mov	r7,a
      000506 24 EB            [12] 1934 	add	a,#0xff - 0x14
      000508 40 05            [24] 1935 	jc	00102$
                                   1936 ;	radio/tdm.c:353: duty_cycle_offset = 0;
      00050A 78r13            [12] 1937 	mov	r0,#_duty_cycle_offset
      00050C E4               [12] 1938 	clr	a
      00050D F2               [24] 1939 	movx	@r0,a
                                   1940 ;	radio/tdm.c:354: return;
      00050E 22               [24] 1941 	ret
      00050F                       1942 00102$:
                                   1943 ;	radio/tdm.c:357: diff = radio_temperature() - MAX_PA_TEMPERATURE;
      00050F 12r00r00         [24] 1944 	lcall	_radio_temperature
      000512 E5 82            [12] 1945 	mov	a,dpl
      000514 85 83 F0         [24] 1946 	mov	b,dph
      000517 24 9C            [12] 1947 	add	a,#0x9C
      000519 FE               [12] 1948 	mov	r6,a
      00051A E5 F0            [12] 1949 	mov	a,b
      00051C 34 FF            [12] 1950 	addc	a,#0xFF
      00051E FF               [12] 1951 	mov	r7,a
                                   1952 ;	radio/tdm.c:358: if (diff <= 0 && duty_cycle_offset > 0) {
      00051F C3               [12] 1953 	clr	c
      000520 E4               [12] 1954 	clr	a
      000521 9E               [12] 1955 	subb	a,r6
      000522 74 80            [12] 1956 	mov	a,#(0x00 ^ 0x80)
      000524 8F F0            [24] 1957 	mov	b,r7
      000526 63 F0 80         [24] 1958 	xrl	b,#0x80
      000529 95 F0            [12] 1959 	subb	a,b
      00052B E4               [12] 1960 	clr	a
      00052C 33               [12] 1961 	rlc	a
      00052D FD               [12] 1962 	mov	r5,a
      00052E 70 0C            [24] 1963 	jnz	00112$
      000530 78r13            [12] 1964 	mov	r0,#_duty_cycle_offset
      000532 E2               [24] 1965 	movx	a,@r0
      000533 60 07            [24] 1966 	jz	00112$
                                   1967 ;	radio/tdm.c:360: duty_cycle_offset -= 1;
      000535 78r13            [12] 1968 	mov	r0,#_duty_cycle_offset
      000537 E2               [24] 1969 	movx	a,@r0
      000538 14               [12] 1970 	dec	a
      000539 F2               [24] 1971 	movx	@r0,a
      00053A 80 37            [24] 1972 	sjmp	00113$
      00053C                       1973 00112$:
                                   1974 ;	radio/tdm.c:361: } else if (diff > 10) {
      00053C C3               [12] 1975 	clr	c
      00053D 74 0A            [12] 1976 	mov	a,#0x0A
      00053F 9E               [12] 1977 	subb	a,r6
      000540 74 80            [12] 1978 	mov	a,#(0x00 ^ 0x80)
      000542 8F F0            [24] 1979 	mov	b,r7
      000544 63 F0 80         [24] 1980 	xrl	b,#0x80
      000547 95 F0            [12] 1981 	subb	a,b
      000549 50 08            [24] 1982 	jnc	00109$
                                   1983 ;	radio/tdm.c:363: duty_cycle_offset += 10;
      00054B 78r13            [12] 1984 	mov	r0,#_duty_cycle_offset
      00054D E2               [24] 1985 	movx	a,@r0
      00054E 24 0A            [12] 1986 	add	a,#0x0A
      000550 F2               [24] 1987 	movx	@r0,a
      000551 80 20            [24] 1988 	sjmp	00113$
      000553                       1989 00109$:
                                   1990 ;	radio/tdm.c:364: } else if (diff > 5) {
      000553 C3               [12] 1991 	clr	c
      000554 74 05            [12] 1992 	mov	a,#0x05
      000556 9E               [12] 1993 	subb	a,r6
      000557 74 80            [12] 1994 	mov	a,#(0x00 ^ 0x80)
      000559 8F F0            [24] 1995 	mov	b,r7
      00055B 63 F0 80         [24] 1996 	xrl	b,#0x80
      00055E 95 F0            [12] 1997 	subb	a,b
      000560 50 08            [24] 1998 	jnc	00106$
                                   1999 ;	radio/tdm.c:366: duty_cycle_offset += 5;
      000562 78r13            [12] 2000 	mov	r0,#_duty_cycle_offset
      000564 E2               [24] 2001 	movx	a,@r0
      000565 24 05            [12] 2002 	add	a,#0x05
      000567 F2               [24] 2003 	movx	@r0,a
      000568 80 09            [24] 2004 	sjmp	00113$
      00056A                       2005 00106$:
                                   2006 ;	radio/tdm.c:367: } else if (diff > 0) {
      00056A ED               [12] 2007 	mov	a,r5
      00056B 60 06            [24] 2008 	jz	00113$
                                   2009 ;	radio/tdm.c:369: duty_cycle_offset += 1;				
      00056D 78r13            [12] 2010 	mov	r0,#_duty_cycle_offset
      00056F E2               [24] 2011 	movx	a,@r0
      000570 24 01            [12] 2012 	add	a,#0x01
      000572 F2               [24] 2013 	movx	@r0,a
      000573                       2014 00113$:
                                   2015 ;	radio/tdm.c:372: if ((duty_cycle-duty_cycle_offset) < 20) {
      000573 78r0E            [12] 2016 	mov	r0,#_duty_cycle
      000575 E2               [24] 2017 	movx	a,@r0
      000576 FE               [12] 2018 	mov	r6,a
      000577 7F 00            [12] 2019 	mov	r7,#0x00
      000579 78r13            [12] 2020 	mov	r0,#_duty_cycle_offset
      00057B E2               [24] 2021 	movx	a,@r0
      00057C FC               [12] 2022 	mov	r4,a
      00057D 7D 00            [12] 2023 	mov	r5,#0x00
      00057F EE               [12] 2024 	mov	a,r6
      000580 C3               [12] 2025 	clr	c
      000581 9C               [12] 2026 	subb	a,r4
      000582 FE               [12] 2027 	mov	r6,a
      000583 EF               [12] 2028 	mov	a,r7
      000584 9D               [12] 2029 	subb	a,r5
      000585 FF               [12] 2030 	mov	r7,a
      000586 C3               [12] 2031 	clr	c
      000587 EE               [12] 2032 	mov	a,r6
      000588 94 14            [12] 2033 	subb	a,#0x14
      00058A EF               [12] 2034 	mov	a,r7
      00058B 64 80            [12] 2035 	xrl	a,#0x80
      00058D 94 80            [12] 2036 	subb	a,#0x80
      00058F 50 08            [24] 2037 	jnc	00117$
                                   2038 ;	radio/tdm.c:373: duty_cycle_offset = duty_cycle - 20;
      000591 78r0E            [12] 2039 	mov	r0,#_duty_cycle
      000593 79r13            [12] 2040 	mov	r1,#_duty_cycle_offset
      000595 E2               [24] 2041 	movx	a,@r0
      000596 24 EC            [12] 2042 	add	a,#0xEC
      000598 F3               [24] 2043 	movx	@r1,a
      000599                       2044 00117$:
      000599 22               [24] 2045 	ret
                                   2046 ;------------------------------------------------------------
                                   2047 ;Allocation info for local variables in function 'link_update'
                                   2048 ;------------------------------------------------------------
                                   2049 ;old_remaining             Allocated to registers r6 r7 
                                   2050 ;unlock_count              Allocated with name '_link_update_unlock_count_1_198'
                                   2051 ;temperature_count         Allocated with name '_link_update_temperature_count_1_198'
                                   2052 ;------------------------------------------------------------
                                   2053 ;	radio/tdm.c:381: link_update(void)
                                   2054 ;	-----------------------------------------
                                   2055 ;	 function link_update
                                   2056 ;	-----------------------------------------
      00059A                       2057 _link_update:
                                   2058 ;	radio/tdm.c:384: if (received_packet) {
      00059A 30*03 09         [24] 2059 	jnb	_received_packet,00102$
                                   2060 ;	radio/tdm.c:385: unlock_count = 0;
      00059D 90r00rFD         [24] 2061 	mov	dptr,#_link_update_unlock_count_1_198
      0005A0 E4               [12] 2062 	clr	a
      0005A1 F0               [24] 2063 	movx	@dptr,a
                                   2064 ;	radio/tdm.c:386: received_packet = false;
      0005A2 C2*03            [12] 2065 	clr	_received_packet
      0005A4 80 07            [24] 2066 	sjmp	00103$
      0005A6                       2067 00102$:
                                   2068 ;	radio/tdm.c:391: unlock_count++;
      0005A6 90r00rFD         [24] 2069 	mov	dptr,#_link_update_unlock_count_1_198
      0005A9 E0               [24] 2070 	movx	a,@dptr
      0005AA 24 01            [12] 2071 	add	a,#0x01
      0005AC F0               [24] 2072 	movx	@dptr,a
      0005AD                       2073 00103$:
                                   2074 ;	radio/tdm.c:394: if (unlock_count < 2) {
      0005AD 90r00rFD         [24] 2075 	mov	dptr,#_link_update_unlock_count_1_198
      0005B0 E0               [24] 2076 	movx	a,@dptr
      0005B1 FF               [12] 2077 	mov	r7,a
      0005B2 BF 02 00         [24] 2078 	cjne	r7,#0x02,00157$
      0005B5                       2079 00157$:
      0005B5 50 04            [24] 2080 	jnc	00105$
                                   2081 ;	radio/tdm.c:395: LED_RADIO = LED_ON;
      0005B7 D2 B7            [12] 2082 	setb	_LED_GREEN
      0005B9 80 06            [24] 2083 	sjmp	00106$
      0005BB                       2084 00105$:
                                   2085 ;	radio/tdm.c:401: LED_RADIO = blink_state;
      0005BB A2*02            [12] 2086 	mov	c,_blink_state
      0005BD 92 B7            [24] 2087 	mov	_LED_GREEN,c
                                   2088 ;	radio/tdm.c:402: blink_state = !blink_state;
      0005BF B2*02            [12] 2089 	cpl	_blink_state
      0005C1                       2090 00106$:
                                   2091 ;	radio/tdm.c:405: if (unlock_count > 40) {
      0005C1 EF               [12] 2092 	mov	a,r7
      0005C2 24 D7            [12] 2093 	add	a,#0xff - 0x28
      0005C4 40 03            [24] 2094 	jc	00159$
      0005C6 02r06r51         [24] 2095 	ljmp	00117$
      0005C9                       2096 00159$:
                                   2097 ;	radio/tdm.c:409: unlock_count = 5;
      0005C9 90r00rFD         [24] 2098 	mov	dptr,#_link_update_unlock_count_1_198
      0005CC 74 05            [12] 2099 	mov	a,#0x05
      0005CE F0               [24] 2100 	movx	@dptr,a
                                   2101 ;	radio/tdm.c:413: if (timer_entropy() & 1) {
      0005CF 12r00r00         [24] 2102 	lcall	_timer_entropy
      0005D2 E5 82            [12] 2103 	mov	a,dpl
      0005D4 30 E0 59         [24] 2104 	jnb	acc.0,00113$
                                   2105 ;	radio/tdm.c:414: register uint16_t old_remaining = tdm_state_remaining;
      0005D7 78r01            [12] 2106 	mov	r0,#_tdm_state_remaining
      0005D9 E2               [24] 2107 	movx	a,@r0
      0005DA FE               [12] 2108 	mov	r6,a
      0005DB 08               [12] 2109 	inc	r0
      0005DC E2               [24] 2110 	movx	a,@r0
      0005DD FF               [12] 2111 	mov	r7,a
                                   2112 ;	radio/tdm.c:415: if (tdm_state_remaining > silence_period) {
      0005DE 78r06            [12] 2113 	mov	r0,#_silence_period
      0005E0 C3               [12] 2114 	clr	c
      0005E1 E2               [24] 2115 	movx	a,@r0
      0005E2 9E               [12] 2116 	subb	a,r6
      0005E3 08               [12] 2117 	inc	r0
      0005E4 E2               [24] 2118 	movx	a,@r0
      0005E5 9F               [12] 2119 	subb	a,r7
      0005E6 50 17            [24] 2120 	jnc	00108$
                                   2121 ;	radio/tdm.c:416: tdm_state_remaining -= packet_latency;
      0005E8 78r08            [12] 2122 	mov	r0,#_packet_latency
      0005EA D3               [12] 2123 	setb	c
      0005EB E2               [24] 2124 	movx	a,@r0
      0005EC 9E               [12] 2125 	subb	a,r6
      0005ED F4               [12] 2126 	cpl	a
      0005EE B3               [12] 2127 	cpl	c
      0005EF FC               [12] 2128 	mov	r4,a
      0005F0 B3               [12] 2129 	cpl	c
      0005F1 08               [12] 2130 	inc	r0
      0005F2 E2               [24] 2131 	movx	a,@r0
      0005F3 9F               [12] 2132 	subb	a,r7
      0005F4 F4               [12] 2133 	cpl	a
      0005F5 FD               [12] 2134 	mov	r5,a
      0005F6 78r01            [12] 2135 	mov	r0,#_tdm_state_remaining
      0005F8 EC               [12] 2136 	mov	a,r4
      0005F9 F2               [24] 2137 	movx	@r0,a
      0005FA 08               [12] 2138 	inc	r0
      0005FB ED               [12] 2139 	mov	a,r5
      0005FC F2               [24] 2140 	movx	@r0,a
      0005FD 80 08            [24] 2141 	sjmp	00109$
      0005FF                       2142 00108$:
                                   2143 ;	radio/tdm.c:418: tdm_state_remaining = 1;
      0005FF 78r01            [12] 2144 	mov	r0,#_tdm_state_remaining
      000601 74 01            [12] 2145 	mov	a,#0x01
      000603 F2               [24] 2146 	movx	@r0,a
      000604 08               [12] 2147 	inc	r0
      000605 E4               [12] 2148 	clr	a
      000606 F2               [24] 2149 	movx	@r0,a
      000607                       2150 00109$:
                                   2151 ;	radio/tdm.c:420: if (at_testmode & AT_TEST_TDM) {
      000607 78r00            [12] 2152 	mov	r0,#_at_testmode
      000609 E2               [24] 2153 	movx	a,@r0
      00060A 54 02            [12] 2154 	anl	a,#0x02
      00060C 60 22            [24] 2155 	jz	00113$
                                   2156 ;	radio/tdm.c:421: printf("TDM: change timing %u/%u\n",
      00060E 78r01            [12] 2157 	mov	r0,#_tdm_state_remaining
      000610 E2               [24] 2158 	movx	a,@r0
      000611 C0 E0            [24] 2159 	push	acc
      000613 08               [12] 2160 	inc	r0
      000614 E2               [24] 2161 	movx	a,@r0
      000615 C0 E0            [24] 2162 	push	acc
      000617 C0 06            [24] 2163 	push	ar6
      000619 C0 07            [24] 2164 	push	ar7
      00061B 74r82            [12] 2165 	mov	a,#___str_4
      00061D C0 E0            [24] 2166 	push	acc
      00061F 74s00            [12] 2167 	mov	a,#(___str_4 >> 8)
      000621 C0 E0            [24] 2168 	push	acc
      000623 74 80            [12] 2169 	mov	a,#0x80
      000625 C0 E0            [24] 2170 	push	acc
      000627 12r00r00         [24] 2171 	lcall	_printfl
      00062A E5 81            [12] 2172 	mov	a,sp
      00062C 24 F9            [12] 2173 	add	a,#0xf9
      00062E F5 81            [12] 2174 	mov	sp,a
      000630                       2175 00113$:
                                   2176 ;	radio/tdm.c:427: if (at_testmode & AT_TEST_TDM) {
      000630 78r00            [12] 2177 	mov	r0,#_at_testmode
      000632 E2               [24] 2178 	movx	a,@r0
      000633 54 02            [12] 2179 	anl	a,#0x02
      000635 60 15            [24] 2180 	jz	00115$
                                   2181 ;	radio/tdm.c:428: printf("TDM: scanning\n");
      000637 74r9C            [12] 2182 	mov	a,#___str_5
      000639 C0 E0            [24] 2183 	push	acc
      00063B 74s00            [12] 2184 	mov	a,#(___str_5 >> 8)
      00063D C0 E0            [24] 2185 	push	acc
      00063F 74 80            [12] 2186 	mov	a,#0x80
      000641 C0 E0            [24] 2187 	push	acc
      000643 12r00r00         [24] 2188 	lcall	_printfl
      000646 15 81            [12] 2189 	dec	sp
      000648 15 81            [12] 2190 	dec	sp
      00064A 15 81            [12] 2191 	dec	sp
      00064C                       2192 00115$:
                                   2193 ;	radio/tdm.c:430: fhop_set_locked(false);
      00064C C2*00            [12] 2194 	clr	_fhop_set_locked_PARM_1
      00064E 12r00r00         [24] 2195 	lcall	_fhop_set_locked
      000651                       2196 00117$:
                                   2197 ;	radio/tdm.c:433: if (unlock_count != 0) {
      000651 90r00rFD         [24] 2198 	mov	dptr,#_link_update_unlock_count_1_198
      000654 E0               [24] 2199 	movx	a,@dptr
      000655 60 3D            [24] 2200 	jz	00119$
                                   2201 ;	radio/tdm.c:434: statistics.average_rssi = (radio_last_rssi() + 3*(uint16_t)statistics.average_rssi)/4;
      000657 12r00r00         [24] 2202 	lcall	_radio_last_rssi
      00065A AF 82            [24] 2203 	mov	r7,dpl
      00065C 7E 00            [12] 2204 	mov	r6,#0x00
      00065E 78r00            [12] 2205 	mov	r0,#_statistics
      000660 E2               [24] 2206 	movx	a,@r0
      000661 90r00r00         [24] 2207 	mov	dptr,#__mulint_PARM_2
      000664 F0               [24] 2208 	movx	@dptr,a
      000665 E4               [12] 2209 	clr	a
      000666 A3               [24] 2210 	inc	dptr
      000667 F0               [24] 2211 	movx	@dptr,a
      000668 90 00 03         [24] 2212 	mov	dptr,#0x0003
      00066B C0 07            [24] 2213 	push	ar7
      00066D C0 06            [24] 2214 	push	ar6
      00066F 12r00r00         [24] 2215 	lcall	__mulint
      000672 AC 82            [24] 2216 	mov	r4,dpl
      000674 AD 83            [24] 2217 	mov	r5,dph
      000676 D0 06            [24] 2218 	pop	ar6
      000678 D0 07            [24] 2219 	pop	ar7
      00067A EC               [12] 2220 	mov	a,r4
      00067B 2F               [12] 2221 	add	a,r7
      00067C FC               [12] 2222 	mov	r4,a
      00067D ED               [12] 2223 	mov	a,r5
      00067E 3E               [12] 2224 	addc	a,r6
      00067F C3               [12] 2225 	clr	c
      000680 13               [12] 2226 	rrc	a
      000681 CC               [12] 2227 	xch	a,r4
      000682 13               [12] 2228 	rrc	a
      000683 CC               [12] 2229 	xch	a,r4
      000684 C3               [12] 2230 	clr	c
      000685 13               [12] 2231 	rrc	a
      000686 CC               [12] 2232 	xch	a,r4
      000687 13               [12] 2233 	rrc	a
      000688 CC               [12] 2234 	xch	a,r4
      000689 FD               [12] 2235 	mov	r5,a
      00068A 78r00            [12] 2236 	mov	r0,#_statistics
      00068C EC               [12] 2237 	mov	a,r4
      00068D F2               [24] 2238 	movx	@r0,a
                                   2239 ;	radio/tdm.c:437: statistics.receive_count = 0;
      00068E 78r02            [12] 2240 	mov	r0,#(_statistics + 0x0002)
      000690 E4               [12] 2241 	clr	a
      000691 F2               [24] 2242 	movx	@r0,a
      000692 08               [12] 2243 	inc	r0
      000693 F2               [24] 2244 	movx	@r0,a
      000694                       2245 00119$:
                                   2246 ;	radio/tdm.c:440: if (unlock_count > 5) {
      000694 90r00rFD         [24] 2247 	mov	dptr,#_link_update_unlock_count_1_198
      000697 E0               [24] 2248 	movx	a,@dptr
      000698 FF               [12] 2249 	mov  r7,a
      000699 24 FA            [12] 2250 	add	a,#0xff - 0x05
      00069B 50 17            [24] 2251 	jnc	00121$
                                   2252 ;	radio/tdm.c:441: memset(&remote_statistics, 0, sizeof(remote_statistics));
      00069D 90r00r00         [24] 2253 	mov	dptr,#_memset_PARM_2
      0006A0 E4               [12] 2254 	clr	a
      0006A1 F0               [24] 2255 	movx	@dptr,a
      0006A2 90r00r00         [24] 2256 	mov	dptr,#_memset_PARM_3
      0006A5 74 04            [12] 2257 	mov	a,#0x04
      0006A7 F0               [24] 2258 	movx	@dptr,a
      0006A8 E4               [12] 2259 	clr	a
      0006A9 A3               [24] 2260 	inc	dptr
      0006AA F0               [24] 2261 	movx	@dptr,a
      0006AB 90r00r00         [24] 2262 	mov	dptr,#_remote_statistics
      0006AE 75 F0 60         [24] 2263 	mov	b,#0x60
      0006B1 12r00r00         [24] 2264 	lcall	_memset
      0006B4                       2265 00121$:
                                   2266 ;	radio/tdm.c:444: test_display = at_testmode;
      0006B4 78r00            [12] 2267 	mov	r0,#_at_testmode
      0006B6 90r00rFC         [24] 2268 	mov	dptr,#_test_display
      0006B9 E2               [24] 2269 	movx	a,@r0
      0006BA F0               [24] 2270 	movx	@dptr,a
                                   2271 ;	radio/tdm.c:445: send_statistics = 1;
      0006BB D2*05            [12] 2272 	setb	_send_statistics
                                   2273 ;	radio/tdm.c:447: temperature_count++;
      0006BD 90r00rFE         [24] 2274 	mov	dptr,#_link_update_temperature_count_1_198
      0006C0 E0               [24] 2275 	movx	a,@dptr
      0006C1 24 01            [12] 2276 	add	a,#0x01
      0006C3 F0               [24] 2277 	movx	@dptr,a
                                   2278 ;	radio/tdm.c:448: if (temperature_count == 4) {
      0006C4 E0               [24] 2279 	movx	a,@dptr
      0006C5 FF               [12] 2280 	mov	r7,a
      0006C6 BF 04 08         [24] 2281 	cjne	r7,#0x04,00124$
                                   2282 ;	radio/tdm.c:450: temperature_update();
      0006C9 12r05r00         [24] 2283 	lcall	_temperature_update
                                   2284 ;	radio/tdm.c:451: temperature_count = 0;
      0006CC 90r00rFE         [24] 2285 	mov	dptr,#_link_update_temperature_count_1_198
      0006CF E4               [12] 2286 	clr	a
      0006D0 F0               [24] 2287 	movx	@dptr,a
      0006D1                       2288 00124$:
      0006D1 22               [24] 2289 	ret
                                   2290 ;------------------------------------------------------------
                                   2291 ;Allocation info for local variables in function 'tdm_remote_at'
                                   2292 ;------------------------------------------------------------
                                   2293 ;	radio/tdm.c:457: tdm_remote_at(void)
                                   2294 ;	-----------------------------------------
                                   2295 ;	 function tdm_remote_at
                                   2296 ;	-----------------------------------------
      0006D2                       2297 _tdm_remote_at:
                                   2298 ;	radio/tdm.c:459: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
      0006D2 90r00r00         [24] 2299 	mov	dptr,#_at_cmd
      0006D5 75 F0 00         [24] 2300 	mov	b,#0x00
      0006D8 12r00r00         [24] 2301 	lcall	_strlen
      0006DB E5 82            [12] 2302 	mov	a,dpl
      0006DD 85 83 F0         [24] 2303 	mov	b,dph
      0006E0 24 01            [12] 2304 	add	a,#0x01
      0006E2 FE               [12] 2305 	mov	r6,a
      0006E3 E4               [12] 2306 	clr	a
      0006E4 35 F0            [12] 2307 	addc	a,b
      0006E6 FF               [12] 2308 	mov	r7,a
      0006E7 90r00r00         [24] 2309 	mov	dptr,#_memcpy_PARM_2
      0006EA 74r00            [12] 2310 	mov	a,#_at_cmd
      0006EC F0               [24] 2311 	movx	@dptr,a
      0006ED 74s00            [12] 2312 	mov	a,#(_at_cmd >> 8)
      0006EF A3               [24] 2313 	inc	dptr
      0006F0 F0               [24] 2314 	movx	@dptr,a
      0006F1 E4               [12] 2315 	clr	a
      0006F2 A3               [24] 2316 	inc	dptr
      0006F3 F0               [24] 2317 	movx	@dptr,a
      0006F4 90r00r00         [24] 2318 	mov	dptr,#_memcpy_PARM_3
      0006F7 EE               [12] 2319 	mov	a,r6
      0006F8 F0               [24] 2320 	movx	@dptr,a
      0006F9 EF               [12] 2321 	mov	a,r7
      0006FA A3               [24] 2322 	inc	dptr
      0006FB F0               [24] 2323 	movx	@dptr,a
      0006FC 90r00r1F         [24] 2324 	mov	dptr,#_remote_at_cmd
      0006FF 75 F0 60         [24] 2325 	mov	b,#0x60
      000702 12r00r00         [24] 2326 	lcall	_memcpy
                                   2327 ;	radio/tdm.c:460: send_at_command = true;
      000705 D2*06            [12] 2328 	setb	_send_at_command
      000707 22               [24] 2329 	ret
                                   2330 ;------------------------------------------------------------
                                   2331 ;Allocation info for local variables in function 'handle_at_command'
                                   2332 ;------------------------------------------------------------
                                   2333 ;	radio/tdm.c:468: handle_at_command(__pdata uint8_t len)
                                   2334 ;	-----------------------------------------
                                   2335 ;	 function handle_at_command
                                   2336 ;	-----------------------------------------
      000708                       2337 _handle_at_command:
      000708 AF 82            [24] 2338 	mov	r7,dpl
                                   2339 ;	radio/tdm.c:470: if (len < 2 || len > AT_CMD_MAXLEN ||
      00070A BF 02 00         [24] 2340 	cjne	r7,#0x02,00122$
      00070D                       2341 00122$:
      00070D 40 17            [24] 2342 	jc	00101$
      00070F EF               [12] 2343 	mov	a,r7
      000710 24 BA            [12] 2344 	add	a,#0xff - 0x45
      000712 40 12            [24] 2345 	jc	00101$
                                   2346 ;	radio/tdm.c:471: pbuf[0] != (uint8_t)'R' ||
      000714 90r00r00         [24] 2347 	mov	dptr,#_pbuf
      000717 E0               [24] 2348 	movx	a,@dptr
      000718 FE               [12] 2349 	mov	r6,a
      000719 BE 52 0A         [24] 2350 	cjne	r6,#0x52,00101$
                                   2351 ;	radio/tdm.c:472: pbuf[1] != (uint8_t)'T') {
      00071C 90r00r01         [24] 2352 	mov	dptr,#(_pbuf + 0x0001)
      00071F E0               [24] 2353 	movx	a,@dptr
      000720 FE               [12] 2354 	mov	r6,a
      000721 BE 54 02         [24] 2355 	cjne	r6,#0x54,00127$
      000724 80 02            [24] 2356 	sjmp	00102$
      000726                       2357 00127$:
      000726                       2358 00101$:
                                   2359 ;	radio/tdm.c:473: return true;
      000726 D3               [12] 2360 	setb	c
      000727 22               [24] 2361 	ret
      000728                       2362 00102$:
                                   2363 ;	radio/tdm.c:477: memcpy(at_cmd, pbuf, len);
      000728 90r00r00         [24] 2364 	mov	dptr,#_memcpy_PARM_2
      00072B 74r00            [12] 2365 	mov	a,#_pbuf
      00072D F0               [24] 2366 	movx	@dptr,a
      00072E 74s00            [12] 2367 	mov	a,#(_pbuf >> 8)
      000730 A3               [24] 2368 	inc	dptr
      000731 F0               [24] 2369 	movx	@dptr,a
      000732 E4               [12] 2370 	clr	a
      000733 A3               [24] 2371 	inc	dptr
      000734 F0               [24] 2372 	movx	@dptr,a
      000735 90r00r00         [24] 2373 	mov	dptr,#_memcpy_PARM_3
      000738 EF               [12] 2374 	mov	a,r7
      000739 F0               [24] 2375 	movx	@dptr,a
      00073A E4               [12] 2376 	clr	a
      00073B A3               [24] 2377 	inc	dptr
      00073C F0               [24] 2378 	movx	@dptr,a
      00073D 90r00r00         [24] 2379 	mov	dptr,#_at_cmd
      000740 75 F0 00         [24] 2380 	mov	b,#0x00
      000743 C0 07            [24] 2381 	push	ar7
      000745 12r00r00         [24] 2382 	lcall	_memcpy
      000748 D0 07            [24] 2383 	pop	ar7
                                   2384 ;	radio/tdm.c:478: at_cmd[len] = 0;
      00074A EF               [12] 2385 	mov	a,r7
      00074B 24r00            [12] 2386 	add	a,#_at_cmd
      00074D F5 82            [12] 2387 	mov	dpl,a
      00074F E4               [12] 2388 	clr	a
      000750 34s00            [12] 2389 	addc	a,#(_at_cmd >> 8)
      000752 F5 83            [12] 2390 	mov	dph,a
      000754 E4               [12] 2391 	clr	a
      000755 F0               [24] 2392 	movx	@dptr,a
                                   2393 ;	radio/tdm.c:479: at_cmd[0] = 'A'; // replace 'R'
      000756 90r00r00         [24] 2394 	mov	dptr,#_at_cmd
      000759 74 41            [12] 2395 	mov	a,#0x41
      00075B F0               [24] 2396 	movx	@dptr,a
                                   2397 ;	radio/tdm.c:480: at_cmd_len = len;
      00075C 78r00            [12] 2398 	mov	r0,#_at_cmd_len
      00075E EF               [12] 2399 	mov	a,r7
      00075F F2               [24] 2400 	movx	@r0,a
                                   2401 ;	radio/tdm.c:481: at_cmd_ready = true;
      000760 D2*00            [12] 2402 	setb	_at_cmd_ready
                                   2403 ;	radio/tdm.c:486: printf_start_capture(pbuf, sizeof(pbuf));
      000762 90r00r00         [24] 2404 	mov	dptr,#_printf_start_capture_PARM_2
      000765 74 FC            [12] 2405 	mov	a,#0xFC
      000767 F0               [24] 2406 	movx	@dptr,a
      000768 90r00r00         [24] 2407 	mov	dptr,#_pbuf
      00076B 12r00r00         [24] 2408 	lcall	_printf_start_capture
                                   2409 ;	radio/tdm.c:487: at_command();
      00076E 12r00r00         [24] 2410 	lcall	_at_command
                                   2411 ;	radio/tdm.c:488: len = printf_end_capture();
      000771 12r00r00         [24] 2412 	lcall	_printf_end_capture
                                   2413 ;	radio/tdm.c:489: if (len > 0) {
      000774 E5 82            [12] 2414 	mov	a,dpl
      000776 FF               [12] 2415 	mov	r7,a
      000777 60 0A            [24] 2416 	jz	00107$
                                   2417 ;	radio/tdm.c:490: packet_inject(pbuf, len);
      000779 78r00            [12] 2418 	mov	r0,#_packet_inject_PARM_2
      00077B EF               [12] 2419 	mov	a,r7
      00077C F2               [24] 2420 	movx	@r0,a
      00077D 90r00r00         [24] 2421 	mov	dptr,#_pbuf
      000780 12r00r00         [24] 2422 	lcall	_packet_inject
      000783                       2423 00107$:
                                   2424 ;	radio/tdm.c:492: return false;
      000783 C3               [12] 2425 	clr	c
      000784 22               [24] 2426 	ret
                                   2427 ;------------------------------------------------------------
                                   2428 ;Allocation info for local variables in function 'tdm_serial_loop'
                                   2429 ;------------------------------------------------------------
                                   2430 ;	radio/tdm.c:501: tdm_serial_loop(void)
                                   2431 ;	-----------------------------------------
                                   2432 ;	 function tdm_serial_loop
                                   2433 ;	-----------------------------------------
      000785                       2434 _tdm_serial_loop:
                                   2435 ;	radio/tdm.c:516: __pdata uint16_t last_t = timer2_tick();
      000785 12r00r00         [24] 2436 	lcall	_timer2_tick
      000788 78r6A            [12] 2437 	mov	r0,#_tdm_serial_loop_last_t_1_219
      00078A E5 82            [12] 2438 	mov	a,dpl
      00078C F2               [24] 2439 	movx	@r0,a
      00078D 08               [12] 2440 	inc	r0
      00078E E5 83            [12] 2441 	mov	a,dph
      000790 F2               [24] 2442 	movx	@r0,a
                                   2443 ;	radio/tdm.c:517: __pdata uint16_t last_link_update = last_t;
      000791 78r6A            [12] 2444 	mov	r0,#_tdm_serial_loop_last_t_1_219
      000793 79r6C            [12] 2445 	mov	r1,#_tdm_serial_loop_last_link_update_1_219
      000795 E2               [24] 2446 	movx	a,@r0
      000796 F3               [24] 2447 	movx	@r1,a
      000797 08               [12] 2448 	inc	r0
      000798 E2               [24] 2449 	movx	a,@r0
      000799 09               [12] 2450 	inc	r1
      00079A F3               [24] 2451 	movx	@r1,a
                                   2452 ;	radio/tdm.c:520: _canary = 42;
      00079B 78 FF            [12] 2453 	mov	r0,#__canary
      00079D 76 2A            [12] 2454 	mov	@r0,#0x2A
      00079F                       2455 00195$:
                                   2456 ;	radio/tdm.c:523: if (_canary != 42) {
      00079F 78 FF            [12] 2457 	mov	r0,#__canary
      0007A1 B6 2A 02         [24] 2458 	cjne	@r0,#0x2A,00345$
      0007A4 80 15            [24] 2459 	sjmp	00102$
      0007A6                       2460 00345$:
                                   2461 ;	radio/tdm.c:524: panic("stack blown\n");
      0007A6 74rAB            [12] 2462 	mov	a,#___str_6
      0007A8 C0 E0            [24] 2463 	push	acc
      0007AA 74s00            [12] 2464 	mov	a,#(___str_6 >> 8)
      0007AC C0 E0            [24] 2465 	push	acc
      0007AE 74 80            [12] 2466 	mov	a,#0x80
      0007B0 C0 E0            [24] 2467 	push	acc
      0007B2 12r00r00         [24] 2468 	lcall	_panic
      0007B5 15 81            [12] 2469 	dec	sp
      0007B7 15 81            [12] 2470 	dec	sp
      0007B9 15 81            [12] 2471 	dec	sp
      0007BB                       2472 00102$:
                                   2473 ;	radio/tdm.c:527: if (pdata_canary != 0x41) {
      0007BB 78r00            [12] 2474 	mov	r0,#_pdata_canary
      0007BD E2               [24] 2475 	movx	a,@r0
      0007BE B4 41 02         [24] 2476 	cjne	a,#0x41,00346$
      0007C1 80 15            [24] 2477 	sjmp	00104$
      0007C3                       2478 00346$:
                                   2479 ;	radio/tdm.c:528: panic("pdata canary changed\n");
      0007C3 74rB8            [12] 2480 	mov	a,#___str_7
      0007C5 C0 E0            [24] 2481 	push	acc
      0007C7 74s00            [12] 2482 	mov	a,#(___str_7 >> 8)
      0007C9 C0 E0            [24] 2483 	push	acc
      0007CB 74 80            [12] 2484 	mov	a,#0x80
      0007CD C0 E0            [24] 2485 	push	acc
      0007CF 12r00r00         [24] 2486 	lcall	_panic
      0007D2 15 81            [12] 2487 	dec	sp
      0007D4 15 81            [12] 2488 	dec	sp
      0007D6 15 81            [12] 2489 	dec	sp
      0007D8                       2490 00104$:
                                   2491 ;	radio/tdm.c:532: at_command();
      0007D8 12r00r00         [24] 2492 	lcall	_at_command
                                   2493 ;	radio/tdm.c:535: if (test_display) {
      0007DB 90r00rFC         [24] 2494 	mov	dptr,#_test_display
      0007DE E0               [24] 2495 	movx	a,@dptr
      0007DF 60 08            [24] 2496 	jz	00106$
                                   2497 ;	radio/tdm.c:536: display_test_output();
      0007E1 12r00rD1         [24] 2498 	lcall	_display_test_output
                                   2499 ;	radio/tdm.c:537: test_display = 0;
      0007E4 90r00rFC         [24] 2500 	mov	dptr,#_test_display
      0007E7 E4               [12] 2501 	clr	a
      0007E8 F0               [24] 2502 	movx	@dptr,a
      0007E9                       2503 00106$:
                                   2504 ;	radio/tdm.c:540: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
      0007E9 30*00 0E         [24] 2505 	jnb	_seen_mavlink,00108$
      0007EC 90r00r00         [24] 2506 	mov	dptr,#_feature_mavlink_framing
      0007EF E0               [24] 2507 	movx	a,@dptr
      0007F0 60 08            [24] 2508 	jz	00108$
      0007F2 20*00 05         [24] 2509 	jb	_at_mode_active,00108$
                                   2510 ;	radio/tdm.c:541: seen_mavlink = false;
      0007F5 C2*00            [12] 2511 	clr	_seen_mavlink
                                   2512 ;	radio/tdm.c:542: MAVLink_report();
      0007F7 12r00r00         [24] 2513 	lcall	_MAVLink_report
      0007FA                       2514 00108$:
                                   2515 ;	radio/tdm.c:546: radio_set_channel(fhop_receive_channel());
      0007FA 12r00r00         [24] 2516 	lcall	_fhop_receive_channel
      0007FD 12r00r00         [24] 2517 	lcall	_radio_set_channel
                                   2518 ;	radio/tdm.c:549: tnow = timer2_tick();
      000800 12r00r00         [24] 2519 	lcall	_timer2_tick
      000803 AA 82            [24] 2520 	mov	r2,dpl
      000805 AB 83            [24] 2521 	mov	r3,dph
                                   2522 ;	radio/tdm.c:552: if (radio_receive_packet(&len, pbuf)) {
      000807 78r00            [12] 2523 	mov	r0,#_radio_receive_packet_PARM_2
      000809 74r00            [12] 2524 	mov	a,#_pbuf
      00080B F2               [24] 2525 	movx	@r0,a
      00080C 08               [12] 2526 	inc	r0
      00080D 74s00            [12] 2527 	mov	a,#(_pbuf >> 8)
      00080F F2               [24] 2528 	movx	@r0,a
      000810 90r00r67         [24] 2529 	mov	dptr,#_tdm_serial_loop_len_1_219
      000813 75 F0 60         [24] 2530 	mov	b,#0x60
      000816 C0 03            [24] 2531 	push	ar3
      000818 C0 02            [24] 2532 	push	ar2
      00081A 12r00r00         [24] 2533 	lcall	_radio_receive_packet
      00081D D0 02            [24] 2534 	pop	ar2
      00081F D0 03            [24] 2535 	pop	ar3
      000821 40 03            [24] 2536 	jc	00351$
      000823 02r09rA5         [24] 2537 	ljmp	00129$
      000826                       2538 00351$:
                                   2539 ;	radio/tdm.c:555: received_packet = true;
      000826 D2*03            [12] 2540 	setb	_received_packet
                                   2541 ;	radio/tdm.c:556: fhop_set_locked(true);
      000828 D2*00            [12] 2542 	setb	_fhop_set_locked_PARM_1
      00082A C0 03            [24] 2543 	push	ar3
      00082C C0 02            [24] 2544 	push	ar2
      00082E 12r00r00         [24] 2545 	lcall	_fhop_set_locked
                                   2546 ;	radio/tdm.c:559: statistics.average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics.average_rssi)/8;
      000831 12r00r00         [24] 2547 	lcall	_radio_last_rssi
      000834 AD 82            [24] 2548 	mov	r5,dpl
      000836 D0 02            [24] 2549 	pop	ar2
      000838 D0 03            [24] 2550 	pop	ar3
      00083A 7C 00            [12] 2551 	mov	r4,#0x00
      00083C 78r00            [12] 2552 	mov	r0,#_statistics
      00083E E2               [24] 2553 	movx	a,@r0
      00083F 90r00r00         [24] 2554 	mov	dptr,#__mulint_PARM_2
      000842 F0               [24] 2555 	movx	@dptr,a
      000843 E4               [12] 2556 	clr	a
      000844 A3               [24] 2557 	inc	dptr
      000845 F0               [24] 2558 	movx	@dptr,a
      000846 90 00 07         [24] 2559 	mov	dptr,#0x0007
      000849 C0 05            [24] 2560 	push	ar5
      00084B C0 04            [24] 2561 	push	ar4
      00084D C0 03            [24] 2562 	push	ar3
      00084F C0 02            [24] 2563 	push	ar2
      000851 12r00r00         [24] 2564 	lcall	__mulint
      000854 AE 82            [24] 2565 	mov	r6,dpl
      000856 AF 83            [24] 2566 	mov	r7,dph
      000858 D0 02            [24] 2567 	pop	ar2
      00085A D0 03            [24] 2568 	pop	ar3
      00085C D0 04            [24] 2569 	pop	ar4
      00085E D0 05            [24] 2570 	pop	ar5
      000860 EE               [12] 2571 	mov	a,r6
      000861 2D               [12] 2572 	add	a,r5
      000862 FE               [12] 2573 	mov	r6,a
      000863 EF               [12] 2574 	mov	a,r7
      000864 3C               [12] 2575 	addc	a,r4
      000865 C4               [12] 2576 	swap	a
      000866 23               [12] 2577 	rl	a
      000867 CE               [12] 2578 	xch	a,r6
      000868 C4               [12] 2579 	swap	a
      000869 23               [12] 2580 	rl	a
      00086A 54 1F            [12] 2581 	anl	a,#0x1F
      00086C 6E               [12] 2582 	xrl	a,r6
      00086D CE               [12] 2583 	xch	a,r6
      00086E 54 1F            [12] 2584 	anl	a,#0x1F
      000870 CE               [12] 2585 	xch	a,r6
      000871 6E               [12] 2586 	xrl	a,r6
      000872 CE               [12] 2587 	xch	a,r6
      000873 78r00            [12] 2588 	mov	r0,#_statistics
      000875 EE               [12] 2589 	mov	a,r6
      000876 F2               [24] 2590 	movx	@r0,a
                                   2591 ;	radio/tdm.c:560: statistics.receive_count++;
      000877 78r02            [12] 2592 	mov	r0,#(_statistics + 0x0002)
      000879 E2               [24] 2593 	movx	a,@r0
      00087A FE               [12] 2594 	mov	r6,a
      00087B 08               [12] 2595 	inc	r0
      00087C E2               [24] 2596 	movx	a,@r0
      00087D FF               [12] 2597 	mov	r7,a
      00087E 0E               [12] 2598 	inc	r6
      00087F BE 00 01         [24] 2599 	cjne	r6,#0x00,00352$
      000882 0F               [12] 2600 	inc	r7
      000883                       2601 00352$:
      000883 78r02            [12] 2602 	mov	r0,#(_statistics + 0x0002)
      000885 EE               [12] 2603 	mov	a,r6
      000886 F2               [24] 2604 	movx	@r0,a
      000887 08               [12] 2605 	inc	r0
      000888 EF               [12] 2606 	mov	a,r7
      000889 F2               [24] 2607 	movx	@r0,a
                                   2608 ;	radio/tdm.c:564: transmit_wait = 0;
      00088A 78r0C            [12] 2609 	mov	r0,#_transmit_wait
      00088C E4               [12] 2610 	clr	a
      00088D F2               [24] 2611 	movx	@r0,a
      00088E 08               [12] 2612 	inc	r0
      00088F F2               [24] 2613 	movx	@r0,a
                                   2614 ;	radio/tdm.c:566: if (len < 2) {
      000890 78r67            [12] 2615 	mov	r0,#_tdm_serial_loop_len_1_219
      000892 E2               [24] 2616 	movx	a,@r0
      000893 B4 02 00         [24] 2617 	cjne	a,#0x02,00353$
      000896                       2618 00353$:
      000896 50 03            [24] 2619 	jnc	00354$
      000898 02r07r9F         [24] 2620 	ljmp	00195$
      00089B                       2621 00354$:
                                   2622 ;	radio/tdm.c:573: memcpy(&trailer, &pbuf[len-sizeof(trailer)], sizeof(trailer));
      00089B 78r67            [12] 2623 	mov	r0,#_tdm_serial_loop_len_1_219
      00089D E2               [24] 2624 	movx	a,@r0
      00089E 24 FE            [12] 2625 	add	a,#0xFE
      0008A0 24r00            [12] 2626 	add	a,#_pbuf
      0008A2 FE               [12] 2627 	mov	r6,a
      0008A3 E4               [12] 2628 	clr	a
      0008A4 34s00            [12] 2629 	addc	a,#(_pbuf >> 8)
      0008A6 FF               [12] 2630 	mov	r7,a
      0008A7 90r00r00         [24] 2631 	mov	dptr,#_memcpy_PARM_2
      0008AA EE               [12] 2632 	mov	a,r6
      0008AB F0               [24] 2633 	movx	@dptr,a
      0008AC EF               [12] 2634 	mov	a,r7
      0008AD A3               [24] 2635 	inc	dptr
      0008AE F0               [24] 2636 	movx	@dptr,a
      0008AF E4               [12] 2637 	clr	a
      0008B0 A3               [24] 2638 	inc	dptr
      0008B1 F0               [24] 2639 	movx	@dptr,a
      0008B2 90r00r00         [24] 2640 	mov	dptr,#_memcpy_PARM_3
      0008B5 74 02            [12] 2641 	mov	a,#0x02
      0008B7 F0               [24] 2642 	movx	@dptr,a
      0008B8 E4               [12] 2643 	clr	a
      0008B9 A3               [24] 2644 	inc	dptr
      0008BA F0               [24] 2645 	movx	@dptr,a
      0008BB 90r00r1D         [24] 2646 	mov	dptr,#_trailer
      0008BE 75 F0 60         [24] 2647 	mov	b,#0x60
      0008C1 C0 03            [24] 2648 	push	ar3
      0008C3 C0 02            [24] 2649 	push	ar2
      0008C5 12r00r00         [24] 2650 	lcall	_memcpy
      0008C8 D0 02            [24] 2651 	pop	ar2
      0008CA D0 03            [24] 2652 	pop	ar3
                                   2653 ;	radio/tdm.c:574: len -= sizeof(trailer);
      0008CC 78r67            [12] 2654 	mov	r0,#_tdm_serial_loop_len_1_219
      0008CE E2               [24] 2655 	movx	a,@r0
      0008CF 14               [12] 2656 	dec	a
      0008D0 14               [12] 2657 	dec	a
      0008D1 F2               [24] 2658 	movx	@r0,a
                                   2659 ;	radio/tdm.c:576: if (trailer.window == 0 && len != 0) {
      0008D2 78r1D            [12] 2660 	mov	r0,#_trailer
      0008D4 E2               [24] 2661 	movx	a,@r0
      0008D5 FE               [12] 2662 	mov	r6,a
      0008D6 08               [12] 2663 	inc	r0
      0008D7 E2               [24] 2664 	movx	a,@r0
      0008D8 54 1F            [12] 2665 	anl	a,#0x1F
      0008DA FF               [12] 2666 	mov	r7,a
      0008DB 4E               [12] 2667 	orl	a,r6
      0008DC 70 41            [24] 2668 	jnz	00125$
      0008DE 78r67            [12] 2669 	mov	r0,#_tdm_serial_loop_len_1_219
      0008E0 E2               [24] 2670 	movx	a,@r0
      0008E1 60 3C            [24] 2671 	jz	00125$
                                   2672 ;	radio/tdm.c:578: if (len == sizeof(struct statistics)) {
      0008E3 78r67            [12] 2673 	mov	r0,#_tdm_serial_loop_len_1_219
      0008E5 E2               [24] 2674 	movx	a,@r0
      0008E6 B4 04 20         [24] 2675 	cjne	a,#0x04,00114$
                                   2676 ;	radio/tdm.c:579: memcpy(&remote_statistics, pbuf, len);
      0008E9 90r00r00         [24] 2677 	mov	dptr,#_memcpy_PARM_2
      0008EC 74r00            [12] 2678 	mov	a,#_pbuf
      0008EE F0               [24] 2679 	movx	@dptr,a
      0008EF 74s00            [12] 2680 	mov	a,#(_pbuf >> 8)
      0008F1 A3               [24] 2681 	inc	dptr
      0008F2 F0               [24] 2682 	movx	@dptr,a
      0008F3 E4               [12] 2683 	clr	a
      0008F4 A3               [24] 2684 	inc	dptr
      0008F5 F0               [24] 2685 	movx	@dptr,a
      0008F6 78r67            [12] 2686 	mov	r0,#_tdm_serial_loop_len_1_219
      0008F8 90r00r00         [24] 2687 	mov	dptr,#_memcpy_PARM_3
      0008FB E2               [24] 2688 	movx	a,@r0
      0008FC F0               [24] 2689 	movx	@dptr,a
      0008FD E4               [12] 2690 	clr	a
      0008FE A3               [24] 2691 	inc	dptr
      0008FF F0               [24] 2692 	movx	@dptr,a
      000900 90r00r00         [24] 2693 	mov	dptr,#_remote_statistics
      000903 75 F0 60         [24] 2694 	mov	b,#0x60
      000906 12r00r00         [24] 2695 	lcall	_memcpy
      000909                       2696 00114$:
                                   2697 ;	radio/tdm.c:583: statistics.receive_count--;
      000909 78r02            [12] 2698 	mov	r0,#(_statistics + 0x0002)
      00090B E2               [24] 2699 	movx	a,@r0
      00090C FE               [12] 2700 	mov	r6,a
      00090D 08               [12] 2701 	inc	r0
      00090E E2               [24] 2702 	movx	a,@r0
      00090F FF               [12] 2703 	mov	r7,a
      000910 1E               [12] 2704 	dec	r6
      000911 BE FF 01         [24] 2705 	cjne	r6,#0xFF,00359$
      000914 1F               [12] 2706 	dec	r7
      000915                       2707 00359$:
      000915 78r02            [12] 2708 	mov	r0,#(_statistics + 0x0002)
      000917 EE               [12] 2709 	mov	a,r6
      000918 F2               [24] 2710 	movx	@r0,a
      000919 08               [12] 2711 	inc	r0
      00091A EF               [12] 2712 	mov	a,r7
      00091B F2               [24] 2713 	movx	@r0,a
      00091C 02r07r9F         [24] 2714 	ljmp	00195$
      00091F                       2715 00125$:
                                   2716 ;	radio/tdm.c:584: } else if (trailer.window != 0) {
      00091F 78r1D            [12] 2717 	mov	r0,#_trailer
      000921 E2               [24] 2718 	movx	a,@r0
      000922 FE               [12] 2719 	mov	r6,a
      000923 08               [12] 2720 	inc	r0
      000924 E2               [24] 2721 	movx	a,@r0
      000925 54 1F            [12] 2722 	anl	a,#0x1F
      000927 FF               [12] 2723 	mov	r7,a
      000928 4E               [12] 2724 	orl	a,r6
      000929 70 03            [24] 2725 	jnz	00360$
      00092B 02r07r9F         [24] 2726 	ljmp	00195$
      00092E                       2727 00360$:
                                   2728 ;	radio/tdm.c:587: sync_tx_windows(len);
      00092E 78r67            [12] 2729 	mov	r0,#_tdm_serial_loop_len_1_219
      000930 E2               [24] 2730 	movx	a,@r0
      000931 F5 82            [12] 2731 	mov	dpl,a
      000933 C0 03            [24] 2732 	push	ar3
      000935 C0 02            [24] 2733 	push	ar2
      000937 12r01r04         [24] 2734 	lcall	_sync_tx_windows
      00093A D0 02            [24] 2735 	pop	ar2
      00093C D0 03            [24] 2736 	pop	ar3
                                   2737 ;	radio/tdm.c:588: last_t = tnow;
      00093E 78r6A            [12] 2738 	mov	r0,#_tdm_serial_loop_last_t_1_219
      000940 EA               [12] 2739 	mov	a,r2
      000941 F2               [24] 2740 	movx	@r0,a
      000942 08               [12] 2741 	inc	r0
      000943 EB               [12] 2742 	mov	a,r3
      000944 F2               [24] 2743 	movx	@r0,a
                                   2744 ;	radio/tdm.c:597: if ((trailer.command == 1 && handle_at_command(len)) 
      000945 78r1E            [12] 2745 	mov	r0,#(_trailer + 0x0001)
      000947 E2               [24] 2746 	movx	a,@r0
      000948 C4               [12] 2747 	swap	a
      000949 03               [12] 2748 	rr	a
      00094A 54 01            [12] 2749 	anl	a,#0x01
      00094C FF               [12] 2750 	mov	r7,a
      00094D BF 01 0A         [24] 2751 	cjne	r7,#0x01,00121$
      000950 78r67            [12] 2752 	mov	r0,#_tdm_serial_loop_len_1_219
      000952 E2               [24] 2753 	movx	a,@r0
      000953 F5 82            [12] 2754 	mov	dpl,a
      000955 12r07r08         [24] 2755 	lcall	_handle_at_command
      000958 40 38            [24] 2756 	jc	00115$
      00095A                       2757 00121$:
                                   2758 ;	radio/tdm.c:599: (len != 0 && trailer.command == 0 &&
      00095A 78r67            [12] 2759 	mov	r0,#_tdm_serial_loop_len_1_219
      00095C E2               [24] 2760 	movx	a,@r0
      00095D 70 03            [24] 2761 	jnz	00364$
      00095F 02r07r9F         [24] 2762 	ljmp	00195$
      000962                       2763 00364$:
      000962 78r1E            [12] 2764 	mov	r0,#(_trailer + 0x0001)
      000964 E2               [24] 2765 	movx	a,@r0
      000965 30 E5 03         [24] 2766 	jnb	acc.5,00365$
      000968 02r07r9F         [24] 2767 	ljmp	00195$
      00096B                       2768 00365$:
                                   2769 ;	radio/tdm.c:600: !packet_is_duplicate(len, pbuf, trailer.resend) &&
      00096B 78r1E            [12] 2770 	mov	r0,#(_trailer + 0x0001)
      00096D E2               [24] 2771 	movx	a,@r0
      00096E 23               [12] 2772 	rl	a
      00096F 54 01            [12] 2773 	anl	a,#0x01
      000971 24 FF            [12] 2774 	add	a,#0xff
      000973 92*00            [24] 2775 	mov	_packet_is_duplicate_PARM_3,c
      000975 90r00r00         [24] 2776 	mov	dptr,#_packet_is_duplicate_PARM_2
      000978 74r00            [12] 2777 	mov	a,#_pbuf
      00097A F0               [24] 2778 	movx	@dptr,a
      00097B 74s00            [12] 2779 	mov	a,#(_pbuf >> 8)
      00097D A3               [24] 2780 	inc	dptr
      00097E F0               [24] 2781 	movx	@dptr,a
      00097F 78r67            [12] 2782 	mov	r0,#_tdm_serial_loop_len_1_219
      000981 E2               [24] 2783 	movx	a,@r0
      000982 F5 82            [12] 2784 	mov	dpl,a
      000984 12r00r00         [24] 2785 	lcall	_packet_is_duplicate
      000987 50 03            [24] 2786 	jnc	00366$
      000989 02r07r9F         [24] 2787 	ljmp	00195$
      00098C                       2788 00366$:
                                   2789 ;	radio/tdm.c:601: !at_mode_active
      00098C 30*00 03         [24] 2790 	jnb	_at_mode_active,00367$
      00098F 02r07r9F         [24] 2791 	ljmp	00195$
      000992                       2792 00367$:
      000992                       2793 00115$:
                                   2794 ;	radio/tdm.c:620: LED_ACTIVITY = LED_ON;
      000992 D2 B6            [12] 2795 	setb	_LED_RED
                                   2796 ;	radio/tdm.c:621: serial_write_buf(pbuf, len);
      000994 78r67            [12] 2797 	mov	r0,#_tdm_serial_loop_len_1_219
      000996 79r00            [12] 2798 	mov	r1,#_serial_write_buf_PARM_2
      000998 E2               [24] 2799 	movx	a,@r0
      000999 F3               [24] 2800 	movx	@r1,a
      00099A 90r00r00         [24] 2801 	mov	dptr,#_pbuf
      00099D 12r00r00         [24] 2802 	lcall	_serial_write_buf
                                   2803 ;	radio/tdm.c:622: LED_ACTIVITY = LED_OFF;
      0009A0 C2 B6            [12] 2804 	clr	_LED_RED
                                   2805 ;	radio/tdm.c:627: continue;
      0009A2 02r07r9F         [24] 2806 	ljmp	00195$
      0009A5                       2807 00129$:
                                   2808 ;	radio/tdm.c:633: tnow = timer2_tick();
      0009A5 12r00r00         [24] 2809 	lcall	_timer2_tick
      0009A8 AA 82            [24] 2810 	mov	r2,dpl
      0009AA AB 83            [24] 2811 	mov	r3,dph
                                   2812 ;	radio/tdm.c:634: tdelta = tnow - last_t;
      0009AC 78r6A            [12] 2813 	mov	r0,#_tdm_serial_loop_last_t_1_219
      0009AE 79r68            [12] 2814 	mov	r1,#_tdm_serial_loop_tdelta_1_219
      0009B0 D3               [12] 2815 	setb	c
      0009B1 E2               [24] 2816 	movx	a,@r0
      0009B2 9A               [12] 2817 	subb	a,r2
      0009B3 F4               [12] 2818 	cpl	a
      0009B4 B3               [12] 2819 	cpl	c
      0009B5 F3               [24] 2820 	movx	@r1,a
      0009B6 B3               [12] 2821 	cpl	c
      0009B7 08               [12] 2822 	inc	r0
      0009B8 E2               [24] 2823 	movx	a,@r0
      0009B9 9B               [12] 2824 	subb	a,r3
      0009BA F4               [12] 2825 	cpl	a
      0009BB 09               [12] 2826 	inc	r1
      0009BC F3               [24] 2827 	movx	@r1,a
                                   2828 ;	radio/tdm.c:635: tdm_state_update(tdelta);
      0009BD 78r68            [12] 2829 	mov	r0,#_tdm_serial_loop_tdelta_1_219
      0009BF E2               [24] 2830 	movx	a,@r0
      0009C0 F5 82            [12] 2831 	mov	dpl,a
      0009C2 08               [12] 2832 	inc	r0
      0009C3 E2               [24] 2833 	movx	a,@r0
      0009C4 F5 83            [12] 2834 	mov	dph,a
      0009C6 C0 03            [24] 2835 	push	ar3
      0009C8 C0 02            [24] 2836 	push	ar2
      0009CA 12r02r66         [24] 2837 	lcall	_tdm_state_update
      0009CD D0 02            [24] 2838 	pop	ar2
      0009CF D0 03            [24] 2839 	pop	ar3
                                   2840 ;	radio/tdm.c:636: last_t = tnow;
      0009D1 78r6A            [12] 2841 	mov	r0,#_tdm_serial_loop_last_t_1_219
      0009D3 EA               [12] 2842 	mov	a,r2
      0009D4 F2               [24] 2843 	movx	@r0,a
      0009D5 08               [12] 2844 	inc	r0
      0009D6 EB               [12] 2845 	mov	a,r3
      0009D7 F2               [24] 2846 	movx	@r0,a
                                   2847 ;	radio/tdm.c:639: if (tnow - last_link_update > 32768) {
      0009D8 78r6C            [12] 2848 	mov	r0,#_tdm_serial_loop_last_link_update_1_219
      0009DA D3               [12] 2849 	setb	c
      0009DB E2               [24] 2850 	movx	a,@r0
      0009DC 9A               [12] 2851 	subb	a,r2
      0009DD F4               [12] 2852 	cpl	a
      0009DE B3               [12] 2853 	cpl	c
      0009DF FC               [12] 2854 	mov	r4,a
      0009E0 B3               [12] 2855 	cpl	c
      0009E1 08               [12] 2856 	inc	r0
      0009E2 E2               [24] 2857 	movx	a,@r0
      0009E3 9B               [12] 2858 	subb	a,r3
      0009E4 F4               [12] 2859 	cpl	a
      0009E5 FD               [12] 2860 	mov	r5,a
      0009E6 7E 00            [12] 2861 	mov	r6,#0x00
      0009E8 7F 00            [12] 2862 	mov	r7,#0x00
      0009EA C3               [12] 2863 	clr	c
      0009EB E4               [12] 2864 	clr	a
      0009EC 9C               [12] 2865 	subb	a,r4
      0009ED 74 80            [12] 2866 	mov	a,#0x80
      0009EF 9D               [12] 2867 	subb	a,r5
      0009F0 E4               [12] 2868 	clr	a
      0009F1 9E               [12] 2869 	subb	a,r6
      0009F2 74 80            [12] 2870 	mov	a,#(0x00 ^ 0x80)
      0009F4 8F F0            [24] 2871 	mov	b,r7
      0009F6 63 F0 80         [24] 2872 	xrl	b,#0x80
      0009F9 95 F0            [12] 2873 	subb	a,b
      0009FB 50 12            [24] 2874 	jnc	00131$
                                   2875 ;	radio/tdm.c:640: link_update();
      0009FD C0 03            [24] 2876 	push	ar3
      0009FF C0 02            [24] 2877 	push	ar2
      000A01 12r05r9A         [24] 2878 	lcall	_link_update
      000A04 D0 02            [24] 2879 	pop	ar2
      000A06 D0 03            [24] 2880 	pop	ar3
                                   2881 ;	radio/tdm.c:641: last_link_update = tnow;
      000A08 78r6C            [12] 2882 	mov	r0,#_tdm_serial_loop_last_link_update_1_219
      000A0A EA               [12] 2883 	mov	a,r2
      000A0B F2               [24] 2884 	movx	@r0,a
      000A0C 08               [12] 2885 	inc	r0
      000A0D EB               [12] 2886 	mov	a,r3
      000A0E F2               [24] 2887 	movx	@r0,a
      000A0F                       2888 00131$:
                                   2889 ;	radio/tdm.c:645: if (lbt_rssi != 0) {
      000A0F 78r16            [12] 2890 	mov	r0,#_lbt_rssi
      000A11 E2               [24] 2891 	movx	a,@r0
      000A12 70 03            [24] 2892 	jnz	00369$
      000A14 02r0Ar94         [24] 2893 	ljmp	00140$
      000A17                       2894 00369$:
                                   2895 ;	radio/tdm.c:647: if (radio_current_rssi() < lbt_rssi) {
      000A17 12r00r00         [24] 2896 	lcall	_radio_current_rssi
      000A1A AF 82            [24] 2897 	mov	r7,dpl
      000A1C 78r16            [12] 2898 	mov	r0,#_lbt_rssi
      000A1E C3               [12] 2899 	clr	c
      000A1F E2               [24] 2900 	movx	a,@r0
      000A20 F5 F0            [12] 2901 	mov	b,a
      000A22 EF               [12] 2902 	mov	a,r7
      000A23 95 F0            [12] 2903 	subb	a,b
      000A25 50 16            [24] 2904 	jnc	00135$
                                   2905 ;	radio/tdm.c:648: lbt_listen_time += tdelta;
      000A27 78r17            [12] 2906 	mov	r0,#_lbt_listen_time
      000A29 79r68            [12] 2907 	mov	r1,#_tdm_serial_loop_tdelta_1_219
      000A2B E3               [24] 2908 	movx	a,@r1
      000A2C C5 F0            [12] 2909 	xch	a,b
      000A2E E2               [24] 2910 	movx	a,@r0
      000A2F 25 F0            [12] 2911 	add	a,b
      000A31 F2               [24] 2912 	movx	@r0,a
      000A32 09               [12] 2913 	inc	r1
      000A33 E3               [24] 2914 	movx	a,@r1
      000A34 C5 F0            [12] 2915 	xch	a,b
      000A36 08               [12] 2916 	inc	r0
      000A37 E2               [24] 2917 	movx	a,@r0
      000A38 35 F0            [12] 2918 	addc	a,b
      000A3A F2               [24] 2919 	movx	@r0,a
      000A3B 80 36            [24] 2920 	sjmp	00136$
      000A3D                       2921 00135$:
                                   2922 ;	radio/tdm.c:650: lbt_listen_time = 0;
      000A3D 78r17            [12] 2923 	mov	r0,#_lbt_listen_time
      000A3F E4               [12] 2924 	clr	a
      000A40 F2               [24] 2925 	movx	@r0,a
      000A41 08               [12] 2926 	inc	r0
      000A42 F2               [24] 2927 	movx	@r0,a
                                   2928 ;	radio/tdm.c:651: if (lbt_rand == 0) {
      000A43 78r1B            [12] 2929 	mov	r0,#_lbt_rand
      000A45 E2               [24] 2930 	movx	a,@r0
      000A46 F5 F0            [12] 2931 	mov	b,a
      000A48 08               [12] 2932 	inc	r0
      000A49 E2               [24] 2933 	movx	a,@r0
      000A4A 45 F0            [12] 2934 	orl	a,b
      000A4C 70 25            [24] 2935 	jnz	00136$
                                   2936 ;	radio/tdm.c:652: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
      000A4E 12r00r00         [24] 2937 	lcall	_rand
      000A51 AE 82            [24] 2938 	mov	r6,dpl
      000A53 AF 83            [24] 2939 	mov	r7,dph
      000A55 78r19            [12] 2940 	mov	r0,#_lbt_min_time
      000A57 90r00r00         [24] 2941 	mov	dptr,#__moduint_PARM_2
      000A5A E2               [24] 2942 	movx	a,@r0
      000A5B F0               [24] 2943 	movx	@dptr,a
      000A5C 08               [12] 2944 	inc	r0
      000A5D E2               [24] 2945 	movx	a,@r0
      000A5E A3               [24] 2946 	inc	dptr
      000A5F F0               [24] 2947 	movx	@dptr,a
      000A60 8E 82            [24] 2948 	mov	dpl,r6
      000A62 8F 83            [24] 2949 	mov	dph,r7
      000A64 12r00r00         [24] 2950 	lcall	__moduint
      000A67 E5 82            [12] 2951 	mov	a,dpl
      000A69 85 83 F0         [24] 2952 	mov	b,dph
      000A6C 78r1B            [12] 2953 	mov	r0,#_lbt_rand
      000A6E F2               [24] 2954 	movx	@r0,a
      000A6F 08               [12] 2955 	inc	r0
      000A70 E5 F0            [12] 2956 	mov	a,b
      000A72 F2               [24] 2957 	movx	@r0,a
      000A73                       2958 00136$:
                                   2959 ;	radio/tdm.c:655: if (lbt_listen_time < lbt_min_time + lbt_rand) {
      000A73 78r19            [12] 2960 	mov	r0,#_lbt_min_time
      000A75 79r1B            [12] 2961 	mov	r1,#_lbt_rand
      000A77 E3               [24] 2962 	movx	a,@r1
      000A78 C5 F0            [12] 2963 	xch	a,b
      000A7A E2               [24] 2964 	movx	a,@r0
      000A7B 25 F0            [12] 2965 	add	a,b
      000A7D FE               [12] 2966 	mov	r6,a
      000A7E 09               [12] 2967 	inc	r1
      000A7F E3               [24] 2968 	movx	a,@r1
      000A80 C5 F0            [12] 2969 	xch	a,b
      000A82 08               [12] 2970 	inc	r0
      000A83 E2               [24] 2971 	movx	a,@r0
      000A84 35 F0            [12] 2972 	addc	a,b
      000A86 FF               [12] 2973 	mov	r7,a
      000A87 78r17            [12] 2974 	mov	r0,#_lbt_listen_time
      000A89 C3               [12] 2975 	clr	c
      000A8A E2               [24] 2976 	movx	a,@r0
      000A8B 9E               [12] 2977 	subb	a,r6
      000A8C 08               [12] 2978 	inc	r0
      000A8D E2               [24] 2979 	movx	a,@r0
      000A8E 9F               [12] 2980 	subb	a,r7
      000A8F 50 03            [24] 2981 	jnc	00372$
      000A91 02r07r9F         [24] 2982 	ljmp	00195$
      000A94                       2983 00372$:
                                   2984 ;	radio/tdm.c:657: continue;
      000A94                       2985 00140$:
                                   2986 ;	radio/tdm.c:665: if (tdm_state != TDM_TRANSMIT &&
      000A94 78r00            [12] 2987 	mov	r0,#_tdm_state
      000A96 E2               [24] 2988 	movx	a,@r0
      000A97 60 11            [24] 2989 	jz	00142$
                                   2990 ;	radio/tdm.c:666: !(bonus_transmit && tdm_state == TDM_RECEIVE)) {
      000A99 20*00 03         [24] 2991 	jb	_bonus_transmit,00374$
      000A9C 02r07r9F         [24] 2992 	ljmp	00195$
      000A9F                       2993 00374$:
      000A9F 78r00            [12] 2994 	mov	r0,#_tdm_state
      000AA1 E2               [24] 2995 	movx	a,@r0
      000AA2 B4 02 02         [24] 2996 	cjne	a,#0x02,00375$
      000AA5 80 03            [24] 2997 	sjmp	00376$
      000AA7                       2998 00375$:
      000AA7 02r07r9F         [24] 2999 	ljmp	00195$
      000AAA                       3000 00376$:
                                   3001 ;	radio/tdm.c:668: continue;
      000AAA                       3002 00142$:
                                   3003 ;	radio/tdm.c:676: if (transmit_yield != 0) {
      000AAA 30*01 03         [24] 3004 	jnb	_transmit_yield,00377$
      000AAD 02r07r9F         [24] 3005 	ljmp	00195$
      000AB0                       3006 00377$:
                                   3007 ;	radio/tdm.c:681: if (transmit_wait != 0) {
      000AB0 78r0C            [12] 3008 	mov	r0,#_transmit_wait
      000AB2 E2               [24] 3009 	movx	a,@r0
      000AB3 F5 F0            [12] 3010 	mov	b,a
      000AB5 08               [12] 3011 	inc	r0
      000AB6 E2               [24] 3012 	movx	a,@r0
      000AB7 45 F0            [12] 3013 	orl	a,b
      000AB9 60 03            [24] 3014 	jz	00378$
      000ABB 02r07r9F         [24] 3015 	ljmp	00195$
      000ABE                       3016 00378$:
                                   3017 ;	radio/tdm.c:686: if (!received_packet &&
      000ABE 20*03 05         [24] 3018 	jb	_received_packet,00152$
                                   3019 ;	radio/tdm.c:687: radio_preamble_detected() ||
      000AC1 12r00r00         [24] 3020 	lcall	_radio_preamble_detected
      000AC4 40 05            [24] 3021 	jc	00149$
      000AC6                       3022 00152$:
                                   3023 ;	radio/tdm.c:688: radio_receive_in_progress()) {
      000AC6 12r00r00         [24] 3024 	lcall	_radio_receive_in_progress
      000AC9 50 11            [24] 3025 	jnc	00150$
      000ACB                       3026 00149$:
                                   3027 ;	radio/tdm.c:691: transmit_wait = packet_latency;
      000ACB 78r08            [12] 3028 	mov	r0,#_packet_latency
      000ACD E2               [24] 3029 	movx	a,@r0
      000ACE FE               [12] 3030 	mov	r6,a
      000ACF 08               [12] 3031 	inc	r0
      000AD0 E2               [24] 3032 	movx	a,@r0
      000AD1 FF               [12] 3033 	mov	r7,a
      000AD2 78r0C            [12] 3034 	mov	r0,#_transmit_wait
      000AD4 EE               [12] 3035 	mov	a,r6
      000AD5 F2               [24] 3036 	movx	@r0,a
      000AD6 08               [12] 3037 	inc	r0
      000AD7 EF               [12] 3038 	mov	a,r7
      000AD8 F2               [24] 3039 	movx	@r0,a
                                   3040 ;	radio/tdm.c:692: continue;
      000AD9 02r07r9F         [24] 3041 	ljmp	00195$
      000ADC                       3042 00150$:
                                   3043 ;	radio/tdm.c:698: statistics.average_noise = (radio_current_rssi() + 3*(uint16_t)statistics.average_noise)/4;
      000ADC 12r00r00         [24] 3044 	lcall	_radio_current_rssi
      000ADF AF 82            [24] 3045 	mov	r7,dpl
      000AE1 7E 00            [12] 3046 	mov	r6,#0x00
      000AE3 78r01            [12] 3047 	mov	r0,#(_statistics + 0x0001)
      000AE5 E2               [24] 3048 	movx	a,@r0
      000AE6 90r00r00         [24] 3049 	mov	dptr,#__mulint_PARM_2
      000AE9 F0               [24] 3050 	movx	@dptr,a
      000AEA E4               [12] 3051 	clr	a
      000AEB A3               [24] 3052 	inc	dptr
      000AEC F0               [24] 3053 	movx	@dptr,a
      000AED 90 00 03         [24] 3054 	mov	dptr,#0x0003
      000AF0 C0 07            [24] 3055 	push	ar7
      000AF2 C0 06            [24] 3056 	push	ar6
      000AF4 12r00r00         [24] 3057 	lcall	__mulint
      000AF7 AC 82            [24] 3058 	mov	r4,dpl
      000AF9 AD 83            [24] 3059 	mov	r5,dph
      000AFB D0 06            [24] 3060 	pop	ar6
      000AFD D0 07            [24] 3061 	pop	ar7
      000AFF EC               [12] 3062 	mov	a,r4
      000B00 2F               [12] 3063 	add	a,r7
      000B01 FC               [12] 3064 	mov	r4,a
      000B02 ED               [12] 3065 	mov	a,r5
      000B03 3E               [12] 3066 	addc	a,r6
      000B04 C3               [12] 3067 	clr	c
      000B05 13               [12] 3068 	rrc	a
      000B06 CC               [12] 3069 	xch	a,r4
      000B07 13               [12] 3070 	rrc	a
      000B08 CC               [12] 3071 	xch	a,r4
      000B09 C3               [12] 3072 	clr	c
      000B0A 13               [12] 3073 	rrc	a
      000B0B CC               [12] 3074 	xch	a,r4
      000B0C 13               [12] 3075 	rrc	a
      000B0D CC               [12] 3076 	xch	a,r4
      000B0E FD               [12] 3077 	mov	r5,a
      000B0F 78r01            [12] 3078 	mov	r0,#(_statistics + 0x0001)
      000B11 EC               [12] 3079 	mov	a,r4
      000B12 F2               [24] 3080 	movx	@r0,a
                                   3081 ;	radio/tdm.c:700: if (duty_cycle_wait) {
      000B13 30*04 03         [24] 3082 	jnb	_duty_cycle_wait,00382$
      000B16 02r07r9F         [24] 3083 	ljmp	00195$
      000B19                       3084 00382$:
                                   3085 ;	radio/tdm.c:707: if (tdm_state_remaining < packet_latency) {
      000B19 78r01            [12] 3086 	mov	r0,#_tdm_state_remaining
      000B1B 79r08            [12] 3087 	mov	r1,#_packet_latency
      000B1D C3               [12] 3088 	clr	c
      000B1E E3               [24] 3089 	movx	a,@r1
      000B1F F5 F0            [12] 3090 	mov	b,a
      000B21 E2               [24] 3091 	movx	a,@r0
      000B22 95 F0            [12] 3092 	subb	a,b
      000B24 09               [12] 3093 	inc	r1
      000B25 E3               [24] 3094 	movx	a,@r1
      000B26 F5 F0            [12] 3095 	mov	b,a
      000B28 08               [12] 3096 	inc	r0
      000B29 E2               [24] 3097 	movx	a,@r0
      000B2A 95 F0            [12] 3098 	subb	a,b
      000B2C 50 03            [24] 3099 	jnc	00383$
      000B2E 02r07r9F         [24] 3100 	ljmp	00195$
      000B31                       3101 00383$:
                                   3102 ;	radio/tdm.c:711: max_xmit = (tdm_state_remaining - packet_latency) / ticks_per_byte;
      000B31 78r01            [12] 3103 	mov	r0,#_tdm_state_remaining
      000B33 79r08            [12] 3104 	mov	r1,#_packet_latency
      000B35 E3               [24] 3105 	movx	a,@r1
      000B36 F5 F0            [12] 3106 	mov	b,a
      000B38 C3               [12] 3107 	clr	c
      000B39 E2               [24] 3108 	movx	a,@r0
      000B3A 95 F0            [12] 3109 	subb	a,b
      000B3C FE               [12] 3110 	mov	r6,a
      000B3D 09               [12] 3111 	inc	r1
      000B3E E3               [24] 3112 	movx	a,@r1
      000B3F F5 F0            [12] 3113 	mov	b,a
      000B41 08               [12] 3114 	inc	r0
      000B42 E2               [24] 3115 	movx	a,@r0
      000B43 95 F0            [12] 3116 	subb	a,b
      000B45 FF               [12] 3117 	mov	r7,a
      000B46 78r0A            [12] 3118 	mov	r0,#_ticks_per_byte
      000B48 90r00r00         [24] 3119 	mov	dptr,#__divuint_PARM_2
      000B4B E2               [24] 3120 	movx	a,@r0
      000B4C F0               [24] 3121 	movx	@dptr,a
      000B4D 08               [12] 3122 	inc	r0
      000B4E E2               [24] 3123 	movx	a,@r0
      000B4F A3               [24] 3124 	inc	dptr
      000B50 F0               [24] 3125 	movx	@dptr,a
      000B51 8E 82            [24] 3126 	mov	dpl,r6
      000B53 8F 83            [24] 3127 	mov	dph,r7
      000B55 12r00r00         [24] 3128 	lcall	__divuint
      000B58 AE 82            [24] 3129 	mov	r6,dpl
      000B5A AF 83            [24] 3130 	mov	r7,dph
                                   3131 ;	radio/tdm.c:712: if (max_xmit < PACKET_OVERHEAD) {
      000B5C BE 12 00         [24] 3132 	cjne	r6,#0x12,00384$
      000B5F                       3133 00384$:
      000B5F 50 03            [24] 3134 	jnc	00385$
      000B61 02r07r9F         [24] 3135 	ljmp	00195$
      000B64                       3136 00385$:
                                   3137 ;	radio/tdm.c:717: max_xmit -= sizeof(trailer)+1;
      000B64 1E               [12] 3138 	dec	r6
      000B65 1E               [12] 3139 	dec	r6
      000B66 1E               [12] 3140 	dec	r6
                                   3141 ;	radio/tdm.c:731: if (max_xmit > max_data_packet_length) {
      000B67 78r05            [12] 3142 	mov	r0,#_max_data_packet_length
      000B69 C3               [12] 3143 	clr	c
      000B6A E2               [24] 3144 	movx	a,@r0
      000B6B 9E               [12] 3145 	subb	a,r6
      000B6C 50 04            [24] 3146 	jnc	00160$
                                   3147 ;	radio/tdm.c:732: max_xmit = max_data_packet_length;
      000B6E 78r05            [12] 3148 	mov	r0,#_max_data_packet_length
      000B70 E2               [24] 3149 	movx	a,@r0
      000B71 FE               [12] 3150 	mov	r6,a
      000B72                       3151 00160$:
                                   3152 ;	radio/tdm.c:737: pins_user_check();
      000B72 C0 06            [24] 3153 	push	ar6
      000B74 12r00r00         [24] 3154 	lcall	_pins_user_check
      000B77 D0 06            [24] 3155 	pop	ar6
                                   3156 ;	radio/tdm.c:741: if (send_at_command && 
      000B79 30*06 57         [24] 3157 	jnb	_send_at_command,00165$
                                   3158 ;	radio/tdm.c:742: max_xmit >= strlen(remote_at_cmd)) {
      000B7C 90r00r1F         [24] 3159 	mov	dptr,#_remote_at_cmd
      000B7F 75 F0 60         [24] 3160 	mov	b,#0x60
      000B82 C0 06            [24] 3161 	push	ar6
      000B84 12r00r00         [24] 3162 	lcall	_strlen
      000B87 AD 82            [24] 3163 	mov	r5,dpl
      000B89 AF 83            [24] 3164 	mov	r7,dph
      000B8B D0 06            [24] 3165 	pop	ar6
      000B8D 8E 03            [24] 3166 	mov	ar3,r6
      000B8F 7C 00            [12] 3167 	mov	r4,#0x00
      000B91 C3               [12] 3168 	clr	c
      000B92 EB               [12] 3169 	mov	a,r3
      000B93 9D               [12] 3170 	subb	a,r5
      000B94 EC               [12] 3171 	mov	a,r4
      000B95 9F               [12] 3172 	subb	a,r7
      000B96 40 3B            [24] 3173 	jc	00165$
                                   3174 ;	radio/tdm.c:744: len = strlen(remote_at_cmd);
      000B98 90r00r1F         [24] 3175 	mov	dptr,#_remote_at_cmd
      000B9B 75 F0 60         [24] 3176 	mov	b,#0x60
      000B9E C0 06            [24] 3177 	push	ar6
      000BA0 12r00r00         [24] 3178 	lcall	_strlen
      000BA3 AD 82            [24] 3179 	mov	r5,dpl
      000BA5 78r67            [12] 3180 	mov	r0,#_tdm_serial_loop_len_1_219
      000BA7 ED               [12] 3181 	mov	a,r5
      000BA8 F2               [24] 3182 	movx	@r0,a
                                   3183 ;	radio/tdm.c:745: memcpy(pbuf, remote_at_cmd, len);
      000BA9 90r00r00         [24] 3184 	mov	dptr,#_memcpy_PARM_2
      000BAC 74r1F            [12] 3185 	mov	a,#_remote_at_cmd
      000BAE F0               [24] 3186 	movx	@dptr,a
      000BAF E4               [12] 3187 	clr	a
      000BB0 A3               [24] 3188 	inc	dptr
      000BB1 F0               [24] 3189 	movx	@dptr,a
      000BB2 74 60            [12] 3190 	mov	a,#0x60
      000BB4 A3               [24] 3191 	inc	dptr
      000BB5 F0               [24] 3192 	movx	@dptr,a
      000BB6 90r00r00         [24] 3193 	mov	dptr,#_memcpy_PARM_3
      000BB9 ED               [12] 3194 	mov	a,r5
      000BBA F0               [24] 3195 	movx	@dptr,a
      000BBB E4               [12] 3196 	clr	a
      000BBC A3               [24] 3197 	inc	dptr
      000BBD F0               [24] 3198 	movx	@dptr,a
      000BBE 90r00r00         [24] 3199 	mov	dptr,#_pbuf
      000BC1 75 F0 00         [24] 3200 	mov	b,#0x00
      000BC4 12r00r00         [24] 3201 	lcall	_memcpy
      000BC7 D0 06            [24] 3202 	pop	ar6
                                   3203 ;	radio/tdm.c:746: trailer.command = 1;
      000BC9 78r1E            [12] 3204 	mov	r0,#(_trailer + 0x0001)
      000BCB E2               [24] 3205 	movx	a,@r0
      000BCC 44 20            [12] 3206 	orl	a,#0x20
      000BCE F2               [24] 3207 	movx	@r0,a
                                   3208 ;	radio/tdm.c:747: send_at_command = false;
      000BCF C2*06            [12] 3209 	clr	_send_at_command
      000BD1 80 37            [24] 3210 	sjmp	00166$
      000BD3                       3211 00165$:
                                   3212 ;	radio/tdm.c:750: len = packet_get_next(max_xmit, pbuf);
      000BD3 90r00r00         [24] 3213 	mov	dptr,#_packet_get_next_PARM_2
      000BD6 74r00            [12] 3214 	mov	a,#_pbuf
      000BD8 F0               [24] 3215 	movx	@dptr,a
      000BD9 74s00            [12] 3216 	mov	a,#(_pbuf >> 8)
      000BDB A3               [24] 3217 	inc	dptr
      000BDC F0               [24] 3218 	movx	@dptr,a
      000BDD 8E 82            [24] 3219 	mov	dpl,r6
      000BDF C0 06            [24] 3220 	push	ar6
      000BE1 12r00r00         [24] 3221 	lcall	_packet_get_next
      000BE4 AF 82            [24] 3222 	mov	r7,dpl
      000BE6 D0 06            [24] 3223 	pop	ar6
      000BE8 78r67            [12] 3224 	mov	r0,#_tdm_serial_loop_len_1_219
      000BEA EF               [12] 3225 	mov	a,r7
      000BEB F2               [24] 3226 	movx	@r0,a
                                   3227 ;	radio/tdm.c:752: if (len > 0) {
      000BEC EF               [12] 3228 	mov	a,r7
      000BED 60 15            [24] 3229 	jz	00162$
                                   3230 ;	radio/tdm.c:753: trailer.command = packet_is_injected();
      000BEF C0 06            [24] 3231 	push	ar6
      000BF1 12r00r00         [24] 3232 	lcall	_packet_is_injected
      000BF4 D0 06            [24] 3233 	pop	ar6
      000BF6 92*09            [24] 3234 	mov  _tdm_serial_loop_sloc0_1_0,c
      000BF8 E4               [12] 3235 	clr	a
      000BF9 33               [12] 3236 	rlc	a
      000BFA FF               [12] 3237 	mov	r7,a
      000BFB 78r1E            [12] 3238 	mov	r0,#(_trailer + 0x0001)
      000BFD 13               [12] 3239 	rrc	a
      000BFE E2               [24] 3240 	movx	a,@r0
      000BFF 92 E5            [24] 3241 	mov	acc.5,c
      000C01 F2               [24] 3242 	movx	@r0,a
      000C02 80 06            [24] 3243 	sjmp	00166$
      000C04                       3244 00162$:
                                   3245 ;	radio/tdm.c:755: trailer.command = 0;
      000C04 78r1E            [12] 3246 	mov	r0,#(_trailer + 0x0001)
      000C06 E2               [24] 3247 	movx	a,@r0
      000C07 54 DF            [12] 3248 	anl	a,#0xDF
      000C09 F2               [24] 3249 	movx	@r0,a
      000C0A                       3250 00166$:
                                   3251 ;	radio/tdm.c:762: if (len > max_data_packet_length) {
      000C0A 78r67            [12] 3252 	mov	r0,#_tdm_serial_loop_len_1_219
      000C0C 79r05            [12] 3253 	mov	r1,#_max_data_packet_length
      000C0E C3               [12] 3254 	clr	c
      000C0F E2               [24] 3255 	movx	a,@r0
      000C10 F5 F0            [12] 3256 	mov	b,a
      000C12 E3               [24] 3257 	movx	a,@r1
      000C13 95 F0            [12] 3258 	subb	a,b
      000C15 50 19            [24] 3259 	jnc	00169$
                                   3260 ;	radio/tdm.c:763: panic("oversized tdm packet");
      000C17 C0 06            [24] 3261 	push	ar6
      000C19 74rCE            [12] 3262 	mov	a,#___str_8
      000C1B C0 E0            [24] 3263 	push	acc
      000C1D 74s00            [12] 3264 	mov	a,#(___str_8 >> 8)
      000C1F C0 E0            [24] 3265 	push	acc
      000C21 74 80            [12] 3266 	mov	a,#0x80
      000C23 C0 E0            [24] 3267 	push	acc
      000C25 12r00r00         [24] 3268 	lcall	_panic
      000C28 15 81            [12] 3269 	dec	sp
      000C2A 15 81            [12] 3270 	dec	sp
      000C2C 15 81            [12] 3271 	dec	sp
      000C2E D0 06            [24] 3272 	pop	ar6
      000C30                       3273 00169$:
                                   3274 ;	radio/tdm.c:766: trailer.bonus = (tdm_state == TDM_RECEIVE);
      000C30 78r00            [12] 3275 	mov	r0,#_tdm_state
      000C32 E2               [24] 3276 	movx	a,@r0
      000C33 B4 02 03         [24] 3277 	cjne	a,#0x02,00391$
      000C36 D3               [12] 3278 	setb	c
      000C37 80 01            [24] 3279 	sjmp	00392$
      000C39                       3280 00391$:
      000C39 C3               [12] 3281 	clr	c
      000C3A                       3282 00392$:
      000C3A 92*09            [24] 3283 	mov  _tdm_serial_loop_sloc0_1_0,c
      000C3C E4               [12] 3284 	clr	a
      000C3D 33               [12] 3285 	rlc	a
      000C3E 78r1E            [12] 3286 	mov	r0,#(_trailer + 0x0001)
      000C40 13               [12] 3287 	rrc	a
      000C41 E2               [24] 3288 	movx	a,@r0
      000C42 92 E6            [24] 3289 	mov	acc.6,c
      000C44 F2               [24] 3290 	movx	@r0,a
                                   3291 ;	radio/tdm.c:767: trailer.resend = packet_is_resend();
      000C45 C0 06            [24] 3292 	push	ar6
      000C47 12r00r00         [24] 3293 	lcall	_packet_is_resend
      000C4A D0 06            [24] 3294 	pop	ar6
      000C4C 92*09            [24] 3295 	mov  _tdm_serial_loop_sloc0_1_0,c
      000C4E E4               [12] 3296 	clr	a
      000C4F 33               [12] 3297 	rlc	a
      000C50 FF               [12] 3298 	mov	r7,a
      000C51 78r1E            [12] 3299 	mov	r0,#(_trailer + 0x0001)
      000C53 13               [12] 3300 	rrc	a
      000C54 E2               [24] 3301 	movx	a,@r0
      000C55 92 E7            [24] 3302 	mov	acc.7,c
      000C57 F2               [24] 3303 	movx	@r0,a
                                   3304 ;	radio/tdm.c:769: if (tdm_state == TDM_TRANSMIT &&
      000C58 78r00            [12] 3305 	mov	r0,#_tdm_state
      000C5A E2               [24] 3306 	movx	a,@r0
      000C5B 70 44            [24] 3307 	jnz	00171$
                                   3308 ;	radio/tdm.c:770: len == 0 &&
      000C5D 78r67            [12] 3309 	mov	r0,#_tdm_serial_loop_len_1_219
      000C5F E2               [24] 3310 	movx	a,@r0
      000C60 70 3F            [24] 3311 	jnz	00171$
                                   3312 ;	radio/tdm.c:771: send_statistics &&
      000C62 30*05 3C         [24] 3313 	jnb	_send_statistics,00171$
                                   3314 ;	radio/tdm.c:772: max_xmit >= sizeof(statistics)) {
      000C65 BE 04 00         [24] 3315 	cjne	r6,#0x04,00396$
      000C68                       3316 00396$:
      000C68 40 37            [24] 3317 	jc	00171$
                                   3318 ;	radio/tdm.c:774: send_statistics = 0;
      000C6A C2*05            [12] 3319 	clr	_send_statistics
                                   3320 ;	radio/tdm.c:775: memcpy(pbuf, &statistics, sizeof(statistics));
      000C6C 90r00r00         [24] 3321 	mov	dptr,#_memcpy_PARM_2
      000C6F 74r00            [12] 3322 	mov	a,#_statistics
      000C71 F0               [24] 3323 	movx	@dptr,a
      000C72 E4               [12] 3324 	clr	a
      000C73 A3               [24] 3325 	inc	dptr
      000C74 F0               [24] 3326 	movx	@dptr,a
      000C75 74 60            [12] 3327 	mov	a,#0x60
      000C77 A3               [24] 3328 	inc	dptr
      000C78 F0               [24] 3329 	movx	@dptr,a
      000C79 90r00r00         [24] 3330 	mov	dptr,#_memcpy_PARM_3
      000C7C 74 04            [12] 3331 	mov	a,#0x04
      000C7E F0               [24] 3332 	movx	@dptr,a
      000C7F E4               [12] 3333 	clr	a
      000C80 A3               [24] 3334 	inc	dptr
      000C81 F0               [24] 3335 	movx	@dptr,a
      000C82 90r00r00         [24] 3336 	mov	dptr,#_pbuf
      000C85 75 F0 00         [24] 3337 	mov	b,#0x00
      000C88 12r00r00         [24] 3338 	lcall	_memcpy
                                   3339 ;	radio/tdm.c:776: len = sizeof(statistics);
      000C8B 78r67            [12] 3340 	mov	r0,#_tdm_serial_loop_len_1_219
      000C8D 74 04            [12] 3341 	mov	a,#0x04
      000C8F F2               [24] 3342 	movx	@r0,a
                                   3343 ;	radio/tdm.c:779: trailer.window = 0;
      000C90 78r1D            [12] 3344 	mov	r0,#_trailer
      000C92 E4               [12] 3345 	clr	a
      000C93 F2               [24] 3346 	movx	@r0,a
      000C94 08               [12] 3347 	inc	r0
      000C95 E2               [24] 3348 	movx	a,@r0
      000C96 54 E0            [12] 3349 	anl	a,#0xE0
      000C98 F2               [24] 3350 	movx	@r0,a
                                   3351 ;	radio/tdm.c:780: trailer.resend = 0;
      000C99 78r1E            [12] 3352 	mov	r0,#(_trailer + 0x0001)
      000C9B E2               [24] 3353 	movx	a,@r0
      000C9C 54 7F            [12] 3354 	anl	a,#0x7F
      000C9E F2               [24] 3355 	movx	@r0,a
      000C9F 80 28            [24] 3356 	sjmp	00172$
      000CA1                       3357 00171$:
                                   3358 ;	radio/tdm.c:794: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));
      000CA1 78r67            [12] 3359 	mov	r0,#_tdm_serial_loop_len_1_219
      000CA3 E2               [24] 3360 	movx	a,@r0
      000CA4 24 02            [12] 3361 	add	a,#0x02
      000CA6 F5 82            [12] 3362 	mov	dpl,a
      000CA8 12r00rDD         [24] 3363 	lcall	_flight_time_estimate
      000CAB AE 82            [24] 3364 	mov	r6,dpl
      000CAD AF 83            [24] 3365 	mov	r7,dph
      000CAF 78r01            [12] 3366 	mov	r0,#_tdm_state_remaining
      000CB1 E2               [24] 3367 	movx	a,@r0
      000CB2 C3               [12] 3368 	clr	c
      000CB3 9E               [12] 3369 	subb	a,r6
      000CB4 FE               [12] 3370 	mov	r6,a
      000CB5 08               [12] 3371 	inc	r0
      000CB6 E2               [24] 3372 	movx	a,@r0
      000CB7 9F               [12] 3373 	subb	a,r7
      000CB8 FF               [12] 3374 	mov	r7,a
      000CB9 78r1D            [12] 3375 	mov	r0,#_trailer
      000CBB EE               [12] 3376 	mov	a,r6
      000CBC F2               [24] 3377 	movx	@r0,a
      000CBD 08               [12] 3378 	inc	r0
      000CBE EF               [12] 3379 	mov	a,r7
      000CBF 54 1F            [12] 3380 	anl	a,#0x1F
      000CC1 F5 F0            [12] 3381 	mov	b,a
      000CC3 E2               [24] 3382 	movx	a,@r0
      000CC4 54 E0            [12] 3383 	anl	a,#0xE0
      000CC6 45 F0            [12] 3384 	orl	a,b
      000CC8 F2               [24] 3385 	movx	@r0,a
      000CC9                       3386 00172$:
                                   3387 ;	radio/tdm.c:799: radio_set_channel(fhop_transmit_channel());
      000CC9 12r00r00         [24] 3388 	lcall	_fhop_transmit_channel
      000CCC 12r00r00         [24] 3389 	lcall	_radio_set_channel
                                   3390 ;	radio/tdm.c:801: memcpy(&pbuf[len], &trailer, sizeof(trailer));
      000CCF 78r67            [12] 3391 	mov	r0,#_tdm_serial_loop_len_1_219
      000CD1 E2               [24] 3392 	movx	a,@r0
      000CD2 24r00            [12] 3393 	add	a,#_pbuf
      000CD4 FE               [12] 3394 	mov	r6,a
      000CD5 E4               [12] 3395 	clr	a
      000CD6 34s00            [12] 3396 	addc	a,#(_pbuf >> 8)
      000CD8 FF               [12] 3397 	mov	r7,a
      000CD9 7D 00            [12] 3398 	mov	r5,#0x00
      000CDB 90r00r00         [24] 3399 	mov	dptr,#_memcpy_PARM_2
      000CDE 74r1D            [12] 3400 	mov	a,#_trailer
      000CE0 F0               [24] 3401 	movx	@dptr,a
      000CE1 E4               [12] 3402 	clr	a
      000CE2 A3               [24] 3403 	inc	dptr
      000CE3 F0               [24] 3404 	movx	@dptr,a
      000CE4 74 60            [12] 3405 	mov	a,#0x60
      000CE6 A3               [24] 3406 	inc	dptr
      000CE7 F0               [24] 3407 	movx	@dptr,a
      000CE8 90r00r00         [24] 3408 	mov	dptr,#_memcpy_PARM_3
      000CEB 74 02            [12] 3409 	mov	a,#0x02
      000CED F0               [24] 3410 	movx	@dptr,a
      000CEE E4               [12] 3411 	clr	a
      000CEF A3               [24] 3412 	inc	dptr
      000CF0 F0               [24] 3413 	movx	@dptr,a
      000CF1 8E 82            [24] 3414 	mov	dpl,r6
      000CF3 8F 83            [24] 3415 	mov	dph,r7
      000CF5 8D F0            [24] 3416 	mov	b,r5
      000CF7 12r00r00         [24] 3417 	lcall	_memcpy
                                   3418 ;	radio/tdm.c:803: if (len != 0 && trailer.window != 0) {
      000CFA 78r67            [12] 3419 	mov	r0,#_tdm_serial_loop_len_1_219
      000CFC E2               [24] 3420 	movx	a,@r0
      000CFD 60 0E            [24] 3421 	jz	00177$
      000CFF 78r1D            [12] 3422 	mov	r0,#_trailer
      000D01 E2               [24] 3423 	movx	a,@r0
      000D02 FE               [12] 3424 	mov	r6,a
      000D03 08               [12] 3425 	inc	r0
      000D04 E2               [24] 3426 	movx	a,@r0
      000D05 54 1F            [12] 3427 	anl	a,#0x1F
      000D07 FF               [12] 3428 	mov	r7,a
      000D08 4E               [12] 3429 	orl	a,r6
      000D09 60 02            [24] 3430 	jz	00177$
                                   3431 ;	radio/tdm.c:805: LED_ACTIVITY = LED_ON;
      000D0B D2 B6            [12] 3432 	setb	_LED_RED
      000D0D                       3433 00177$:
                                   3434 ;	radio/tdm.c:808: if (len == 0) {
      000D0D 78r67            [12] 3435 	mov	r0,#_tdm_serial_loop_len_1_219
      000D0F E2               [24] 3436 	movx	a,@r0
      000D10 70 02            [24] 3437 	jnz	00180$
                                   3438 ;	radio/tdm.c:812: transmit_yield = 1;
      000D12 D2*01            [12] 3439 	setb	_transmit_yield
      000D14                       3440 00180$:
                                   3441 ;	radio/tdm.c:818: transmit_wait = packet_latency;
      000D14 78r08            [12] 3442 	mov	r0,#_packet_latency
      000D16 E2               [24] 3443 	movx	a,@r0
      000D17 FE               [12] 3444 	mov	r6,a
      000D18 08               [12] 3445 	inc	r0
      000D19 E2               [24] 3446 	movx	a,@r0
      000D1A FF               [12] 3447 	mov	r7,a
      000D1B 78r0C            [12] 3448 	mov	r0,#_transmit_wait
      000D1D EE               [12] 3449 	mov	a,r6
      000D1E F2               [24] 3450 	movx	@r0,a
      000D1F 08               [12] 3451 	inc	r0
      000D20 EF               [12] 3452 	mov	a,r7
      000D21 F2               [24] 3453 	movx	@r0,a
                                   3454 ;	radio/tdm.c:822: if ((duty_cycle - duty_cycle_offset) != 100) {
      000D22 78r0E            [12] 3455 	mov	r0,#_duty_cycle
      000D24 E2               [24] 3456 	movx	a,@r0
      000D25 FE               [12] 3457 	mov	r6,a
      000D26 7F 00            [12] 3458 	mov	r7,#0x00
      000D28 78r13            [12] 3459 	mov	r0,#_duty_cycle_offset
      000D2A E2               [24] 3460 	movx	a,@r0
      000D2B FC               [12] 3461 	mov	r4,a
      000D2C 7D 00            [12] 3462 	mov	r5,#0x00
      000D2E EE               [12] 3463 	mov	a,r6
      000D2F C3               [12] 3464 	clr	c
      000D30 9C               [12] 3465 	subb	a,r4
      000D31 FE               [12] 3466 	mov	r6,a
      000D32 EF               [12] 3467 	mov	a,r7
      000D33 9D               [12] 3468 	subb	a,r5
      000D34 FF               [12] 3469 	mov	r7,a
      000D35 BE 64 05         [24] 3470 	cjne	r6,#0x64,00401$
      000D38 BF 00 02         [24] 3471 	cjne	r7,#0x00,00401$
      000D3B 80 17            [24] 3472 	sjmp	00182$
      000D3D                       3473 00401$:
                                   3474 ;	radio/tdm.c:823: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
      000D3D 78r67            [12] 3475 	mov	r0,#_tdm_serial_loop_len_1_219
      000D3F E2               [24] 3476 	movx	a,@r0
      000D40 24 02            [12] 3477 	add	a,#0x02
      000D42 F5 82            [12] 3478 	mov	dpl,a
      000D44 12r00rDD         [24] 3479 	lcall	_flight_time_estimate
      000D47 AE 82            [24] 3480 	mov	r6,dpl
      000D49 AF 83            [24] 3481 	mov	r7,dph
      000D4B 78r14            [12] 3482 	mov	r0,#_transmitted_ticks
      000D4D E2               [24] 3483 	movx	a,@r0
      000D4E 2E               [12] 3484 	add	a,r6
      000D4F F2               [24] 3485 	movx	@r0,a
      000D50 08               [12] 3486 	inc	r0
      000D51 E2               [24] 3487 	movx	a,@r0
      000D52 3F               [12] 3488 	addc	a,r7
      000D53 F2               [24] 3489 	movx	@r0,a
      000D54                       3490 00182$:
                                   3491 ;	radio/tdm.c:827: if (!radio_transmit(len + sizeof(trailer), pbuf, tdm_state_remaining + (silence_period/2)) &&
      000D54 78r67            [12] 3492 	mov	r0,#_tdm_serial_loop_len_1_219
      000D56 E2               [24] 3493 	movx	a,@r0
      000D57 24 02            [12] 3494 	add	a,#0x02
      000D59 FF               [12] 3495 	mov	r7,a
      000D5A 78r06            [12] 3496 	mov	r0,#_silence_period
      000D5C E2               [24] 3497 	movx	a,@r0
      000D5D FD               [12] 3498 	mov	r5,a
      000D5E 08               [12] 3499 	inc	r0
      000D5F E2               [24] 3500 	movx	a,@r0
      000D60 C3               [12] 3501 	clr	c
      000D61 13               [12] 3502 	rrc	a
      000D62 CD               [12] 3503 	xch	a,r5
      000D63 13               [12] 3504 	rrc	a
      000D64 CD               [12] 3505 	xch	a,r5
      000D65 FE               [12] 3506 	mov	r6,a
      000D66 78r01            [12] 3507 	mov	r0,#_tdm_state_remaining
      000D68 E2               [24] 3508 	movx	a,@r0
      000D69 2D               [12] 3509 	add	a,r5
      000D6A FD               [12] 3510 	mov	r5,a
      000D6B 08               [12] 3511 	inc	r0
      000D6C E2               [24] 3512 	movx	a,@r0
      000D6D 3E               [12] 3513 	addc	a,r6
      000D6E FE               [12] 3514 	mov	r6,a
      000D6F 78r00            [12] 3515 	mov	r0,#_radio_transmit_PARM_2
      000D71 74r00            [12] 3516 	mov	a,#_pbuf
      000D73 F2               [24] 3517 	movx	@r0,a
      000D74 08               [12] 3518 	inc	r0
      000D75 74s00            [12] 3519 	mov	a,#(_pbuf >> 8)
      000D77 F2               [24] 3520 	movx	@r0,a
      000D78 78r00            [12] 3521 	mov	r0,#_radio_transmit_PARM_3
      000D7A ED               [12] 3522 	mov	a,r5
      000D7B F2               [24] 3523 	movx	@r0,a
      000D7C 08               [12] 3524 	inc	r0
      000D7D EE               [12] 3525 	mov	a,r6
      000D7E F2               [24] 3526 	movx	@r0,a
      000D7F 8F 82            [24] 3527 	mov	dpl,r7
      000D81 12r00r00         [24] 3528 	lcall	_radio_transmit
      000D84 40 1A            [24] 3529 	jc	00184$
                                   3530 ;	radio/tdm.c:828: len != 0 && trailer.window != 0 && trailer.command == 0) {
      000D86 78r67            [12] 3531 	mov	r0,#_tdm_serial_loop_len_1_219
      000D88 E2               [24] 3532 	movx	a,@r0
      000D89 60 15            [24] 3533 	jz	00184$
      000D8B 78r1D            [12] 3534 	mov	r0,#_trailer
      000D8D E2               [24] 3535 	movx	a,@r0
      000D8E FE               [12] 3536 	mov	r6,a
      000D8F 08               [12] 3537 	inc	r0
      000D90 E2               [24] 3538 	movx	a,@r0
      000D91 54 1F            [12] 3539 	anl	a,#0x1F
      000D93 FF               [12] 3540 	mov	r7,a
      000D94 4E               [12] 3541 	orl	a,r6
      000D95 60 09            [24] 3542 	jz	00184$
      000D97 78r1E            [12] 3543 	mov	r0,#(_trailer + 0x0001)
      000D99 E2               [24] 3544 	movx	a,@r0
      000D9A 20 E5 03         [24] 3545 	jb	acc.5,00184$
                                   3546 ;	radio/tdm.c:829: packet_force_resend();
      000D9D 12r00r00         [24] 3547 	lcall	_packet_force_resend
      000DA0                       3548 00184$:
                                   3549 ;	radio/tdm.c:832: if (lbt_rssi != 0) {
      000DA0 78r16            [12] 3550 	mov	r0,#_lbt_rssi
      000DA2 E2               [24] 3551 	movx	a,@r0
      000DA3 60 0B            [24] 3552 	jz	00189$
                                   3553 ;	radio/tdm.c:834: lbt_listen_time = 0;
      000DA5 78r17            [12] 3554 	mov	r0,#_lbt_listen_time
      000DA7 E4               [12] 3555 	clr	a
      000DA8 F2               [24] 3556 	movx	@r0,a
      000DA9 08               [12] 3557 	inc	r0
      000DAA F2               [24] 3558 	movx	@r0,a
                                   3559 ;	radio/tdm.c:835: lbt_rand = 0;
      000DAB 78r1B            [12] 3560 	mov	r0,#_lbt_rand
      000DAD F2               [24] 3561 	movx	@r0,a
      000DAE 08               [12] 3562 	inc	r0
      000DAF F2               [24] 3563 	movx	@r0,a
      000DB0                       3564 00189$:
                                   3565 ;	radio/tdm.c:838: if (len != 0 && trailer.window != 0) {
      000DB0 78r67            [12] 3566 	mov	r0,#_tdm_serial_loop_len_1_219
      000DB2 E2               [24] 3567 	movx	a,@r0
      000DB3 60 0E            [24] 3568 	jz	00191$
      000DB5 78r1D            [12] 3569 	mov	r0,#_trailer
      000DB7 E2               [24] 3570 	movx	a,@r0
      000DB8 FE               [12] 3571 	mov	r6,a
      000DB9 08               [12] 3572 	inc	r0
      000DBA E2               [24] 3573 	movx	a,@r0
      000DBB 54 1F            [12] 3574 	anl	a,#0x1F
      000DBD FF               [12] 3575 	mov	r7,a
      000DBE 4E               [12] 3576 	orl	a,r6
      000DBF 60 02            [24] 3577 	jz	00191$
                                   3578 ;	radio/tdm.c:839: LED_ACTIVITY = LED_OFF;
      000DC1 C2 B6            [12] 3579 	clr	_LED_RED
      000DC3                       3580 00191$:
                                   3581 ;	radio/tdm.c:860: radio_set_channel(fhop_receive_channel());
      000DC3 12r00r00         [24] 3582 	lcall	_fhop_receive_channel
      000DC6 12r00r00         [24] 3583 	lcall	_radio_set_channel
                                   3584 ;	radio/tdm.c:863: radio_receiver_on();
      000DC9 12r00r00         [24] 3585 	lcall	_radio_receiver_on
      000DCC 02r07r9F         [24] 3586 	ljmp	00195$
                                   3587 ;------------------------------------------------------------
                                   3588 ;Allocation info for local variables in function 'tdm_init'
                                   3589 ;------------------------------------------------------------
                                   3590 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                                   3591 ;i                         Allocated with name '_tdm_init_i_1_259'
                                   3592 ;air_rate                  Allocated with name '_tdm_init_air_rate_1_259'
                                   3593 ;window_width              Allocated with name '_tdm_init_window_width_1_259'
                                   3594 ;------------------------------------------------------------
                                   3595 ;	radio/tdm.c:982: tdm_init(void)
                                   3596 ;	-----------------------------------------
                                   3597 ;	 function tdm_init
                                   3598 ;	-----------------------------------------
      000DCF                       3599 _tdm_init:
                                   3600 ;	radio/tdm.c:985: __xdata uint8_t air_rate = radio_air_rate();
      000DCF 12r00r00         [24] 3601 	lcall	_radio_air_rate
      000DD2 AF 82            [24] 3602 	mov	r7,dpl
                                   3603 ;	radio/tdm.c:994: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
      000DD4 90r00r00         [24] 3604 	mov	dptr,#__mullong_PARM_2
      000DD7 EF               [12] 3605 	mov	a,r7
      000DD8 F0               [24] 3606 	movx	@dptr,a
      000DD9 E4               [12] 3607 	clr	a
      000DDA A3               [24] 3608 	inc	dptr
      000DDB F0               [24] 3609 	movx	@dptr,a
      000DDC A3               [24] 3610 	inc	dptr
      000DDD F0               [24] 3611 	movx	@dptr,a
      000DDE A3               [24] 3612 	inc	dptr
      000DDF F0               [24] 3613 	movx	@dptr,a
      000DE0 90 03 E8         [24] 3614 	mov	dptr,#0x03E8
      000DE3 E4               [12] 3615 	clr	a
      000DE4 F5 F0            [12] 3616 	mov	b,a
      000DE6 12r00r00         [24] 3617 	lcall	__mullong
      000DE9 AC 82            [24] 3618 	mov	r4,dpl
      000DEB AD 83            [24] 3619 	mov	r5,dph
      000DED AE F0            [24] 3620 	mov	r6,b
      000DEF FF               [12] 3621 	mov	r7,a
      000DF0 90r00r00         [24] 3622 	mov	dptr,#__divulong_PARM_2
      000DF3 EC               [12] 3623 	mov	a,r4
      000DF4 F0               [24] 3624 	movx	@dptr,a
      000DF5 ED               [12] 3625 	mov	a,r5
      000DF6 A3               [24] 3626 	inc	dptr
      000DF7 F0               [24] 3627 	movx	@dptr,a
      000DF8 EE               [12] 3628 	mov	a,r6
      000DF9 A3               [24] 3629 	inc	dptr
      000DFA F0               [24] 3630 	movx	@dptr,a
      000DFB EF               [12] 3631 	mov	a,r7
      000DFC A3               [24] 3632 	inc	dptr
      000DFD F0               [24] 3633 	movx	@dptr,a
      000DFE 90 12 00         [24] 3634 	mov	dptr,#0x1200
      000E01 75 F0 7A         [24] 3635 	mov	b,#0x7A
      000E04 E4               [12] 3636 	clr	a
      000E05 12r00r00         [24] 3637 	lcall	__divulong
      000E08 AC 82            [24] 3638 	mov	r4,dpl
      000E0A AD 83            [24] 3639 	mov	r5,dph
      000E0C AE F0            [24] 3640 	mov	r6,b
      000E0E FF               [12] 3641 	mov	r7,a
      000E0F 74 08            [12] 3642 	mov	a,#0x08
      000E11 2C               [12] 3643 	add	a,r4
      000E12 FC               [12] 3644 	mov	r4,a
      000E13 E4               [12] 3645 	clr	a
      000E14 3D               [12] 3646 	addc	a,r5
      000E15 FD               [12] 3647 	mov	r5,a
      000E16 E4               [12] 3648 	clr	a
      000E17 3E               [12] 3649 	addc	a,r6
      000E18 FE               [12] 3650 	mov	r6,a
      000E19 E4               [12] 3651 	clr	a
      000E1A 3F               [12] 3652 	addc	a,r7
      000E1B FF               [12] 3653 	mov	r7,a
      000E1C ED               [12] 3654 	mov	a,r5
      000E1D C4               [12] 3655 	swap	a
      000E1E CC               [12] 3656 	xch	a,r4
      000E1F C4               [12] 3657 	swap	a
      000E20 54 0F            [12] 3658 	anl	a,#0x0F
      000E22 6C               [12] 3659 	xrl	a,r4
      000E23 CC               [12] 3660 	xch	a,r4
      000E24 54 0F            [12] 3661 	anl	a,#0x0F
      000E26 CC               [12] 3662 	xch	a,r4
      000E27 6C               [12] 3663 	xrl	a,r4
      000E28 CC               [12] 3664 	xch	a,r4
      000E29 FD               [12] 3665 	mov	r5,a
      000E2A EE               [12] 3666 	mov	a,r6
      000E2B C4               [12] 3667 	swap	a
      000E2C 54 F0            [12] 3668 	anl	a,#0xF0
      000E2E 4D               [12] 3669 	orl	a,r5
      000E2F FD               [12] 3670 	mov	r5,a
      000E30 EF               [12] 3671 	mov	a,r7
      000E31 C4               [12] 3672 	swap	a
      000E32 CE               [12] 3673 	xch	a,r6
      000E33 C4               [12] 3674 	swap	a
      000E34 54 0F            [12] 3675 	anl	a,#0x0F
      000E36 6E               [12] 3676 	xrl	a,r6
      000E37 CE               [12] 3677 	xch	a,r6
      000E38 54 0F            [12] 3678 	anl	a,#0x0F
      000E3A CE               [12] 3679 	xch	a,r6
      000E3B 6E               [12] 3680 	xrl	a,r6
      000E3C CE               [12] 3681 	xch	a,r6
                                   3682 ;	radio/tdm.c:995: ticks_per_byte++;
      000E3D 74 01            [12] 3683 	mov	a,#0x01
      000E3F 2C               [12] 3684 	add	a,r4
      000E40 FE               [12] 3685 	mov	r6,a
      000E41 E4               [12] 3686 	clr	a
      000E42 3D               [12] 3687 	addc	a,r5
      000E43 FF               [12] 3688 	mov	r7,a
      000E44 78r0A            [12] 3689 	mov	r0,#_ticks_per_byte
      000E46 EE               [12] 3690 	mov	a,r6
      000E47 F2               [24] 3691 	movx	@r0,a
      000E48 08               [12] 3692 	inc	r0
      000E49 EF               [12] 3693 	mov	a,r7
      000E4A F2               [24] 3694 	movx	@r0,a
                                   3695 ;	radio/tdm.c:1002: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
      000E4B 90r00r00         [24] 3696 	mov	dptr,#__mulint_PARM_2
      000E4E EE               [12] 3697 	mov	a,r6
      000E4F F0               [24] 3698 	movx	@dptr,a
      000E50 EF               [12] 3699 	mov	a,r7
      000E51 A3               [24] 3700 	inc	dptr
      000E52 F0               [24] 3701 	movx	@dptr,a
      000E53 90 00 0D         [24] 3702 	mov	dptr,#0x000D
      000E56 C0 07            [24] 3703 	push	ar7
      000E58 C0 06            [24] 3704 	push	ar6
      000E5A 12r00r00         [24] 3705 	lcall	__mulint
      000E5D E5 82            [12] 3706 	mov	a,dpl
      000E5F 85 83 F0         [24] 3707 	mov	b,dph
      000E62 D0 06            [24] 3708 	pop	ar6
      000E64 D0 07            [24] 3709 	pop	ar7
      000E66 24 0D            [12] 3710 	add	a,#0x0D
      000E68 FC               [12] 3711 	mov	r4,a
      000E69 E4               [12] 3712 	clr	a
      000E6A 35 F0            [12] 3713 	addc	a,b
      000E6C FD               [12] 3714 	mov	r5,a
      000E6D 78r08            [12] 3715 	mov	r0,#_packet_latency
      000E6F EC               [12] 3716 	mov	a,r4
      000E70 F2               [24] 3717 	movx	@r0,a
      000E71 08               [12] 3718 	inc	r0
      000E72 ED               [12] 3719 	mov	a,r5
      000E73 F2               [24] 3720 	movx	@r0,a
                                   3721 ;	radio/tdm.c:1004: if (feature_golay) {
      000E74 30*00 2E         [24] 3722 	jnb	_feature_golay,00102$
                                   3723 ;	radio/tdm.c:1005: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
      000E77 78r05            [12] 3724 	mov	r0,#_max_data_packet_length
      000E79 74 76            [12] 3725 	mov	a,#0x76
      000E7B F2               [24] 3726 	movx	@r0,a
                                   3727 ;	radio/tdm.c:1008: ticks_per_byte *= 2;
      000E7C EF               [12] 3728 	mov	a,r7
      000E7D CE               [12] 3729 	xch	a,r6
      000E7E 25 E0            [12] 3730 	add	a,acc
      000E80 CE               [12] 3731 	xch	a,r6
      000E81 33               [12] 3732 	rlc	a
      000E82 FF               [12] 3733 	mov	r7,a
      000E83 78r0A            [12] 3734 	mov	r0,#_ticks_per_byte
      000E85 EE               [12] 3735 	mov	a,r6
      000E86 F2               [24] 3736 	movx	@r0,a
      000E87 08               [12] 3737 	inc	r0
      000E88 EF               [12] 3738 	mov	a,r7
      000E89 F2               [24] 3739 	movx	@r0,a
                                   3740 ;	radio/tdm.c:1011: packet_latency += 4*ticks_per_byte;
      000E8A EF               [12] 3741 	mov	a,r7
      000E8B CE               [12] 3742 	xch	a,r6
      000E8C 25 E0            [12] 3743 	add	a,acc
      000E8E CE               [12] 3744 	xch	a,r6
      000E8F 33               [12] 3745 	rlc	a
      000E90 CE               [12] 3746 	xch	a,r6
      000E91 25 E0            [12] 3747 	add	a,acc
      000E93 CE               [12] 3748 	xch	a,r6
      000E94 33               [12] 3749 	rlc	a
      000E95 FF               [12] 3750 	mov	r7,a
      000E96 EE               [12] 3751 	mov	a,r6
      000E97 2C               [12] 3752 	add	a,r4
      000E98 FC               [12] 3753 	mov	r4,a
      000E99 EF               [12] 3754 	mov	a,r7
      000E9A 3D               [12] 3755 	addc	a,r5
      000E9B FD               [12] 3756 	mov	r5,a
      000E9C 78r08            [12] 3757 	mov	r0,#_packet_latency
      000E9E EC               [12] 3758 	mov	a,r4
      000E9F F2               [24] 3759 	movx	@r0,a
      000EA0 08               [12] 3760 	inc	r0
      000EA1 ED               [12] 3761 	mov	a,r5
      000EA2 F2               [24] 3762 	movx	@r0,a
      000EA3 80 05            [24] 3763 	sjmp	00103$
      000EA5                       3764 00102$:
                                   3765 ;	radio/tdm.c:1013: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
      000EA5 78r05            [12] 3766 	mov	r0,#_max_data_packet_length
      000EA7 74 FA            [12] 3767 	mov	a,#0xFA
      000EA9 F2               [24] 3768 	movx	@r0,a
      000EAA                       3769 00103$:
                                   3770 ;	radio/tdm.c:1017: silence_period = 2*packet_latency;
      000EAA 78r08            [12] 3771 	mov	r0,#_packet_latency
      000EAC 79r06            [12] 3772 	mov	r1,#_silence_period
      000EAE E2               [24] 3773 	movx	a,@r0
      000EAF F3               [24] 3774 	movx	@r1,a
      000EB0 08               [12] 3775 	inc	r0
      000EB1 E2               [24] 3776 	movx	a,@r0
      000EB2 F5 F0            [12] 3777 	mov	b,a
      000EB4 E3               [24] 3778 	movx	a,@r1
      000EB5 25 E0            [12] 3779 	add	a,acc
      000EB7 C5 F0            [12] 3780 	xch	a,b
      000EB9 33               [12] 3781 	rlc	a
      000EBA C5 F0            [12] 3782 	xch	a,b
      000EBC F3               [24] 3783 	movx	@r1,a
      000EBD 09               [12] 3784 	inc	r1
      000EBE E5 F0            [12] 3785 	mov	a,b
      000EC0 F3               [24] 3786 	movx	@r1,a
                                   3787 ;	radio/tdm.c:1020: window_width = 3*(packet_latency+(max_data_packet_length*(uint32_t)ticks_per_byte));
      000EC1 78r0A            [12] 3788 	mov	r0,#_ticks_per_byte
      000EC3 90r00r00         [24] 3789 	mov	dptr,#__mullong_PARM_2
      000EC6 E2               [24] 3790 	movx	a,@r0
      000EC7 F0               [24] 3791 	movx	@dptr,a
      000EC8 08               [12] 3792 	inc	r0
      000EC9 E2               [24] 3793 	movx	a,@r0
      000ECA A3               [24] 3794 	inc	dptr
      000ECB F0               [24] 3795 	movx	@dptr,a
      000ECC E4               [12] 3796 	clr	a
      000ECD A3               [24] 3797 	inc	dptr
      000ECE F0               [24] 3798 	movx	@dptr,a
      000ECF A3               [24] 3799 	inc	dptr
      000ED0 F0               [24] 3800 	movx	@dptr,a
      000ED1 78r05            [12] 3801 	mov	r0,#_max_data_packet_length
      000ED3 E2               [24] 3802 	movx	a,@r0
      000ED4 FC               [12] 3803 	mov	r4,a
      000ED5 7D 00            [12] 3804 	mov	r5,#0x00
      000ED7 7E 00            [12] 3805 	mov	r6,#0x00
      000ED9 7F 00            [12] 3806 	mov	r7,#0x00
      000EDB 8C 82            [24] 3807 	mov	dpl,r4
      000EDD 8D 83            [24] 3808 	mov	dph,r5
      000EDF 8E F0            [24] 3809 	mov	b,r6
      000EE1 EF               [12] 3810 	mov	a,r7
      000EE2 12r00r00         [24] 3811 	lcall	__mullong
      000EE5 85 82*15         [24] 3812 	mov	_tdm_init_sloc0_1_0,dpl
      000EE8 85 83*16         [24] 3813 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      000EEB 85 F0*17         [24] 3814 	mov	(_tdm_init_sloc0_1_0 + 2),b
      000EEE F5*18            [12] 3815 	mov	(_tdm_init_sloc0_1_0 + 3),a
      000EF0 78r08            [12] 3816 	mov	r0,#_packet_latency
      000EF2 E2               [24] 3817 	movx	a,@r0
      000EF3 FA               [12] 3818 	mov	r2,a
      000EF4 08               [12] 3819 	inc	r0
      000EF5 E2               [24] 3820 	movx	a,@r0
      000EF6 FB               [12] 3821 	mov	r3,a
      000EF7 7E 00            [12] 3822 	mov	r6,#0x00
      000EF9 7F 00            [12] 3823 	mov	r7,#0x00
      000EFB 90r00r00         [24] 3824 	mov	dptr,#__mullong_PARM_2
      000EFE E5*15            [12] 3825 	mov	a,_tdm_init_sloc0_1_0
      000F00 2A               [12] 3826 	add	a,r2
      000F01 F0               [24] 3827 	movx	@dptr,a
      000F02 E5*16            [12] 3828 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      000F04 3B               [12] 3829 	addc	a,r3
      000F05 A3               [24] 3830 	inc	dptr
      000F06 F0               [24] 3831 	movx	@dptr,a
      000F07 E5*17            [12] 3832 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      000F09 3E               [12] 3833 	addc	a,r6
      000F0A A3               [24] 3834 	inc	dptr
      000F0B F0               [24] 3835 	movx	@dptr,a
      000F0C E5*18            [12] 3836 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      000F0E 3F               [12] 3837 	addc	a,r7
      000F0F A3               [24] 3838 	inc	dptr
      000F10 F0               [24] 3839 	movx	@dptr,a
      000F11 90 00 03         [24] 3840 	mov	dptr,#(0x03&0x00ff)
      000F14 E4               [12] 3841 	clr	a
      000F15 F5 F0            [12] 3842 	mov	b,a
      000F17 12r00r00         [24] 3843 	lcall	__mullong
      000F1A AC 82            [24] 3844 	mov	r4,dpl
      000F1C AD 83            [24] 3845 	mov	r5,dph
      000F1E AE F0            [24] 3846 	mov	r6,b
      000F20 FF               [12] 3847 	mov	r7,a
      000F21 90r01r01         [24] 3848 	mov	dptr,#_tdm_init_window_width_1_259
      000F24 EC               [12] 3849 	mov	a,r4
      000F25 F0               [24] 3850 	movx	@dptr,a
      000F26 ED               [12] 3851 	mov	a,r5
      000F27 A3               [24] 3852 	inc	dptr
      000F28 F0               [24] 3853 	movx	@dptr,a
      000F29 EE               [12] 3854 	mov	a,r6
      000F2A A3               [24] 3855 	inc	dptr
      000F2B F0               [24] 3856 	movx	@dptr,a
      000F2C EF               [12] 3857 	mov	a,r7
      000F2D A3               [24] 3858 	inc	dptr
      000F2E F0               [24] 3859 	movx	@dptr,a
                                   3860 ;	radio/tdm.c:1023: lbt_min_time = LBT_MIN_TIME_USEC/16;
      000F2F 78r19            [12] 3861 	mov	r0,#_lbt_min_time
      000F31 74 38            [12] 3862 	mov	a,#0x38
      000F33 F2               [24] 3863 	movx	@r0,a
      000F34 08               [12] 3864 	inc	r0
      000F35 74 01            [12] 3865 	mov	a,#0x01
      000F37 F2               [24] 3866 	movx	@r0,a
                                   3867 ;	radio/tdm.c:1026: if (lbt_rssi != 0) {
      000F38 78r16            [12] 3868 	mov	r0,#_lbt_rssi
      000F3A E2               [24] 3869 	movx	a,@r0
      000F3B 60 3A            [24] 3870 	jz	00105$
                                   3871 ;	radio/tdm.c:1027: window_width = constrain(window_width, 3*lbt_min_time, window_width);
      000F3D 78r00            [12] 3872 	mov	r0,#_constrain_PARM_2
      000F3F 74 A8            [12] 3873 	mov	a,#0xA8
      000F41 F2               [24] 3874 	movx	@r0,a
      000F42 08               [12] 3875 	inc	r0
      000F43 74 03            [12] 3876 	mov	a,#0x03
      000F45 F2               [24] 3877 	movx	@r0,a
      000F46 08               [12] 3878 	inc	r0
      000F47 E4               [12] 3879 	clr	a
      000F48 F2               [24] 3880 	movx	@r0,a
      000F49 08               [12] 3881 	inc	r0
      000F4A F2               [24] 3882 	movx	@r0,a
      000F4B 78r00            [12] 3883 	mov	r0,#_constrain_PARM_3
      000F4D EC               [12] 3884 	mov	a,r4
      000F4E F2               [24] 3885 	movx	@r0,a
      000F4F 08               [12] 3886 	inc	r0
      000F50 ED               [12] 3887 	mov	a,r5
      000F51 F2               [24] 3888 	movx	@r0,a
      000F52 08               [12] 3889 	inc	r0
      000F53 EE               [12] 3890 	mov	a,r6
      000F54 F2               [24] 3891 	movx	@r0,a
      000F55 08               [12] 3892 	inc	r0
      000F56 EF               [12] 3893 	mov	a,r7
      000F57 F2               [24] 3894 	movx	@r0,a
      000F58 8C 82            [24] 3895 	mov	dpl,r4
      000F5A 8D 83            [24] 3896 	mov	dph,r5
      000F5C 8E F0            [24] 3897 	mov	b,r6
      000F5E EF               [12] 3898 	mov	a,r7
      000F5F 12r00r00         [24] 3899 	lcall	_constrain
      000F62 AC 82            [24] 3900 	mov	r4,dpl
      000F64 AD 83            [24] 3901 	mov	r5,dph
      000F66 AE F0            [24] 3902 	mov	r6,b
      000F68 FF               [12] 3903 	mov	r7,a
      000F69 90r01r01         [24] 3904 	mov	dptr,#_tdm_init_window_width_1_259
      000F6C EC               [12] 3905 	mov	a,r4
      000F6D F0               [24] 3906 	movx	@dptr,a
      000F6E ED               [12] 3907 	mov	a,r5
      000F6F A3               [24] 3908 	inc	dptr
      000F70 F0               [24] 3909 	movx	@dptr,a
      000F71 EE               [12] 3910 	mov	a,r6
      000F72 A3               [24] 3911 	inc	dptr
      000F73 F0               [24] 3912 	movx	@dptr,a
      000F74 EF               [12] 3913 	mov	a,r7
      000F75 A3               [24] 3914 	inc	dptr
      000F76 F0               [24] 3915 	movx	@dptr,a
      000F77                       3916 00105$:
                                   3917 ;	radio/tdm.c:1032: if (window_width >= REGULATORY_MAX_WINDOW && num_fh_channels > 1) {
      000F77 90r01r01         [24] 3918 	mov	dptr,#_tdm_init_window_width_1_259
      000F7A E0               [24] 3919 	movx	a,@dptr
      000F7B FC               [12] 3920 	mov	r4,a
      000F7C A3               [24] 3921 	inc	dptr
      000F7D E0               [24] 3922 	movx	a,@dptr
      000F7E FD               [12] 3923 	mov	r5,a
      000F7F A3               [24] 3924 	inc	dptr
      000F80 E0               [24] 3925 	movx	a,@dptr
      000F81 FE               [12] 3926 	mov	r6,a
      000F82 A3               [24] 3927 	inc	dptr
      000F83 E0               [24] 3928 	movx	a,@dptr
      000F84 FF               [12] 3929 	mov	r7,a
      000F85 C3               [12] 3930 	clr	c
      000F86 EC               [12] 3931 	mov	a,r4
      000F87 94 A8            [12] 3932 	subb	a,#0xA8
      000F89 ED               [12] 3933 	mov	a,r5
      000F8A 94 61            [12] 3934 	subb	a,#0x61
      000F8C EE               [12] 3935 	mov	a,r6
      000F8D 94 00            [12] 3936 	subb	a,#0x00
      000F8F EF               [12] 3937 	mov	a,r7
      000F90 94 00            [12] 3938 	subb	a,#0x00
      000F92 40 1B            [24] 3939 	jc	00107$
      000F94 78r00            [12] 3940 	mov	r0,#_num_fh_channels
      000F96 C3               [12] 3941 	clr	c
      000F97 E2               [24] 3942 	movx	a,@r0
      000F98 F5 F0            [12] 3943 	mov	b,a
      000F9A 74 01            [12] 3944 	mov	a,#0x01
      000F9C 95 F0            [12] 3945 	subb	a,b
      000F9E 50 0F            [24] 3946 	jnc	00107$
                                   3947 ;	radio/tdm.c:1033: window_width = REGULATORY_MAX_WINDOW;
      000FA0 90r01r01         [24] 3948 	mov	dptr,#_tdm_init_window_width_1_259
      000FA3 74 A8            [12] 3949 	mov	a,#0xA8
      000FA5 F0               [24] 3950 	movx	@dptr,a
      000FA6 74 61            [12] 3951 	mov	a,#0x61
      000FA8 A3               [24] 3952 	inc	dptr
      000FA9 F0               [24] 3953 	movx	@dptr,a
      000FAA E4               [12] 3954 	clr	a
      000FAB A3               [24] 3955 	inc	dptr
      000FAC F0               [24] 3956 	movx	@dptr,a
      000FAD A3               [24] 3957 	inc	dptr
      000FAE F0               [24] 3958 	movx	@dptr,a
      000FAF                       3959 00107$:
                                   3960 ;	radio/tdm.c:1037: if (window_width > param_get(PARAM_MAX_WINDOW)*(1000/16)) {
      000FAF 75 82 0F         [24] 3961 	mov	dpl,#0x0F
      000FB2 12r00r00         [24] 3962 	lcall	_param_get
      000FB5 AC 82            [24] 3963 	mov	r4,dpl
      000FB7 AD 83            [24] 3964 	mov	r5,dph
      000FB9 AE F0            [24] 3965 	mov	r6,b
      000FBB FF               [12] 3966 	mov	r7,a
      000FBC 90r00r00         [24] 3967 	mov	dptr,#__mullong_PARM_2
      000FBF EC               [12] 3968 	mov	a,r4
      000FC0 F0               [24] 3969 	movx	@dptr,a
      000FC1 ED               [12] 3970 	mov	a,r5
      000FC2 A3               [24] 3971 	inc	dptr
      000FC3 F0               [24] 3972 	movx	@dptr,a
      000FC4 EE               [12] 3973 	mov	a,r6
      000FC5 A3               [24] 3974 	inc	dptr
      000FC6 F0               [24] 3975 	movx	@dptr,a
      000FC7 EF               [12] 3976 	mov	a,r7
      000FC8 A3               [24] 3977 	inc	dptr
      000FC9 F0               [24] 3978 	movx	@dptr,a
      000FCA 90 00 3E         [24] 3979 	mov	dptr,#(0x3E&0x00ff)
      000FCD E4               [12] 3980 	clr	a
      000FCE F5 F0            [12] 3981 	mov	b,a
      000FD0 12r00r00         [24] 3982 	lcall	__mullong
      000FD3 85 82*15         [24] 3983 	mov	_tdm_init_sloc0_1_0,dpl
      000FD6 85 83*16         [24] 3984 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      000FD9 85 F0*17         [24] 3985 	mov	(_tdm_init_sloc0_1_0 + 2),b
      000FDC F5*18            [12] 3986 	mov	(_tdm_init_sloc0_1_0 + 3),a
      000FDE 90r01r01         [24] 3987 	mov	dptr,#_tdm_init_window_width_1_259
      000FE1 E0               [24] 3988 	movx	a,@dptr
      000FE2 FA               [12] 3989 	mov	r2,a
      000FE3 A3               [24] 3990 	inc	dptr
      000FE4 E0               [24] 3991 	movx	a,@dptr
      000FE5 FB               [12] 3992 	mov	r3,a
      000FE6 A3               [24] 3993 	inc	dptr
      000FE7 E0               [24] 3994 	movx	a,@dptr
      000FE8 FE               [12] 3995 	mov	r6,a
      000FE9 A3               [24] 3996 	inc	dptr
      000FEA E0               [24] 3997 	movx	a,@dptr
      000FEB FF               [12] 3998 	mov	r7,a
      000FEC C3               [12] 3999 	clr	c
      000FED E5*15            [12] 4000 	mov	a,_tdm_init_sloc0_1_0
      000FEF 9A               [12] 4001 	subb	a,r2
      000FF0 E5*16            [12] 4002 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      000FF2 9B               [12] 4003 	subb	a,r3
      000FF3 E5*17            [12] 4004 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      000FF5 9E               [12] 4005 	subb	a,r6
      000FF6 E5*18            [12] 4006 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      000FF8 9F               [12] 4007 	subb	a,r7
      000FF9 50 39            [24] 4008 	jnc	00110$
                                   4009 ;	radio/tdm.c:1038: window_width = param_get(PARAM_MAX_WINDOW)*(1000/16);
      000FFB 75 82 0F         [24] 4010 	mov	dpl,#0x0F
      000FFE 12r00r00         [24] 4011 	lcall	_param_get
      001001 AC 82            [24] 4012 	mov	r4,dpl
      001003 AD 83            [24] 4013 	mov	r5,dph
      001005 AE F0            [24] 4014 	mov	r6,b
      001007 FF               [12] 4015 	mov	r7,a
      001008 90r00r00         [24] 4016 	mov	dptr,#__mullong_PARM_2
      00100B EC               [12] 4017 	mov	a,r4
      00100C F0               [24] 4018 	movx	@dptr,a
      00100D ED               [12] 4019 	mov	a,r5
      00100E A3               [24] 4020 	inc	dptr
      00100F F0               [24] 4021 	movx	@dptr,a
      001010 EE               [12] 4022 	mov	a,r6
      001011 A3               [24] 4023 	inc	dptr
      001012 F0               [24] 4024 	movx	@dptr,a
      001013 EF               [12] 4025 	mov	a,r7
      001014 A3               [24] 4026 	inc	dptr
      001015 F0               [24] 4027 	movx	@dptr,a
      001016 90 00 3E         [24] 4028 	mov	dptr,#(0x3E&0x00ff)
      001019 E4               [12] 4029 	clr	a
      00101A F5 F0            [12] 4030 	mov	b,a
      00101C 12r00r00         [24] 4031 	lcall	__mullong
      00101F AC 82            [24] 4032 	mov	r4,dpl
      001021 AD 83            [24] 4033 	mov	r5,dph
      001023 AE F0            [24] 4034 	mov	r6,b
      001025 FF               [12] 4035 	mov	r7,a
      001026 90r01r01         [24] 4036 	mov	dptr,#_tdm_init_window_width_1_259
      001029 EC               [12] 4037 	mov	a,r4
      00102A F0               [24] 4038 	movx	@dptr,a
      00102B ED               [12] 4039 	mov	a,r5
      00102C A3               [24] 4040 	inc	dptr
      00102D F0               [24] 4041 	movx	@dptr,a
      00102E EE               [12] 4042 	mov	a,r6
      00102F A3               [24] 4043 	inc	dptr
      001030 F0               [24] 4044 	movx	@dptr,a
      001031 EF               [12] 4045 	mov	a,r7
      001032 A3               [24] 4046 	inc	dptr
      001033 F0               [24] 4047 	movx	@dptr,a
      001034                       4048 00110$:
                                   4049 ;	radio/tdm.c:1042: if (window_width > 0x1fff) {
      001034 90r01r01         [24] 4050 	mov	dptr,#_tdm_init_window_width_1_259
      001037 E0               [24] 4051 	movx	a,@dptr
      001038 FC               [12] 4052 	mov	r4,a
      001039 A3               [24] 4053 	inc	dptr
      00103A E0               [24] 4054 	movx	a,@dptr
      00103B FD               [12] 4055 	mov	r5,a
      00103C A3               [24] 4056 	inc	dptr
      00103D E0               [24] 4057 	movx	a,@dptr
      00103E FE               [12] 4058 	mov	r6,a
      00103F A3               [24] 4059 	inc	dptr
      001040 E0               [24] 4060 	movx	a,@dptr
      001041 FF               [12] 4061 	mov	r7,a
      001042 C3               [12] 4062 	clr	c
      001043 74 FF            [12] 4063 	mov	a,#0xFF
      001045 9C               [12] 4064 	subb	a,r4
      001046 74 1F            [12] 4065 	mov	a,#0x1F
      001048 9D               [12] 4066 	subb	a,r5
      001049 E4               [12] 4067 	clr	a
      00104A 9E               [12] 4068 	subb	a,r6
      00104B E4               [12] 4069 	clr	a
      00104C 9F               [12] 4070 	subb	a,r7
      00104D 50 0F            [24] 4071 	jnc	00112$
                                   4072 ;	radio/tdm.c:1043: window_width = 0x1fff;
      00104F 90r01r01         [24] 4073 	mov	dptr,#_tdm_init_window_width_1_259
      001052 74 FF            [12] 4074 	mov	a,#0xFF
      001054 F0               [24] 4075 	movx	@dptr,a
      001055 74 1F            [12] 4076 	mov	a,#0x1F
      001057 A3               [24] 4077 	inc	dptr
      001058 F0               [24] 4078 	movx	@dptr,a
      001059 E4               [12] 4079 	clr	a
      00105A A3               [24] 4080 	inc	dptr
      00105B F0               [24] 4081 	movx	@dptr,a
      00105C A3               [24] 4082 	inc	dptr
      00105D F0               [24] 4083 	movx	@dptr,a
      00105E                       4084 00112$:
                                   4085 ;	radio/tdm.c:1046: tx_window_width = window_width;
      00105E 90r01r01         [24] 4086 	mov	dptr,#_tdm_init_window_width_1_259
      001061 E0               [24] 4087 	movx	a,@dptr
      001062 FC               [12] 4088 	mov	r4,a
      001063 A3               [24] 4089 	inc	dptr
      001064 E0               [24] 4090 	movx	a,@dptr
      001065 FD               [12] 4091 	mov	r5,a
      001066 A3               [24] 4092 	inc	dptr
      001067 E0               [24] 4093 	movx	a,@dptr
      001068 A3               [24] 4094 	inc	dptr
      001069 E0               [24] 4095 	movx	a,@dptr
      00106A 78r03            [12] 4096 	mov	r0,#_tx_window_width
      00106C EC               [12] 4097 	mov	a,r4
      00106D F2               [24] 4098 	movx	@r0,a
      00106E 08               [12] 4099 	inc	r0
      00106F ED               [12] 4100 	mov	a,r5
      001070 F2               [24] 4101 	movx	@r0,a
                                   4102 ;	radio/tdm.c:1051: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
      001071 78r0B            [12] 4103 	mov	r0,#(_settings + 0x000b)
      001073 E2               [24] 4104 	movx	a,@r0
      001074 7E 00            [12] 4105 	mov	r6,#0x00
      001076 24 F6            [12] 4106 	add	a,#0xF6
      001078 FF               [12] 4107 	mov	r7,a
      001079 EE               [12] 4108 	mov	a,r6
      00107A 34 FF            [12] 4109 	addc	a,#0xFF
      00107C FE               [12] 4110 	mov	r6,a
      00107D 90r00r00         [24] 4111 	mov	dptr,#__divsint_PARM_2
      001080 74 02            [12] 4112 	mov	a,#0x02
      001082 F0               [24] 4113 	movx	@dptr,a
      001083 E4               [12] 4114 	clr	a
      001084 A3               [24] 4115 	inc	dptr
      001085 F0               [24] 4116 	movx	@dptr,a
      001086 8F 82            [24] 4117 	mov	dpl,r7
      001088 8E 83            [24] 4118 	mov	dph,r6
      00108A C0 05            [24] 4119 	push	ar5
      00108C C0 04            [24] 4120 	push	ar4
      00108E 12r00r00         [24] 4121 	lcall	__divsint
      001091 AE 82            [24] 4122 	mov	r6,dpl
      001093 AF 83            [24] 4123 	mov	r7,dph
      001095 78r0A            [12] 4124 	mov	r0,#_ticks_per_byte
      001097 90r00r00         [24] 4125 	mov	dptr,#__mulint_PARM_2
      00109A E2               [24] 4126 	movx	a,@r0
      00109B F0               [24] 4127 	movx	@dptr,a
      00109C 08               [12] 4128 	inc	r0
      00109D E2               [24] 4129 	movx	a,@r0
      00109E A3               [24] 4130 	inc	dptr
      00109F F0               [24] 4131 	movx	@dptr,a
      0010A0 8E 82            [24] 4132 	mov	dpl,r6
      0010A2 8F 83            [24] 4133 	mov	dph,r7
      0010A4 12r00r00         [24] 4134 	lcall	__mulint
      0010A7 AE 82            [24] 4135 	mov	r6,dpl
      0010A9 AF 83            [24] 4136 	mov	r7,dph
      0010AB D0 04            [24] 4137 	pop	ar4
      0010AD D0 05            [24] 4138 	pop	ar5
      0010AF 78r08            [12] 4139 	mov	r0,#_packet_latency
      0010B1 E2               [24] 4140 	movx	a,@r0
      0010B2 2E               [12] 4141 	add	a,r6
      0010B3 F2               [24] 4142 	movx	@r0,a
      0010B4 08               [12] 4143 	inc	r0
      0010B5 E2               [24] 4144 	movx	a,@r0
      0010B6 3F               [12] 4145 	addc	a,r7
      0010B7 F2               [24] 4146 	movx	@r0,a
                                   4147 ;	radio/tdm.c:1055: i = (tx_window_width - packet_latency) / ticks_per_byte;
      0010B8 78r08            [12] 4148 	mov	r0,#_packet_latency
      0010BA D3               [12] 4149 	setb	c
      0010BB E2               [24] 4150 	movx	a,@r0
      0010BC 9C               [12] 4151 	subb	a,r4
      0010BD F4               [12] 4152 	cpl	a
      0010BE B3               [12] 4153 	cpl	c
      0010BF FC               [12] 4154 	mov	r4,a
      0010C0 B3               [12] 4155 	cpl	c
      0010C1 08               [12] 4156 	inc	r0
      0010C2 E2               [24] 4157 	movx	a,@r0
      0010C3 9D               [12] 4158 	subb	a,r5
      0010C4 F4               [12] 4159 	cpl	a
      0010C5 FD               [12] 4160 	mov	r5,a
      0010C6 78r0A            [12] 4161 	mov	r0,#_ticks_per_byte
      0010C8 90r00r00         [24] 4162 	mov	dptr,#__divuint_PARM_2
      0010CB E2               [24] 4163 	movx	a,@r0
      0010CC F0               [24] 4164 	movx	@dptr,a
      0010CD 08               [12] 4165 	inc	r0
      0010CE E2               [24] 4166 	movx	a,@r0
      0010CF A3               [24] 4167 	inc	dptr
      0010D0 F0               [24] 4168 	movx	@dptr,a
      0010D1 8C 82            [24] 4169 	mov	dpl,r4
      0010D3 8D 83            [24] 4170 	mov	dph,r5
      0010D5 12r00r00         [24] 4171 	lcall	__divuint
      0010D8 AE 82            [24] 4172 	mov	r6,dpl
      0010DA AF 83            [24] 4173 	mov	r7,dph
      0010DC 90r00rFF         [24] 4174 	mov	dptr,#_tdm_init_i_1_259
      0010DF EE               [12] 4175 	mov	a,r6
      0010E0 F0               [24] 4176 	movx	@dptr,a
      0010E1 EF               [12] 4177 	mov	a,r7
      0010E2 A3               [24] 4178 	inc	dptr
      0010E3 F0               [24] 4179 	movx	@dptr,a
                                   4180 ;	radio/tdm.c:1056: if (i > max_data_packet_length) {
      0010E4 78r05            [12] 4181 	mov	r0,#_max_data_packet_length
      0010E6 E2               [24] 4182 	movx	a,@r0
      0010E7 FC               [12] 4183 	mov	r4,a
      0010E8 7D 00            [12] 4184 	mov	r5,#0x00
      0010EA C3               [12] 4185 	clr	c
      0010EB EC               [12] 4186 	mov	a,r4
      0010EC 9E               [12] 4187 	subb	a,r6
      0010ED ED               [12] 4188 	mov	a,r5
      0010EE 9F               [12] 4189 	subb	a,r7
      0010EF 50 08            [24] 4190 	jnc	00114$
                                   4191 ;	radio/tdm.c:1057: i = max_data_packet_length;
      0010F1 90r00rFF         [24] 4192 	mov	dptr,#_tdm_init_i_1_259
      0010F4 EC               [12] 4193 	mov	a,r4
      0010F5 F0               [24] 4194 	movx	@dptr,a
      0010F6 ED               [12] 4195 	mov	a,r5
      0010F7 A3               [24] 4196 	inc	dptr
      0010F8 F0               [24] 4197 	movx	@dptr,a
      0010F9                       4198 00114$:
                                   4199 ;	radio/tdm.c:1059: packet_set_max_xmit(i);
      0010F9 90r00rFF         [24] 4200 	mov	dptr,#_tdm_init_i_1_259
      0010FC E0               [24] 4201 	movx	a,@dptr
      0010FD FE               [12] 4202 	mov	r6,a
      0010FE A3               [24] 4203 	inc	dptr
      0010FF E0               [24] 4204 	movx	a,@dptr
      001100 8E 82            [24] 4205 	mov	dpl,r6
      001102 02r00r00         [24] 4206 	ljmp	_packet_set_max_xmit
                                   4207 ;------------------------------------------------------------
                                   4208 ;Allocation info for local variables in function 'tdm_report_timing'
                                   4209 ;------------------------------------------------------------
                                   4210 ;	radio/tdm.c:1075: tdm_report_timing(void)
                                   4211 ;	-----------------------------------------
                                   4212 ;	 function tdm_report_timing
                                   4213 ;	-----------------------------------------
      001105                       4214 _tdm_report_timing:
                                   4215 ;	radio/tdm.c:1077: printf("silence_period: %u\n", (unsigned)silence_period); delay_msec(1);
      001105 78r06            [12] 4216 	mov	r0,#_silence_period
      001107 E2               [24] 4217 	movx	a,@r0
      001108 C0 E0            [24] 4218 	push	acc
      00110A 08               [12] 4219 	inc	r0
      00110B E2               [24] 4220 	movx	a,@r0
      00110C C0 E0            [24] 4221 	push	acc
      00110E 74rE3            [12] 4222 	mov	a,#___str_9
      001110 C0 E0            [24] 4223 	push	acc
      001112 74s00            [12] 4224 	mov	a,#(___str_9 >> 8)
      001114 C0 E0            [24] 4225 	push	acc
      001116 74 80            [12] 4226 	mov	a,#0x80
      001118 C0 E0            [24] 4227 	push	acc
      00111A 12r00r00         [24] 4228 	lcall	_printfl
      00111D E5 81            [12] 4229 	mov	a,sp
      00111F 24 FB            [12] 4230 	add	a,#0xfb
      001121 F5 81            [12] 4231 	mov	sp,a
      001123 90 00 01         [24] 4232 	mov	dptr,#0x0001
      001126 12r00r00         [24] 4233 	lcall	_delay_msec
                                   4234 ;	radio/tdm.c:1078: printf("tx_window_width: %u\n", (unsigned)tx_window_width); delay_msec(1);
      001129 78r03            [12] 4235 	mov	r0,#_tx_window_width
      00112B E2               [24] 4236 	movx	a,@r0
      00112C C0 E0            [24] 4237 	push	acc
      00112E 08               [12] 4238 	inc	r0
      00112F E2               [24] 4239 	movx	a,@r0
      001130 C0 E0            [24] 4240 	push	acc
      001132 74rF7            [12] 4241 	mov	a,#___str_10
      001134 C0 E0            [24] 4242 	push	acc
      001136 74s00            [12] 4243 	mov	a,#(___str_10 >> 8)
      001138 C0 E0            [24] 4244 	push	acc
      00113A 74 80            [12] 4245 	mov	a,#0x80
      00113C C0 E0            [24] 4246 	push	acc
      00113E 12r00r00         [24] 4247 	lcall	_printfl
      001141 E5 81            [12] 4248 	mov	a,sp
      001143 24 FB            [12] 4249 	add	a,#0xfb
      001145 F5 81            [12] 4250 	mov	sp,a
      001147 90 00 01         [24] 4251 	mov	dptr,#0x0001
      00114A 12r00r00         [24] 4252 	lcall	_delay_msec
                                   4253 ;	radio/tdm.c:1079: printf("max_data_packet_length: %u\n", (unsigned)max_data_packet_length); delay_msec(1);
      00114D 78r05            [12] 4254 	mov	r0,#_max_data_packet_length
      00114F E2               [24] 4255 	movx	a,@r0
      001150 FE               [12] 4256 	mov	r6,a
      001151 7F 00            [12] 4257 	mov	r7,#0x00
      001153 C0 06            [24] 4258 	push	ar6
      001155 C0 07            [24] 4259 	push	ar7
      001157 74r0C            [12] 4260 	mov	a,#___str_11
      001159 C0 E0            [24] 4261 	push	acc
      00115B 74s01            [12] 4262 	mov	a,#(___str_11 >> 8)
      00115D C0 E0            [24] 4263 	push	acc
      00115F 74 80            [12] 4264 	mov	a,#0x80
      001161 C0 E0            [24] 4265 	push	acc
      001163 12r00r00         [24] 4266 	lcall	_printfl
      001166 E5 81            [12] 4267 	mov	a,sp
      001168 24 FB            [12] 4268 	add	a,#0xfb
      00116A F5 81            [12] 4269 	mov	sp,a
      00116C 90 00 01         [24] 4270 	mov	dptr,#0x0001
      00116F 02r00r00         [24] 4271 	ljmp	_delay_msec
                                   4272 	.area CSEG    (CODE)
                                   4273 	.area CONST   (CODE)
      000000                       4274 ___str_0:
      000000 4C 2F 52 20 52 53 53  4275 	.ascii "L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u "
             49 3A 20 25 75 2F 25
             75 20 20 4C 2F 52 20
             6E 6F 69 73 65 3A 20
             25 75 2F 25 75 20 70
             6B 74 73 3A 20 25 75
             20
      00002B 00                    4276 	.db 0x00
      00002C                       4277 ___str_1:
      00002C 20 74 78 65 3D 25 75  4278 	.ascii " txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u"
             20 72 78 65 3D 25 75
             20 73 74 78 3D 25 75
             20 73 72 78 3D 25 75
             20 65 63 63 3D 25 75
             2F 25 75 20 74 65 6D
             70 3D 25 64 20 64 63
             6F 3D 25 75
      000061 0A                    4279 	.db 0x0A
      000062 00                    4280 	.db 0x00
      000063                       4281 ___str_2:
      000063 54 44 4D 3A 20 25 75  4282 	.ascii "TDM: %u/%u len=%u "
             2F 25 75 20 6C 65 6E
             3D 25 75 20
      000075 00                    4283 	.db 0x00
      000076                       4284 ___str_3:
      000076 20 64 65 6C 74 61 3A  4285 	.ascii " delta: %d"
             20 25 64
      000080 0A                    4286 	.db 0x0A
      000081 00                    4287 	.db 0x00
      000082                       4288 ___str_4:
      000082 54 44 4D 3A 20 63 68  4289 	.ascii "TDM: change timing %u/%u"
             61 6E 67 65 20 74 69
             6D 69 6E 67 20 25 75
             2F 25 75
      00009A 0A                    4290 	.db 0x0A
      00009B 00                    4291 	.db 0x00
      00009C                       4292 ___str_5:
      00009C 54 44 4D 3A 20 73 63  4293 	.ascii "TDM: scanning"
             61 6E 6E 69 6E 67
      0000A9 0A                    4294 	.db 0x0A
      0000AA 00                    4295 	.db 0x00
      0000AB                       4296 ___str_6:
      0000AB 73 74 61 63 6B 20 62  4297 	.ascii "stack blown"
             6C 6F 77 6E
      0000B6 0A                    4298 	.db 0x0A
      0000B7 00                    4299 	.db 0x00
      0000B8                       4300 ___str_7:
      0000B8 70 64 61 74 61 20 63  4301 	.ascii "pdata canary changed"
             61 6E 61 72 79 20 63
             68 61 6E 67 65 64
      0000CC 0A                    4302 	.db 0x0A
      0000CD 00                    4303 	.db 0x00
      0000CE                       4304 ___str_8:
      0000CE 6F 76 65 72 73 69 7A  4305 	.ascii "oversized tdm packet"
             65 64 20 74 64 6D 20
             70 61 63 6B 65 74
      0000E2 00                    4306 	.db 0x00
      0000E3                       4307 ___str_9:
      0000E3 73 69 6C 65 6E 63 65  4308 	.ascii "silence_period: %u"
             5F 70 65 72 69 6F 64
             3A 20 25 75
      0000F5 0A                    4309 	.db 0x0A
      0000F6 00                    4310 	.db 0x00
      0000F7                       4311 ___str_10:
      0000F7 74 78 5F 77 69 6E 64  4312 	.ascii "tx_window_width: %u"
             6F 77 5F 77 69 64 74
             68 3A 20 25 75
      00010A 0A                    4313 	.db 0x0A
      00010B 00                    4314 	.db 0x00
      00010C                       4315 ___str_11:
      00010C 6D 61 78 5F 64 61 74  4316 	.ascii "max_data_packet_length: %u"
             61 5F 70 61 63 6B 65
             74 5F 6C 65 6E 67 74
             68 3A 20 25 75
      000126 0A                    4317 	.db 0x0A
      000127 00                    4318 	.db 0x00
                                   4319 	.area XINIT   (CODE)
                                   4320 	.area CABS    (ABS,CODE)
