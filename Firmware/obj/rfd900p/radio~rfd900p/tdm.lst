                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Sep  7 2022) (Linux)
                                      4 ; This file was generated Wed Sep  7 10:05:04 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module tdm
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _fhop_set_locked
                                     13 	.globl _fhop_window_change
                                     14 	.globl _fhop_receive_channel
                                     15 	.globl _fhop_transmit_channel
                                     16 	.globl _packet_inject
                                     17 	.globl _packet_set_max_xmit
                                     18 	.globl _packet_force_resend
                                     19 	.globl _packet_is_duplicate
                                     20 	.globl _packet_is_injected
                                     21 	.globl _packet_is_resend
                                     22 	.globl _packet_get_next
                                     23 	.globl _timer_entropy
                                     24 	.globl _delay_msec
                                     25 	.globl _timer2_tick
                                     26 	.globl _radio_temperature
                                     27 	.globl _MAVLink_report
                                     28 	.globl _radio_receive_in_progress
                                     29 	.globl _radio_get_transmit_power
                                     30 	.globl _radio_air_rate
                                     31 	.globl _radio_current_rssi
                                     32 	.globl _radio_last_rssi
                                     33 	.globl _radio_set_channel
                                     34 	.globl _radio_receiver_on
                                     35 	.globl _radio_transmit
                                     36 	.globl _radio_preamble_detected
                                     37 	.globl _radio_receive_packet
                                     38 	.globl _printf_end_capture
                                     39 	.globl _printf_start_capture
                                     40 	.globl _printfl
                                     41 	.globl _panic
                                     42 	.globl _at_command
                                     43 	.globl _constrain
                                     44 	.globl _param_get
                                     45 	.globl _pins_user_check
                                     46 	.globl _serial_write_buf
                                     47 	.globl _strlen
                                     48 	.globl _memset
                                     49 	.globl _memcpy
                                     50 	.globl _rand
                                     51 	.globl _NSS1
                                     52 	.globl _IRQ
                                     53 	.globl _PA_ENABLE
                                     54 	.globl _PIN_ENABLE
                                     55 	.globl _PIN_CONFIG
                                     56 	.globl _LED_GREEN
                                     57 	.globl _LED_RED
                                     58 	.globl _SPI1EN
                                     59 	.globl _TXBMT1
                                     60 	.globl _NSS1MD0
                                     61 	.globl _NSS1MD1
                                     62 	.globl _RXOVRN1
                                     63 	.globl _MODF1
                                     64 	.globl _WCOL1
                                     65 	.globl _SPIF1
                                     66 	.globl _SPI0EN
                                     67 	.globl _TXBMT0
                                     68 	.globl _NSS0MD0
                                     69 	.globl _NSS0MD1
                                     70 	.globl _RXOVRN0
                                     71 	.globl _MODF0
                                     72 	.globl _WCOL0
                                     73 	.globl _SPIF0
                                     74 	.globl _AD0CM0
                                     75 	.globl _AD0CM1
                                     76 	.globl _AD0CM2
                                     77 	.globl _AD0WINT
                                     78 	.globl _AD0BUSY
                                     79 	.globl _AD0INT
                                     80 	.globl _BURSTEN
                                     81 	.globl _AD0EN
                                     82 	.globl _CCF0
                                     83 	.globl _CCF1
                                     84 	.globl _CCF2
                                     85 	.globl _CCF3
                                     86 	.globl _CCF4
                                     87 	.globl _CCF5
                                     88 	.globl _CR
                                     89 	.globl _CF
                                     90 	.globl _P
                                     91 	.globl _F1
                                     92 	.globl _OV
                                     93 	.globl _RS0
                                     94 	.globl _RS1
                                     95 	.globl _F0
                                     96 	.globl _AC
                                     97 	.globl _CY
                                     98 	.globl _T2XCLK
                                     99 	.globl _T2RCLK
                                    100 	.globl _TR2
                                    101 	.globl _T2SPLIT
                                    102 	.globl _TF2CEN
                                    103 	.globl _TF2LEN
                                    104 	.globl _TF2L
                                    105 	.globl _TF2H
                                    106 	.globl _SI
                                    107 	.globl _ACK
                                    108 	.globl _ARBLOST
                                    109 	.globl _ACKRQ
                                    110 	.globl _STO
                                    111 	.globl _STA
                                    112 	.globl _TXMODE
                                    113 	.globl _MASTER
                                    114 	.globl _PX0
                                    115 	.globl _PT0
                                    116 	.globl _PX1
                                    117 	.globl _PT1
                                    118 	.globl _PS0
                                    119 	.globl _PT2
                                    120 	.globl _PSPI0
                                    121 	.globl _EX0
                                    122 	.globl _ET0
                                    123 	.globl _EX1
                                    124 	.globl _ET1
                                    125 	.globl _ES0
                                    126 	.globl _ET2
                                    127 	.globl _ESPI0
                                    128 	.globl _EA
                                    129 	.globl _RI0
                                    130 	.globl _TI0
                                    131 	.globl _RB80
                                    132 	.globl _TB80
                                    133 	.globl _REN0
                                    134 	.globl _MCE0
                                    135 	.globl _S0MODE
                                    136 	.globl _IT0
                                    137 	.globl _IE0
                                    138 	.globl _IT1
                                    139 	.globl _IE1
                                    140 	.globl _TR0
                                    141 	.globl _TF0
                                    142 	.globl _TR1
                                    143 	.globl _TF1
                                    144 	.globl __XPAGE
                                    145 	.globl _PCA0CP4
                                    146 	.globl _PCA0CP0
                                    147 	.globl _PCA0
                                    148 	.globl _PCA0CP3
                                    149 	.globl _PCA0CP2
                                    150 	.globl _PCA0CP1
                                    151 	.globl _PCA0CP5
                                    152 	.globl _TMR2
                                    153 	.globl _TMR2RL
                                    154 	.globl _ADC0LT
                                    155 	.globl _ADC0GT
                                    156 	.globl _ADC0
                                    157 	.globl _TMR3
                                    158 	.globl _TMR3RL
                                    159 	.globl _TOFF
                                    160 	.globl _DP
                                    161 	.globl _PCLKEN
                                    162 	.globl _CLKMODE
                                    163 	.globl _P7MDOUT
                                    164 	.globl _P6MDOUT
                                    165 	.globl _P5MDOUT
                                    166 	.globl _P4MDOUT
                                    167 	.globl _PCLKACT
                                    168 	.globl _P6MDIN
                                    169 	.globl _P5MDIN
                                    170 	.globl _P4MDIN
                                    171 	.globl _P3MDIN
                                    172 	.globl _DEVICEID
                                    173 	.globl _REVID
                                    174 	.globl _HWID
                                    175 	.globl _P7
                                    176 	.globl _P6
                                    177 	.globl _P5
                                    178 	.globl _P4
                                    179 	.globl _TOFFH
                                    180 	.globl _TOFFL
                                    181 	.globl _ADC0TK
                                    182 	.globl _ADC0PWR
                                    183 	.globl _IREF0CF
                                    184 	.globl _FLSCL
                                    185 	.globl _OSCICL
                                    186 	.globl _OSCIFL
                                    187 	.globl _P3MDOUT
                                    188 	.globl _LCD0BUFCF
                                    189 	.globl _P7DRV
                                    190 	.globl _P6DRV
                                    191 	.globl _P2DRV
                                    192 	.globl _P1DRV
                                    193 	.globl _P0DRV
                                    194 	.globl _P5DRV
                                    195 	.globl _P4DRV
                                    196 	.globl _P3DRV
                                    197 	.globl _LCD0BUFCN
                                    198 	.globl _CRC0CNT
                                    199 	.globl _CRC0AUTO
                                    200 	.globl _CRC0FLIP
                                    201 	.globl _CRC0IN
                                    202 	.globl _CRC0CN
                                    203 	.globl _CRC0DAT
                                    204 	.globl _SFRPGCN
                                    205 	.globl _DC0RDY
                                    206 	.globl _PC0INT1
                                    207 	.globl _PC0INT0
                                    208 	.globl _PC0DCH
                                    209 	.globl _PC0DCL
                                    210 	.globl _SPI1CN
                                    211 	.globl _AES0YOUT
                                    212 	.globl _PC0HIST
                                    213 	.globl _PC0CMP1H
                                    214 	.globl _PC0CMP1M
                                    215 	.globl _PC0CMP1L
                                    216 	.globl _AES0KBA
                                    217 	.globl _AES0DBA
                                    218 	.globl _AES0KIN
                                    219 	.globl _AES0XIN
                                    220 	.globl _AES0BIN
                                    221 	.globl _AES0DCFG
                                    222 	.globl _AES0BCFG
                                    223 	.globl _PC0TH
                                    224 	.globl _PC0CMP0H
                                    225 	.globl _PC0CMP0M
                                    226 	.globl _PC0CMP0L
                                    227 	.globl _PC0CTR1H
                                    228 	.globl _PC0CTR1M
                                    229 	.globl _PC0CTR1L
                                    230 	.globl _PC0CTR0H
                                    231 	.globl _PC0CTR0M
                                    232 	.globl _PC0CTR0L
                                    233 	.globl _PC0MD
                                    234 	.globl _PC0PCF
                                    235 	.globl _DMA0NMD
                                    236 	.globl _DMA0BUSY
                                    237 	.globl _DMA0MINT
                                    238 	.globl _DMA0INT
                                    239 	.globl _DMA0EN
                                    240 	.globl _DMA0SEL
                                    241 	.globl _DMA0NSZH
                                    242 	.globl _DMA0NSZL
                                    243 	.globl _DMA0NAOH
                                    244 	.globl _DMA0NAOL
                                    245 	.globl _DMA0NBAH
                                    246 	.globl _DMA0NBAL
                                    247 	.globl _DMA0NCF
                                    248 	.globl _VREGINSDH
                                    249 	.globl _VREGINSDL
                                    250 	.globl _ENC0CN
                                    251 	.globl _ENC0H
                                    252 	.globl _ENC0M
                                    253 	.globl _ENC0L
                                    254 	.globl _PC0STAT
                                    255 	.globl _CRC1CN
                                    256 	.globl _CRC1POLH
                                    257 	.globl _CRC1POLL
                                    258 	.globl _CRC1OUTH
                                    259 	.globl _CRC1OUTL
                                    260 	.globl _CRC1IN
                                    261 	.globl _LCD0BUFMD
                                    262 	.globl _LCD0CHPCN
                                    263 	.globl _DC0MD
                                    264 	.globl _DC0CF
                                    265 	.globl _DC0CN
                                    266 	.globl _LCD0VBMCF
                                    267 	.globl _LCD0CHPMD
                                    268 	.globl _LCD0CHPCF
                                    269 	.globl _LCD0MSCF
                                    270 	.globl _LCD0MSCN
                                    271 	.globl _LCD0CLKDIVH
                                    272 	.globl _LCD0CLKDIVL
                                    273 	.globl _LCD0VBMCN
                                    274 	.globl _LCD0CF
                                    275 	.globl _LCD0PWR
                                    276 	.globl _SPI1DAT
                                    277 	.globl _SPI1CKR
                                    278 	.globl _SPI1CFG
                                    279 	.globl _LCD0TOGR
                                    280 	.globl _LCD0BLINK
                                    281 	.globl _LCD0CN
                                    282 	.globl _LCD0CNTRST
                                    283 	.globl _LCD0DF
                                    284 	.globl _LCD0DE
                                    285 	.globl _LCD0DD
                                    286 	.globl _LCD0DC
                                    287 	.globl _LCD0DB
                                    288 	.globl _LCD0DA
                                    289 	.globl _LCD0D9
                                    290 	.globl _LCD0D8
                                    291 	.globl _LCD0D7
                                    292 	.globl _LCD0D6
                                    293 	.globl _LCD0D5
                                    294 	.globl _LCD0D4
                                    295 	.globl _LCD0D3
                                    296 	.globl _LCD0D2
                                    297 	.globl _LCD0D1
                                    298 	.globl _LCD0D0
                                    299 	.globl _VDM0CN
                                    300 	.globl _PCA0CPH4
                                    301 	.globl _PCA0CPL4
                                    302 	.globl _PCA0CPH0
                                    303 	.globl _PCA0CPL0
                                    304 	.globl _PCA0H
                                    305 	.globl _PCA0L
                                    306 	.globl _SPI0CN
                                    307 	.globl _EIP2
                                    308 	.globl _EIP1
                                    309 	.globl _SMB0ADM
                                    310 	.globl _SMB0ADR
                                    311 	.globl _P2MDIN
                                    312 	.globl _P1MDIN
                                    313 	.globl _P0MDIN
                                    314 	.globl _B
                                    315 	.globl _RSTSRC
                                    316 	.globl _PCA0CPH3
                                    317 	.globl _PCA0CPL3
                                    318 	.globl _PCA0CPH2
                                    319 	.globl _PCA0CPL2
                                    320 	.globl _PCA0CPH1
                                    321 	.globl _PCA0CPL1
                                    322 	.globl _ADC0CN
                                    323 	.globl _EIE2
                                    324 	.globl _EIE1
                                    325 	.globl _FLWR
                                    326 	.globl _IT01CF
                                    327 	.globl _XBR2
                                    328 	.globl _XBR1
                                    329 	.globl _XBR0
                                    330 	.globl _ACC
                                    331 	.globl _PCA0PWM
                                    332 	.globl _PCA0CPM4
                                    333 	.globl _PCA0CPM3
                                    334 	.globl _PCA0CPM2
                                    335 	.globl _PCA0CPM1
                                    336 	.globl _PCA0CPM0
                                    337 	.globl _PCA0MD
                                    338 	.globl _PCA0CN
                                    339 	.globl _P0MAT
                                    340 	.globl _P2SKIP
                                    341 	.globl _P1SKIP
                                    342 	.globl _P0SKIP
                                    343 	.globl _PCA0CPH5
                                    344 	.globl _PCA0CPL5
                                    345 	.globl _REF0CN
                                    346 	.globl _PSW
                                    347 	.globl _P1MAT
                                    348 	.globl _PCA0CPM5
                                    349 	.globl _TMR2H
                                    350 	.globl _TMR2L
                                    351 	.globl _TMR2RLH
                                    352 	.globl _TMR2RLL
                                    353 	.globl _REG0CN
                                    354 	.globl _TMR2CN
                                    355 	.globl _P0MASK
                                    356 	.globl _ADC0LTH
                                    357 	.globl _ADC0LTL
                                    358 	.globl _ADC0GTH
                                    359 	.globl _ADC0GTL
                                    360 	.globl _SMB0DAT
                                    361 	.globl _SMB0CF
                                    362 	.globl _SMB0CN
                                    363 	.globl _P1MASK
                                    364 	.globl _ADC0H
                                    365 	.globl _ADC0L
                                    366 	.globl _ADC0CF
                                    367 	.globl _ADC0MX
                                    368 	.globl _ADC0AC
                                    369 	.globl _IREF0CN
                                    370 	.globl _IP
                                    371 	.globl _FLKEY
                                    372 	.globl _PMU0FL
                                    373 	.globl _PMU0CF
                                    374 	.globl _PMU0MD
                                    375 	.globl _OSCICN
                                    376 	.globl _OSCXCN
                                    377 	.globl _P3
                                    378 	.globl _EMI0TC
                                    379 	.globl _RTC0KEY
                                    380 	.globl _RTC0DAT
                                    381 	.globl _RTC0ADR
                                    382 	.globl _EMI0CF
                                    383 	.globl _EMI0CN
                                    384 	.globl _CLKSEL
                                    385 	.globl _IE
                                    386 	.globl _SFRPAGE
                                    387 	.globl _P2MDOUT
                                    388 	.globl _P1MDOUT
                                    389 	.globl _P0MDOUT
                                    390 	.globl _SPI0DAT
                                    391 	.globl _SPI0CKR
                                    392 	.globl _SPI0CFG
                                    393 	.globl _P2
                                    394 	.globl _CPT0MX
                                    395 	.globl _CPT1MX
                                    396 	.globl _CPT0MD
                                    397 	.globl _CPT1MD
                                    398 	.globl _CPT0CN
                                    399 	.globl _CPT1CN
                                    400 	.globl _SBUF0
                                    401 	.globl _SCON0
                                    402 	.globl _TMR3H
                                    403 	.globl _TMR3L
                                    404 	.globl _TMR3RLH
                                    405 	.globl _TMR3RLL
                                    406 	.globl _TMR3CN
                                    407 	.globl _P1
                                    408 	.globl _PSCTL
                                    409 	.globl _CKCON
                                    410 	.globl _TH1
                                    411 	.globl _TH0
                                    412 	.globl _TL1
                                    413 	.globl _TL0
                                    414 	.globl _TMOD
                                    415 	.globl _TCON
                                    416 	.globl _PCON
                                    417 	.globl _SFRLAST
                                    418 	.globl _SFRNEXT
                                    419 	.globl _PSBANK
                                    420 	.globl _DPH
                                    421 	.globl _DPL
                                    422 	.globl _SP
                                    423 	.globl _P0
                                    424 	.globl _test_display
                                    425 	.globl _pbuf
                                    426 	.globl _trailer
                                    427 	.globl _lbt_rssi
                                    428 	.globl _duty_cycle_offset
                                    429 	.globl _duty_cycle
                                    430 	.globl _transmit_wait
                                    431 	.globl __canary
                                    432 	.globl _tdm_show_rssi
                                    433 	.globl _tdm_change_phase
                                    434 	.globl _tdm_remote_at
                                    435 	.globl _tdm_serial_loop
                                    436 	.globl _tdm_init
                                    437 	.globl _tdm_report_timing
                                    438 ;--------------------------------------------------------
                                    439 ; special function registers
                                    440 ;--------------------------------------------------------
                                    441 	.area RSEG    (ABS,DATA)
      000000                        442 	.org 0x0000
                           000080   443 _P0	=	0x0080
                           000081   444 _SP	=	0x0081
                           000082   445 _DPL	=	0x0082
                           000083   446 _DPH	=	0x0083
                           000084   447 _PSBANK	=	0x0084
                           000085   448 _SFRNEXT	=	0x0085
                           000086   449 _SFRLAST	=	0x0086
                           000087   450 _PCON	=	0x0087
                           000088   451 _TCON	=	0x0088
                           000089   452 _TMOD	=	0x0089
                           00008A   453 _TL0	=	0x008a
                           00008B   454 _TL1	=	0x008b
                           00008C   455 _TH0	=	0x008c
                           00008D   456 _TH1	=	0x008d
                           00008E   457 _CKCON	=	0x008e
                           00008F   458 _PSCTL	=	0x008f
                           000090   459 _P1	=	0x0090
                           000091   460 _TMR3CN	=	0x0091
                           000092   461 _TMR3RLL	=	0x0092
                           000093   462 _TMR3RLH	=	0x0093
                           000094   463 _TMR3L	=	0x0094
                           000095   464 _TMR3H	=	0x0095
                           000098   465 _SCON0	=	0x0098
                           000099   466 _SBUF0	=	0x0099
                           00009A   467 _CPT1CN	=	0x009a
                           00009B   468 _CPT0CN	=	0x009b
                           00009C   469 _CPT1MD	=	0x009c
                           00009D   470 _CPT0MD	=	0x009d
                           00009E   471 _CPT1MX	=	0x009e
                           00009F   472 _CPT0MX	=	0x009f
                           0000A0   473 _P2	=	0x00a0
                           0000A1   474 _SPI0CFG	=	0x00a1
                           0000A2   475 _SPI0CKR	=	0x00a2
                           0000A3   476 _SPI0DAT	=	0x00a3
                           0000A4   477 _P0MDOUT	=	0x00a4
                           0000A5   478 _P1MDOUT	=	0x00a5
                           0000A6   479 _P2MDOUT	=	0x00a6
                           0000A7   480 _SFRPAGE	=	0x00a7
                           0000A8   481 _IE	=	0x00a8
                           0000A9   482 _CLKSEL	=	0x00a9
                           0000AA   483 _EMI0CN	=	0x00aa
                           0000AB   484 _EMI0CF	=	0x00ab
                           0000AC   485 _RTC0ADR	=	0x00ac
                           0000AD   486 _RTC0DAT	=	0x00ad
                           0000AE   487 _RTC0KEY	=	0x00ae
                           0000AF   488 _EMI0TC	=	0x00af
                           0000B0   489 _P3	=	0x00b0
                           0000B1   490 _OSCXCN	=	0x00b1
                           0000B2   491 _OSCICN	=	0x00b2
                           0000B3   492 _PMU0MD	=	0x00b3
                           0000B5   493 _PMU0CF	=	0x00b5
                           0000B6   494 _PMU0FL	=	0x00b6
                           0000B7   495 _FLKEY	=	0x00b7
                           0000B8   496 _IP	=	0x00b8
                           0000B9   497 _IREF0CN	=	0x00b9
                           0000BA   498 _ADC0AC	=	0x00ba
                           0000BB   499 _ADC0MX	=	0x00bb
                           0000BC   500 _ADC0CF	=	0x00bc
                           0000BD   501 _ADC0L	=	0x00bd
                           0000BE   502 _ADC0H	=	0x00be
                           0000BF   503 _P1MASK	=	0x00bf
                           0000C0   504 _SMB0CN	=	0x00c0
                           0000C1   505 _SMB0CF	=	0x00c1
                           0000C2   506 _SMB0DAT	=	0x00c2
                           0000C3   507 _ADC0GTL	=	0x00c3
                           0000C4   508 _ADC0GTH	=	0x00c4
                           0000C5   509 _ADC0LTL	=	0x00c5
                           0000C6   510 _ADC0LTH	=	0x00c6
                           0000C7   511 _P0MASK	=	0x00c7
                           0000C8   512 _TMR2CN	=	0x00c8
                           0000C9   513 _REG0CN	=	0x00c9
                           0000CA   514 _TMR2RLL	=	0x00ca
                           0000CB   515 _TMR2RLH	=	0x00cb
                           0000CC   516 _TMR2L	=	0x00cc
                           0000CD   517 _TMR2H	=	0x00cd
                           0000CE   518 _PCA0CPM5	=	0x00ce
                           0000CF   519 _P1MAT	=	0x00cf
                           0000D0   520 _PSW	=	0x00d0
                           0000D1   521 _REF0CN	=	0x00d1
                           0000D2   522 _PCA0CPL5	=	0x00d2
                           0000D3   523 _PCA0CPH5	=	0x00d3
                           0000D4   524 _P0SKIP	=	0x00d4
                           0000D5   525 _P1SKIP	=	0x00d5
                           0000D6   526 _P2SKIP	=	0x00d6
                           0000D7   527 _P0MAT	=	0x00d7
                           0000D8   528 _PCA0CN	=	0x00d8
                           0000D9   529 _PCA0MD	=	0x00d9
                           0000DA   530 _PCA0CPM0	=	0x00da
                           0000DB   531 _PCA0CPM1	=	0x00db
                           0000DC   532 _PCA0CPM2	=	0x00dc
                           0000DD   533 _PCA0CPM3	=	0x00dd
                           0000DE   534 _PCA0CPM4	=	0x00de
                           0000DF   535 _PCA0PWM	=	0x00df
                           0000E0   536 _ACC	=	0x00e0
                           0000E1   537 _XBR0	=	0x00e1
                           0000E2   538 _XBR1	=	0x00e2
                           0000E3   539 _XBR2	=	0x00e3
                           0000E4   540 _IT01CF	=	0x00e4
                           0000E5   541 _FLWR	=	0x00e5
                           0000E6   542 _EIE1	=	0x00e6
                           0000E7   543 _EIE2	=	0x00e7
                           0000E8   544 _ADC0CN	=	0x00e8
                           0000E9   545 _PCA0CPL1	=	0x00e9
                           0000EA   546 _PCA0CPH1	=	0x00ea
                           0000EB   547 _PCA0CPL2	=	0x00eb
                           0000EC   548 _PCA0CPH2	=	0x00ec
                           0000ED   549 _PCA0CPL3	=	0x00ed
                           0000EE   550 _PCA0CPH3	=	0x00ee
                           0000EF   551 _RSTSRC	=	0x00ef
                           0000F0   552 _B	=	0x00f0
                           0000F1   553 _P0MDIN	=	0x00f1
                           0000F2   554 _P1MDIN	=	0x00f2
                           0000F3   555 _P2MDIN	=	0x00f3
                           0000F4   556 _SMB0ADR	=	0x00f4
                           0000F5   557 _SMB0ADM	=	0x00f5
                           0000F6   558 _EIP1	=	0x00f6
                           0000F7   559 _EIP2	=	0x00f7
                           0000F8   560 _SPI0CN	=	0x00f8
                           0000F9   561 _PCA0L	=	0x00f9
                           0000FA   562 _PCA0H	=	0x00fa
                           0000FB   563 _PCA0CPL0	=	0x00fb
                           0000FC   564 _PCA0CPH0	=	0x00fc
                           0000FD   565 _PCA0CPL4	=	0x00fd
                           0000FE   566 _PCA0CPH4	=	0x00fe
                           0000FF   567 _VDM0CN	=	0x00ff
                           000089   568 _LCD0D0	=	0x0089
                           00008A   569 _LCD0D1	=	0x008a
                           00008B   570 _LCD0D2	=	0x008b
                           00008C   571 _LCD0D3	=	0x008c
                           00008D   572 _LCD0D4	=	0x008d
                           00008E   573 _LCD0D5	=	0x008e
                           000091   574 _LCD0D6	=	0x0091
                           000092   575 _LCD0D7	=	0x0092
                           000093   576 _LCD0D8	=	0x0093
                           000094   577 _LCD0D9	=	0x0094
                           000095   578 _LCD0DA	=	0x0095
                           000096   579 _LCD0DB	=	0x0096
                           000097   580 _LCD0DC	=	0x0097
                           000099   581 _LCD0DD	=	0x0099
                           00009A   582 _LCD0DE	=	0x009a
                           00009B   583 _LCD0DF	=	0x009b
                           00009C   584 _LCD0CNTRST	=	0x009c
                           00009D   585 _LCD0CN	=	0x009d
                           00009E   586 _LCD0BLINK	=	0x009e
                           00009F   587 _LCD0TOGR	=	0x009f
                           0000A1   588 _SPI1CFG	=	0x00a1
                           0000A2   589 _SPI1CKR	=	0x00a2
                           0000A3   590 _SPI1DAT	=	0x00a3
                           0000A4   591 _LCD0PWR	=	0x00a4
                           0000A5   592 _LCD0CF	=	0x00a5
                           0000A6   593 _LCD0VBMCN	=	0x00a6
                           0000A9   594 _LCD0CLKDIVL	=	0x00a9
                           0000AA   595 _LCD0CLKDIVH	=	0x00aa
                           0000AB   596 _LCD0MSCN	=	0x00ab
                           0000AC   597 _LCD0MSCF	=	0x00ac
                           0000AD   598 _LCD0CHPCF	=	0x00ad
                           0000AE   599 _LCD0CHPMD	=	0x00ae
                           0000AF   600 _LCD0VBMCF	=	0x00af
                           0000B1   601 _DC0CN	=	0x00b1
                           0000B2   602 _DC0CF	=	0x00b2
                           0000B3   603 _DC0MD	=	0x00b3
                           0000B5   604 _LCD0CHPCN	=	0x00b5
                           0000B6   605 _LCD0BUFMD	=	0x00b6
                           0000B9   606 _CRC1IN	=	0x00b9
                           0000BA   607 _CRC1OUTL	=	0x00ba
                           0000BB   608 _CRC1OUTH	=	0x00bb
                           0000BC   609 _CRC1POLL	=	0x00bc
                           0000BD   610 _CRC1POLH	=	0x00bd
                           0000BE   611 _CRC1CN	=	0x00be
                           0000C1   612 _PC0STAT	=	0x00c1
                           0000C2   613 _ENC0L	=	0x00c2
                           0000C3   614 _ENC0M	=	0x00c3
                           0000C4   615 _ENC0H	=	0x00c4
                           0000C5   616 _ENC0CN	=	0x00c5
                           0000C6   617 _VREGINSDL	=	0x00c6
                           0000C7   618 _VREGINSDH	=	0x00c7
                           0000C9   619 _DMA0NCF	=	0x00c9
                           0000CA   620 _DMA0NBAL	=	0x00ca
                           0000CB   621 _DMA0NBAH	=	0x00cb
                           0000CC   622 _DMA0NAOL	=	0x00cc
                           0000CD   623 _DMA0NAOH	=	0x00cd
                           0000CE   624 _DMA0NSZL	=	0x00ce
                           0000CF   625 _DMA0NSZH	=	0x00cf
                           0000D1   626 _DMA0SEL	=	0x00d1
                           0000D2   627 _DMA0EN	=	0x00d2
                           0000D3   628 _DMA0INT	=	0x00d3
                           0000D4   629 _DMA0MINT	=	0x00d4
                           0000D5   630 _DMA0BUSY	=	0x00d5
                           0000D6   631 _DMA0NMD	=	0x00d6
                           0000D7   632 _PC0PCF	=	0x00d7
                           0000D9   633 _PC0MD	=	0x00d9
                           0000DA   634 _PC0CTR0L	=	0x00da
                           0000DB   635 _PC0CTR0M	=	0x00db
                           0000DC   636 _PC0CTR0H	=	0x00dc
                           0000DD   637 _PC0CTR1L	=	0x00dd
                           0000DE   638 _PC0CTR1M	=	0x00de
                           0000DF   639 _PC0CTR1H	=	0x00df
                           0000E1   640 _PC0CMP0L	=	0x00e1
                           0000E2   641 _PC0CMP0M	=	0x00e2
                           0000E3   642 _PC0CMP0H	=	0x00e3
                           0000E4   643 _PC0TH	=	0x00e4
                           0000E9   644 _AES0BCFG	=	0x00e9
                           0000EA   645 _AES0DCFG	=	0x00ea
                           0000EB   646 _AES0BIN	=	0x00eb
                           0000EC   647 _AES0XIN	=	0x00ec
                           0000ED   648 _AES0KIN	=	0x00ed
                           0000EE   649 _AES0DBA	=	0x00ee
                           0000EF   650 _AES0KBA	=	0x00ef
                           0000F1   651 _PC0CMP1L	=	0x00f1
                           0000F2   652 _PC0CMP1M	=	0x00f2
                           0000F3   653 _PC0CMP1H	=	0x00f3
                           0000F4   654 _PC0HIST	=	0x00f4
                           0000F5   655 _AES0YOUT	=	0x00f5
                           0000F8   656 _SPI1CN	=	0x00f8
                           0000F9   657 _PC0DCL	=	0x00f9
                           0000FA   658 _PC0DCH	=	0x00fa
                           0000FB   659 _PC0INT0	=	0x00fb
                           0000FC   660 _PC0INT1	=	0x00fc
                           0000FD   661 _DC0RDY	=	0x00fd
                           00008E   662 _SFRPGCN	=	0x008e
                           000091   663 _CRC0DAT	=	0x0091
                           000092   664 _CRC0CN	=	0x0092
                           000093   665 _CRC0IN	=	0x0093
                           000094   666 _CRC0FLIP	=	0x0094
                           000096   667 _CRC0AUTO	=	0x0096
                           000097   668 _CRC0CNT	=	0x0097
                           00009C   669 _LCD0BUFCN	=	0x009c
                           0000A1   670 _P3DRV	=	0x00a1
                           0000A2   671 _P4DRV	=	0x00a2
                           0000A3   672 _P5DRV	=	0x00a3
                           0000A4   673 _P0DRV	=	0x00a4
                           0000A5   674 _P1DRV	=	0x00a5
                           0000A6   675 _P2DRV	=	0x00a6
                           0000AA   676 _P6DRV	=	0x00aa
                           0000AB   677 _P7DRV	=	0x00ab
                           0000AC   678 _LCD0BUFCF	=	0x00ac
                           0000B1   679 _P3MDOUT	=	0x00b1
                           0000B2   680 _OSCIFL	=	0x00b2
                           0000B3   681 _OSCICL	=	0x00b3
                           0000B6   682 _FLSCL	=	0x00b6
                           0000B9   683 _IREF0CF	=	0x00b9
                           0000BB   684 _ADC0PWR	=	0x00bb
                           0000BC   685 _ADC0TK	=	0x00bc
                           0000BD   686 _TOFFL	=	0x00bd
                           0000BE   687 _TOFFH	=	0x00be
                           0000D9   688 _P4	=	0x00d9
                           0000DA   689 _P5	=	0x00da
                           0000DB   690 _P6	=	0x00db
                           0000DC   691 _P7	=	0x00dc
                           0000E9   692 _HWID	=	0x00e9
                           0000EA   693 _REVID	=	0x00ea
                           0000EB   694 _DEVICEID	=	0x00eb
                           0000F1   695 _P3MDIN	=	0x00f1
                           0000F2   696 _P4MDIN	=	0x00f2
                           0000F3   697 _P5MDIN	=	0x00f3
                           0000F4   698 _P6MDIN	=	0x00f4
                           0000F5   699 _PCLKACT	=	0x00f5
                           0000F9   700 _P4MDOUT	=	0x00f9
                           0000FA   701 _P5MDOUT	=	0x00fa
                           0000FB   702 _P6MDOUT	=	0x00fb
                           0000FC   703 _P7MDOUT	=	0x00fc
                           0000FD   704 _CLKMODE	=	0x00fd
                           0000FE   705 _PCLKEN	=	0x00fe
                           008382   706 _DP	=	0x8382
                           008685   707 _TOFF	=	0x8685
                           009392   708 _TMR3RL	=	0x9392
                           009594   709 _TMR3	=	0x9594
                           00BEBD   710 _ADC0	=	0xbebd
                           00C4C3   711 _ADC0GT	=	0xc4c3
                           00C6C5   712 _ADC0LT	=	0xc6c5
                           00CBCA   713 _TMR2RL	=	0xcbca
                           00CDCC   714 _TMR2	=	0xcdcc
                           00D3D2   715 _PCA0CP5	=	0xd3d2
                           00EAE9   716 _PCA0CP1	=	0xeae9
                           00ECEB   717 _PCA0CP2	=	0xeceb
                           00EEED   718 _PCA0CP3	=	0xeeed
                           00FAF9   719 _PCA0	=	0xfaf9
                           00FCFB   720 _PCA0CP0	=	0xfcfb
                           00FEFD   721 _PCA0CP4	=	0xfefd
                           0000AA   722 __XPAGE	=	0x00aa
                                    723 ;--------------------------------------------------------
                                    724 ; special function bits
                                    725 ;--------------------------------------------------------
                                    726 	.area RSEG    (ABS,DATA)
      000000                        727 	.org 0x0000
                           00008F   728 _TF1	=	0x008f
                           00008E   729 _TR1	=	0x008e
                           00008D   730 _TF0	=	0x008d
                           00008C   731 _TR0	=	0x008c
                           00008B   732 _IE1	=	0x008b
                           00008A   733 _IT1	=	0x008a
                           000089   734 _IE0	=	0x0089
                           000088   735 _IT0	=	0x0088
                           00009F   736 _S0MODE	=	0x009f
                           00009D   737 _MCE0	=	0x009d
                           00009C   738 _REN0	=	0x009c
                           00009B   739 _TB80	=	0x009b
                           00009A   740 _RB80	=	0x009a
                           000099   741 _TI0	=	0x0099
                           000098   742 _RI0	=	0x0098
                           0000AF   743 _EA	=	0x00af
                           0000AE   744 _ESPI0	=	0x00ae
                           0000AD   745 _ET2	=	0x00ad
                           0000AC   746 _ES0	=	0x00ac
                           0000AB   747 _ET1	=	0x00ab
                           0000AA   748 _EX1	=	0x00aa
                           0000A9   749 _ET0	=	0x00a9
                           0000A8   750 _EX0	=	0x00a8
                           0000BE   751 _PSPI0	=	0x00be
                           0000BD   752 _PT2	=	0x00bd
                           0000BC   753 _PS0	=	0x00bc
                           0000BB   754 _PT1	=	0x00bb
                           0000BA   755 _PX1	=	0x00ba
                           0000B9   756 _PT0	=	0x00b9
                           0000B8   757 _PX0	=	0x00b8
                           0000C7   758 _MASTER	=	0x00c7
                           0000C6   759 _TXMODE	=	0x00c6
                           0000C5   760 _STA	=	0x00c5
                           0000C4   761 _STO	=	0x00c4
                           0000C3   762 _ACKRQ	=	0x00c3
                           0000C2   763 _ARBLOST	=	0x00c2
                           0000C1   764 _ACK	=	0x00c1
                           0000C0   765 _SI	=	0x00c0
                           0000CF   766 _TF2H	=	0x00cf
                           0000CE   767 _TF2L	=	0x00ce
                           0000CD   768 _TF2LEN	=	0x00cd
                           0000CC   769 _TF2CEN	=	0x00cc
                           0000CB   770 _T2SPLIT	=	0x00cb
                           0000CA   771 _TR2	=	0x00ca
                           0000C9   772 _T2RCLK	=	0x00c9
                           0000C8   773 _T2XCLK	=	0x00c8
                           0000D7   774 _CY	=	0x00d7
                           0000D6   775 _AC	=	0x00d6
                           0000D5   776 _F0	=	0x00d5
                           0000D4   777 _RS1	=	0x00d4
                           0000D3   778 _RS0	=	0x00d3
                           0000D2   779 _OV	=	0x00d2
                           0000D1   780 _F1	=	0x00d1
                           0000D0   781 _P	=	0x00d0
                           0000DF   782 _CF	=	0x00df
                           0000DE   783 _CR	=	0x00de
                           0000DD   784 _CCF5	=	0x00dd
                           0000DC   785 _CCF4	=	0x00dc
                           0000DB   786 _CCF3	=	0x00db
                           0000DA   787 _CCF2	=	0x00da
                           0000D9   788 _CCF1	=	0x00d9
                           0000D8   789 _CCF0	=	0x00d8
                           0000EF   790 _AD0EN	=	0x00ef
                           0000EE   791 _BURSTEN	=	0x00ee
                           0000ED   792 _AD0INT	=	0x00ed
                           0000EC   793 _AD0BUSY	=	0x00ec
                           0000EB   794 _AD0WINT	=	0x00eb
                           0000EA   795 _AD0CM2	=	0x00ea
                           0000E9   796 _AD0CM1	=	0x00e9
                           0000E8   797 _AD0CM0	=	0x00e8
                           0000FF   798 _SPIF0	=	0x00ff
                           0000FE   799 _WCOL0	=	0x00fe
                           0000FD   800 _MODF0	=	0x00fd
                           0000FC   801 _RXOVRN0	=	0x00fc
                           0000FB   802 _NSS0MD1	=	0x00fb
                           0000FA   803 _NSS0MD0	=	0x00fa
                           0000F9   804 _TXBMT0	=	0x00f9
                           0000F8   805 _SPI0EN	=	0x00f8
                           0000FF   806 _SPIF1	=	0x00ff
                           0000FE   807 _WCOL1	=	0x00fe
                           0000FD   808 _MODF1	=	0x00fd
                           0000FC   809 _RXOVRN1	=	0x00fc
                           0000FB   810 _NSS1MD1	=	0x00fb
                           0000FA   811 _NSS1MD0	=	0x00fa
                           0000F9   812 _TXBMT1	=	0x00f9
                           0000F8   813 _SPI1EN	=	0x00f8
                           0000B6   814 _LED_RED	=	0x00b6
                           0000B7   815 _LED_GREEN	=	0x00b7
                           000082   816 _PIN_CONFIG	=	0x0082
                           000083   817 _PIN_ENABLE	=	0x0083
                           0000A5   818 _PA_ENABLE	=	0x00a5
                           000081   819 _IRQ	=	0x0081
                           0000A3   820 _NSS1	=	0x00a3
                                    821 ;--------------------------------------------------------
                                    822 ; overlayable register banks
                                    823 ;--------------------------------------------------------
                                    824 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        825 	.ds 8
                                    826 ;--------------------------------------------------------
                                    827 ; internal ram data
                                    828 ;--------------------------------------------------------
                                    829 	.area DSEG    (DATA)
      000000                        830 _tdm_show_rssi_sloc0_1_0:
      000000                        831 	.ds 2
      000002                        832 _tdm_show_rssi_sloc1_1_0:
      000002                        833 	.ds 2
      000004                        834 _tdm_show_rssi_sloc2_1_0:
      000004                        835 	.ds 2
      000006                        836 _tdm_show_rssi_sloc3_1_0:
      000006                        837 	.ds 2
      000008                        838 _tdm_show_rssi_sloc4_1_0:
      000008                        839 	.ds 2
      00000A                        840 _sync_tx_windows_old_state_1_171:
      00000A                        841 	.ds 1
      00000B                        842 _tdm_state_update_sloc0_1_0:
      00000B                        843 	.ds 2
      00000D                        844 _tdm_state_update_sloc1_1_0:
      00000D                        845 	.ds 4
      000011                        846 _tdm_state_update_sloc2_1_0:
      000011                        847 	.ds 4
      000015                        848 _tdm_init_sloc0_1_0:
      000015                        849 	.ds 4
                                    850 ;--------------------------------------------------------
                                    851 ; overlayable items in internal ram 
                                    852 ;--------------------------------------------------------
                                    853 ;--------------------------------------------------------
                                    854 ; indirectly addressable internal ram data
                                    855 ;--------------------------------------------------------
                                    856 	.area ISEG    (DATA)
                           0000FF   857 __canary	=	0x00ff
                                    858 ;--------------------------------------------------------
                                    859 ; absolute internal ram data
                                    860 ;--------------------------------------------------------
                                    861 	.area IABS    (ABS,DATA)
                                    862 	.area IABS    (ABS,DATA)
                                    863 ;--------------------------------------------------------
                                    864 ; bit data
                                    865 ;--------------------------------------------------------
                                    866 	.area BSEG    (BIT)
      000000                        867 _bonus_transmit:
      000000                        868 	.ds 1
      000001                        869 _transmit_yield:
      000001                        870 	.ds 1
      000002                        871 _blink_state:
      000002                        872 	.ds 1
      000003                        873 _received_packet:
      000003                        874 	.ds 1
      000004                        875 _duty_cycle_wait:
      000004                        876 	.ds 1
      000005                        877 _send_statistics:
      000005                        878 	.ds 1
      000006                        879 _send_at_command:
      000006                        880 	.ds 1
      000007                        881 _sync_tx_windows_sloc0_1_0:
      000007                        882 	.ds 1
      000008                        883 _tdm_state_update_sloc3_1_0:
      000008                        884 	.ds 1
      000009                        885 _tdm_serial_loop_sloc0_1_0:
      000009                        886 	.ds 1
                                    887 ;--------------------------------------------------------
                                    888 ; paged external ram data
                                    889 ;--------------------------------------------------------
                                    890 	.area PSEG    (PAG,XDATA)
      000000                        891 _tdm_state:
      000000                        892 	.ds 1
      000001                        893 _tdm_state_remaining:
      000001                        894 	.ds 2
      000003                        895 _tx_window_width:
      000003                        896 	.ds 2
      000005                        897 _max_data_packet_length:
      000005                        898 	.ds 1
      000006                        899 _silence_period:
      000006                        900 	.ds 2
      000008                        901 _packet_latency:
      000008                        902 	.ds 2
      00000A                        903 _ticks_per_byte:
      00000A                        904 	.ds 2
      00000C                        905 _transmit_wait::
      00000C                        906 	.ds 2
      00000E                        907 _duty_cycle::
      00000E                        908 	.ds 1
      00000F                        909 _average_duty_cycle:
      00000F                        910 	.ds 4
      000013                        911 _duty_cycle_offset::
      000013                        912 	.ds 1
      000014                        913 _transmitted_ticks:
      000014                        914 	.ds 2
      000016                        915 _lbt_rssi::
      000016                        916 	.ds 1
      000017                        917 _lbt_listen_time:
      000017                        918 	.ds 2
      000019                        919 _lbt_min_time:
      000019                        920 	.ds 2
      00001B                        921 _lbt_rand:
      00001B                        922 	.ds 2
      00001D                        923 _trailer::
      00001D                        924 	.ds 2
      00001F                        925 _remote_at_cmd:
      00001F                        926 	.ds 70
      000065                        927 _sync_tx_windows_delta_2_178:
      000065                        928 	.ds 2
      000067                        929 _tdm_serial_loop_len_1_222:
      000067                        930 	.ds 1
      000068                        931 _tdm_serial_loop_tdelta_1_222:
      000068                        932 	.ds 2
      00006A                        933 _tdm_serial_loop_last_t_1_222:
      00006A                        934 	.ds 2
      00006C                        935 _tdm_serial_loop_last_link_update_1_222:
      00006C                        936 	.ds 2
                                    937 ;--------------------------------------------------------
                                    938 ; external ram data
                                    939 ;--------------------------------------------------------
                                    940 	.area XSEG    (XDATA)
      000000                        941 _pbuf::
      000000                        942 	.ds 252
      0000FC                        943 _test_display::
      0000FC                        944 	.ds 1
      0000FD                        945 _link_update_unlock_count_1_201:
      0000FD                        946 	.ds 1
      0000FE                        947 _link_update_temperature_count_1_201:
      0000FE                        948 	.ds 1
      0000FF                        949 _tdm_init_i_1_262:
      0000FF                        950 	.ds 2
      000101                        951 _tdm_init_window_width_1_262:
      000101                        952 	.ds 4
                                    953 ;--------------------------------------------------------
                                    954 ; absolute external ram data
                                    955 ;--------------------------------------------------------
                                    956 	.area XABS    (ABS,XDATA)
                                    957 ;--------------------------------------------------------
                                    958 ; external initialized ram data
                                    959 ;--------------------------------------------------------
                                    960 	.area XISEG   (XDATA)
                                    961 	.area HOME    (CODE)
                                    962 	.area GSINIT0 (CODE)
                                    963 	.area GSINIT1 (CODE)
                                    964 	.area GSINIT2 (CODE)
                                    965 	.area GSINIT3 (CODE)
                                    966 	.area GSINIT4 (CODE)
                                    967 	.area GSINIT5 (CODE)
                                    968 	.area GSINIT  (CODE)
                                    969 	.area GSFINAL (CODE)
                                    970 	.area CSEG    (CODE)
                                    971 ;--------------------------------------------------------
                                    972 ; global & static initialisations
                                    973 ;--------------------------------------------------------
                                    974 	.area HOME    (CODE)
                                    975 	.area GSINIT  (CODE)
                                    976 	.area GSFINAL (CODE)
                                    977 	.area GSINIT  (CODE)
                                    978 ;------------------------------------------------------------
                                    979 ;Allocation info for local variables in function 'link_update'
                                    980 ;------------------------------------------------------------
                                    981 ;old_remaining             Allocated to registers r6 r7 
                                    982 ;unlock_count              Allocated with name '_link_update_unlock_count_1_201'
                                    983 ;temperature_count         Allocated with name '_link_update_temperature_count_1_201'
                                    984 ;------------------------------------------------------------
                                    985 ;	radio/tdm.c:383: static uint8_t unlock_count = 10, temperature_count;
      000000 90r00rFD         [24]  986 	mov	dptr,#_link_update_unlock_count_1_201
      000003 74 0A            [12]  987 	mov	a,#0x0A
      000005 F0               [24]  988 	movx	@dptr,a
                                    989 ;--------------------------------------------------------
                                    990 ; Home
                                    991 ;--------------------------------------------------------
                                    992 	.area HOME    (CODE)
                                    993 	.area HOME    (CODE)
                                    994 ;--------------------------------------------------------
                                    995 ; code
                                    996 ;--------------------------------------------------------
                                    997 	.area CSEG    (CODE)
                                    998 ;------------------------------------------------------------
                                    999 ;Allocation info for local variables in function 'tdm_show_rssi'
                                   1000 ;------------------------------------------------------------
                                   1001 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                                   1002 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                                   1003 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                                   1004 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                                   1005 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                                   1006 ;------------------------------------------------------------
                                   1007 ;	radio/tdm.c:162: tdm_show_rssi(void)
                                   1008 ;	-----------------------------------------
                                   1009 ;	 function tdm_show_rssi
                                   1010 ;	-----------------------------------------
      000000                       1011 _tdm_show_rssi:
                           000007  1012 	ar7 = 0x07
                           000006  1013 	ar6 = 0x06
                           000005  1014 	ar5 = 0x05
                           000004  1015 	ar4 = 0x04
                           000003  1016 	ar3 = 0x03
                           000002  1017 	ar2 = 0x02
                           000001  1018 	ar1 = 0x01
                           000000  1019 	ar0 = 0x00
                                   1020 ;	radio/tdm.c:164: printf("L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u ",
      000000 78r02            [12] 1021 	mov	r0,#(_statistics + 0x0002)
      000002 E2               [24] 1022 	movx	a,@r0
      000003 FE               [12] 1023 	mov	r6,a
      000004 08               [12] 1024 	inc	r0
      000005 E2               [24] 1025 	movx	a,@r0
      000006 FF               [12] 1026 	mov	r7,a
      000007 78r01            [12] 1027 	mov	r0,#(_remote_statistics + 0x0001)
      000009 E2               [24] 1028 	movx	a,@r0
      00000A FD               [12] 1029 	mov	r5,a
      00000B 7C 00            [12] 1030 	mov	r4,#0x00
      00000D 78r01            [12] 1031 	mov	r0,#(_statistics + 0x0001)
      00000F E2               [24] 1032 	movx	a,@r0
      000010 FB               [12] 1033 	mov	r3,a
      000011 8B*00            [24] 1034 	mov	_tdm_show_rssi_sloc0_1_0,r3
                                   1035 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc0_1_0 + 1),#0x00
      000013 8C*01            [24] 1036 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),r4
      000015 78r00            [12] 1037 	mov	r0,#_remote_statistics
      000017 E2               [24] 1038 	movx	a,@r0
      000018 FB               [12] 1039 	mov	r3,a
      000019 8B*02            [24] 1040 	mov	_tdm_show_rssi_sloc1_1_0,r3
                                   1041 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
      00001B 8C*03            [24] 1042 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),r4
      00001D 78r00            [12] 1043 	mov	r0,#_statistics
      00001F E2               [24] 1044 	movx	a,@r0
      000020 FB               [12] 1045 	mov	r3,a
      000021 7A 00            [12] 1046 	mov	r2,#0x00
      000023 C0 06            [24] 1047 	push	ar6
      000025 C0 07            [24] 1048 	push	ar7
      000027 C0 05            [24] 1049 	push	ar5
      000029 C0 04            [24] 1050 	push	ar4
      00002B C0*00            [24] 1051 	push	_tdm_show_rssi_sloc0_1_0
      00002D C0*01            [24] 1052 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      00002F C0*02            [24] 1053 	push	_tdm_show_rssi_sloc1_1_0
      000031 C0*03            [24] 1054 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      000033 C0 03            [24] 1055 	push	ar3
      000035 C0 02            [24] 1056 	push	ar2
      000037 74r00            [12] 1057 	mov	a,#___str_0
      000039 C0 E0            [24] 1058 	push	acc
      00003B 74s00            [12] 1059 	mov	a,#(___str_0 >> 8)
      00003D C0 E0            [24] 1060 	push	acc
      00003F 74 80            [12] 1061 	mov	a,#0x80
      000041 C0 E0            [24] 1062 	push	acc
      000043 12r00r00         [24] 1063 	lcall	_printfl
      000046 E5 81            [12] 1064 	mov	a,sp
      000048 24 F3            [12] 1065 	add	a,#0xf3
      00004A F5 81            [12] 1066 	mov	sp,a
                                   1067 ;	radio/tdm.c:173: printf(" txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u\n",
      00004C 78r13            [12] 1068 	mov	r0,#_duty_cycle_offset
      00004E E2               [24] 1069 	movx	a,@r0
      00004F FE               [12] 1070 	mov	r6,a
      000050 7F 00            [12] 1071 	mov	r7,#0x00
      000052 C0 07            [24] 1072 	push	ar7
      000054 C0 06            [24] 1073 	push	ar6
      000056 12r00r00         [24] 1074 	lcall	_radio_temperature
      000059 AC 82            [24] 1075 	mov	r4,dpl
      00005B AD 83            [24] 1076 	mov	r5,dph
      00005D D0 06            [24] 1077 	pop	ar6
      00005F D0 07            [24] 1078 	pop	ar7
      000061 78r0A            [12] 1079 	mov	r0,#(_errors + 0x000a)
      000063 E2               [24] 1080 	movx	a,@r0
      000064 F5*02            [12] 1081 	mov	_tdm_show_rssi_sloc1_1_0,a
      000066 08               [12] 1082 	inc	r0
      000067 E2               [24] 1083 	movx	a,@r0
      000068 F5*03            [12] 1084 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
      00006A 78r08            [12] 1085 	mov	r0,#(_errors + 0x0008)
      00006C E2               [24] 1086 	movx	a,@r0
      00006D F5*00            [12] 1087 	mov	_tdm_show_rssi_sloc0_1_0,a
      00006F 08               [12] 1088 	inc	r0
      000070 E2               [24] 1089 	movx	a,@r0
      000071 F5*01            [12] 1090 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
      000073 78r06            [12] 1091 	mov	r0,#(_errors + 0x0006)
      000075 E2               [24] 1092 	movx	a,@r0
      000076 F5*04            [12] 1093 	mov	_tdm_show_rssi_sloc2_1_0,a
      000078 08               [12] 1094 	inc	r0
      000079 E2               [24] 1095 	movx	a,@r0
      00007A F5*05            [12] 1096 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
      00007C 78r04            [12] 1097 	mov	r0,#(_errors + 0x0004)
      00007E E2               [24] 1098 	movx	a,@r0
      00007F F5*06            [12] 1099 	mov	_tdm_show_rssi_sloc3_1_0,a
      000081 08               [12] 1100 	inc	r0
      000082 E2               [24] 1101 	movx	a,@r0
      000083 F5*07            [12] 1102 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
      000085 78r00            [12] 1103 	mov	r0,#_errors
      000087 E2               [24] 1104 	movx	a,@r0
      000088 F5*08            [12] 1105 	mov	_tdm_show_rssi_sloc4_1_0,a
      00008A 08               [12] 1106 	inc	r0
      00008B E2               [24] 1107 	movx	a,@r0
      00008C F5*09            [12] 1108 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
      00008E 78r02            [12] 1109 	mov	r0,#(_errors + 0x0002)
      000090 E2               [24] 1110 	movx	a,@r0
      000091 FA               [12] 1111 	mov	r2,a
      000092 08               [12] 1112 	inc	r0
      000093 E2               [24] 1113 	movx	a,@r0
      000094 FB               [12] 1114 	mov	r3,a
      000095 C0 06            [24] 1115 	push	ar6
      000097 C0 07            [24] 1116 	push	ar7
      000099 C0 04            [24] 1117 	push	ar4
      00009B C0 05            [24] 1118 	push	ar5
      00009D C0*02            [24] 1119 	push	_tdm_show_rssi_sloc1_1_0
      00009F C0*03            [24] 1120 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      0000A1 C0*00            [24] 1121 	push	_tdm_show_rssi_sloc0_1_0
      0000A3 C0*01            [24] 1122 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      0000A5 C0*04            [24] 1123 	push	_tdm_show_rssi_sloc2_1_0
      0000A7 C0*05            [24] 1124 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
      0000A9 C0*06            [24] 1125 	push	_tdm_show_rssi_sloc3_1_0
      0000AB C0*07            [24] 1126 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
      0000AD C0*08            [24] 1127 	push	_tdm_show_rssi_sloc4_1_0
      0000AF C0*09            [24] 1128 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
      0000B1 C0 02            [24] 1129 	push	ar2
      0000B3 C0 03            [24] 1130 	push	ar3
      0000B5 74r2C            [12] 1131 	mov	a,#___str_1
      0000B7 C0 E0            [24] 1132 	push	acc
      0000B9 74s00            [12] 1133 	mov	a,#(___str_1 >> 8)
      0000BB C0 E0            [24] 1134 	push	acc
      0000BD 74 80            [12] 1135 	mov	a,#0x80
      0000BF C0 E0            [24] 1136 	push	acc
      0000C1 12r00r00         [24] 1137 	lcall	_printfl
      0000C4 E5 81            [12] 1138 	mov	a,sp
      0000C6 24 ED            [12] 1139 	add	a,#0xed
      0000C8 F5 81            [12] 1140 	mov	sp,a
                                   1141 ;	radio/tdm.c:186: statistics.receive_count = 0;
      0000CA 78r02            [12] 1142 	mov	r0,#(_statistics + 0x0002)
      0000CC E4               [12] 1143 	clr	a
      0000CD F2               [24] 1144 	movx	@r0,a
      0000CE 08               [12] 1145 	inc	r0
      0000CF F2               [24] 1146 	movx	@r0,a
      0000D0 22               [24] 1147 	ret
                                   1148 ;------------------------------------------------------------
                                   1149 ;Allocation info for local variables in function 'display_test_output'
                                   1150 ;------------------------------------------------------------
                                   1151 ;	radio/tdm.c:192: display_test_output(void)
                                   1152 ;	-----------------------------------------
                                   1153 ;	 function display_test_output
                                   1154 ;	-----------------------------------------
      0000D1                       1155 _display_test_output:
                                   1156 ;	radio/tdm.c:194: if (test_display & AT_TEST_RSSI) {
      0000D1 90r00rFC         [24] 1157 	mov	dptr,#_test_display
      0000D4 E0               [24] 1158 	movx	a,@dptr
      0000D5 FF               [12] 1159 	mov	r7,a
      0000D6 30 E0 03         [24] 1160 	jnb	acc.0,00103$
                                   1161 ;	radio/tdm.c:195: tdm_show_rssi();
      0000D9 02r00r00         [24] 1162 	ljmp	_tdm_show_rssi
      0000DC                       1163 00103$:
      0000DC 22               [24] 1164 	ret
                                   1165 ;------------------------------------------------------------
                                   1166 ;Allocation info for local variables in function 'flight_time_estimate'
                                   1167 ;------------------------------------------------------------
                                   1168 ;	radio/tdm.c:205: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                                   1169 ;	-----------------------------------------
                                   1170 ;	 function flight_time_estimate
                                   1171 ;	-----------------------------------------
      0000DD                       1172 _flight_time_estimate:
      0000DD AF 82            [24] 1173 	mov	r7,dpl
                                   1174 ;	radio/tdm.c:207: return packet_latency + (packet_len * ticks_per_byte);
      0000DF 7E 00            [12] 1175 	mov	r6,#0x00
      0000E1 78r0A            [12] 1176 	mov	r0,#_ticks_per_byte
      0000E3 90r00r00         [24] 1177 	mov	dptr,#__mulint_PARM_2
      0000E6 E2               [24] 1178 	movx	a,@r0
      0000E7 F0               [24] 1179 	movx	@dptr,a
      0000E8 08               [12] 1180 	inc	r0
      0000E9 E2               [24] 1181 	movx	a,@r0
      0000EA A3               [24] 1182 	inc	dptr
      0000EB F0               [24] 1183 	movx	@dptr,a
      0000EC 8F 82            [24] 1184 	mov	dpl,r7
      0000EE 8E 83            [24] 1185 	mov	dph,r6
      0000F0 12r00r00         [24] 1186 	lcall	__mulint
      0000F3 AE 82            [24] 1187 	mov	r6,dpl
      0000F5 AF 83            [24] 1188 	mov	r7,dph
      0000F7 78r08            [12] 1189 	mov	r0,#_packet_latency
      0000F9 E2               [24] 1190 	movx	a,@r0
      0000FA 2E               [12] 1191 	add	a,r6
      0000FB FE               [12] 1192 	mov	r6,a
      0000FC 08               [12] 1193 	inc	r0
      0000FD E2               [24] 1194 	movx	a,@r0
      0000FE 3F               [12] 1195 	addc	a,r7
      0000FF 8E 82            [24] 1196 	mov	dpl,r6
      000101 F5 83            [12] 1197 	mov	dph,a
      000103 22               [24] 1198 	ret
                                   1199 ;------------------------------------------------------------
                                   1200 ;Allocation info for local variables in function 'sync_tx_windows'
                                   1201 ;------------------------------------------------------------
                                   1202 ;old_state                 Allocated with name '_sync_tx_windows_old_state_1_171'
                                   1203 ;------------------------------------------------------------
                                   1204 ;	radio/tdm.c:221: sync_tx_windows(__pdata uint8_t packet_length)
                                   1205 ;	-----------------------------------------
                                   1206 ;	 function sync_tx_windows
                                   1207 ;	-----------------------------------------
      000104                       1208 _sync_tx_windows:
      000104 AF 82            [24] 1209 	mov	r7,dpl
                                   1210 ;	radio/tdm.c:223: __data enum tdm_state old_state = tdm_state;
      000106 78r00            [12] 1211 	mov	r0,#_tdm_state
      000108 E2               [24] 1212 	movx	a,@r0
      000109 F5*0A            [12] 1213 	mov	_sync_tx_windows_old_state_1_171,a
                                   1214 ;	radio/tdm.c:224: __pdata uint16_t old_remaining = tdm_state_remaining;
      00010B 78r01            [12] 1215 	mov	r0,#_tdm_state_remaining
      00010D E2               [24] 1216 	movx	a,@r0
      00010E FC               [12] 1217 	mov	r4,a
      00010F 08               [12] 1218 	inc	r0
      000110 E2               [24] 1219 	movx	a,@r0
      000111 FD               [12] 1220 	mov	r5,a
                                   1221 ;	radio/tdm.c:226: if (trailer.bonus) {
      000112 78r1E            [12] 1222 	mov	r0,#(_trailer + 0x0001)
      000114 E2               [24] 1223 	movx	a,@r0
      000115 30 E6 46         [24] 1224 	jnb	acc.6,00109$
                                   1225 ;	radio/tdm.c:229: if (old_state == TDM_SILENCE1) {
      000118 74 01            [12] 1226 	mov	a,#0x01
      00011A B5*0A 10         [24] 1227 	cjne	a,_sync_tx_windows_old_state_1_171,00106$
                                   1228 ;	radio/tdm.c:235: tdm_state_remaining = silence_period;
      00011D 78r06            [12] 1229 	mov	r0,#_silence_period
      00011F E2               [24] 1230 	movx	a,@r0
      000120 FA               [12] 1231 	mov	r2,a
      000121 08               [12] 1232 	inc	r0
      000122 E2               [24] 1233 	movx	a,@r0
      000123 FB               [12] 1234 	mov	r3,a
      000124 78r01            [12] 1235 	mov	r0,#_tdm_state_remaining
      000126 EA               [12] 1236 	mov	a,r2
      000127 F2               [24] 1237 	movx	@r0,a
      000128 08               [12] 1238 	inc	r0
      000129 EB               [12] 1239 	mov	a,r3
      00012A F2               [24] 1240 	movx	@r0,a
      00012B 80 46            [24] 1241 	sjmp	00110$
      00012D                       1242 00106$:
                                   1243 ;	radio/tdm.c:236: } else if (old_state == TDM_RECEIVE || old_state == TDM_SILENCE2) {
      00012D 74 02            [12] 1244 	mov	a,#0x02
      00012F B5*0A 02         [24] 1245 	cjne	a,_sync_tx_windows_old_state_1_171,00151$
      000132 80 05            [24] 1246 	sjmp	00101$
      000134                       1247 00151$:
      000134 74 03            [12] 1248 	mov	a,#0x03
      000136 B5*0A 0F         [24] 1249 	cjne	a,_sync_tx_windows_old_state_1_171,00102$
      000139                       1250 00101$:
                                   1251 ;	radio/tdm.c:241: tdm_state = TDM_SILENCE2;
      000139 78r00            [12] 1252 	mov	r0,#_tdm_state
      00013B 74 03            [12] 1253 	mov	a,#0x03
      00013D F2               [24] 1254 	movx	@r0,a
                                   1255 ;	radio/tdm.c:242: tdm_state_remaining = 1;
      00013E 78r01            [12] 1256 	mov	r0,#_tdm_state_remaining
      000140 74 01            [12] 1257 	mov	a,#0x01
      000142 F2               [24] 1258 	movx	@r0,a
      000143 08               [12] 1259 	inc	r0
      000144 E4               [12] 1260 	clr	a
      000145 F2               [24] 1261 	movx	@r0,a
      000146 80 2B            [24] 1262 	sjmp	00110$
      000148                       1263 00102$:
                                   1264 ;	radio/tdm.c:244: tdm_state = TDM_TRANSMIT;
      000148 78r00            [12] 1265 	mov	r0,#_tdm_state
      00014A E4               [12] 1266 	clr	a
      00014B F2               [24] 1267 	movx	@r0,a
                                   1268 ;	radio/tdm.c:245: tdm_state_remaining = trailer.window;
      00014C 78r1D            [12] 1269 	mov	r0,#_trailer
      00014E E2               [24] 1270 	movx	a,@r0
      00014F FA               [12] 1271 	mov	r2,a
      000150 08               [12] 1272 	inc	r0
      000151 E2               [24] 1273 	movx	a,@r0
      000152 54 1F            [12] 1274 	anl	a,#0x1F
      000154 FB               [12] 1275 	mov	r3,a
      000155 78r01            [12] 1276 	mov	r0,#_tdm_state_remaining
      000157 EA               [12] 1277 	mov	a,r2
      000158 F2               [24] 1278 	movx	@r0,a
      000159 08               [12] 1279 	inc	r0
      00015A EB               [12] 1280 	mov	a,r3
      00015B F2               [24] 1281 	movx	@r0,a
      00015C 80 15            [24] 1282 	sjmp	00110$
      00015E                       1283 00109$:
                                   1284 ;	radio/tdm.c:250: tdm_state = TDM_RECEIVE;
      00015E 78r00            [12] 1285 	mov	r0,#_tdm_state
      000160 74 02            [12] 1286 	mov	a,#0x02
      000162 F2               [24] 1287 	movx	@r0,a
                                   1288 ;	radio/tdm.c:251: tdm_state_remaining = trailer.window;
      000163 78r1D            [12] 1289 	mov	r0,#_trailer
      000165 E2               [24] 1290 	movx	a,@r0
      000166 FA               [12] 1291 	mov	r2,a
      000167 08               [12] 1292 	inc	r0
      000168 E2               [24] 1293 	movx	a,@r0
      000169 54 1F            [12] 1294 	anl	a,#0x1F
      00016B FB               [12] 1295 	mov	r3,a
      00016C 78r01            [12] 1296 	mov	r0,#_tdm_state_remaining
      00016E EA               [12] 1297 	mov	a,r2
      00016F F2               [24] 1298 	movx	@r0,a
      000170 08               [12] 1299 	inc	r0
      000171 EB               [12] 1300 	mov	a,r3
      000172 F2               [24] 1301 	movx	@r0,a
      000173                       1302 00110$:
                                   1303 ;	radio/tdm.c:256: bonus_transmit = (tdm_state == TDM_RECEIVE && packet_length==0);
      000173 78r00            [12] 1304 	mov	r0,#_tdm_state
      000175 E2               [24] 1305 	movx	a,@r0
      000176 B4 02 03         [24] 1306 	cjne	a,#0x02,00121$
      000179 EF               [12] 1307 	mov	a,r7
      00017A 60 04            [24] 1308 	jz	00122$
      00017C                       1309 00121$:
      00017C C2*07            [12] 1310 	clr	_sync_tx_windows_sloc0_1_0
      00017E 80 02            [24] 1311 	sjmp	00123$
      000180                       1312 00122$:
      000180 D2*07            [12] 1313 	setb	_sync_tx_windows_sloc0_1_0
      000182                       1314 00123$:
      000182 A2*07            [12] 1315 	mov	c,_sync_tx_windows_sloc0_1_0
      000184 92*00            [24] 1316 	mov	_bonus_transmit,c
                                   1317 ;	radio/tdm.c:259: if (tdm_state != TDM_TRANSMIT) {
      000186 78r00            [12] 1318 	mov	r0,#_tdm_state
      000188 E2               [24] 1319 	movx	a,@r0
      000189 60 02            [24] 1320 	jz	00112$
                                   1321 ;	radio/tdm.c:260: transmit_yield = 0;
      00018B C2*01            [12] 1322 	clr	_transmit_yield
      00018D                       1323 00112$:
                                   1324 ;	radio/tdm.c:263: if (at_testmode & AT_TEST_TDM) {
      00018D 78r00            [12] 1325 	mov	r0,#_at_testmode
      00018F E2               [24] 1326 	movx	a,@r0
      000190 54 02            [12] 1327 	anl	a,#0x02
      000192 70 01            [24] 1328 	jnz	00158$
      000194 22               [24] 1329 	ret
      000195                       1330 00158$:
                                   1331 ;	radio/tdm.c:265: delta = old_remaining - tdm_state_remaining;
      000195 78r01            [12] 1332 	mov	r0,#_tdm_state_remaining
      000197 79r65            [12] 1333 	mov	r1,#_sync_tx_windows_delta_2_178
      000199 D3               [12] 1334 	setb	c
      00019A E2               [24] 1335 	movx	a,@r0
      00019B 9C               [12] 1336 	subb	a,r4
      00019C F4               [12] 1337 	cpl	a
      00019D B3               [12] 1338 	cpl	c
      00019E F3               [24] 1339 	movx	@r1,a
      00019F B3               [12] 1340 	cpl	c
      0001A0 08               [12] 1341 	inc	r0
      0001A1 E2               [24] 1342 	movx	a,@r0
      0001A2 9D               [12] 1343 	subb	a,r5
      0001A3 F4               [12] 1344 	cpl	a
      0001A4 09               [12] 1345 	inc	r1
      0001A5 F3               [24] 1346 	movx	@r1,a
                                   1347 ;	radio/tdm.c:266: if (old_state != tdm_state ||
      0001A6 78r00            [12] 1348 	mov	r0,#_tdm_state
      0001A8 E2               [24] 1349 	movx	a,@r0
      0001A9 B5*0A 6E         [24] 1350 	cjne	a,_sync_tx_windows_old_state_1_171,00113$
                                   1351 ;	radio/tdm.c:267: delta > (int16_t)packet_latency/2 ||
      0001AC C0 07            [24] 1352 	push	ar7
      0001AE 78r08            [12] 1353 	mov	r0,#_packet_latency
      0001B0 E2               [24] 1354 	movx	a,@r0
      0001B1 FA               [12] 1355 	mov	r2,a
      0001B2 08               [12] 1356 	inc	r0
      0001B3 E2               [24] 1357 	movx	a,@r0
      0001B4 FB               [12] 1358 	mov	r3,a
      0001B5 90r00r00         [24] 1359 	mov	dptr,#__divsint_PARM_2
      0001B8 74 02            [12] 1360 	mov	a,#0x02
      0001BA F0               [24] 1361 	movx	@dptr,a
      0001BB E4               [12] 1362 	clr	a
      0001BC A3               [24] 1363 	inc	dptr
      0001BD F0               [24] 1364 	movx	@dptr,a
      0001BE 8A 82            [24] 1365 	mov	dpl,r2
      0001C0 8B 83            [24] 1366 	mov	dph,r3
      0001C2 C0 03            [24] 1367 	push	ar3
      0001C4 C0 02            [24] 1368 	push	ar2
      0001C6 12r00r00         [24] 1369 	lcall	__divsint
      0001C9 AE 82            [24] 1370 	mov	r6,dpl
      0001CB AF 83            [24] 1371 	mov	r7,dph
      0001CD D0 02            [24] 1372 	pop	ar2
      0001CF D0 03            [24] 1373 	pop	ar3
      0001D1 78r65            [12] 1374 	mov	r0,#_sync_tx_windows_delta_2_178
      0001D3 C3               [12] 1375 	clr	c
      0001D4 E2               [24] 1376 	movx	a,@r0
      0001D5 F5 F0            [12] 1377 	mov	b,a
      0001D7 EE               [12] 1378 	mov	a,r6
      0001D8 95 F0            [12] 1379 	subb	a,b
      0001DA 08               [12] 1380 	inc	r0
      0001DB E2               [24] 1381 	movx	a,@r0
      0001DC F5 F0            [12] 1382 	mov	b,a
      0001DE EF               [12] 1383 	mov	a,r7
      0001DF 64 80            [12] 1384 	xrl	a,#0x80
      0001E1 63 F0 80         [24] 1385 	xrl	b,#0x80
      0001E4 95 F0            [12] 1386 	subb	a,b
      0001E6 D0 07            [24] 1387 	pop	ar7
                                   1388 ;	radio/tdm.c:268: delta < -(int16_t)packet_latency/2) {
      0001E8 40 30            [24] 1389 	jc	00113$
      0001EA E4               [12] 1390 	clr	a
      0001EB 9A               [12] 1391 	subb	a,r2
      0001EC FA               [12] 1392 	mov	r2,a
      0001ED E4               [12] 1393 	clr	a
      0001EE 9B               [12] 1394 	subb	a,r3
      0001EF FB               [12] 1395 	mov	r3,a
      0001F0 90r00r00         [24] 1396 	mov	dptr,#__divsint_PARM_2
      0001F3 74 02            [12] 1397 	mov	a,#0x02
      0001F5 F0               [24] 1398 	movx	@dptr,a
      0001F6 E4               [12] 1399 	clr	a
      0001F7 A3               [24] 1400 	inc	dptr
      0001F8 F0               [24] 1401 	movx	@dptr,a
      0001F9 8A 82            [24] 1402 	mov	dpl,r2
      0001FB 8B 83            [24] 1403 	mov	dph,r3
      0001FD C0 07            [24] 1404 	push	ar7
      0001FF 12r00r00         [24] 1405 	lcall	__divsint
      000202 AB 82            [24] 1406 	mov	r3,dpl
      000204 AE 83            [24] 1407 	mov	r6,dph
      000206 D0 07            [24] 1408 	pop	ar7
      000208 78r65            [12] 1409 	mov	r0,#_sync_tx_windows_delta_2_178
      00020A C3               [12] 1410 	clr	c
      00020B E2               [24] 1411 	movx	a,@r0
      00020C 9B               [12] 1412 	subb	a,r3
      00020D 08               [12] 1413 	inc	r0
      00020E E2               [24] 1414 	movx	a,@r0
      00020F 64 80            [12] 1415 	xrl	a,#0x80
      000211 8E F0            [24] 1416 	mov	b,r6
      000213 63 F0 80         [24] 1417 	xrl	b,#0x80
      000216 95 F0            [12] 1418 	subb	a,b
      000218 50 4B            [24] 1419 	jnc	00119$
      00021A                       1420 00113$:
                                   1421 ;	radio/tdm.c:269: printf("TDM: %u/%u len=%u ",
      00021A 7E 00            [12] 1422 	mov	r6,#0x00
      00021C 78r00            [12] 1423 	mov	r0,#_tdm_state
      00021E E2               [24] 1424 	movx	a,@r0
      00021F FA               [12] 1425 	mov	r2,a
      000220 7B 00            [12] 1426 	mov	r3,#0x00
      000222 AC*0A            [24] 1427 	mov	r4,_sync_tx_windows_old_state_1_171
      000224 7D 00            [12] 1428 	mov	r5,#0x00
      000226 C0 07            [24] 1429 	push	ar7
      000228 C0 06            [24] 1430 	push	ar6
      00022A C0 02            [24] 1431 	push	ar2
      00022C C0 03            [24] 1432 	push	ar3
      00022E C0 04            [24] 1433 	push	ar4
      000230 C0 05            [24] 1434 	push	ar5
      000232 74r63            [12] 1435 	mov	a,#___str_2
      000234 C0 E0            [24] 1436 	push	acc
      000236 74s00            [12] 1437 	mov	a,#(___str_2 >> 8)
      000238 C0 E0            [24] 1438 	push	acc
      00023A 74 80            [12] 1439 	mov	a,#0x80
      00023C C0 E0            [24] 1440 	push	acc
      00023E 12r00r00         [24] 1441 	lcall	_printfl
      000241 E5 81            [12] 1442 	mov	a,sp
      000243 24 F7            [12] 1443 	add	a,#0xf7
      000245 F5 81            [12] 1444 	mov	sp,a
                                   1445 ;	radio/tdm.c:273: printf(" delta: %d\n",(int)delta);
      000247 78r65            [12] 1446 	mov	r0,#_sync_tx_windows_delta_2_178
      000249 E2               [24] 1447 	movx	a,@r0
      00024A C0 E0            [24] 1448 	push	acc
      00024C 08               [12] 1449 	inc	r0
      00024D E2               [24] 1450 	movx	a,@r0
      00024E C0 E0            [24] 1451 	push	acc
      000250 74r76            [12] 1452 	mov	a,#___str_3
      000252 C0 E0            [24] 1453 	push	acc
      000254 74s00            [12] 1454 	mov	a,#(___str_3 >> 8)
      000256 C0 E0            [24] 1455 	push	acc
      000258 74 80            [12] 1456 	mov	a,#0x80
      00025A C0 E0            [24] 1457 	push	acc
      00025C 12r00r00         [24] 1458 	lcall	_printfl
      00025F E5 81            [12] 1459 	mov	a,sp
      000261 24 FB            [12] 1460 	add	a,#0xfb
      000263 F5 81            [12] 1461 	mov	sp,a
      000265                       1462 00119$:
      000265 22               [24] 1463 	ret
                                   1464 ;------------------------------------------------------------
                                   1465 ;Allocation info for local variables in function 'tdm_state_update'
                                   1466 ;------------------------------------------------------------
                                   1467 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                                   1468 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                                   1469 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                                   1470 ;------------------------------------------------------------
                                   1471 ;	radio/tdm.c:281: tdm_state_update(__pdata uint16_t tdelta)
                                   1472 ;	-----------------------------------------
                                   1473 ;	 function tdm_state_update
                                   1474 ;	-----------------------------------------
      000266                       1475 _tdm_state_update:
      000266 AE 82            [24] 1476 	mov	r6,dpl
      000268 AF 83            [24] 1477 	mov	r7,dph
                                   1478 ;	radio/tdm.c:285: if (tdelta > transmit_wait) {
      00026A 78r0C            [12] 1479 	mov	r0,#_transmit_wait
      00026C C3               [12] 1480 	clr	c
      00026D E2               [24] 1481 	movx	a,@r0
      00026E 9E               [12] 1482 	subb	a,r6
      00026F 08               [12] 1483 	inc	r0
      000270 E2               [24] 1484 	movx	a,@r0
      000271 9F               [12] 1485 	subb	a,r7
      000272 50 08            [24] 1486 	jnc	00102$
                                   1487 ;	radio/tdm.c:286: transmit_wait = 0;
      000274 78r0C            [12] 1488 	mov	r0,#_transmit_wait
      000276 E4               [12] 1489 	clr	a
      000277 F2               [24] 1490 	movx	@r0,a
      000278 08               [12] 1491 	inc	r0
      000279 F2               [24] 1492 	movx	@r0,a
      00027A 80 0A            [24] 1493 	sjmp	00116$
      00027C                       1494 00102$:
                                   1495 ;	radio/tdm.c:288: transmit_wait -= tdelta;
      00027C 78r0C            [12] 1496 	mov	r0,#_transmit_wait
      00027E E2               [24] 1497 	movx	a,@r0
      00027F C3               [12] 1498 	clr	c
      000280 9E               [12] 1499 	subb	a,r6
      000281 F2               [24] 1500 	movx	@r0,a
      000282 08               [12] 1501 	inc	r0
      000283 E2               [24] 1502 	movx	a,@r0
      000284 9F               [12] 1503 	subb	a,r7
      000285 F2               [24] 1504 	movx	@r0,a
                                   1505 ;	radio/tdm.c:292: while (tdelta >= tdm_state_remaining) {
      000286                       1506 00116$:
      000286 78r01            [12] 1507 	mov	r0,#_tdm_state_remaining
      000288 C3               [12] 1508 	clr	c
      000289 E2               [24] 1509 	movx	a,@r0
      00028A F5 F0            [12] 1510 	mov	b,a
      00028C EE               [12] 1511 	mov	a,r6
      00028D 95 F0            [12] 1512 	subb	a,b
      00028F 08               [12] 1513 	inc	r0
      000290 E2               [24] 1514 	movx	a,@r0
      000291 F5 F0            [12] 1515 	mov	b,a
      000293 EF               [12] 1516 	mov	a,r7
      000294 95 F0            [12] 1517 	subb	a,b
      000296 50 03            [24] 1518 	jnc	00146$
      000298 02r04rD1         [24] 1519 	ljmp	00118$
      00029B                       1520 00146$:
                                   1521 ;	radio/tdm.c:294: tdm_state = (tdm_state+1) % 4;
      00029B 78r00            [12] 1522 	mov	r0,#_tdm_state
      00029D E2               [24] 1523 	movx	a,@r0
      00029E FC               [12] 1524 	mov	r4,a
      00029F 7D 00            [12] 1525 	mov	r5,#0x00
      0002A1 0C               [12] 1526 	inc	r4
      0002A2 BC 00 01         [24] 1527 	cjne	r4,#0x00,00147$
      0002A5 0D               [12] 1528 	inc	r5
      0002A6                       1529 00147$:
      0002A6 90r00r00         [24] 1530 	mov	dptr,#__modsint_PARM_2
      0002A9 74 04            [12] 1531 	mov	a,#0x04
      0002AB F0               [24] 1532 	movx	@dptr,a
      0002AC E4               [12] 1533 	clr	a
      0002AD A3               [24] 1534 	inc	dptr
      0002AE F0               [24] 1535 	movx	@dptr,a
      0002AF 8C 82            [24] 1536 	mov	dpl,r4
      0002B1 8D 83            [24] 1537 	mov	dph,r5
      0002B3 C0 07            [24] 1538 	push	ar7
      0002B5 C0 06            [24] 1539 	push	ar6
      0002B7 12r00r00         [24] 1540 	lcall	__modsint
      0002BA AC 82            [24] 1541 	mov	r4,dpl
      0002BC AD 83            [24] 1542 	mov	r5,dph
      0002BE D0 06            [24] 1543 	pop	ar6
      0002C0 D0 07            [24] 1544 	pop	ar7
      0002C2 78r00            [12] 1545 	mov	r0,#_tdm_state
      0002C4 EC               [12] 1546 	mov	a,r4
      0002C5 F2               [24] 1547 	movx	@r0,a
                                   1548 ;	radio/tdm.c:297: tdelta -= tdm_state_remaining;
      0002C6 78r01            [12] 1549 	mov	r0,#_tdm_state_remaining
      0002C8 D3               [12] 1550 	setb	c
      0002C9 E2               [24] 1551 	movx	a,@r0
      0002CA 9E               [12] 1552 	subb	a,r6
      0002CB F4               [12] 1553 	cpl	a
      0002CC B3               [12] 1554 	cpl	c
      0002CD FE               [12] 1555 	mov	r6,a
      0002CE B3               [12] 1556 	cpl	c
      0002CF 08               [12] 1557 	inc	r0
      0002D0 E2               [24] 1558 	movx	a,@r0
      0002D1 9F               [12] 1559 	subb	a,r7
      0002D2 F4               [12] 1560 	cpl	a
      0002D3 FF               [12] 1561 	mov	r7,a
                                   1562 ;	radio/tdm.c:299: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_RECEIVE) {
      0002D4 78r00            [12] 1563 	mov	r0,#_tdm_state
      0002D6 E2               [24] 1564 	movx	a,@r0
      0002D7 60 06            [24] 1565 	jz	00104$
      0002D9 78r00            [12] 1566 	mov	r0,#_tdm_state
      0002DB E2               [24] 1567 	movx	a,@r0
      0002DC B4 02 10         [24] 1568 	cjne	a,#0x02,00105$
      0002DF                       1569 00104$:
                                   1570 ;	radio/tdm.c:300: tdm_state_remaining = tx_window_width;
      0002DF 78r03            [12] 1571 	mov	r0,#_tx_window_width
      0002E1 E2               [24] 1572 	movx	a,@r0
      0002E2 FC               [12] 1573 	mov	r4,a
      0002E3 08               [12] 1574 	inc	r0
      0002E4 E2               [24] 1575 	movx	a,@r0
      0002E5 FD               [12] 1576 	mov	r5,a
      0002E6 78r01            [12] 1577 	mov	r0,#_tdm_state_remaining
      0002E8 EC               [12] 1578 	mov	a,r4
      0002E9 F2               [24] 1579 	movx	@r0,a
      0002EA 08               [12] 1580 	inc	r0
      0002EB ED               [12] 1581 	mov	a,r5
      0002EC F2               [24] 1582 	movx	@r0,a
      0002ED 80 0E            [24] 1583 	sjmp	00106$
      0002EF                       1584 00105$:
                                   1585 ;	radio/tdm.c:302: tdm_state_remaining = silence_period;
      0002EF 78r06            [12] 1586 	mov	r0,#_silence_period
      0002F1 E2               [24] 1587 	movx	a,@r0
      0002F2 FC               [12] 1588 	mov	r4,a
      0002F3 08               [12] 1589 	inc	r0
      0002F4 E2               [24] 1590 	movx	a,@r0
      0002F5 FD               [12] 1591 	mov	r5,a
      0002F6 78r01            [12] 1592 	mov	r0,#_tdm_state_remaining
      0002F8 EC               [12] 1593 	mov	a,r4
      0002F9 F2               [24] 1594 	movx	@r0,a
      0002FA 08               [12] 1595 	inc	r0
      0002FB ED               [12] 1596 	mov	a,r5
      0002FC F2               [24] 1597 	movx	@r0,a
      0002FD                       1598 00106$:
                                   1599 ;	radio/tdm.c:308: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_SILENCE1) {
      0002FD 78r00            [12] 1600 	mov	r0,#_tdm_state
      0002FF E2               [24] 1601 	movx	a,@r0
      000300 60 06            [24] 1602 	jz	00110$
      000302 78r00            [12] 1603 	mov	r0,#_tdm_state
      000304 E2               [24] 1604 	movx	a,@r0
      000305 B4 01 25         [24] 1605 	cjne	a,#0x01,00111$
      000308                       1606 00110$:
                                   1607 ;	radio/tdm.c:309: fhop_window_change();
      000308 C0 07            [24] 1608 	push	ar7
      00030A C0 06            [24] 1609 	push	ar6
      00030C 12r00r00         [24] 1610 	lcall	_fhop_window_change
                                   1611 ;	radio/tdm.c:310: radio_receiver_on();
      00030F 12r00r00         [24] 1612 	lcall	_radio_receiver_on
      000312 D0 06            [24] 1613 	pop	ar6
      000314 D0 07            [24] 1614 	pop	ar7
                                   1615 ;	radio/tdm.c:312: if (num_fh_channels > 1) {
      000316 78r00            [12] 1616 	mov	r0,#_num_fh_channels
      000318 C3               [12] 1617 	clr	c
      000319 E2               [24] 1618 	movx	a,@r0
      00031A F5 F0            [12] 1619 	mov	b,a
      00031C 74 01            [12] 1620 	mov	a,#0x01
      00031E 95 F0            [12] 1621 	subb	a,b
      000320 50 0B            [24] 1622 	jnc	00111$
                                   1623 ;	radio/tdm.c:314: lbt_listen_time = 0;
      000322 78r17            [12] 1624 	mov	r0,#_lbt_listen_time
      000324 E4               [12] 1625 	clr	a
      000325 F2               [24] 1626 	movx	@r0,a
      000326 08               [12] 1627 	inc	r0
      000327 F2               [24] 1628 	movx	@r0,a
                                   1629 ;	radio/tdm.c:315: lbt_rand = 0;
      000328 78r1B            [12] 1630 	mov	r0,#_lbt_rand
      00032A F2               [24] 1631 	movx	@r0,a
      00032B 08               [12] 1632 	inc	r0
      00032C F2               [24] 1633 	movx	@r0,a
      00032D                       1634 00111$:
                                   1635 ;	radio/tdm.c:319: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
      00032D 78r00            [12] 1636 	mov	r0,#_tdm_state
      00032F E2               [24] 1637 	movx	a,@r0
      000330 60 03            [24] 1638 	jz	00155$
      000332 02r04rC4         [24] 1639 	ljmp	00114$
      000335                       1640 00155$:
      000335 C0 06            [24] 1641 	push	ar6
      000337 C0 07            [24] 1642 	push	ar7
      000339 78r0E            [12] 1643 	mov	r0,#_duty_cycle
      00033B E2               [24] 1644 	movx	a,@r0
      00033C FC               [12] 1645 	mov	r4,a
      00033D 7D 00            [12] 1646 	mov	r5,#0x00
      00033F 78r13            [12] 1647 	mov	r0,#_duty_cycle_offset
      000341 E2               [24] 1648 	movx	a,@r0
      000342 F5*0B            [12] 1649 	mov	_tdm_state_update_sloc0_1_0,a
                                   1650 ;	1-genFromRTrack replaced	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
      000344 8D*0C            [24] 1651 	mov	(_tdm_state_update_sloc0_1_0 + 1),r5
      000346 EC               [12] 1652 	mov	a,r4
      000347 C3               [12] 1653 	clr	c
      000348 95*0B            [12] 1654 	subb	a,_tdm_state_update_sloc0_1_0
      00034A FE               [12] 1655 	mov	r6,a
      00034B ED               [12] 1656 	mov	a,r5
      00034C 95*0C            [12] 1657 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      00034E FF               [12] 1658 	mov	r7,a
      00034F BE 64 0A         [24] 1659 	cjne	r6,#0x64,00156$
      000352 BF 00 07         [24] 1660 	cjne	r7,#0x00,00156$
      000355 D0 07            [24] 1661 	pop	ar7
      000357 D0 06            [24] 1662 	pop	ar6
      000359 02r04rC4         [24] 1663 	ljmp	00114$
      00035C                       1664 00156$:
      00035C D0 07            [24] 1665 	pop	ar7
      00035E D0 06            [24] 1666 	pop	ar6
                                   1667 ;	radio/tdm.c:321: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
      000360 C0 06            [24] 1668 	push	ar6
      000362 C0 07            [24] 1669 	push	ar7
      000364 C0 07            [24] 1670 	push	ar7
      000366 C0 06            [24] 1671 	push	ar6
      000368 C0 05            [24] 1672 	push	ar5
      00036A C0 04            [24] 1673 	push	ar4
      00036C 78r0F            [12] 1674 	mov	r0,#_average_duty_cycle
      00036E E2               [24] 1675 	movx	a,@r0
      00036F C0 E0            [24] 1676 	push	acc
      000371 08               [12] 1677 	inc	r0
      000372 E2               [24] 1678 	movx	a,@r0
      000373 C0 E0            [24] 1679 	push	acc
      000375 08               [12] 1680 	inc	r0
      000376 E2               [24] 1681 	movx	a,@r0
      000377 C0 E0            [24] 1682 	push	acc
      000379 08               [12] 1683 	inc	r0
      00037A E2               [24] 1684 	movx	a,@r0
      00037B C0 E0            [24] 1685 	push	acc
      00037D 90 33 33         [24] 1686 	mov	dptr,#0x3333
      000380 75 F0 73         [24] 1687 	mov	b,#0x73
      000383 74 3F            [12] 1688 	mov	a,#0x3F
      000385 12r00r00         [24] 1689 	lcall	___fsmul
      000388 85 82*0D         [24] 1690 	mov	_tdm_state_update_sloc1_1_0,dpl
      00038B 85 83*0E         [24] 1691 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
      00038E 85 F0*0F         [24] 1692 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
      000391 F5*10            [12] 1693 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
      000393 E5 81            [12] 1694 	mov	a,sp
      000395 24 FC            [12] 1695 	add	a,#0xfc
      000397 F5 81            [12] 1696 	mov	sp,a
      000399 D0 04            [24] 1697 	pop	ar4
      00039B D0 05            [24] 1698 	pop	ar5
      00039D D0 06            [24] 1699 	pop	ar6
      00039F D0 07            [24] 1700 	pop	ar7
      0003A1 78r14            [12] 1701 	mov	r0,#_transmitted_ticks
      0003A3 E2               [24] 1702 	movx	a,@r0
      0003A4 F5 82            [12] 1703 	mov	dpl,a
      0003A6 08               [12] 1704 	inc	r0
      0003A7 E2               [24] 1705 	movx	a,@r0
      0003A8 F5 83            [12] 1706 	mov	dph,a
      0003AA C0 05            [24] 1707 	push	ar5
      0003AC C0 04            [24] 1708 	push	ar4
      0003AE 12r00r00         [24] 1709 	lcall	___uint2fs
      0003B1 AA 82            [24] 1710 	mov	r2,dpl
      0003B3 AB 83            [24] 1711 	mov	r3,dph
      0003B5 AE F0            [24] 1712 	mov	r6,b
      0003B7 FF               [12] 1713 	mov	r7,a
      0003B8 D0 04            [24] 1714 	pop	ar4
      0003BA D0 05            [24] 1715 	pop	ar5
      0003BC C0 07            [24] 1716 	push	ar7
      0003BE C0 06            [24] 1717 	push	ar6
      0003C0 C0 05            [24] 1718 	push	ar5
      0003C2 C0 04            [24] 1719 	push	ar4
      0003C4 C0 02            [24] 1720 	push	ar2
      0003C6 C0 03            [24] 1721 	push	ar3
      0003C8 C0 06            [24] 1722 	push	ar6
      0003CA C0 07            [24] 1723 	push	ar7
      0003CC 90 00 00         [24] 1724 	mov	dptr,#0x0000
      0003CF 75 F0 A0         [24] 1725 	mov	b,#0xA0
      0003D2 74 40            [12] 1726 	mov	a,#0x40
      0003D4 12r00r00         [24] 1727 	lcall	___fsmul
      0003D7 85 82*11         [24] 1728 	mov	_tdm_state_update_sloc2_1_0,dpl
      0003DA 85 83*12         [24] 1729 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
      0003DD 85 F0*13         [24] 1730 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
      0003E0 F5*14            [12] 1731 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
      0003E2 E5 81            [12] 1732 	mov	a,sp
      0003E4 24 FC            [12] 1733 	add	a,#0xfc
      0003E6 F5 81            [12] 1734 	mov	sp,a
      0003E8 D0 04            [24] 1735 	pop	ar4
      0003EA D0 05            [24] 1736 	pop	ar5
      0003EC D0 06            [24] 1737 	pop	ar6
      0003EE D0 07            [24] 1738 	pop	ar7
      0003F0 78r06            [12] 1739 	mov	r0,#_silence_period
      0003F2 79r03            [12] 1740 	mov	r1,#_tx_window_width
      0003F4 E3               [24] 1741 	movx	a,@r1
      0003F5 C5 F0            [12] 1742 	xch	a,b
      0003F7 E2               [24] 1743 	movx	a,@r0
      0003F8 25 F0            [12] 1744 	add	a,b
      0003FA FE               [12] 1745 	mov	r6,a
      0003FB 09               [12] 1746 	inc	r1
      0003FC E3               [24] 1747 	movx	a,@r1
      0003FD C5 F0            [12] 1748 	xch	a,b
      0003FF 08               [12] 1749 	inc	r0
      000400 E2               [24] 1750 	movx	a,@r0
      000401 35 F0            [12] 1751 	addc	a,b
      000403 CE               [12] 1752 	xch	a,r6
      000404 25 E0            [12] 1753 	add	a,acc
      000406 CE               [12] 1754 	xch	a,r6
      000407 33               [12] 1755 	rlc	a
      000408 FF               [12] 1756 	mov	r7,a
      000409 8E 82            [24] 1757 	mov	dpl,r6
      00040B 8F 83            [24] 1758 	mov	dph,r7
      00040D C0 05            [24] 1759 	push	ar5
      00040F C0 04            [24] 1760 	push	ar4
      000411 12r00r00         [24] 1761 	lcall	___uint2fs
      000414 AA 82            [24] 1762 	mov	r2,dpl
      000416 AB 83            [24] 1763 	mov	r3,dph
      000418 AE F0            [24] 1764 	mov	r6,b
      00041A FF               [12] 1765 	mov	r7,a
      00041B C0 02            [24] 1766 	push	ar2
      00041D C0 03            [24] 1767 	push	ar3
      00041F C0 06            [24] 1768 	push	ar6
      000421 C0 07            [24] 1769 	push	ar7
      000423 85*11 82         [24] 1770 	mov	dpl,_tdm_state_update_sloc2_1_0
      000426 85*12 83         [24] 1771 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
      000429 85*13 F0         [24] 1772 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
      00042C E5*14            [12] 1773 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
      00042E 12r00r00         [24] 1774 	lcall	___fsdiv
      000431 AA 82            [24] 1775 	mov	r2,dpl
      000433 AB 83            [24] 1776 	mov	r3,dph
      000435 AE F0            [24] 1777 	mov	r6,b
      000437 FF               [12] 1778 	mov	r7,a
      000438 E5 81            [12] 1779 	mov	a,sp
      00043A 24 FC            [12] 1780 	add	a,#0xfc
      00043C F5 81            [12] 1781 	mov	sp,a
      00043E C0 02            [24] 1782 	push	ar2
      000440 C0 03            [24] 1783 	push	ar3
      000442 C0 06            [24] 1784 	push	ar6
      000444 C0 07            [24] 1785 	push	ar7
      000446 85*0D 82         [24] 1786 	mov	dpl,_tdm_state_update_sloc1_1_0
      000449 85*0E 83         [24] 1787 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
      00044C 85*0F F0         [24] 1788 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
      00044F E5*10            [12] 1789 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
      000451 12r00r00         [24] 1790 	lcall	___fsadd
      000454 AA 82            [24] 1791 	mov	r2,dpl
      000456 AB 83            [24] 1792 	mov	r3,dph
      000458 AE F0            [24] 1793 	mov	r6,b
      00045A FF               [12] 1794 	mov	r7,a
      00045B E5 81            [12] 1795 	mov	a,sp
      00045D 24 FC            [12] 1796 	add	a,#0xfc
      00045F F5 81            [12] 1797 	mov	sp,a
      000461 D0 04            [24] 1798 	pop	ar4
      000463 D0 05            [24] 1799 	pop	ar5
      000465 78r0F            [12] 1800 	mov	r0,#_average_duty_cycle
      000467 EA               [12] 1801 	mov	a,r2
      000468 F2               [24] 1802 	movx	@r0,a
      000469 08               [12] 1803 	inc	r0
      00046A EB               [12] 1804 	mov	a,r3
      00046B F2               [24] 1805 	movx	@r0,a
      00046C 08               [12] 1806 	inc	r0
      00046D EE               [12] 1807 	mov	a,r6
      00046E F2               [24] 1808 	movx	@r0,a
      00046F 08               [12] 1809 	inc	r0
      000470 EF               [12] 1810 	mov	a,r7
      000471 F2               [24] 1811 	movx	@r0,a
                                   1812 ;	radio/tdm.c:322: transmitted_ticks = 0;
      000472 78r14            [12] 1813 	mov	r0,#_transmitted_ticks
      000474 E4               [12] 1814 	clr	a
      000475 F2               [24] 1815 	movx	@r0,a
      000476 08               [12] 1816 	inc	r0
      000477 F2               [24] 1817 	movx	@r0,a
                                   1818 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      000478 EC               [12] 1819 	mov	a,r4
      000479 C3               [12] 1820 	clr	c
      00047A 95*0B            [12] 1821 	subb	a,_tdm_state_update_sloc0_1_0
      00047C FC               [12] 1822 	mov	r4,a
      00047D ED               [12] 1823 	mov	a,r5
      00047E 95*0C            [12] 1824 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      000480 FD               [12] 1825 	mov	r5,a
      000481 8C 82            [24] 1826 	mov	dpl,r4
      000483 8D 83            [24] 1827 	mov	dph,r5
      000485 12r00r00         [24] 1828 	lcall	___sint2fs
      000488 AC 82            [24] 1829 	mov	r4,dpl
      00048A AD 83            [24] 1830 	mov	r5,dph
      00048C AE F0            [24] 1831 	mov	r6,b
      00048E FF               [12] 1832 	mov	r7,a
      00048F C0 07            [24] 1833 	push	ar7
      000491 C0 06            [24] 1834 	push	ar6
      000493 C0 04            [24] 1835 	push	ar4
      000495 C0 05            [24] 1836 	push	ar5
      000497 C0 06            [24] 1837 	push	ar6
      000499 C0 07            [24] 1838 	push	ar7
      00049B 78r0F            [12] 1839 	mov	r0,#_average_duty_cycle
      00049D E2               [24] 1840 	movx	a,@r0
      00049E F5 82            [12] 1841 	mov	dpl,a
      0004A0 08               [12] 1842 	inc	r0
      0004A1 E2               [24] 1843 	movx	a,@r0
      0004A2 F5 83            [12] 1844 	mov	dph,a
      0004A4 08               [12] 1845 	inc	r0
      0004A5 E2               [24] 1846 	movx	a,@r0
      0004A6 F5 F0            [12] 1847 	mov	b,a
      0004A8 08               [12] 1848 	inc	r0
      0004A9 E2               [24] 1849 	movx	a,@r0
      0004AA 12r00r00         [24] 1850 	lcall	___fslt
      0004AD E5 81            [12] 1851 	mov	a,sp
      0004AF 24 FC            [12] 1852 	add	a,#0xfc
      0004B1 F5 81            [12] 1853 	mov	sp,a
      0004B3 D0 06            [24] 1854 	pop	ar6
      0004B5 D0 07            [24] 1855 	pop	ar7
      0004B7 E5 82            [12] 1856 	mov	a,dpl
      0004B9 24 FF            [12] 1857 	add	a,#0xFF
      0004BB 92*08            [24] 1858 	mov  _tdm_state_update_sloc3_1_0,c
      0004BD B3               [12] 1859 	cpl	c
      0004BE 92*04            [24] 1860 	mov	_duty_cycle_wait,c
                                   1861 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004C0 D0 07            [24] 1862 	pop	ar7
      0004C2 D0 06            [24] 1863 	pop	ar6
                                   1864 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      0004C4                       1865 00114$:
                                   1866 ;	radio/tdm.c:327: bonus_transmit = 0;
      0004C4 C2*00            [12] 1867 	clr	_bonus_transmit
                                   1868 ;	radio/tdm.c:330: transmit_yield = 0;
      0004C6 C2*01            [12] 1869 	clr	_transmit_yield
                                   1870 ;	radio/tdm.c:333: transmit_wait = 0;
      0004C8 78r0C            [12] 1871 	mov	r0,#_transmit_wait
      0004CA E4               [12] 1872 	clr	a
      0004CB F2               [24] 1873 	movx	@r0,a
      0004CC 08               [12] 1874 	inc	r0
      0004CD F2               [24] 1875 	movx	@r0,a
      0004CE 02r02r86         [24] 1876 	ljmp	00116$
      0004D1                       1877 00118$:
                                   1878 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004D1 78r01            [12] 1879 	mov	r0,#_tdm_state_remaining
      0004D3 E2               [24] 1880 	movx	a,@r0
      0004D4 C3               [12] 1881 	clr	c
      0004D5 9E               [12] 1882 	subb	a,r6
      0004D6 F2               [24] 1883 	movx	@r0,a
      0004D7 08               [12] 1884 	inc	r0
      0004D8 E2               [24] 1885 	movx	a,@r0
      0004D9 9F               [12] 1886 	subb	a,r7
      0004DA F2               [24] 1887 	movx	@r0,a
      0004DB 22               [24] 1888 	ret
                                   1889 ;------------------------------------------------------------
                                   1890 ;Allocation info for local variables in function 'tdm_change_phase'
                                   1891 ;------------------------------------------------------------
                                   1892 ;	radio/tdm.c:342: tdm_change_phase(void)
                                   1893 ;	-----------------------------------------
                                   1894 ;	 function tdm_change_phase
                                   1895 ;	-----------------------------------------
      0004DC                       1896 _tdm_change_phase:
                                   1897 ;	radio/tdm.c:344: tdm_state = (tdm_state+2) % 4;
      0004DC 78r00            [12] 1898 	mov	r0,#_tdm_state
      0004DE E2               [24] 1899 	movx	a,@r0
      0004DF FE               [12] 1900 	mov	r6,a
      0004E0 7F 00            [12] 1901 	mov	r7,#0x00
      0004E2 74 02            [12] 1902 	mov	a,#0x02
      0004E4 2E               [12] 1903 	add	a,r6
      0004E5 FE               [12] 1904 	mov	r6,a
      0004E6 E4               [12] 1905 	clr	a
      0004E7 3F               [12] 1906 	addc	a,r7
      0004E8 FF               [12] 1907 	mov	r7,a
      0004E9 90r00r00         [24] 1908 	mov	dptr,#__modsint_PARM_2
      0004EC 74 04            [12] 1909 	mov	a,#0x04
      0004EE F0               [24] 1910 	movx	@dptr,a
      0004EF E4               [12] 1911 	clr	a
      0004F0 A3               [24] 1912 	inc	dptr
      0004F1 F0               [24] 1913 	movx	@dptr,a
      0004F2 8E 82            [24] 1914 	mov	dpl,r6
      0004F4 8F 83            [24] 1915 	mov	dph,r7
      0004F6 12r00r00         [24] 1916 	lcall	__modsint
      0004F9 AE 82            [24] 1917 	mov	r6,dpl
      0004FB 78r00            [12] 1918 	mov	r0,#_tdm_state
      0004FD EE               [12] 1919 	mov	a,r6
      0004FE F2               [24] 1920 	movx	@r0,a
      0004FF 22               [24] 1921 	ret
                                   1922 ;------------------------------------------------------------
                                   1923 ;Allocation info for local variables in function 'temperature_update'
                                   1924 ;------------------------------------------------------------
                                   1925 ;diff                      Allocated to registers r6 r7 
                                   1926 ;------------------------------------------------------------
                                   1927 ;	radio/tdm.c:349: static void temperature_update(void)
                                   1928 ;	-----------------------------------------
                                   1929 ;	 function temperature_update
                                   1930 ;	-----------------------------------------
      000500                       1931 _temperature_update:
                                   1932 ;	radio/tdm.c:352: if (radio_get_transmit_power() <= 20) {
      000500 12r00r00         [24] 1933 	lcall	_radio_get_transmit_power
      000503 E5 82            [12] 1934 	mov	a,dpl
      000505 FF               [12] 1935 	mov	r7,a
      000506 24 EB            [12] 1936 	add	a,#0xff - 0x14
      000508 40 05            [24] 1937 	jc	00102$
                                   1938 ;	radio/tdm.c:353: duty_cycle_offset = 0;
      00050A 78r13            [12] 1939 	mov	r0,#_duty_cycle_offset
      00050C E4               [12] 1940 	clr	a
      00050D F2               [24] 1941 	movx	@r0,a
                                   1942 ;	radio/tdm.c:354: return;
      00050E 22               [24] 1943 	ret
      00050F                       1944 00102$:
                                   1945 ;	radio/tdm.c:357: diff = radio_temperature() - MAX_PA_TEMPERATURE;
      00050F 12r00r00         [24] 1946 	lcall	_radio_temperature
      000512 E5 82            [12] 1947 	mov	a,dpl
      000514 85 83 F0         [24] 1948 	mov	b,dph
      000517 24 9C            [12] 1949 	add	a,#0x9C
      000519 FE               [12] 1950 	mov	r6,a
      00051A E5 F0            [12] 1951 	mov	a,b
      00051C 34 FF            [12] 1952 	addc	a,#0xFF
      00051E FF               [12] 1953 	mov	r7,a
                                   1954 ;	radio/tdm.c:358: if (diff <= 0 && duty_cycle_offset > 0) {
      00051F C3               [12] 1955 	clr	c
      000520 E4               [12] 1956 	clr	a
      000521 9E               [12] 1957 	subb	a,r6
      000522 74 80            [12] 1958 	mov	a,#(0x00 ^ 0x80)
      000524 8F F0            [24] 1959 	mov	b,r7
      000526 63 F0 80         [24] 1960 	xrl	b,#0x80
      000529 95 F0            [12] 1961 	subb	a,b
      00052B E4               [12] 1962 	clr	a
      00052C 33               [12] 1963 	rlc	a
      00052D FD               [12] 1964 	mov	r5,a
      00052E 70 0C            [24] 1965 	jnz	00112$
      000530 78r13            [12] 1966 	mov	r0,#_duty_cycle_offset
      000532 E2               [24] 1967 	movx	a,@r0
      000533 60 07            [24] 1968 	jz	00112$
                                   1969 ;	radio/tdm.c:360: duty_cycle_offset -= 1;
      000535 78r13            [12] 1970 	mov	r0,#_duty_cycle_offset
      000537 E2               [24] 1971 	movx	a,@r0
      000538 14               [12] 1972 	dec	a
      000539 F2               [24] 1973 	movx	@r0,a
      00053A 80 37            [24] 1974 	sjmp	00113$
      00053C                       1975 00112$:
                                   1976 ;	radio/tdm.c:361: } else if (diff > 10) {
      00053C C3               [12] 1977 	clr	c
      00053D 74 0A            [12] 1978 	mov	a,#0x0A
      00053F 9E               [12] 1979 	subb	a,r6
      000540 74 80            [12] 1980 	mov	a,#(0x00 ^ 0x80)
      000542 8F F0            [24] 1981 	mov	b,r7
      000544 63 F0 80         [24] 1982 	xrl	b,#0x80
      000547 95 F0            [12] 1983 	subb	a,b
      000549 50 08            [24] 1984 	jnc	00109$
                                   1985 ;	radio/tdm.c:363: duty_cycle_offset += 10;
      00054B 78r13            [12] 1986 	mov	r0,#_duty_cycle_offset
      00054D E2               [24] 1987 	movx	a,@r0
      00054E 24 0A            [12] 1988 	add	a,#0x0A
      000550 F2               [24] 1989 	movx	@r0,a
      000551 80 20            [24] 1990 	sjmp	00113$
      000553                       1991 00109$:
                                   1992 ;	radio/tdm.c:364: } else if (diff > 5) {
      000553 C3               [12] 1993 	clr	c
      000554 74 05            [12] 1994 	mov	a,#0x05
      000556 9E               [12] 1995 	subb	a,r6
      000557 74 80            [12] 1996 	mov	a,#(0x00 ^ 0x80)
      000559 8F F0            [24] 1997 	mov	b,r7
      00055B 63 F0 80         [24] 1998 	xrl	b,#0x80
      00055E 95 F0            [12] 1999 	subb	a,b
      000560 50 08            [24] 2000 	jnc	00106$
                                   2001 ;	radio/tdm.c:366: duty_cycle_offset += 5;
      000562 78r13            [12] 2002 	mov	r0,#_duty_cycle_offset
      000564 E2               [24] 2003 	movx	a,@r0
      000565 24 05            [12] 2004 	add	a,#0x05
      000567 F2               [24] 2005 	movx	@r0,a
      000568 80 09            [24] 2006 	sjmp	00113$
      00056A                       2007 00106$:
                                   2008 ;	radio/tdm.c:367: } else if (diff > 0) {
      00056A ED               [12] 2009 	mov	a,r5
      00056B 60 06            [24] 2010 	jz	00113$
                                   2011 ;	radio/tdm.c:369: duty_cycle_offset += 1;				
      00056D 78r13            [12] 2012 	mov	r0,#_duty_cycle_offset
      00056F E2               [24] 2013 	movx	a,@r0
      000570 24 01            [12] 2014 	add	a,#0x01
      000572 F2               [24] 2015 	movx	@r0,a
      000573                       2016 00113$:
                                   2017 ;	radio/tdm.c:372: if ((duty_cycle-duty_cycle_offset) < 20) {
      000573 78r0E            [12] 2018 	mov	r0,#_duty_cycle
      000575 E2               [24] 2019 	movx	a,@r0
      000576 FE               [12] 2020 	mov	r6,a
      000577 7F 00            [12] 2021 	mov	r7,#0x00
      000579 78r13            [12] 2022 	mov	r0,#_duty_cycle_offset
      00057B E2               [24] 2023 	movx	a,@r0
      00057C FC               [12] 2024 	mov	r4,a
      00057D 7D 00            [12] 2025 	mov	r5,#0x00
      00057F EE               [12] 2026 	mov	a,r6
      000580 C3               [12] 2027 	clr	c
      000581 9C               [12] 2028 	subb	a,r4
      000582 FE               [12] 2029 	mov	r6,a
      000583 EF               [12] 2030 	mov	a,r7
      000584 9D               [12] 2031 	subb	a,r5
      000585 FF               [12] 2032 	mov	r7,a
      000586 C3               [12] 2033 	clr	c
      000587 EE               [12] 2034 	mov	a,r6
      000588 94 14            [12] 2035 	subb	a,#0x14
      00058A EF               [12] 2036 	mov	a,r7
      00058B 64 80            [12] 2037 	xrl	a,#0x80
      00058D 94 80            [12] 2038 	subb	a,#0x80
      00058F 50 08            [24] 2039 	jnc	00117$
                                   2040 ;	radio/tdm.c:373: duty_cycle_offset = duty_cycle - 20;
      000591 78r0E            [12] 2041 	mov	r0,#_duty_cycle
      000593 79r13            [12] 2042 	mov	r1,#_duty_cycle_offset
      000595 E2               [24] 2043 	movx	a,@r0
      000596 24 EC            [12] 2044 	add	a,#0xEC
      000598 F3               [24] 2045 	movx	@r1,a
      000599                       2046 00117$:
      000599 22               [24] 2047 	ret
                                   2048 ;------------------------------------------------------------
                                   2049 ;Allocation info for local variables in function 'link_update'
                                   2050 ;------------------------------------------------------------
                                   2051 ;old_remaining             Allocated to registers r6 r7 
                                   2052 ;unlock_count              Allocated with name '_link_update_unlock_count_1_201'
                                   2053 ;temperature_count         Allocated with name '_link_update_temperature_count_1_201'
                                   2054 ;------------------------------------------------------------
                                   2055 ;	radio/tdm.c:381: link_update(void)
                                   2056 ;	-----------------------------------------
                                   2057 ;	 function link_update
                                   2058 ;	-----------------------------------------
      00059A                       2059 _link_update:
                                   2060 ;	radio/tdm.c:384: if (received_packet) {
      00059A 30*03 09         [24] 2061 	jnb	_received_packet,00102$
                                   2062 ;	radio/tdm.c:385: unlock_count = 0;
      00059D 90r00rFD         [24] 2063 	mov	dptr,#_link_update_unlock_count_1_201
      0005A0 E4               [12] 2064 	clr	a
      0005A1 F0               [24] 2065 	movx	@dptr,a
                                   2066 ;	radio/tdm.c:386: received_packet = false;
      0005A2 C2*03            [12] 2067 	clr	_received_packet
      0005A4 80 07            [24] 2068 	sjmp	00103$
      0005A6                       2069 00102$:
                                   2070 ;	radio/tdm.c:391: unlock_count++;
      0005A6 90r00rFD         [24] 2071 	mov	dptr,#_link_update_unlock_count_1_201
      0005A9 E0               [24] 2072 	movx	a,@dptr
      0005AA 24 01            [12] 2073 	add	a,#0x01
      0005AC F0               [24] 2074 	movx	@dptr,a
      0005AD                       2075 00103$:
                                   2076 ;	radio/tdm.c:394: if (unlock_count < 2) {
      0005AD 90r00rFD         [24] 2077 	mov	dptr,#_link_update_unlock_count_1_201
      0005B0 E0               [24] 2078 	movx	a,@dptr
      0005B1 FF               [12] 2079 	mov	r7,a
      0005B2 BF 02 00         [24] 2080 	cjne	r7,#0x02,00157$
      0005B5                       2081 00157$:
      0005B5 50 04            [24] 2082 	jnc	00105$
                                   2083 ;	radio/tdm.c:395: LED_RADIO = LED_ON;
      0005B7 D2 B7            [12] 2084 	setb	_LED_GREEN
      0005B9 80 06            [24] 2085 	sjmp	00106$
      0005BB                       2086 00105$:
                                   2087 ;	radio/tdm.c:401: LED_RADIO = blink_state;
      0005BB A2*02            [12] 2088 	mov	c,_blink_state
      0005BD 92 B7            [24] 2089 	mov	_LED_GREEN,c
                                   2090 ;	radio/tdm.c:402: blink_state = !blink_state;
      0005BF B2*02            [12] 2091 	cpl	_blink_state
      0005C1                       2092 00106$:
                                   2093 ;	radio/tdm.c:405: if (unlock_count > 40) {
      0005C1 EF               [12] 2094 	mov	a,r7
      0005C2 24 D7            [12] 2095 	add	a,#0xff - 0x28
      0005C4 40 03            [24] 2096 	jc	00159$
      0005C6 02r06r51         [24] 2097 	ljmp	00117$
      0005C9                       2098 00159$:
                                   2099 ;	radio/tdm.c:409: unlock_count = 5;
      0005C9 90r00rFD         [24] 2100 	mov	dptr,#_link_update_unlock_count_1_201
      0005CC 74 05            [12] 2101 	mov	a,#0x05
      0005CE F0               [24] 2102 	movx	@dptr,a
                                   2103 ;	radio/tdm.c:413: if (timer_entropy() & 1) {
      0005CF 12r00r00         [24] 2104 	lcall	_timer_entropy
      0005D2 E5 82            [12] 2105 	mov	a,dpl
      0005D4 30 E0 59         [24] 2106 	jnb	acc.0,00113$
                                   2107 ;	radio/tdm.c:414: register uint16_t old_remaining = tdm_state_remaining;
      0005D7 78r01            [12] 2108 	mov	r0,#_tdm_state_remaining
      0005D9 E2               [24] 2109 	movx	a,@r0
      0005DA FE               [12] 2110 	mov	r6,a
      0005DB 08               [12] 2111 	inc	r0
      0005DC E2               [24] 2112 	movx	a,@r0
      0005DD FF               [12] 2113 	mov	r7,a
                                   2114 ;	radio/tdm.c:415: if (tdm_state_remaining > silence_period) {
      0005DE 78r06            [12] 2115 	mov	r0,#_silence_period
      0005E0 C3               [12] 2116 	clr	c
      0005E1 E2               [24] 2117 	movx	a,@r0
      0005E2 9E               [12] 2118 	subb	a,r6
      0005E3 08               [12] 2119 	inc	r0
      0005E4 E2               [24] 2120 	movx	a,@r0
      0005E5 9F               [12] 2121 	subb	a,r7
      0005E6 50 17            [24] 2122 	jnc	00108$
                                   2123 ;	radio/tdm.c:416: tdm_state_remaining -= packet_latency;
      0005E8 78r08            [12] 2124 	mov	r0,#_packet_latency
      0005EA D3               [12] 2125 	setb	c
      0005EB E2               [24] 2126 	movx	a,@r0
      0005EC 9E               [12] 2127 	subb	a,r6
      0005ED F4               [12] 2128 	cpl	a
      0005EE B3               [12] 2129 	cpl	c
      0005EF FC               [12] 2130 	mov	r4,a
      0005F0 B3               [12] 2131 	cpl	c
      0005F1 08               [12] 2132 	inc	r0
      0005F2 E2               [24] 2133 	movx	a,@r0
      0005F3 9F               [12] 2134 	subb	a,r7
      0005F4 F4               [12] 2135 	cpl	a
      0005F5 FD               [12] 2136 	mov	r5,a
      0005F6 78r01            [12] 2137 	mov	r0,#_tdm_state_remaining
      0005F8 EC               [12] 2138 	mov	a,r4
      0005F9 F2               [24] 2139 	movx	@r0,a
      0005FA 08               [12] 2140 	inc	r0
      0005FB ED               [12] 2141 	mov	a,r5
      0005FC F2               [24] 2142 	movx	@r0,a
      0005FD 80 08            [24] 2143 	sjmp	00109$
      0005FF                       2144 00108$:
                                   2145 ;	radio/tdm.c:418: tdm_state_remaining = 1;
      0005FF 78r01            [12] 2146 	mov	r0,#_tdm_state_remaining
      000601 74 01            [12] 2147 	mov	a,#0x01
      000603 F2               [24] 2148 	movx	@r0,a
      000604 08               [12] 2149 	inc	r0
      000605 E4               [12] 2150 	clr	a
      000606 F2               [24] 2151 	movx	@r0,a
      000607                       2152 00109$:
                                   2153 ;	radio/tdm.c:420: if (at_testmode & AT_TEST_TDM) {
      000607 78r00            [12] 2154 	mov	r0,#_at_testmode
      000609 E2               [24] 2155 	movx	a,@r0
      00060A 54 02            [12] 2156 	anl	a,#0x02
      00060C 60 22            [24] 2157 	jz	00113$
                                   2158 ;	radio/tdm.c:421: printf("TDM: change timing %u/%u\n",
      00060E 78r01            [12] 2159 	mov	r0,#_tdm_state_remaining
      000610 E2               [24] 2160 	movx	a,@r0
      000611 C0 E0            [24] 2161 	push	acc
      000613 08               [12] 2162 	inc	r0
      000614 E2               [24] 2163 	movx	a,@r0
      000615 C0 E0            [24] 2164 	push	acc
      000617 C0 06            [24] 2165 	push	ar6
      000619 C0 07            [24] 2166 	push	ar7
      00061B 74r82            [12] 2167 	mov	a,#___str_4
      00061D C0 E0            [24] 2168 	push	acc
      00061F 74s00            [12] 2169 	mov	a,#(___str_4 >> 8)
      000621 C0 E0            [24] 2170 	push	acc
      000623 74 80            [12] 2171 	mov	a,#0x80
      000625 C0 E0            [24] 2172 	push	acc
      000627 12r00r00         [24] 2173 	lcall	_printfl
      00062A E5 81            [12] 2174 	mov	a,sp
      00062C 24 F9            [12] 2175 	add	a,#0xf9
      00062E F5 81            [12] 2176 	mov	sp,a
      000630                       2177 00113$:
                                   2178 ;	radio/tdm.c:427: if (at_testmode & AT_TEST_TDM) {
      000630 78r00            [12] 2179 	mov	r0,#_at_testmode
      000632 E2               [24] 2180 	movx	a,@r0
      000633 54 02            [12] 2181 	anl	a,#0x02
      000635 60 15            [24] 2182 	jz	00115$
                                   2183 ;	radio/tdm.c:428: printf("TDM: scanning\n");
      000637 74r9C            [12] 2184 	mov	a,#___str_5
      000639 C0 E0            [24] 2185 	push	acc
      00063B 74s00            [12] 2186 	mov	a,#(___str_5 >> 8)
      00063D C0 E0            [24] 2187 	push	acc
      00063F 74 80            [12] 2188 	mov	a,#0x80
      000641 C0 E0            [24] 2189 	push	acc
      000643 12r00r00         [24] 2190 	lcall	_printfl
      000646 15 81            [12] 2191 	dec	sp
      000648 15 81            [12] 2192 	dec	sp
      00064A 15 81            [12] 2193 	dec	sp
      00064C                       2194 00115$:
                                   2195 ;	radio/tdm.c:430: fhop_set_locked(false);
      00064C C2*00            [12] 2196 	clr	_fhop_set_locked_PARM_1
      00064E 12r00r00         [24] 2197 	lcall	_fhop_set_locked
      000651                       2198 00117$:
                                   2199 ;	radio/tdm.c:433: if (unlock_count != 0) {
      000651 90r00rFD         [24] 2200 	mov	dptr,#_link_update_unlock_count_1_201
      000654 E0               [24] 2201 	movx	a,@dptr
      000655 60 3D            [24] 2202 	jz	00119$
                                   2203 ;	radio/tdm.c:434: statistics.average_rssi = (radio_last_rssi() + 3*(uint16_t)statistics.average_rssi)/4;
      000657 12r00r00         [24] 2204 	lcall	_radio_last_rssi
      00065A AF 82            [24] 2205 	mov	r7,dpl
      00065C 7E 00            [12] 2206 	mov	r6,#0x00
      00065E 78r00            [12] 2207 	mov	r0,#_statistics
      000660 E2               [24] 2208 	movx	a,@r0
      000661 90r00r00         [24] 2209 	mov	dptr,#__mulint_PARM_2
      000664 F0               [24] 2210 	movx	@dptr,a
      000665 E4               [12] 2211 	clr	a
      000666 A3               [24] 2212 	inc	dptr
      000667 F0               [24] 2213 	movx	@dptr,a
      000668 90 00 03         [24] 2214 	mov	dptr,#0x0003
      00066B C0 07            [24] 2215 	push	ar7
      00066D C0 06            [24] 2216 	push	ar6
      00066F 12r00r00         [24] 2217 	lcall	__mulint
      000672 AC 82            [24] 2218 	mov	r4,dpl
      000674 AD 83            [24] 2219 	mov	r5,dph
      000676 D0 06            [24] 2220 	pop	ar6
      000678 D0 07            [24] 2221 	pop	ar7
      00067A EC               [12] 2222 	mov	a,r4
      00067B 2F               [12] 2223 	add	a,r7
      00067C FC               [12] 2224 	mov	r4,a
      00067D ED               [12] 2225 	mov	a,r5
      00067E 3E               [12] 2226 	addc	a,r6
      00067F C3               [12] 2227 	clr	c
      000680 13               [12] 2228 	rrc	a
      000681 CC               [12] 2229 	xch	a,r4
      000682 13               [12] 2230 	rrc	a
      000683 CC               [12] 2231 	xch	a,r4
      000684 C3               [12] 2232 	clr	c
      000685 13               [12] 2233 	rrc	a
      000686 CC               [12] 2234 	xch	a,r4
      000687 13               [12] 2235 	rrc	a
      000688 CC               [12] 2236 	xch	a,r4
      000689 FD               [12] 2237 	mov	r5,a
      00068A 78r00            [12] 2238 	mov	r0,#_statistics
      00068C EC               [12] 2239 	mov	a,r4
      00068D F2               [24] 2240 	movx	@r0,a
                                   2241 ;	radio/tdm.c:437: statistics.receive_count = 0;
      00068E 78r02            [12] 2242 	mov	r0,#(_statistics + 0x0002)
      000690 E4               [12] 2243 	clr	a
      000691 F2               [24] 2244 	movx	@r0,a
      000692 08               [12] 2245 	inc	r0
      000693 F2               [24] 2246 	movx	@r0,a
      000694                       2247 00119$:
                                   2248 ;	radio/tdm.c:440: if (unlock_count > 5) {
      000694 90r00rFD         [24] 2249 	mov	dptr,#_link_update_unlock_count_1_201
      000697 E0               [24] 2250 	movx	a,@dptr
      000698 FF               [12] 2251 	mov  r7,a
      000699 24 FA            [12] 2252 	add	a,#0xff - 0x05
      00069B 50 17            [24] 2253 	jnc	00121$
                                   2254 ;	radio/tdm.c:441: memset(&remote_statistics, 0, sizeof(remote_statistics));
      00069D 90r00r00         [24] 2255 	mov	dptr,#_memset_PARM_2
      0006A0 E4               [12] 2256 	clr	a
      0006A1 F0               [24] 2257 	movx	@dptr,a
      0006A2 90r00r00         [24] 2258 	mov	dptr,#_memset_PARM_3
      0006A5 74 04            [12] 2259 	mov	a,#0x04
      0006A7 F0               [24] 2260 	movx	@dptr,a
      0006A8 E4               [12] 2261 	clr	a
      0006A9 A3               [24] 2262 	inc	dptr
      0006AA F0               [24] 2263 	movx	@dptr,a
      0006AB 90r00r00         [24] 2264 	mov	dptr,#_remote_statistics
      0006AE 75 F0 60         [24] 2265 	mov	b,#0x60
      0006B1 12r00r00         [24] 2266 	lcall	_memset
      0006B4                       2267 00121$:
                                   2268 ;	radio/tdm.c:444: test_display = at_testmode;
      0006B4 78r00            [12] 2269 	mov	r0,#_at_testmode
      0006B6 90r00rFC         [24] 2270 	mov	dptr,#_test_display
      0006B9 E2               [24] 2271 	movx	a,@r0
      0006BA F0               [24] 2272 	movx	@dptr,a
                                   2273 ;	radio/tdm.c:445: send_statistics = 1;
      0006BB D2*05            [12] 2274 	setb	_send_statistics
                                   2275 ;	radio/tdm.c:447: temperature_count++;
      0006BD 90r00rFE         [24] 2276 	mov	dptr,#_link_update_temperature_count_1_201
      0006C0 E0               [24] 2277 	movx	a,@dptr
      0006C1 24 01            [12] 2278 	add	a,#0x01
      0006C3 F0               [24] 2279 	movx	@dptr,a
                                   2280 ;	radio/tdm.c:448: if (temperature_count == 4) {
      0006C4 E0               [24] 2281 	movx	a,@dptr
      0006C5 FF               [12] 2282 	mov	r7,a
      0006C6 BF 04 08         [24] 2283 	cjne	r7,#0x04,00124$
                                   2284 ;	radio/tdm.c:450: temperature_update();
      0006C9 12r05r00         [24] 2285 	lcall	_temperature_update
                                   2286 ;	radio/tdm.c:451: temperature_count = 0;
      0006CC 90r00rFE         [24] 2287 	mov	dptr,#_link_update_temperature_count_1_201
      0006CF E4               [12] 2288 	clr	a
      0006D0 F0               [24] 2289 	movx	@dptr,a
      0006D1                       2290 00124$:
      0006D1 22               [24] 2291 	ret
                                   2292 ;------------------------------------------------------------
                                   2293 ;Allocation info for local variables in function 'tdm_remote_at'
                                   2294 ;------------------------------------------------------------
                                   2295 ;	radio/tdm.c:457: tdm_remote_at(void)
                                   2296 ;	-----------------------------------------
                                   2297 ;	 function tdm_remote_at
                                   2298 ;	-----------------------------------------
      0006D2                       2299 _tdm_remote_at:
                                   2300 ;	radio/tdm.c:459: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
      0006D2 90r00r00         [24] 2301 	mov	dptr,#_at_cmd
      0006D5 75 F0 00         [24] 2302 	mov	b,#0x00
      0006D8 12r00r00         [24] 2303 	lcall	_strlen
      0006DB E5 82            [12] 2304 	mov	a,dpl
      0006DD 85 83 F0         [24] 2305 	mov	b,dph
      0006E0 24 01            [12] 2306 	add	a,#0x01
      0006E2 FE               [12] 2307 	mov	r6,a
      0006E3 E4               [12] 2308 	clr	a
      0006E4 35 F0            [12] 2309 	addc	a,b
      0006E6 FF               [12] 2310 	mov	r7,a
      0006E7 90r00r00         [24] 2311 	mov	dptr,#_memcpy_PARM_2
      0006EA 74r00            [12] 2312 	mov	a,#_at_cmd
      0006EC F0               [24] 2313 	movx	@dptr,a
      0006ED 74s00            [12] 2314 	mov	a,#(_at_cmd >> 8)
      0006EF A3               [24] 2315 	inc	dptr
      0006F0 F0               [24] 2316 	movx	@dptr,a
      0006F1 E4               [12] 2317 	clr	a
      0006F2 A3               [24] 2318 	inc	dptr
      0006F3 F0               [24] 2319 	movx	@dptr,a
      0006F4 90r00r00         [24] 2320 	mov	dptr,#_memcpy_PARM_3
      0006F7 EE               [12] 2321 	mov	a,r6
      0006F8 F0               [24] 2322 	movx	@dptr,a
      0006F9 EF               [12] 2323 	mov	a,r7
      0006FA A3               [24] 2324 	inc	dptr
      0006FB F0               [24] 2325 	movx	@dptr,a
      0006FC 90r00r1F         [24] 2326 	mov	dptr,#_remote_at_cmd
      0006FF 75 F0 60         [24] 2327 	mov	b,#0x60
      000702 12r00r00         [24] 2328 	lcall	_memcpy
                                   2329 ;	radio/tdm.c:460: send_at_command = true;
      000705 D2*06            [12] 2330 	setb	_send_at_command
      000707 22               [24] 2331 	ret
                                   2332 ;------------------------------------------------------------
                                   2333 ;Allocation info for local variables in function 'handle_at_command'
                                   2334 ;------------------------------------------------------------
                                   2335 ;	radio/tdm.c:468: handle_at_command(__pdata uint8_t len)
                                   2336 ;	-----------------------------------------
                                   2337 ;	 function handle_at_command
                                   2338 ;	-----------------------------------------
      000708                       2339 _handle_at_command:
      000708 AF 82            [24] 2340 	mov	r7,dpl
                                   2341 ;	radio/tdm.c:470: if (len < 2 || len > AT_CMD_MAXLEN ||
      00070A BF 02 00         [24] 2342 	cjne	r7,#0x02,00122$
      00070D                       2343 00122$:
      00070D 40 17            [24] 2344 	jc	00101$
      00070F EF               [12] 2345 	mov	a,r7
      000710 24 BA            [12] 2346 	add	a,#0xff - 0x45
      000712 40 12            [24] 2347 	jc	00101$
                                   2348 ;	radio/tdm.c:471: pbuf[0] != (uint8_t)'R' ||
      000714 90r00r00         [24] 2349 	mov	dptr,#_pbuf
      000717 E0               [24] 2350 	movx	a,@dptr
      000718 FE               [12] 2351 	mov	r6,a
      000719 BE 52 0A         [24] 2352 	cjne	r6,#0x52,00101$
                                   2353 ;	radio/tdm.c:472: pbuf[1] != (uint8_t)'T') {
      00071C 90r00r01         [24] 2354 	mov	dptr,#(_pbuf + 0x0001)
      00071F E0               [24] 2355 	movx	a,@dptr
      000720 FE               [12] 2356 	mov	r6,a
      000721 BE 54 02         [24] 2357 	cjne	r6,#0x54,00127$
      000724 80 02            [24] 2358 	sjmp	00102$
      000726                       2359 00127$:
      000726                       2360 00101$:
                                   2361 ;	radio/tdm.c:473: return true;
      000726 D3               [12] 2362 	setb	c
      000727 22               [24] 2363 	ret
      000728                       2364 00102$:
                                   2365 ;	radio/tdm.c:477: memcpy(at_cmd, pbuf, len);
      000728 90r00r00         [24] 2366 	mov	dptr,#_memcpy_PARM_2
      00072B 74r00            [12] 2367 	mov	a,#_pbuf
      00072D F0               [24] 2368 	movx	@dptr,a
      00072E 74s00            [12] 2369 	mov	a,#(_pbuf >> 8)
      000730 A3               [24] 2370 	inc	dptr
      000731 F0               [24] 2371 	movx	@dptr,a
      000732 E4               [12] 2372 	clr	a
      000733 A3               [24] 2373 	inc	dptr
      000734 F0               [24] 2374 	movx	@dptr,a
      000735 90r00r00         [24] 2375 	mov	dptr,#_memcpy_PARM_3
      000738 EF               [12] 2376 	mov	a,r7
      000739 F0               [24] 2377 	movx	@dptr,a
      00073A E4               [12] 2378 	clr	a
      00073B A3               [24] 2379 	inc	dptr
      00073C F0               [24] 2380 	movx	@dptr,a
      00073D 90r00r00         [24] 2381 	mov	dptr,#_at_cmd
      000740 75 F0 00         [24] 2382 	mov	b,#0x00
      000743 C0 07            [24] 2383 	push	ar7
      000745 12r00r00         [24] 2384 	lcall	_memcpy
      000748 D0 07            [24] 2385 	pop	ar7
                                   2386 ;	radio/tdm.c:478: at_cmd[len] = 0;
      00074A EF               [12] 2387 	mov	a,r7
      00074B 24r00            [12] 2388 	add	a,#_at_cmd
      00074D F5 82            [12] 2389 	mov	dpl,a
      00074F E4               [12] 2390 	clr	a
      000750 34s00            [12] 2391 	addc	a,#(_at_cmd >> 8)
      000752 F5 83            [12] 2392 	mov	dph,a
      000754 E4               [12] 2393 	clr	a
      000755 F0               [24] 2394 	movx	@dptr,a
                                   2395 ;	radio/tdm.c:479: at_cmd[0] = 'A'; // replace 'R'
      000756 90r00r00         [24] 2396 	mov	dptr,#_at_cmd
      000759 74 41            [12] 2397 	mov	a,#0x41
      00075B F0               [24] 2398 	movx	@dptr,a
                                   2399 ;	radio/tdm.c:480: at_cmd_len = len;
      00075C 78r00            [12] 2400 	mov	r0,#_at_cmd_len
      00075E EF               [12] 2401 	mov	a,r7
      00075F F2               [24] 2402 	movx	@r0,a
                                   2403 ;	radio/tdm.c:481: at_cmd_ready = true;
      000760 D2*00            [12] 2404 	setb	_at_cmd_ready
                                   2405 ;	radio/tdm.c:486: printf_start_capture(pbuf, sizeof(pbuf));
      000762 90r00r00         [24] 2406 	mov	dptr,#_printf_start_capture_PARM_2
      000765 74 FC            [12] 2407 	mov	a,#0xFC
      000767 F0               [24] 2408 	movx	@dptr,a
      000768 90r00r00         [24] 2409 	mov	dptr,#_pbuf
      00076B 12r00r00         [24] 2410 	lcall	_printf_start_capture
                                   2411 ;	radio/tdm.c:487: at_command();
      00076E 12r00r00         [24] 2412 	lcall	_at_command
                                   2413 ;	radio/tdm.c:488: len = printf_end_capture();
      000771 12r00r00         [24] 2414 	lcall	_printf_end_capture
                                   2415 ;	radio/tdm.c:489: if (len > 0) {
      000774 E5 82            [12] 2416 	mov	a,dpl
      000776 FF               [12] 2417 	mov	r7,a
      000777 60 0A            [24] 2418 	jz	00107$
                                   2419 ;	radio/tdm.c:490: packet_inject(pbuf, len);
      000779 78r00            [12] 2420 	mov	r0,#_packet_inject_PARM_2
      00077B EF               [12] 2421 	mov	a,r7
      00077C F2               [24] 2422 	movx	@r0,a
      00077D 90r00r00         [24] 2423 	mov	dptr,#_pbuf
      000780 12r00r00         [24] 2424 	lcall	_packet_inject
      000783                       2425 00107$:
                                   2426 ;	radio/tdm.c:492: return false;
      000783 C3               [12] 2427 	clr	c
      000784 22               [24] 2428 	ret
                                   2429 ;------------------------------------------------------------
                                   2430 ;Allocation info for local variables in function 'tdm_serial_loop'
                                   2431 ;------------------------------------------------------------
                                   2432 ;	radio/tdm.c:501: tdm_serial_loop(void)
                                   2433 ;	-----------------------------------------
                                   2434 ;	 function tdm_serial_loop
                                   2435 ;	-----------------------------------------
      000785                       2436 _tdm_serial_loop:
                                   2437 ;	radio/tdm.c:516: __pdata uint16_t last_t = timer2_tick();
      000785 12r00r00         [24] 2438 	lcall	_timer2_tick
      000788 78r6A            [12] 2439 	mov	r0,#_tdm_serial_loop_last_t_1_222
      00078A E5 82            [12] 2440 	mov	a,dpl
      00078C F2               [24] 2441 	movx	@r0,a
      00078D 08               [12] 2442 	inc	r0
      00078E E5 83            [12] 2443 	mov	a,dph
      000790 F2               [24] 2444 	movx	@r0,a
                                   2445 ;	radio/tdm.c:517: __pdata uint16_t last_link_update = last_t;
      000791 78r6A            [12] 2446 	mov	r0,#_tdm_serial_loop_last_t_1_222
      000793 79r6C            [12] 2447 	mov	r1,#_tdm_serial_loop_last_link_update_1_222
      000795 E2               [24] 2448 	movx	a,@r0
      000796 F3               [24] 2449 	movx	@r1,a
      000797 08               [12] 2450 	inc	r0
      000798 E2               [24] 2451 	movx	a,@r0
      000799 09               [12] 2452 	inc	r1
      00079A F3               [24] 2453 	movx	@r1,a
                                   2454 ;	radio/tdm.c:520: _canary = 42;
      00079B 78 FF            [12] 2455 	mov	r0,#__canary
      00079D 76 2A            [12] 2456 	mov	@r0,#0x2A
      00079F                       2457 00195$:
                                   2458 ;	radio/tdm.c:523: if (_canary != 42) {
      00079F 78 FF            [12] 2459 	mov	r0,#__canary
      0007A1 B6 2A 02         [24] 2460 	cjne	@r0,#0x2A,00345$
      0007A4 80 15            [24] 2461 	sjmp	00102$
      0007A6                       2462 00345$:
                                   2463 ;	radio/tdm.c:524: panic("stack blown\n");
      0007A6 74rAB            [12] 2464 	mov	a,#___str_6
      0007A8 C0 E0            [24] 2465 	push	acc
      0007AA 74s00            [12] 2466 	mov	a,#(___str_6 >> 8)
      0007AC C0 E0            [24] 2467 	push	acc
      0007AE 74 80            [12] 2468 	mov	a,#0x80
      0007B0 C0 E0            [24] 2469 	push	acc
      0007B2 12r00r00         [24] 2470 	lcall	_panic
      0007B5 15 81            [12] 2471 	dec	sp
      0007B7 15 81            [12] 2472 	dec	sp
      0007B9 15 81            [12] 2473 	dec	sp
      0007BB                       2474 00102$:
                                   2475 ;	radio/tdm.c:527: if (pdata_canary != 0x41) {
      0007BB 78r00            [12] 2476 	mov	r0,#_pdata_canary
      0007BD E2               [24] 2477 	movx	a,@r0
      0007BE B4 41 02         [24] 2478 	cjne	a,#0x41,00346$
      0007C1 80 15            [24] 2479 	sjmp	00104$
      0007C3                       2480 00346$:
                                   2481 ;	radio/tdm.c:528: panic("pdata canary changed\n");
      0007C3 74rB8            [12] 2482 	mov	a,#___str_7
      0007C5 C0 E0            [24] 2483 	push	acc
      0007C7 74s00            [12] 2484 	mov	a,#(___str_7 >> 8)
      0007C9 C0 E0            [24] 2485 	push	acc
      0007CB 74 80            [12] 2486 	mov	a,#0x80
      0007CD C0 E0            [24] 2487 	push	acc
      0007CF 12r00r00         [24] 2488 	lcall	_panic
      0007D2 15 81            [12] 2489 	dec	sp
      0007D4 15 81            [12] 2490 	dec	sp
      0007D6 15 81            [12] 2491 	dec	sp
      0007D8                       2492 00104$:
                                   2493 ;	radio/tdm.c:532: at_command();
      0007D8 12r00r00         [24] 2494 	lcall	_at_command
                                   2495 ;	radio/tdm.c:535: if (test_display) {
      0007DB 90r00rFC         [24] 2496 	mov	dptr,#_test_display
      0007DE E0               [24] 2497 	movx	a,@dptr
      0007DF 60 08            [24] 2498 	jz	00106$
                                   2499 ;	radio/tdm.c:536: display_test_output();
      0007E1 12r00rD1         [24] 2500 	lcall	_display_test_output
                                   2501 ;	radio/tdm.c:537: test_display = 0;
      0007E4 90r00rFC         [24] 2502 	mov	dptr,#_test_display
      0007E7 E4               [12] 2503 	clr	a
      0007E8 F0               [24] 2504 	movx	@dptr,a
      0007E9                       2505 00106$:
                                   2506 ;	radio/tdm.c:540: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
      0007E9 30*00 0E         [24] 2507 	jnb	_seen_mavlink,00108$
      0007EC 90r00r00         [24] 2508 	mov	dptr,#_feature_mavlink_framing
      0007EF E0               [24] 2509 	movx	a,@dptr
      0007F0 60 08            [24] 2510 	jz	00108$
      0007F2 20*00 05         [24] 2511 	jb	_at_mode_active,00108$
                                   2512 ;	radio/tdm.c:541: seen_mavlink = false;
      0007F5 C2*00            [12] 2513 	clr	_seen_mavlink
                                   2514 ;	radio/tdm.c:542: MAVLink_report();
      0007F7 12r00r00         [24] 2515 	lcall	_MAVLink_report
      0007FA                       2516 00108$:
                                   2517 ;	radio/tdm.c:546: radio_set_channel(fhop_receive_channel());
      0007FA 12r00r00         [24] 2518 	lcall	_fhop_receive_channel
      0007FD 12r00r00         [24] 2519 	lcall	_radio_set_channel
                                   2520 ;	radio/tdm.c:549: tnow = timer2_tick();
      000800 12r00r00         [24] 2521 	lcall	_timer2_tick
      000803 AA 82            [24] 2522 	mov	r2,dpl
      000805 AB 83            [24] 2523 	mov	r3,dph
                                   2524 ;	radio/tdm.c:552: if (radio_receive_packet(&len, pbuf)) {
      000807 78r00            [12] 2525 	mov	r0,#_radio_receive_packet_PARM_2
      000809 74r00            [12] 2526 	mov	a,#_pbuf
      00080B F2               [24] 2527 	movx	@r0,a
      00080C 08               [12] 2528 	inc	r0
      00080D 74s00            [12] 2529 	mov	a,#(_pbuf >> 8)
      00080F F2               [24] 2530 	movx	@r0,a
      000810 90r00r67         [24] 2531 	mov	dptr,#_tdm_serial_loop_len_1_222
      000813 75 F0 60         [24] 2532 	mov	b,#0x60
      000816 C0 03            [24] 2533 	push	ar3
      000818 C0 02            [24] 2534 	push	ar2
      00081A 12r00r00         [24] 2535 	lcall	_radio_receive_packet
      00081D D0 02            [24] 2536 	pop	ar2
      00081F D0 03            [24] 2537 	pop	ar3
      000821 40 03            [24] 2538 	jc	00351$
      000823 02r09rA5         [24] 2539 	ljmp	00129$
      000826                       2540 00351$:
                                   2541 ;	radio/tdm.c:555: received_packet = true;
      000826 D2*03            [12] 2542 	setb	_received_packet
                                   2543 ;	radio/tdm.c:556: fhop_set_locked(true);
      000828 D2*00            [12] 2544 	setb	_fhop_set_locked_PARM_1
      00082A C0 03            [24] 2545 	push	ar3
      00082C C0 02            [24] 2546 	push	ar2
      00082E 12r00r00         [24] 2547 	lcall	_fhop_set_locked
                                   2548 ;	radio/tdm.c:559: statistics.average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics.average_rssi)/8;
      000831 12r00r00         [24] 2549 	lcall	_radio_last_rssi
      000834 AD 82            [24] 2550 	mov	r5,dpl
      000836 D0 02            [24] 2551 	pop	ar2
      000838 D0 03            [24] 2552 	pop	ar3
      00083A 7C 00            [12] 2553 	mov	r4,#0x00
      00083C 78r00            [12] 2554 	mov	r0,#_statistics
      00083E E2               [24] 2555 	movx	a,@r0
      00083F 90r00r00         [24] 2556 	mov	dptr,#__mulint_PARM_2
      000842 F0               [24] 2557 	movx	@dptr,a
      000843 E4               [12] 2558 	clr	a
      000844 A3               [24] 2559 	inc	dptr
      000845 F0               [24] 2560 	movx	@dptr,a
      000846 90 00 07         [24] 2561 	mov	dptr,#0x0007
      000849 C0 05            [24] 2562 	push	ar5
      00084B C0 04            [24] 2563 	push	ar4
      00084D C0 03            [24] 2564 	push	ar3
      00084F C0 02            [24] 2565 	push	ar2
      000851 12r00r00         [24] 2566 	lcall	__mulint
      000854 AE 82            [24] 2567 	mov	r6,dpl
      000856 AF 83            [24] 2568 	mov	r7,dph
      000858 D0 02            [24] 2569 	pop	ar2
      00085A D0 03            [24] 2570 	pop	ar3
      00085C D0 04            [24] 2571 	pop	ar4
      00085E D0 05            [24] 2572 	pop	ar5
      000860 EE               [12] 2573 	mov	a,r6
      000861 2D               [12] 2574 	add	a,r5
      000862 FE               [12] 2575 	mov	r6,a
      000863 EF               [12] 2576 	mov	a,r7
      000864 3C               [12] 2577 	addc	a,r4
      000865 C4               [12] 2578 	swap	a
      000866 23               [12] 2579 	rl	a
      000867 CE               [12] 2580 	xch	a,r6
      000868 C4               [12] 2581 	swap	a
      000869 23               [12] 2582 	rl	a
      00086A 54 1F            [12] 2583 	anl	a,#0x1F
      00086C 6E               [12] 2584 	xrl	a,r6
      00086D CE               [12] 2585 	xch	a,r6
      00086E 54 1F            [12] 2586 	anl	a,#0x1F
      000870 CE               [12] 2587 	xch	a,r6
      000871 6E               [12] 2588 	xrl	a,r6
      000872 CE               [12] 2589 	xch	a,r6
      000873 78r00            [12] 2590 	mov	r0,#_statistics
      000875 EE               [12] 2591 	mov	a,r6
      000876 F2               [24] 2592 	movx	@r0,a
                                   2593 ;	radio/tdm.c:560: statistics.receive_count++;
      000877 78r02            [12] 2594 	mov	r0,#(_statistics + 0x0002)
      000879 E2               [24] 2595 	movx	a,@r0
      00087A FE               [12] 2596 	mov	r6,a
      00087B 08               [12] 2597 	inc	r0
      00087C E2               [24] 2598 	movx	a,@r0
      00087D FF               [12] 2599 	mov	r7,a
      00087E 0E               [12] 2600 	inc	r6
      00087F BE 00 01         [24] 2601 	cjne	r6,#0x00,00352$
      000882 0F               [12] 2602 	inc	r7
      000883                       2603 00352$:
      000883 78r02            [12] 2604 	mov	r0,#(_statistics + 0x0002)
      000885 EE               [12] 2605 	mov	a,r6
      000886 F2               [24] 2606 	movx	@r0,a
      000887 08               [12] 2607 	inc	r0
      000888 EF               [12] 2608 	mov	a,r7
      000889 F2               [24] 2609 	movx	@r0,a
                                   2610 ;	radio/tdm.c:564: transmit_wait = 0;
      00088A 78r0C            [12] 2611 	mov	r0,#_transmit_wait
      00088C E4               [12] 2612 	clr	a
      00088D F2               [24] 2613 	movx	@r0,a
      00088E 08               [12] 2614 	inc	r0
      00088F F2               [24] 2615 	movx	@r0,a
                                   2616 ;	radio/tdm.c:566: if (len < 2) {
      000890 78r67            [12] 2617 	mov	r0,#_tdm_serial_loop_len_1_222
      000892 E2               [24] 2618 	movx	a,@r0
      000893 B4 02 00         [24] 2619 	cjne	a,#0x02,00353$
      000896                       2620 00353$:
      000896 50 03            [24] 2621 	jnc	00354$
      000898 02r07r9F         [24] 2622 	ljmp	00195$
      00089B                       2623 00354$:
                                   2624 ;	radio/tdm.c:573: memcpy(&trailer, &pbuf[len-sizeof(trailer)], sizeof(trailer));
      00089B 78r67            [12] 2625 	mov	r0,#_tdm_serial_loop_len_1_222
      00089D E2               [24] 2626 	movx	a,@r0
      00089E 24 FE            [12] 2627 	add	a,#0xFE
      0008A0 24r00            [12] 2628 	add	a,#_pbuf
      0008A2 FE               [12] 2629 	mov	r6,a
      0008A3 E4               [12] 2630 	clr	a
      0008A4 34s00            [12] 2631 	addc	a,#(_pbuf >> 8)
      0008A6 FF               [12] 2632 	mov	r7,a
      0008A7 90r00r00         [24] 2633 	mov	dptr,#_memcpy_PARM_2
      0008AA EE               [12] 2634 	mov	a,r6
      0008AB F0               [24] 2635 	movx	@dptr,a
      0008AC EF               [12] 2636 	mov	a,r7
      0008AD A3               [24] 2637 	inc	dptr
      0008AE F0               [24] 2638 	movx	@dptr,a
      0008AF E4               [12] 2639 	clr	a
      0008B0 A3               [24] 2640 	inc	dptr
      0008B1 F0               [24] 2641 	movx	@dptr,a
      0008B2 90r00r00         [24] 2642 	mov	dptr,#_memcpy_PARM_3
      0008B5 74 02            [12] 2643 	mov	a,#0x02
      0008B7 F0               [24] 2644 	movx	@dptr,a
      0008B8 E4               [12] 2645 	clr	a
      0008B9 A3               [24] 2646 	inc	dptr
      0008BA F0               [24] 2647 	movx	@dptr,a
      0008BB 90r00r1D         [24] 2648 	mov	dptr,#_trailer
      0008BE 75 F0 60         [24] 2649 	mov	b,#0x60
      0008C1 C0 03            [24] 2650 	push	ar3
      0008C3 C0 02            [24] 2651 	push	ar2
      0008C5 12r00r00         [24] 2652 	lcall	_memcpy
      0008C8 D0 02            [24] 2653 	pop	ar2
      0008CA D0 03            [24] 2654 	pop	ar3
                                   2655 ;	radio/tdm.c:574: len -= sizeof(trailer);
      0008CC 78r67            [12] 2656 	mov	r0,#_tdm_serial_loop_len_1_222
      0008CE E2               [24] 2657 	movx	a,@r0
      0008CF 14               [12] 2658 	dec	a
      0008D0 14               [12] 2659 	dec	a
      0008D1 F2               [24] 2660 	movx	@r0,a
                                   2661 ;	radio/tdm.c:576: if (trailer.window == 0 && len != 0) {
      0008D2 78r1D            [12] 2662 	mov	r0,#_trailer
      0008D4 E2               [24] 2663 	movx	a,@r0
      0008D5 FE               [12] 2664 	mov	r6,a
      0008D6 08               [12] 2665 	inc	r0
      0008D7 E2               [24] 2666 	movx	a,@r0
      0008D8 54 1F            [12] 2667 	anl	a,#0x1F
      0008DA FF               [12] 2668 	mov	r7,a
      0008DB 4E               [12] 2669 	orl	a,r6
      0008DC 70 41            [24] 2670 	jnz	00125$
      0008DE 78r67            [12] 2671 	mov	r0,#_tdm_serial_loop_len_1_222
      0008E0 E2               [24] 2672 	movx	a,@r0
      0008E1 60 3C            [24] 2673 	jz	00125$
                                   2674 ;	radio/tdm.c:578: if (len == sizeof(struct statistics)) {
      0008E3 78r67            [12] 2675 	mov	r0,#_tdm_serial_loop_len_1_222
      0008E5 E2               [24] 2676 	movx	a,@r0
      0008E6 B4 04 20         [24] 2677 	cjne	a,#0x04,00114$
                                   2678 ;	radio/tdm.c:579: memcpy(&remote_statistics, pbuf, len);
      0008E9 90r00r00         [24] 2679 	mov	dptr,#_memcpy_PARM_2
      0008EC 74r00            [12] 2680 	mov	a,#_pbuf
      0008EE F0               [24] 2681 	movx	@dptr,a
      0008EF 74s00            [12] 2682 	mov	a,#(_pbuf >> 8)
      0008F1 A3               [24] 2683 	inc	dptr
      0008F2 F0               [24] 2684 	movx	@dptr,a
      0008F3 E4               [12] 2685 	clr	a
      0008F4 A3               [24] 2686 	inc	dptr
      0008F5 F0               [24] 2687 	movx	@dptr,a
      0008F6 78r67            [12] 2688 	mov	r0,#_tdm_serial_loop_len_1_222
      0008F8 90r00r00         [24] 2689 	mov	dptr,#_memcpy_PARM_3
      0008FB E2               [24] 2690 	movx	a,@r0
      0008FC F0               [24] 2691 	movx	@dptr,a
      0008FD E4               [12] 2692 	clr	a
      0008FE A3               [24] 2693 	inc	dptr
      0008FF F0               [24] 2694 	movx	@dptr,a
      000900 90r00r00         [24] 2695 	mov	dptr,#_remote_statistics
      000903 75 F0 60         [24] 2696 	mov	b,#0x60
      000906 12r00r00         [24] 2697 	lcall	_memcpy
      000909                       2698 00114$:
                                   2699 ;	radio/tdm.c:583: statistics.receive_count--;
      000909 78r02            [12] 2700 	mov	r0,#(_statistics + 0x0002)
      00090B E2               [24] 2701 	movx	a,@r0
      00090C FE               [12] 2702 	mov	r6,a
      00090D 08               [12] 2703 	inc	r0
      00090E E2               [24] 2704 	movx	a,@r0
      00090F FF               [12] 2705 	mov	r7,a
      000910 1E               [12] 2706 	dec	r6
      000911 BE FF 01         [24] 2707 	cjne	r6,#0xFF,00359$
      000914 1F               [12] 2708 	dec	r7
      000915                       2709 00359$:
      000915 78r02            [12] 2710 	mov	r0,#(_statistics + 0x0002)
      000917 EE               [12] 2711 	mov	a,r6
      000918 F2               [24] 2712 	movx	@r0,a
      000919 08               [12] 2713 	inc	r0
      00091A EF               [12] 2714 	mov	a,r7
      00091B F2               [24] 2715 	movx	@r0,a
      00091C 02r07r9F         [24] 2716 	ljmp	00195$
      00091F                       2717 00125$:
                                   2718 ;	radio/tdm.c:584: } else if (trailer.window != 0) {
      00091F 78r1D            [12] 2719 	mov	r0,#_trailer
      000921 E2               [24] 2720 	movx	a,@r0
      000922 FE               [12] 2721 	mov	r6,a
      000923 08               [12] 2722 	inc	r0
      000924 E2               [24] 2723 	movx	a,@r0
      000925 54 1F            [12] 2724 	anl	a,#0x1F
      000927 FF               [12] 2725 	mov	r7,a
      000928 4E               [12] 2726 	orl	a,r6
      000929 70 03            [24] 2727 	jnz	00360$
      00092B 02r07r9F         [24] 2728 	ljmp	00195$
      00092E                       2729 00360$:
                                   2730 ;	radio/tdm.c:587: sync_tx_windows(len);
      00092E 78r67            [12] 2731 	mov	r0,#_tdm_serial_loop_len_1_222
      000930 E2               [24] 2732 	movx	a,@r0
      000931 F5 82            [12] 2733 	mov	dpl,a
      000933 C0 03            [24] 2734 	push	ar3
      000935 C0 02            [24] 2735 	push	ar2
      000937 12r01r04         [24] 2736 	lcall	_sync_tx_windows
      00093A D0 02            [24] 2737 	pop	ar2
      00093C D0 03            [24] 2738 	pop	ar3
                                   2739 ;	radio/tdm.c:588: last_t = tnow;
      00093E 78r6A            [12] 2740 	mov	r0,#_tdm_serial_loop_last_t_1_222
      000940 EA               [12] 2741 	mov	a,r2
      000941 F2               [24] 2742 	movx	@r0,a
      000942 08               [12] 2743 	inc	r0
      000943 EB               [12] 2744 	mov	a,r3
      000944 F2               [24] 2745 	movx	@r0,a
                                   2746 ;	radio/tdm.c:597: if ((trailer.command == 1 && handle_at_command(len)) 
      000945 78r1E            [12] 2747 	mov	r0,#(_trailer + 0x0001)
      000947 E2               [24] 2748 	movx	a,@r0
      000948 C4               [12] 2749 	swap	a
      000949 03               [12] 2750 	rr	a
      00094A 54 01            [12] 2751 	anl	a,#0x01
      00094C FF               [12] 2752 	mov	r7,a
      00094D BF 01 0A         [24] 2753 	cjne	r7,#0x01,00121$
      000950 78r67            [12] 2754 	mov	r0,#_tdm_serial_loop_len_1_222
      000952 E2               [24] 2755 	movx	a,@r0
      000953 F5 82            [12] 2756 	mov	dpl,a
      000955 12r07r08         [24] 2757 	lcall	_handle_at_command
      000958 40 38            [24] 2758 	jc	00115$
      00095A                       2759 00121$:
                                   2760 ;	radio/tdm.c:599: (len != 0 && trailer.command == 0 &&
      00095A 78r67            [12] 2761 	mov	r0,#_tdm_serial_loop_len_1_222
      00095C E2               [24] 2762 	movx	a,@r0
      00095D 70 03            [24] 2763 	jnz	00364$
      00095F 02r07r9F         [24] 2764 	ljmp	00195$
      000962                       2765 00364$:
      000962 78r1E            [12] 2766 	mov	r0,#(_trailer + 0x0001)
      000964 E2               [24] 2767 	movx	a,@r0
      000965 30 E5 03         [24] 2768 	jnb	acc.5,00365$
      000968 02r07r9F         [24] 2769 	ljmp	00195$
      00096B                       2770 00365$:
                                   2771 ;	radio/tdm.c:600: !packet_is_duplicate(len, pbuf, trailer.resend) &&
      00096B 78r1E            [12] 2772 	mov	r0,#(_trailer + 0x0001)
      00096D E2               [24] 2773 	movx	a,@r0
      00096E 23               [12] 2774 	rl	a
      00096F 54 01            [12] 2775 	anl	a,#0x01
      000971 24 FF            [12] 2776 	add	a,#0xff
      000973 92*00            [24] 2777 	mov	_packet_is_duplicate_PARM_3,c
      000975 90r00r00         [24] 2778 	mov	dptr,#_packet_is_duplicate_PARM_2
      000978 74r00            [12] 2779 	mov	a,#_pbuf
      00097A F0               [24] 2780 	movx	@dptr,a
      00097B 74s00            [12] 2781 	mov	a,#(_pbuf >> 8)
      00097D A3               [24] 2782 	inc	dptr
      00097E F0               [24] 2783 	movx	@dptr,a
      00097F 78r67            [12] 2784 	mov	r0,#_tdm_serial_loop_len_1_222
      000981 E2               [24] 2785 	movx	a,@r0
      000982 F5 82            [12] 2786 	mov	dpl,a
      000984 12r00r00         [24] 2787 	lcall	_packet_is_duplicate
      000987 50 03            [24] 2788 	jnc	00366$
      000989 02r07r9F         [24] 2789 	ljmp	00195$
      00098C                       2790 00366$:
                                   2791 ;	radio/tdm.c:601: !at_mode_active
      00098C 30*00 03         [24] 2792 	jnb	_at_mode_active,00367$
      00098F 02r07r9F         [24] 2793 	ljmp	00195$
      000992                       2794 00367$:
      000992                       2795 00115$:
                                   2796 ;	radio/tdm.c:620: LED_ACTIVITY = LED_ON;
      000992 D2 B6            [12] 2797 	setb	_LED_RED
                                   2798 ;	radio/tdm.c:621: serial_write_buf(pbuf, len);
      000994 78r67            [12] 2799 	mov	r0,#_tdm_serial_loop_len_1_222
      000996 79r00            [12] 2800 	mov	r1,#_serial_write_buf_PARM_2
      000998 E2               [24] 2801 	movx	a,@r0
      000999 F3               [24] 2802 	movx	@r1,a
      00099A 90r00r00         [24] 2803 	mov	dptr,#_pbuf
      00099D 12r00r00         [24] 2804 	lcall	_serial_write_buf
                                   2805 ;	radio/tdm.c:622: LED_ACTIVITY = LED_OFF;
      0009A0 C2 B6            [12] 2806 	clr	_LED_RED
                                   2807 ;	radio/tdm.c:627: continue;
      0009A2 02r07r9F         [24] 2808 	ljmp	00195$
      0009A5                       2809 00129$:
                                   2810 ;	radio/tdm.c:633: tnow = timer2_tick();
      0009A5 12r00r00         [24] 2811 	lcall	_timer2_tick
      0009A8 AA 82            [24] 2812 	mov	r2,dpl
      0009AA AB 83            [24] 2813 	mov	r3,dph
                                   2814 ;	radio/tdm.c:634: tdelta = tnow - last_t;
      0009AC 78r6A            [12] 2815 	mov	r0,#_tdm_serial_loop_last_t_1_222
      0009AE 79r68            [12] 2816 	mov	r1,#_tdm_serial_loop_tdelta_1_222
      0009B0 D3               [12] 2817 	setb	c
      0009B1 E2               [24] 2818 	movx	a,@r0
      0009B2 9A               [12] 2819 	subb	a,r2
      0009B3 F4               [12] 2820 	cpl	a
      0009B4 B3               [12] 2821 	cpl	c
      0009B5 F3               [24] 2822 	movx	@r1,a
      0009B6 B3               [12] 2823 	cpl	c
      0009B7 08               [12] 2824 	inc	r0
      0009B8 E2               [24] 2825 	movx	a,@r0
      0009B9 9B               [12] 2826 	subb	a,r3
      0009BA F4               [12] 2827 	cpl	a
      0009BB 09               [12] 2828 	inc	r1
      0009BC F3               [24] 2829 	movx	@r1,a
                                   2830 ;	radio/tdm.c:635: tdm_state_update(tdelta);
      0009BD 78r68            [12] 2831 	mov	r0,#_tdm_serial_loop_tdelta_1_222
      0009BF E2               [24] 2832 	movx	a,@r0
      0009C0 F5 82            [12] 2833 	mov	dpl,a
      0009C2 08               [12] 2834 	inc	r0
      0009C3 E2               [24] 2835 	movx	a,@r0
      0009C4 F5 83            [12] 2836 	mov	dph,a
      0009C6 C0 03            [24] 2837 	push	ar3
      0009C8 C0 02            [24] 2838 	push	ar2
      0009CA 12r02r66         [24] 2839 	lcall	_tdm_state_update
      0009CD D0 02            [24] 2840 	pop	ar2
      0009CF D0 03            [24] 2841 	pop	ar3
                                   2842 ;	radio/tdm.c:636: last_t = tnow;
      0009D1 78r6A            [12] 2843 	mov	r0,#_tdm_serial_loop_last_t_1_222
      0009D3 EA               [12] 2844 	mov	a,r2
      0009D4 F2               [24] 2845 	movx	@r0,a
      0009D5 08               [12] 2846 	inc	r0
      0009D6 EB               [12] 2847 	mov	a,r3
      0009D7 F2               [24] 2848 	movx	@r0,a
                                   2849 ;	radio/tdm.c:639: if (tnow - last_link_update > 32768) {
      0009D8 78r6C            [12] 2850 	mov	r0,#_tdm_serial_loop_last_link_update_1_222
      0009DA D3               [12] 2851 	setb	c
      0009DB E2               [24] 2852 	movx	a,@r0
      0009DC 9A               [12] 2853 	subb	a,r2
      0009DD F4               [12] 2854 	cpl	a
      0009DE B3               [12] 2855 	cpl	c
      0009DF FC               [12] 2856 	mov	r4,a
      0009E0 B3               [12] 2857 	cpl	c
      0009E1 08               [12] 2858 	inc	r0
      0009E2 E2               [24] 2859 	movx	a,@r0
      0009E3 9B               [12] 2860 	subb	a,r3
      0009E4 F4               [12] 2861 	cpl	a
      0009E5 FD               [12] 2862 	mov	r5,a
      0009E6 7E 00            [12] 2863 	mov	r6,#0x00
      0009E8 7F 00            [12] 2864 	mov	r7,#0x00
      0009EA C3               [12] 2865 	clr	c
      0009EB E4               [12] 2866 	clr	a
      0009EC 9C               [12] 2867 	subb	a,r4
      0009ED 74 80            [12] 2868 	mov	a,#0x80
      0009EF 9D               [12] 2869 	subb	a,r5
      0009F0 E4               [12] 2870 	clr	a
      0009F1 9E               [12] 2871 	subb	a,r6
      0009F2 74 80            [12] 2872 	mov	a,#(0x00 ^ 0x80)
      0009F4 8F F0            [24] 2873 	mov	b,r7
      0009F6 63 F0 80         [24] 2874 	xrl	b,#0x80
      0009F9 95 F0            [12] 2875 	subb	a,b
      0009FB 50 12            [24] 2876 	jnc	00131$
                                   2877 ;	radio/tdm.c:640: link_update();
      0009FD C0 03            [24] 2878 	push	ar3
      0009FF C0 02            [24] 2879 	push	ar2
      000A01 12r05r9A         [24] 2880 	lcall	_link_update
      000A04 D0 02            [24] 2881 	pop	ar2
      000A06 D0 03            [24] 2882 	pop	ar3
                                   2883 ;	radio/tdm.c:641: last_link_update = tnow;
      000A08 78r6C            [12] 2884 	mov	r0,#_tdm_serial_loop_last_link_update_1_222
      000A0A EA               [12] 2885 	mov	a,r2
      000A0B F2               [24] 2886 	movx	@r0,a
      000A0C 08               [12] 2887 	inc	r0
      000A0D EB               [12] 2888 	mov	a,r3
      000A0E F2               [24] 2889 	movx	@r0,a
      000A0F                       2890 00131$:
                                   2891 ;	radio/tdm.c:645: if (lbt_rssi != 0) {
      000A0F 78r16            [12] 2892 	mov	r0,#_lbt_rssi
      000A11 E2               [24] 2893 	movx	a,@r0
      000A12 70 03            [24] 2894 	jnz	00369$
      000A14 02r0Ar94         [24] 2895 	ljmp	00140$
      000A17                       2896 00369$:
                                   2897 ;	radio/tdm.c:647: if (radio_current_rssi() < lbt_rssi) {
      000A17 12r00r00         [24] 2898 	lcall	_radio_current_rssi
      000A1A AF 82            [24] 2899 	mov	r7,dpl
      000A1C 78r16            [12] 2900 	mov	r0,#_lbt_rssi
      000A1E C3               [12] 2901 	clr	c
      000A1F E2               [24] 2902 	movx	a,@r0
      000A20 F5 F0            [12] 2903 	mov	b,a
      000A22 EF               [12] 2904 	mov	a,r7
      000A23 95 F0            [12] 2905 	subb	a,b
      000A25 50 16            [24] 2906 	jnc	00135$
                                   2907 ;	radio/tdm.c:648: lbt_listen_time += tdelta;
      000A27 78r17            [12] 2908 	mov	r0,#_lbt_listen_time
      000A29 79r68            [12] 2909 	mov	r1,#_tdm_serial_loop_tdelta_1_222
      000A2B E3               [24] 2910 	movx	a,@r1
      000A2C C5 F0            [12] 2911 	xch	a,b
      000A2E E2               [24] 2912 	movx	a,@r0
      000A2F 25 F0            [12] 2913 	add	a,b
      000A31 F2               [24] 2914 	movx	@r0,a
      000A32 09               [12] 2915 	inc	r1
      000A33 E3               [24] 2916 	movx	a,@r1
      000A34 C5 F0            [12] 2917 	xch	a,b
      000A36 08               [12] 2918 	inc	r0
      000A37 E2               [24] 2919 	movx	a,@r0
      000A38 35 F0            [12] 2920 	addc	a,b
      000A3A F2               [24] 2921 	movx	@r0,a
      000A3B 80 36            [24] 2922 	sjmp	00136$
      000A3D                       2923 00135$:
                                   2924 ;	radio/tdm.c:650: lbt_listen_time = 0;
      000A3D 78r17            [12] 2925 	mov	r0,#_lbt_listen_time
      000A3F E4               [12] 2926 	clr	a
      000A40 F2               [24] 2927 	movx	@r0,a
      000A41 08               [12] 2928 	inc	r0
      000A42 F2               [24] 2929 	movx	@r0,a
                                   2930 ;	radio/tdm.c:651: if (lbt_rand == 0) {
      000A43 78r1B            [12] 2931 	mov	r0,#_lbt_rand
      000A45 E2               [24] 2932 	movx	a,@r0
      000A46 F5 F0            [12] 2933 	mov	b,a
      000A48 08               [12] 2934 	inc	r0
      000A49 E2               [24] 2935 	movx	a,@r0
      000A4A 45 F0            [12] 2936 	orl	a,b
      000A4C 70 25            [24] 2937 	jnz	00136$
                                   2938 ;	radio/tdm.c:652: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
      000A4E 12r00r00         [24] 2939 	lcall	_rand
      000A51 AE 82            [24] 2940 	mov	r6,dpl
      000A53 AF 83            [24] 2941 	mov	r7,dph
      000A55 78r19            [12] 2942 	mov	r0,#_lbt_min_time
      000A57 90r00r00         [24] 2943 	mov	dptr,#__moduint_PARM_2
      000A5A E2               [24] 2944 	movx	a,@r0
      000A5B F0               [24] 2945 	movx	@dptr,a
      000A5C 08               [12] 2946 	inc	r0
      000A5D E2               [24] 2947 	movx	a,@r0
      000A5E A3               [24] 2948 	inc	dptr
      000A5F F0               [24] 2949 	movx	@dptr,a
      000A60 8E 82            [24] 2950 	mov	dpl,r6
      000A62 8F 83            [24] 2951 	mov	dph,r7
      000A64 12r00r00         [24] 2952 	lcall	__moduint
      000A67 E5 82            [12] 2953 	mov	a,dpl
      000A69 85 83 F0         [24] 2954 	mov	b,dph
      000A6C 78r1B            [12] 2955 	mov	r0,#_lbt_rand
      000A6E F2               [24] 2956 	movx	@r0,a
      000A6F 08               [12] 2957 	inc	r0
      000A70 E5 F0            [12] 2958 	mov	a,b
      000A72 F2               [24] 2959 	movx	@r0,a
      000A73                       2960 00136$:
                                   2961 ;	radio/tdm.c:655: if (lbt_listen_time < lbt_min_time + lbt_rand) {
      000A73 78r19            [12] 2962 	mov	r0,#_lbt_min_time
      000A75 79r1B            [12] 2963 	mov	r1,#_lbt_rand
      000A77 E3               [24] 2964 	movx	a,@r1
      000A78 C5 F0            [12] 2965 	xch	a,b
      000A7A E2               [24] 2966 	movx	a,@r0
      000A7B 25 F0            [12] 2967 	add	a,b
      000A7D FE               [12] 2968 	mov	r6,a
      000A7E 09               [12] 2969 	inc	r1
      000A7F E3               [24] 2970 	movx	a,@r1
      000A80 C5 F0            [12] 2971 	xch	a,b
      000A82 08               [12] 2972 	inc	r0
      000A83 E2               [24] 2973 	movx	a,@r0
      000A84 35 F0            [12] 2974 	addc	a,b
      000A86 FF               [12] 2975 	mov	r7,a
      000A87 78r17            [12] 2976 	mov	r0,#_lbt_listen_time
      000A89 C3               [12] 2977 	clr	c
      000A8A E2               [24] 2978 	movx	a,@r0
      000A8B 9E               [12] 2979 	subb	a,r6
      000A8C 08               [12] 2980 	inc	r0
      000A8D E2               [24] 2981 	movx	a,@r0
      000A8E 9F               [12] 2982 	subb	a,r7
      000A8F 50 03            [24] 2983 	jnc	00372$
      000A91 02r07r9F         [24] 2984 	ljmp	00195$
      000A94                       2985 00372$:
                                   2986 ;	radio/tdm.c:657: continue;
      000A94                       2987 00140$:
                                   2988 ;	radio/tdm.c:665: if (tdm_state != TDM_TRANSMIT &&
      000A94 78r00            [12] 2989 	mov	r0,#_tdm_state
      000A96 E2               [24] 2990 	movx	a,@r0
      000A97 60 11            [24] 2991 	jz	00142$
                                   2992 ;	radio/tdm.c:666: !(bonus_transmit && tdm_state == TDM_RECEIVE)) {
      000A99 20*00 03         [24] 2993 	jb	_bonus_transmit,00374$
      000A9C 02r07r9F         [24] 2994 	ljmp	00195$
      000A9F                       2995 00374$:
      000A9F 78r00            [12] 2996 	mov	r0,#_tdm_state
      000AA1 E2               [24] 2997 	movx	a,@r0
      000AA2 B4 02 02         [24] 2998 	cjne	a,#0x02,00375$
      000AA5 80 03            [24] 2999 	sjmp	00376$
      000AA7                       3000 00375$:
      000AA7 02r07r9F         [24] 3001 	ljmp	00195$
      000AAA                       3002 00376$:
                                   3003 ;	radio/tdm.c:668: continue;
      000AAA                       3004 00142$:
                                   3005 ;	radio/tdm.c:676: if (transmit_yield != 0) {
      000AAA 30*01 03         [24] 3006 	jnb	_transmit_yield,00377$
      000AAD 02r07r9F         [24] 3007 	ljmp	00195$
      000AB0                       3008 00377$:
                                   3009 ;	radio/tdm.c:681: if (transmit_wait != 0) {
      000AB0 78r0C            [12] 3010 	mov	r0,#_transmit_wait
      000AB2 E2               [24] 3011 	movx	a,@r0
      000AB3 F5 F0            [12] 3012 	mov	b,a
      000AB5 08               [12] 3013 	inc	r0
      000AB6 E2               [24] 3014 	movx	a,@r0
      000AB7 45 F0            [12] 3015 	orl	a,b
      000AB9 60 03            [24] 3016 	jz	00378$
      000ABB 02r07r9F         [24] 3017 	ljmp	00195$
      000ABE                       3018 00378$:
                                   3019 ;	radio/tdm.c:686: if (!received_packet &&
      000ABE 20*03 05         [24] 3020 	jb	_received_packet,00152$
                                   3021 ;	radio/tdm.c:687: radio_preamble_detected() ||
      000AC1 12r00r00         [24] 3022 	lcall	_radio_preamble_detected
      000AC4 40 05            [24] 3023 	jc	00149$
      000AC6                       3024 00152$:
                                   3025 ;	radio/tdm.c:688: radio_receive_in_progress()) {
      000AC6 12r00r00         [24] 3026 	lcall	_radio_receive_in_progress
      000AC9 50 11            [24] 3027 	jnc	00150$
      000ACB                       3028 00149$:
                                   3029 ;	radio/tdm.c:691: transmit_wait = packet_latency;
      000ACB 78r08            [12] 3030 	mov	r0,#_packet_latency
      000ACD E2               [24] 3031 	movx	a,@r0
      000ACE FE               [12] 3032 	mov	r6,a
      000ACF 08               [12] 3033 	inc	r0
      000AD0 E2               [24] 3034 	movx	a,@r0
      000AD1 FF               [12] 3035 	mov	r7,a
      000AD2 78r0C            [12] 3036 	mov	r0,#_transmit_wait
      000AD4 EE               [12] 3037 	mov	a,r6
      000AD5 F2               [24] 3038 	movx	@r0,a
      000AD6 08               [12] 3039 	inc	r0
      000AD7 EF               [12] 3040 	mov	a,r7
      000AD8 F2               [24] 3041 	movx	@r0,a
                                   3042 ;	radio/tdm.c:692: continue;
      000AD9 02r07r9F         [24] 3043 	ljmp	00195$
      000ADC                       3044 00150$:
                                   3045 ;	radio/tdm.c:698: statistics.average_noise = (radio_current_rssi() + 3*(uint16_t)statistics.average_noise)/4;
      000ADC 12r00r00         [24] 3046 	lcall	_radio_current_rssi
      000ADF AF 82            [24] 3047 	mov	r7,dpl
      000AE1 7E 00            [12] 3048 	mov	r6,#0x00
      000AE3 78r01            [12] 3049 	mov	r0,#(_statistics + 0x0001)
      000AE5 E2               [24] 3050 	movx	a,@r0
      000AE6 90r00r00         [24] 3051 	mov	dptr,#__mulint_PARM_2
      000AE9 F0               [24] 3052 	movx	@dptr,a
      000AEA E4               [12] 3053 	clr	a
      000AEB A3               [24] 3054 	inc	dptr
      000AEC F0               [24] 3055 	movx	@dptr,a
      000AED 90 00 03         [24] 3056 	mov	dptr,#0x0003
      000AF0 C0 07            [24] 3057 	push	ar7
      000AF2 C0 06            [24] 3058 	push	ar6
      000AF4 12r00r00         [24] 3059 	lcall	__mulint
      000AF7 AC 82            [24] 3060 	mov	r4,dpl
      000AF9 AD 83            [24] 3061 	mov	r5,dph
      000AFB D0 06            [24] 3062 	pop	ar6
      000AFD D0 07            [24] 3063 	pop	ar7
      000AFF EC               [12] 3064 	mov	a,r4
      000B00 2F               [12] 3065 	add	a,r7
      000B01 FC               [12] 3066 	mov	r4,a
      000B02 ED               [12] 3067 	mov	a,r5
      000B03 3E               [12] 3068 	addc	a,r6
      000B04 C3               [12] 3069 	clr	c
      000B05 13               [12] 3070 	rrc	a
      000B06 CC               [12] 3071 	xch	a,r4
      000B07 13               [12] 3072 	rrc	a
      000B08 CC               [12] 3073 	xch	a,r4
      000B09 C3               [12] 3074 	clr	c
      000B0A 13               [12] 3075 	rrc	a
      000B0B CC               [12] 3076 	xch	a,r4
      000B0C 13               [12] 3077 	rrc	a
      000B0D CC               [12] 3078 	xch	a,r4
      000B0E FD               [12] 3079 	mov	r5,a
      000B0F 78r01            [12] 3080 	mov	r0,#(_statistics + 0x0001)
      000B11 EC               [12] 3081 	mov	a,r4
      000B12 F2               [24] 3082 	movx	@r0,a
                                   3083 ;	radio/tdm.c:700: if (duty_cycle_wait) {
      000B13 30*04 03         [24] 3084 	jnb	_duty_cycle_wait,00382$
      000B16 02r07r9F         [24] 3085 	ljmp	00195$
      000B19                       3086 00382$:
                                   3087 ;	radio/tdm.c:707: if (tdm_state_remaining < packet_latency) {
      000B19 78r01            [12] 3088 	mov	r0,#_tdm_state_remaining
      000B1B 79r08            [12] 3089 	mov	r1,#_packet_latency
      000B1D C3               [12] 3090 	clr	c
      000B1E E3               [24] 3091 	movx	a,@r1
      000B1F F5 F0            [12] 3092 	mov	b,a
      000B21 E2               [24] 3093 	movx	a,@r0
      000B22 95 F0            [12] 3094 	subb	a,b
      000B24 09               [12] 3095 	inc	r1
      000B25 E3               [24] 3096 	movx	a,@r1
      000B26 F5 F0            [12] 3097 	mov	b,a
      000B28 08               [12] 3098 	inc	r0
      000B29 E2               [24] 3099 	movx	a,@r0
      000B2A 95 F0            [12] 3100 	subb	a,b
      000B2C 50 03            [24] 3101 	jnc	00383$
      000B2E 02r07r9F         [24] 3102 	ljmp	00195$
      000B31                       3103 00383$:
                                   3104 ;	radio/tdm.c:711: max_xmit = (tdm_state_remaining - packet_latency) / ticks_per_byte;
      000B31 78r01            [12] 3105 	mov	r0,#_tdm_state_remaining
      000B33 79r08            [12] 3106 	mov	r1,#_packet_latency
      000B35 E3               [24] 3107 	movx	a,@r1
      000B36 F5 F0            [12] 3108 	mov	b,a
      000B38 C3               [12] 3109 	clr	c
      000B39 E2               [24] 3110 	movx	a,@r0
      000B3A 95 F0            [12] 3111 	subb	a,b
      000B3C FE               [12] 3112 	mov	r6,a
      000B3D 09               [12] 3113 	inc	r1
      000B3E E3               [24] 3114 	movx	a,@r1
      000B3F F5 F0            [12] 3115 	mov	b,a
      000B41 08               [12] 3116 	inc	r0
      000B42 E2               [24] 3117 	movx	a,@r0
      000B43 95 F0            [12] 3118 	subb	a,b
      000B45 FF               [12] 3119 	mov	r7,a
      000B46 78r0A            [12] 3120 	mov	r0,#_ticks_per_byte
      000B48 90r00r00         [24] 3121 	mov	dptr,#__divuint_PARM_2
      000B4B E2               [24] 3122 	movx	a,@r0
      000B4C F0               [24] 3123 	movx	@dptr,a
      000B4D 08               [12] 3124 	inc	r0
      000B4E E2               [24] 3125 	movx	a,@r0
      000B4F A3               [24] 3126 	inc	dptr
      000B50 F0               [24] 3127 	movx	@dptr,a
      000B51 8E 82            [24] 3128 	mov	dpl,r6
      000B53 8F 83            [24] 3129 	mov	dph,r7
      000B55 12r00r00         [24] 3130 	lcall	__divuint
      000B58 AE 82            [24] 3131 	mov	r6,dpl
      000B5A AF 83            [24] 3132 	mov	r7,dph
                                   3133 ;	radio/tdm.c:712: if (max_xmit < PACKET_OVERHEAD) {
      000B5C BE 12 00         [24] 3134 	cjne	r6,#0x12,00384$
      000B5F                       3135 00384$:
      000B5F 50 03            [24] 3136 	jnc	00385$
      000B61 02r07r9F         [24] 3137 	ljmp	00195$
      000B64                       3138 00385$:
                                   3139 ;	radio/tdm.c:717: max_xmit -= sizeof(trailer)+1;
      000B64 1E               [12] 3140 	dec	r6
      000B65 1E               [12] 3141 	dec	r6
      000B66 1E               [12] 3142 	dec	r6
                                   3143 ;	radio/tdm.c:731: if (max_xmit > max_data_packet_length) {
      000B67 78r05            [12] 3144 	mov	r0,#_max_data_packet_length
      000B69 C3               [12] 3145 	clr	c
      000B6A E2               [24] 3146 	movx	a,@r0
      000B6B 9E               [12] 3147 	subb	a,r6
      000B6C 50 04            [24] 3148 	jnc	00160$
                                   3149 ;	radio/tdm.c:732: max_xmit = max_data_packet_length;
      000B6E 78r05            [12] 3150 	mov	r0,#_max_data_packet_length
      000B70 E2               [24] 3151 	movx	a,@r0
      000B71 FE               [12] 3152 	mov	r6,a
      000B72                       3153 00160$:
                                   3154 ;	radio/tdm.c:737: pins_user_check();
      000B72 C0 06            [24] 3155 	push	ar6
      000B74 12r00r00         [24] 3156 	lcall	_pins_user_check
      000B77 D0 06            [24] 3157 	pop	ar6
                                   3158 ;	radio/tdm.c:741: if (send_at_command && 
      000B79 30*06 57         [24] 3159 	jnb	_send_at_command,00165$
                                   3160 ;	radio/tdm.c:742: max_xmit >= strlen(remote_at_cmd)) {
      000B7C 90r00r1F         [24] 3161 	mov	dptr,#_remote_at_cmd
      000B7F 75 F0 60         [24] 3162 	mov	b,#0x60
      000B82 C0 06            [24] 3163 	push	ar6
      000B84 12r00r00         [24] 3164 	lcall	_strlen
      000B87 AD 82            [24] 3165 	mov	r5,dpl
      000B89 AF 83            [24] 3166 	mov	r7,dph
      000B8B D0 06            [24] 3167 	pop	ar6
      000B8D 8E 03            [24] 3168 	mov	ar3,r6
      000B8F 7C 00            [12] 3169 	mov	r4,#0x00
      000B91 C3               [12] 3170 	clr	c
      000B92 EB               [12] 3171 	mov	a,r3
      000B93 9D               [12] 3172 	subb	a,r5
      000B94 EC               [12] 3173 	mov	a,r4
      000B95 9F               [12] 3174 	subb	a,r7
      000B96 40 3B            [24] 3175 	jc	00165$
                                   3176 ;	radio/tdm.c:744: len = strlen(remote_at_cmd);
      000B98 90r00r1F         [24] 3177 	mov	dptr,#_remote_at_cmd
      000B9B 75 F0 60         [24] 3178 	mov	b,#0x60
      000B9E C0 06            [24] 3179 	push	ar6
      000BA0 12r00r00         [24] 3180 	lcall	_strlen
      000BA3 AD 82            [24] 3181 	mov	r5,dpl
      000BA5 78r67            [12] 3182 	mov	r0,#_tdm_serial_loop_len_1_222
      000BA7 ED               [12] 3183 	mov	a,r5
      000BA8 F2               [24] 3184 	movx	@r0,a
                                   3185 ;	radio/tdm.c:745: memcpy(pbuf, remote_at_cmd, len);
      000BA9 90r00r00         [24] 3186 	mov	dptr,#_memcpy_PARM_2
      000BAC 74r1F            [12] 3187 	mov	a,#_remote_at_cmd
      000BAE F0               [24] 3188 	movx	@dptr,a
      000BAF E4               [12] 3189 	clr	a
      000BB0 A3               [24] 3190 	inc	dptr
      000BB1 F0               [24] 3191 	movx	@dptr,a
      000BB2 74 60            [12] 3192 	mov	a,#0x60
      000BB4 A3               [24] 3193 	inc	dptr
      000BB5 F0               [24] 3194 	movx	@dptr,a
      000BB6 90r00r00         [24] 3195 	mov	dptr,#_memcpy_PARM_3
      000BB9 ED               [12] 3196 	mov	a,r5
      000BBA F0               [24] 3197 	movx	@dptr,a
      000BBB E4               [12] 3198 	clr	a
      000BBC A3               [24] 3199 	inc	dptr
      000BBD F0               [24] 3200 	movx	@dptr,a
      000BBE 90r00r00         [24] 3201 	mov	dptr,#_pbuf
      000BC1 75 F0 00         [24] 3202 	mov	b,#0x00
      000BC4 12r00r00         [24] 3203 	lcall	_memcpy
      000BC7 D0 06            [24] 3204 	pop	ar6
                                   3205 ;	radio/tdm.c:746: trailer.command = 1;
      000BC9 78r1E            [12] 3206 	mov	r0,#(_trailer + 0x0001)
      000BCB E2               [24] 3207 	movx	a,@r0
      000BCC 44 20            [12] 3208 	orl	a,#0x20
      000BCE F2               [24] 3209 	movx	@r0,a
                                   3210 ;	radio/tdm.c:747: send_at_command = false;
      000BCF C2*06            [12] 3211 	clr	_send_at_command
      000BD1 80 37            [24] 3212 	sjmp	00166$
      000BD3                       3213 00165$:
                                   3214 ;	radio/tdm.c:750: len = packet_get_next(max_xmit, pbuf);
      000BD3 90r00r00         [24] 3215 	mov	dptr,#_packet_get_next_PARM_2
      000BD6 74r00            [12] 3216 	mov	a,#_pbuf
      000BD8 F0               [24] 3217 	movx	@dptr,a
      000BD9 74s00            [12] 3218 	mov	a,#(_pbuf >> 8)
      000BDB A3               [24] 3219 	inc	dptr
      000BDC F0               [24] 3220 	movx	@dptr,a
      000BDD 8E 82            [24] 3221 	mov	dpl,r6
      000BDF C0 06            [24] 3222 	push	ar6
      000BE1 12r00r00         [24] 3223 	lcall	_packet_get_next
      000BE4 AF 82            [24] 3224 	mov	r7,dpl
      000BE6 D0 06            [24] 3225 	pop	ar6
      000BE8 78r67            [12] 3226 	mov	r0,#_tdm_serial_loop_len_1_222
      000BEA EF               [12] 3227 	mov	a,r7
      000BEB F2               [24] 3228 	movx	@r0,a
                                   3229 ;	radio/tdm.c:752: if (len > 0) {
      000BEC EF               [12] 3230 	mov	a,r7
      000BED 60 15            [24] 3231 	jz	00162$
                                   3232 ;	radio/tdm.c:753: trailer.command = packet_is_injected();
      000BEF C0 06            [24] 3233 	push	ar6
      000BF1 12r00r00         [24] 3234 	lcall	_packet_is_injected
      000BF4 D0 06            [24] 3235 	pop	ar6
      000BF6 92*09            [24] 3236 	mov  _tdm_serial_loop_sloc0_1_0,c
      000BF8 E4               [12] 3237 	clr	a
      000BF9 33               [12] 3238 	rlc	a
      000BFA FF               [12] 3239 	mov	r7,a
      000BFB 78r1E            [12] 3240 	mov	r0,#(_trailer + 0x0001)
      000BFD 13               [12] 3241 	rrc	a
      000BFE E2               [24] 3242 	movx	a,@r0
      000BFF 92 E5            [24] 3243 	mov	acc.5,c
      000C01 F2               [24] 3244 	movx	@r0,a
      000C02 80 06            [24] 3245 	sjmp	00166$
      000C04                       3246 00162$:
                                   3247 ;	radio/tdm.c:755: trailer.command = 0;
      000C04 78r1E            [12] 3248 	mov	r0,#(_trailer + 0x0001)
      000C06 E2               [24] 3249 	movx	a,@r0
      000C07 54 DF            [12] 3250 	anl	a,#0xDF
      000C09 F2               [24] 3251 	movx	@r0,a
      000C0A                       3252 00166$:
                                   3253 ;	radio/tdm.c:762: if (len > max_data_packet_length) {
      000C0A 78r67            [12] 3254 	mov	r0,#_tdm_serial_loop_len_1_222
      000C0C 79r05            [12] 3255 	mov	r1,#_max_data_packet_length
      000C0E C3               [12] 3256 	clr	c
      000C0F E2               [24] 3257 	movx	a,@r0
      000C10 F5 F0            [12] 3258 	mov	b,a
      000C12 E3               [24] 3259 	movx	a,@r1
      000C13 95 F0            [12] 3260 	subb	a,b
      000C15 50 19            [24] 3261 	jnc	00169$
                                   3262 ;	radio/tdm.c:763: panic("oversized tdm packet");
      000C17 C0 06            [24] 3263 	push	ar6
      000C19 74rCE            [12] 3264 	mov	a,#___str_8
      000C1B C0 E0            [24] 3265 	push	acc
      000C1D 74s00            [12] 3266 	mov	a,#(___str_8 >> 8)
      000C1F C0 E0            [24] 3267 	push	acc
      000C21 74 80            [12] 3268 	mov	a,#0x80
      000C23 C0 E0            [24] 3269 	push	acc
      000C25 12r00r00         [24] 3270 	lcall	_panic
      000C28 15 81            [12] 3271 	dec	sp
      000C2A 15 81            [12] 3272 	dec	sp
      000C2C 15 81            [12] 3273 	dec	sp
      000C2E D0 06            [24] 3274 	pop	ar6
      000C30                       3275 00169$:
                                   3276 ;	radio/tdm.c:766: trailer.bonus = (tdm_state == TDM_RECEIVE);
      000C30 78r00            [12] 3277 	mov	r0,#_tdm_state
      000C32 E2               [24] 3278 	movx	a,@r0
      000C33 B4 02 03         [24] 3279 	cjne	a,#0x02,00391$
      000C36 D3               [12] 3280 	setb	c
      000C37 80 01            [24] 3281 	sjmp	00392$
      000C39                       3282 00391$:
      000C39 C3               [12] 3283 	clr	c
      000C3A                       3284 00392$:
      000C3A 92*09            [24] 3285 	mov  _tdm_serial_loop_sloc0_1_0,c
      000C3C E4               [12] 3286 	clr	a
      000C3D 33               [12] 3287 	rlc	a
      000C3E 78r1E            [12] 3288 	mov	r0,#(_trailer + 0x0001)
      000C40 13               [12] 3289 	rrc	a
      000C41 E2               [24] 3290 	movx	a,@r0
      000C42 92 E6            [24] 3291 	mov	acc.6,c
      000C44 F2               [24] 3292 	movx	@r0,a
                                   3293 ;	radio/tdm.c:767: trailer.resend = packet_is_resend();
      000C45 C0 06            [24] 3294 	push	ar6
      000C47 12r00r00         [24] 3295 	lcall	_packet_is_resend
      000C4A D0 06            [24] 3296 	pop	ar6
      000C4C 92*09            [24] 3297 	mov  _tdm_serial_loop_sloc0_1_0,c
      000C4E E4               [12] 3298 	clr	a
      000C4F 33               [12] 3299 	rlc	a
      000C50 FF               [12] 3300 	mov	r7,a
      000C51 78r1E            [12] 3301 	mov	r0,#(_trailer + 0x0001)
      000C53 13               [12] 3302 	rrc	a
      000C54 E2               [24] 3303 	movx	a,@r0
      000C55 92 E7            [24] 3304 	mov	acc.7,c
      000C57 F2               [24] 3305 	movx	@r0,a
                                   3306 ;	radio/tdm.c:769: if (tdm_state == TDM_TRANSMIT &&
      000C58 78r00            [12] 3307 	mov	r0,#_tdm_state
      000C5A E2               [24] 3308 	movx	a,@r0
      000C5B 70 44            [24] 3309 	jnz	00171$
                                   3310 ;	radio/tdm.c:770: len == 0 &&
      000C5D 78r67            [12] 3311 	mov	r0,#_tdm_serial_loop_len_1_222
      000C5F E2               [24] 3312 	movx	a,@r0
      000C60 70 3F            [24] 3313 	jnz	00171$
                                   3314 ;	radio/tdm.c:771: send_statistics &&
      000C62 30*05 3C         [24] 3315 	jnb	_send_statistics,00171$
                                   3316 ;	radio/tdm.c:772: max_xmit >= sizeof(statistics)) {
      000C65 BE 04 00         [24] 3317 	cjne	r6,#0x04,00396$
      000C68                       3318 00396$:
      000C68 40 37            [24] 3319 	jc	00171$
                                   3320 ;	radio/tdm.c:774: send_statistics = 0;
      000C6A C2*05            [12] 3321 	clr	_send_statistics
                                   3322 ;	radio/tdm.c:775: memcpy(pbuf, &statistics, sizeof(statistics));
      000C6C 90r00r00         [24] 3323 	mov	dptr,#_memcpy_PARM_2
      000C6F 74r00            [12] 3324 	mov	a,#_statistics
      000C71 F0               [24] 3325 	movx	@dptr,a
      000C72 E4               [12] 3326 	clr	a
      000C73 A3               [24] 3327 	inc	dptr
      000C74 F0               [24] 3328 	movx	@dptr,a
      000C75 74 60            [12] 3329 	mov	a,#0x60
      000C77 A3               [24] 3330 	inc	dptr
      000C78 F0               [24] 3331 	movx	@dptr,a
      000C79 90r00r00         [24] 3332 	mov	dptr,#_memcpy_PARM_3
      000C7C 74 04            [12] 3333 	mov	a,#0x04
      000C7E F0               [24] 3334 	movx	@dptr,a
      000C7F E4               [12] 3335 	clr	a
      000C80 A3               [24] 3336 	inc	dptr
      000C81 F0               [24] 3337 	movx	@dptr,a
      000C82 90r00r00         [24] 3338 	mov	dptr,#_pbuf
      000C85 75 F0 00         [24] 3339 	mov	b,#0x00
      000C88 12r00r00         [24] 3340 	lcall	_memcpy
                                   3341 ;	radio/tdm.c:776: len = sizeof(statistics);
      000C8B 78r67            [12] 3342 	mov	r0,#_tdm_serial_loop_len_1_222
      000C8D 74 04            [12] 3343 	mov	a,#0x04
      000C8F F2               [24] 3344 	movx	@r0,a
                                   3345 ;	radio/tdm.c:779: trailer.window = 0;
      000C90 78r1D            [12] 3346 	mov	r0,#_trailer
      000C92 E4               [12] 3347 	clr	a
      000C93 F2               [24] 3348 	movx	@r0,a
      000C94 08               [12] 3349 	inc	r0
      000C95 E2               [24] 3350 	movx	a,@r0
      000C96 54 E0            [12] 3351 	anl	a,#0xE0
      000C98 F2               [24] 3352 	movx	@r0,a
                                   3353 ;	radio/tdm.c:780: trailer.resend = 0;
      000C99 78r1E            [12] 3354 	mov	r0,#(_trailer + 0x0001)
      000C9B E2               [24] 3355 	movx	a,@r0
      000C9C 54 7F            [12] 3356 	anl	a,#0x7F
      000C9E F2               [24] 3357 	movx	@r0,a
      000C9F 80 28            [24] 3358 	sjmp	00172$
      000CA1                       3359 00171$:
                                   3360 ;	radio/tdm.c:794: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));
      000CA1 78r67            [12] 3361 	mov	r0,#_tdm_serial_loop_len_1_222
      000CA3 E2               [24] 3362 	movx	a,@r0
      000CA4 24 02            [12] 3363 	add	a,#0x02
      000CA6 F5 82            [12] 3364 	mov	dpl,a
      000CA8 12r00rDD         [24] 3365 	lcall	_flight_time_estimate
      000CAB AE 82            [24] 3366 	mov	r6,dpl
      000CAD AF 83            [24] 3367 	mov	r7,dph
      000CAF 78r01            [12] 3368 	mov	r0,#_tdm_state_remaining
      000CB1 E2               [24] 3369 	movx	a,@r0
      000CB2 C3               [12] 3370 	clr	c
      000CB3 9E               [12] 3371 	subb	a,r6
      000CB4 FE               [12] 3372 	mov	r6,a
      000CB5 08               [12] 3373 	inc	r0
      000CB6 E2               [24] 3374 	movx	a,@r0
      000CB7 9F               [12] 3375 	subb	a,r7
      000CB8 FF               [12] 3376 	mov	r7,a
      000CB9 78r1D            [12] 3377 	mov	r0,#_trailer
      000CBB EE               [12] 3378 	mov	a,r6
      000CBC F2               [24] 3379 	movx	@r0,a
      000CBD 08               [12] 3380 	inc	r0
      000CBE EF               [12] 3381 	mov	a,r7
      000CBF 54 1F            [12] 3382 	anl	a,#0x1F
      000CC1 F5 F0            [12] 3383 	mov	b,a
      000CC3 E2               [24] 3384 	movx	a,@r0
      000CC4 54 E0            [12] 3385 	anl	a,#0xE0
      000CC6 45 F0            [12] 3386 	orl	a,b
      000CC8 F2               [24] 3387 	movx	@r0,a
      000CC9                       3388 00172$:
                                   3389 ;	radio/tdm.c:799: radio_set_channel(fhop_transmit_channel());
      000CC9 12r00r00         [24] 3390 	lcall	_fhop_transmit_channel
      000CCC 12r00r00         [24] 3391 	lcall	_radio_set_channel
                                   3392 ;	radio/tdm.c:801: memcpy(&pbuf[len], &trailer, sizeof(trailer));
      000CCF 78r67            [12] 3393 	mov	r0,#_tdm_serial_loop_len_1_222
      000CD1 E2               [24] 3394 	movx	a,@r0
      000CD2 24r00            [12] 3395 	add	a,#_pbuf
      000CD4 FE               [12] 3396 	mov	r6,a
      000CD5 E4               [12] 3397 	clr	a
      000CD6 34s00            [12] 3398 	addc	a,#(_pbuf >> 8)
      000CD8 FF               [12] 3399 	mov	r7,a
      000CD9 7D 00            [12] 3400 	mov	r5,#0x00
      000CDB 90r00r00         [24] 3401 	mov	dptr,#_memcpy_PARM_2
      000CDE 74r1D            [12] 3402 	mov	a,#_trailer
      000CE0 F0               [24] 3403 	movx	@dptr,a
      000CE1 E4               [12] 3404 	clr	a
      000CE2 A3               [24] 3405 	inc	dptr
      000CE3 F0               [24] 3406 	movx	@dptr,a
      000CE4 74 60            [12] 3407 	mov	a,#0x60
      000CE6 A3               [24] 3408 	inc	dptr
      000CE7 F0               [24] 3409 	movx	@dptr,a
      000CE8 90r00r00         [24] 3410 	mov	dptr,#_memcpy_PARM_3
      000CEB 74 02            [12] 3411 	mov	a,#0x02
      000CED F0               [24] 3412 	movx	@dptr,a
      000CEE E4               [12] 3413 	clr	a
      000CEF A3               [24] 3414 	inc	dptr
      000CF0 F0               [24] 3415 	movx	@dptr,a
      000CF1 8E 82            [24] 3416 	mov	dpl,r6
      000CF3 8F 83            [24] 3417 	mov	dph,r7
      000CF5 8D F0            [24] 3418 	mov	b,r5
      000CF7 12r00r00         [24] 3419 	lcall	_memcpy
                                   3420 ;	radio/tdm.c:803: if (len != 0 && trailer.window != 0) {
      000CFA 78r67            [12] 3421 	mov	r0,#_tdm_serial_loop_len_1_222
      000CFC E2               [24] 3422 	movx	a,@r0
      000CFD 60 0E            [24] 3423 	jz	00177$
      000CFF 78r1D            [12] 3424 	mov	r0,#_trailer
      000D01 E2               [24] 3425 	movx	a,@r0
      000D02 FE               [12] 3426 	mov	r6,a
      000D03 08               [12] 3427 	inc	r0
      000D04 E2               [24] 3428 	movx	a,@r0
      000D05 54 1F            [12] 3429 	anl	a,#0x1F
      000D07 FF               [12] 3430 	mov	r7,a
      000D08 4E               [12] 3431 	orl	a,r6
      000D09 60 02            [24] 3432 	jz	00177$
                                   3433 ;	radio/tdm.c:805: LED_ACTIVITY = LED_ON;
      000D0B D2 B6            [12] 3434 	setb	_LED_RED
      000D0D                       3435 00177$:
                                   3436 ;	radio/tdm.c:808: if (len == 0) {
      000D0D 78r67            [12] 3437 	mov	r0,#_tdm_serial_loop_len_1_222
      000D0F E2               [24] 3438 	movx	a,@r0
      000D10 70 02            [24] 3439 	jnz	00180$
                                   3440 ;	radio/tdm.c:812: transmit_yield = 1;
      000D12 D2*01            [12] 3441 	setb	_transmit_yield
      000D14                       3442 00180$:
                                   3443 ;	radio/tdm.c:818: transmit_wait = packet_latency;
      000D14 78r08            [12] 3444 	mov	r0,#_packet_latency
      000D16 E2               [24] 3445 	movx	a,@r0
      000D17 FE               [12] 3446 	mov	r6,a
      000D18 08               [12] 3447 	inc	r0
      000D19 E2               [24] 3448 	movx	a,@r0
      000D1A FF               [12] 3449 	mov	r7,a
      000D1B 78r0C            [12] 3450 	mov	r0,#_transmit_wait
      000D1D EE               [12] 3451 	mov	a,r6
      000D1E F2               [24] 3452 	movx	@r0,a
      000D1F 08               [12] 3453 	inc	r0
      000D20 EF               [12] 3454 	mov	a,r7
      000D21 F2               [24] 3455 	movx	@r0,a
                                   3456 ;	radio/tdm.c:822: if ((duty_cycle - duty_cycle_offset) != 100) {
      000D22 78r0E            [12] 3457 	mov	r0,#_duty_cycle
      000D24 E2               [24] 3458 	movx	a,@r0
      000D25 FE               [12] 3459 	mov	r6,a
      000D26 7F 00            [12] 3460 	mov	r7,#0x00
      000D28 78r13            [12] 3461 	mov	r0,#_duty_cycle_offset
      000D2A E2               [24] 3462 	movx	a,@r0
      000D2B FC               [12] 3463 	mov	r4,a
      000D2C 7D 00            [12] 3464 	mov	r5,#0x00
      000D2E EE               [12] 3465 	mov	a,r6
      000D2F C3               [12] 3466 	clr	c
      000D30 9C               [12] 3467 	subb	a,r4
      000D31 FE               [12] 3468 	mov	r6,a
      000D32 EF               [12] 3469 	mov	a,r7
      000D33 9D               [12] 3470 	subb	a,r5
      000D34 FF               [12] 3471 	mov	r7,a
      000D35 BE 64 05         [24] 3472 	cjne	r6,#0x64,00401$
      000D38 BF 00 02         [24] 3473 	cjne	r7,#0x00,00401$
      000D3B 80 17            [24] 3474 	sjmp	00182$
      000D3D                       3475 00401$:
                                   3476 ;	radio/tdm.c:823: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
      000D3D 78r67            [12] 3477 	mov	r0,#_tdm_serial_loop_len_1_222
      000D3F E2               [24] 3478 	movx	a,@r0
      000D40 24 02            [12] 3479 	add	a,#0x02
      000D42 F5 82            [12] 3480 	mov	dpl,a
      000D44 12r00rDD         [24] 3481 	lcall	_flight_time_estimate
      000D47 AE 82            [24] 3482 	mov	r6,dpl
      000D49 AF 83            [24] 3483 	mov	r7,dph
      000D4B 78r14            [12] 3484 	mov	r0,#_transmitted_ticks
      000D4D E2               [24] 3485 	movx	a,@r0
      000D4E 2E               [12] 3486 	add	a,r6
      000D4F F2               [24] 3487 	movx	@r0,a
      000D50 08               [12] 3488 	inc	r0
      000D51 E2               [24] 3489 	movx	a,@r0
      000D52 3F               [12] 3490 	addc	a,r7
      000D53 F2               [24] 3491 	movx	@r0,a
      000D54                       3492 00182$:
                                   3493 ;	radio/tdm.c:827: if (!radio_transmit(len + sizeof(trailer), pbuf, tdm_state_remaining + (silence_period/2)) &&
      000D54 78r67            [12] 3494 	mov	r0,#_tdm_serial_loop_len_1_222
      000D56 E2               [24] 3495 	movx	a,@r0
      000D57 24 02            [12] 3496 	add	a,#0x02
      000D59 FF               [12] 3497 	mov	r7,a
      000D5A 78r06            [12] 3498 	mov	r0,#_silence_period
      000D5C E2               [24] 3499 	movx	a,@r0
      000D5D FD               [12] 3500 	mov	r5,a
      000D5E 08               [12] 3501 	inc	r0
      000D5F E2               [24] 3502 	movx	a,@r0
      000D60 C3               [12] 3503 	clr	c
      000D61 13               [12] 3504 	rrc	a
      000D62 CD               [12] 3505 	xch	a,r5
      000D63 13               [12] 3506 	rrc	a
      000D64 CD               [12] 3507 	xch	a,r5
      000D65 FE               [12] 3508 	mov	r6,a
      000D66 78r01            [12] 3509 	mov	r0,#_tdm_state_remaining
      000D68 E2               [24] 3510 	movx	a,@r0
      000D69 2D               [12] 3511 	add	a,r5
      000D6A FD               [12] 3512 	mov	r5,a
      000D6B 08               [12] 3513 	inc	r0
      000D6C E2               [24] 3514 	movx	a,@r0
      000D6D 3E               [12] 3515 	addc	a,r6
      000D6E FE               [12] 3516 	mov	r6,a
      000D6F 78r00            [12] 3517 	mov	r0,#_radio_transmit_PARM_2
      000D71 74r00            [12] 3518 	mov	a,#_pbuf
      000D73 F2               [24] 3519 	movx	@r0,a
      000D74 08               [12] 3520 	inc	r0
      000D75 74s00            [12] 3521 	mov	a,#(_pbuf >> 8)
      000D77 F2               [24] 3522 	movx	@r0,a
      000D78 78r00            [12] 3523 	mov	r0,#_radio_transmit_PARM_3
      000D7A ED               [12] 3524 	mov	a,r5
      000D7B F2               [24] 3525 	movx	@r0,a
      000D7C 08               [12] 3526 	inc	r0
      000D7D EE               [12] 3527 	mov	a,r6
      000D7E F2               [24] 3528 	movx	@r0,a
      000D7F 8F 82            [24] 3529 	mov	dpl,r7
      000D81 12r00r00         [24] 3530 	lcall	_radio_transmit
      000D84 40 1A            [24] 3531 	jc	00184$
                                   3532 ;	radio/tdm.c:828: len != 0 && trailer.window != 0 && trailer.command == 0) {
      000D86 78r67            [12] 3533 	mov	r0,#_tdm_serial_loop_len_1_222
      000D88 E2               [24] 3534 	movx	a,@r0
      000D89 60 15            [24] 3535 	jz	00184$
      000D8B 78r1D            [12] 3536 	mov	r0,#_trailer
      000D8D E2               [24] 3537 	movx	a,@r0
      000D8E FE               [12] 3538 	mov	r6,a
      000D8F 08               [12] 3539 	inc	r0
      000D90 E2               [24] 3540 	movx	a,@r0
      000D91 54 1F            [12] 3541 	anl	a,#0x1F
      000D93 FF               [12] 3542 	mov	r7,a
      000D94 4E               [12] 3543 	orl	a,r6
      000D95 60 09            [24] 3544 	jz	00184$
      000D97 78r1E            [12] 3545 	mov	r0,#(_trailer + 0x0001)
      000D99 E2               [24] 3546 	movx	a,@r0
      000D9A 20 E5 03         [24] 3547 	jb	acc.5,00184$
                                   3548 ;	radio/tdm.c:829: packet_force_resend();
      000D9D 12r00r00         [24] 3549 	lcall	_packet_force_resend
      000DA0                       3550 00184$:
                                   3551 ;	radio/tdm.c:832: if (lbt_rssi != 0) {
      000DA0 78r16            [12] 3552 	mov	r0,#_lbt_rssi
      000DA2 E2               [24] 3553 	movx	a,@r0
      000DA3 60 0B            [24] 3554 	jz	00189$
                                   3555 ;	radio/tdm.c:834: lbt_listen_time = 0;
      000DA5 78r17            [12] 3556 	mov	r0,#_lbt_listen_time
      000DA7 E4               [12] 3557 	clr	a
      000DA8 F2               [24] 3558 	movx	@r0,a
      000DA9 08               [12] 3559 	inc	r0
      000DAA F2               [24] 3560 	movx	@r0,a
                                   3561 ;	radio/tdm.c:835: lbt_rand = 0;
      000DAB 78r1B            [12] 3562 	mov	r0,#_lbt_rand
      000DAD F2               [24] 3563 	movx	@r0,a
      000DAE 08               [12] 3564 	inc	r0
      000DAF F2               [24] 3565 	movx	@r0,a
      000DB0                       3566 00189$:
                                   3567 ;	radio/tdm.c:838: if (len != 0 && trailer.window != 0) {
      000DB0 78r67            [12] 3568 	mov	r0,#_tdm_serial_loop_len_1_222
      000DB2 E2               [24] 3569 	movx	a,@r0
      000DB3 60 0E            [24] 3570 	jz	00191$
      000DB5 78r1D            [12] 3571 	mov	r0,#_trailer
      000DB7 E2               [24] 3572 	movx	a,@r0
      000DB8 FE               [12] 3573 	mov	r6,a
      000DB9 08               [12] 3574 	inc	r0
      000DBA E2               [24] 3575 	movx	a,@r0
      000DBB 54 1F            [12] 3576 	anl	a,#0x1F
      000DBD FF               [12] 3577 	mov	r7,a
      000DBE 4E               [12] 3578 	orl	a,r6
      000DBF 60 02            [24] 3579 	jz	00191$
                                   3580 ;	radio/tdm.c:839: LED_ACTIVITY = LED_OFF;
      000DC1 C2 B6            [12] 3581 	clr	_LED_RED
      000DC3                       3582 00191$:
                                   3583 ;	radio/tdm.c:860: radio_set_channel(fhop_receive_channel());
      000DC3 12r00r00         [24] 3584 	lcall	_fhop_receive_channel
      000DC6 12r00r00         [24] 3585 	lcall	_radio_set_channel
                                   3586 ;	radio/tdm.c:863: radio_receiver_on();
      000DC9 12r00r00         [24] 3587 	lcall	_radio_receiver_on
      000DCC 02r07r9F         [24] 3588 	ljmp	00195$
                                   3589 ;------------------------------------------------------------
                                   3590 ;Allocation info for local variables in function 'tdm_init'
                                   3591 ;------------------------------------------------------------
                                   3592 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                                   3593 ;i                         Allocated with name '_tdm_init_i_1_262'
                                   3594 ;air_rate                  Allocated with name '_tdm_init_air_rate_1_262'
                                   3595 ;window_width              Allocated with name '_tdm_init_window_width_1_262'
                                   3596 ;------------------------------------------------------------
                                   3597 ;	radio/tdm.c:982: tdm_init(void)
                                   3598 ;	-----------------------------------------
                                   3599 ;	 function tdm_init
                                   3600 ;	-----------------------------------------
      000DCF                       3601 _tdm_init:
                                   3602 ;	radio/tdm.c:985: __xdata uint8_t air_rate = radio_air_rate();
      000DCF 12r00r00         [24] 3603 	lcall	_radio_air_rate
      000DD2 AF 82            [24] 3604 	mov	r7,dpl
                                   3605 ;	radio/tdm.c:994: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
      000DD4 90r00r00         [24] 3606 	mov	dptr,#__mullong_PARM_2
      000DD7 EF               [12] 3607 	mov	a,r7
      000DD8 F0               [24] 3608 	movx	@dptr,a
      000DD9 E4               [12] 3609 	clr	a
      000DDA A3               [24] 3610 	inc	dptr
      000DDB F0               [24] 3611 	movx	@dptr,a
      000DDC A3               [24] 3612 	inc	dptr
      000DDD F0               [24] 3613 	movx	@dptr,a
      000DDE A3               [24] 3614 	inc	dptr
      000DDF F0               [24] 3615 	movx	@dptr,a
      000DE0 90 03 E8         [24] 3616 	mov	dptr,#0x03E8
      000DE3 E4               [12] 3617 	clr	a
      000DE4 F5 F0            [12] 3618 	mov	b,a
      000DE6 12r00r00         [24] 3619 	lcall	__mullong
      000DE9 AC 82            [24] 3620 	mov	r4,dpl
      000DEB AD 83            [24] 3621 	mov	r5,dph
      000DED AE F0            [24] 3622 	mov	r6,b
      000DEF FF               [12] 3623 	mov	r7,a
      000DF0 90r00r00         [24] 3624 	mov	dptr,#__divulong_PARM_2
      000DF3 EC               [12] 3625 	mov	a,r4
      000DF4 F0               [24] 3626 	movx	@dptr,a
      000DF5 ED               [12] 3627 	mov	a,r5
      000DF6 A3               [24] 3628 	inc	dptr
      000DF7 F0               [24] 3629 	movx	@dptr,a
      000DF8 EE               [12] 3630 	mov	a,r6
      000DF9 A3               [24] 3631 	inc	dptr
      000DFA F0               [24] 3632 	movx	@dptr,a
      000DFB EF               [12] 3633 	mov	a,r7
      000DFC A3               [24] 3634 	inc	dptr
      000DFD F0               [24] 3635 	movx	@dptr,a
      000DFE 90 12 00         [24] 3636 	mov	dptr,#0x1200
      000E01 75 F0 7A         [24] 3637 	mov	b,#0x7A
      000E04 E4               [12] 3638 	clr	a
      000E05 12r00r00         [24] 3639 	lcall	__divulong
      000E08 AC 82            [24] 3640 	mov	r4,dpl
      000E0A AD 83            [24] 3641 	mov	r5,dph
      000E0C AE F0            [24] 3642 	mov	r6,b
      000E0E FF               [12] 3643 	mov	r7,a
      000E0F 74 08            [12] 3644 	mov	a,#0x08
      000E11 2C               [12] 3645 	add	a,r4
      000E12 FC               [12] 3646 	mov	r4,a
      000E13 E4               [12] 3647 	clr	a
      000E14 3D               [12] 3648 	addc	a,r5
      000E15 FD               [12] 3649 	mov	r5,a
      000E16 E4               [12] 3650 	clr	a
      000E17 3E               [12] 3651 	addc	a,r6
      000E18 FE               [12] 3652 	mov	r6,a
      000E19 E4               [12] 3653 	clr	a
      000E1A 3F               [12] 3654 	addc	a,r7
      000E1B FF               [12] 3655 	mov	r7,a
      000E1C ED               [12] 3656 	mov	a,r5
      000E1D C4               [12] 3657 	swap	a
      000E1E CC               [12] 3658 	xch	a,r4
      000E1F C4               [12] 3659 	swap	a
      000E20 54 0F            [12] 3660 	anl	a,#0x0F
      000E22 6C               [12] 3661 	xrl	a,r4
      000E23 CC               [12] 3662 	xch	a,r4
      000E24 54 0F            [12] 3663 	anl	a,#0x0F
      000E26 CC               [12] 3664 	xch	a,r4
      000E27 6C               [12] 3665 	xrl	a,r4
      000E28 CC               [12] 3666 	xch	a,r4
      000E29 FD               [12] 3667 	mov	r5,a
      000E2A EE               [12] 3668 	mov	a,r6
      000E2B C4               [12] 3669 	swap	a
      000E2C 54 F0            [12] 3670 	anl	a,#0xF0
      000E2E 4D               [12] 3671 	orl	a,r5
      000E2F FD               [12] 3672 	mov	r5,a
      000E30 EF               [12] 3673 	mov	a,r7
      000E31 C4               [12] 3674 	swap	a
      000E32 CE               [12] 3675 	xch	a,r6
      000E33 C4               [12] 3676 	swap	a
      000E34 54 0F            [12] 3677 	anl	a,#0x0F
      000E36 6E               [12] 3678 	xrl	a,r6
      000E37 CE               [12] 3679 	xch	a,r6
      000E38 54 0F            [12] 3680 	anl	a,#0x0F
      000E3A CE               [12] 3681 	xch	a,r6
      000E3B 6E               [12] 3682 	xrl	a,r6
      000E3C CE               [12] 3683 	xch	a,r6
                                   3684 ;	radio/tdm.c:995: ticks_per_byte++;
      000E3D 74 01            [12] 3685 	mov	a,#0x01
      000E3F 2C               [12] 3686 	add	a,r4
      000E40 FE               [12] 3687 	mov	r6,a
      000E41 E4               [12] 3688 	clr	a
      000E42 3D               [12] 3689 	addc	a,r5
      000E43 FF               [12] 3690 	mov	r7,a
      000E44 78r0A            [12] 3691 	mov	r0,#_ticks_per_byte
      000E46 EE               [12] 3692 	mov	a,r6
      000E47 F2               [24] 3693 	movx	@r0,a
      000E48 08               [12] 3694 	inc	r0
      000E49 EF               [12] 3695 	mov	a,r7
      000E4A F2               [24] 3696 	movx	@r0,a
                                   3697 ;	radio/tdm.c:1002: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
      000E4B 90r00r00         [24] 3698 	mov	dptr,#__mulint_PARM_2
      000E4E EE               [12] 3699 	mov	a,r6
      000E4F F0               [24] 3700 	movx	@dptr,a
      000E50 EF               [12] 3701 	mov	a,r7
      000E51 A3               [24] 3702 	inc	dptr
      000E52 F0               [24] 3703 	movx	@dptr,a
      000E53 90 00 0D         [24] 3704 	mov	dptr,#0x000D
      000E56 C0 07            [24] 3705 	push	ar7
      000E58 C0 06            [24] 3706 	push	ar6
      000E5A 12r00r00         [24] 3707 	lcall	__mulint
      000E5D E5 82            [12] 3708 	mov	a,dpl
      000E5F 85 83 F0         [24] 3709 	mov	b,dph
      000E62 D0 06            [24] 3710 	pop	ar6
      000E64 D0 07            [24] 3711 	pop	ar7
      000E66 24 0D            [12] 3712 	add	a,#0x0D
      000E68 FC               [12] 3713 	mov	r4,a
      000E69 E4               [12] 3714 	clr	a
      000E6A 35 F0            [12] 3715 	addc	a,b
      000E6C FD               [12] 3716 	mov	r5,a
      000E6D 78r08            [12] 3717 	mov	r0,#_packet_latency
      000E6F EC               [12] 3718 	mov	a,r4
      000E70 F2               [24] 3719 	movx	@r0,a
      000E71 08               [12] 3720 	inc	r0
      000E72 ED               [12] 3721 	mov	a,r5
      000E73 F2               [24] 3722 	movx	@r0,a
                                   3723 ;	radio/tdm.c:1004: if (feature_golay) {
      000E74 30*00 2E         [24] 3724 	jnb	_feature_golay,00102$
                                   3725 ;	radio/tdm.c:1005: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
      000E77 78r05            [12] 3726 	mov	r0,#_max_data_packet_length
      000E79 74 76            [12] 3727 	mov	a,#0x76
      000E7B F2               [24] 3728 	movx	@r0,a
                                   3729 ;	radio/tdm.c:1008: ticks_per_byte *= 2;
      000E7C EF               [12] 3730 	mov	a,r7
      000E7D CE               [12] 3731 	xch	a,r6
      000E7E 25 E0            [12] 3732 	add	a,acc
      000E80 CE               [12] 3733 	xch	a,r6
      000E81 33               [12] 3734 	rlc	a
      000E82 FF               [12] 3735 	mov	r7,a
      000E83 78r0A            [12] 3736 	mov	r0,#_ticks_per_byte
      000E85 EE               [12] 3737 	mov	a,r6
      000E86 F2               [24] 3738 	movx	@r0,a
      000E87 08               [12] 3739 	inc	r0
      000E88 EF               [12] 3740 	mov	a,r7
      000E89 F2               [24] 3741 	movx	@r0,a
                                   3742 ;	radio/tdm.c:1011: packet_latency += 4*ticks_per_byte;
      000E8A EF               [12] 3743 	mov	a,r7
      000E8B CE               [12] 3744 	xch	a,r6
      000E8C 25 E0            [12] 3745 	add	a,acc
      000E8E CE               [12] 3746 	xch	a,r6
      000E8F 33               [12] 3747 	rlc	a
      000E90 CE               [12] 3748 	xch	a,r6
      000E91 25 E0            [12] 3749 	add	a,acc
      000E93 CE               [12] 3750 	xch	a,r6
      000E94 33               [12] 3751 	rlc	a
      000E95 FF               [12] 3752 	mov	r7,a
      000E96 EE               [12] 3753 	mov	a,r6
      000E97 2C               [12] 3754 	add	a,r4
      000E98 FC               [12] 3755 	mov	r4,a
      000E99 EF               [12] 3756 	mov	a,r7
      000E9A 3D               [12] 3757 	addc	a,r5
      000E9B FD               [12] 3758 	mov	r5,a
      000E9C 78r08            [12] 3759 	mov	r0,#_packet_latency
      000E9E EC               [12] 3760 	mov	a,r4
      000E9F F2               [24] 3761 	movx	@r0,a
      000EA0 08               [12] 3762 	inc	r0
      000EA1 ED               [12] 3763 	mov	a,r5
      000EA2 F2               [24] 3764 	movx	@r0,a
      000EA3 80 05            [24] 3765 	sjmp	00103$
      000EA5                       3766 00102$:
                                   3767 ;	radio/tdm.c:1013: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
      000EA5 78r05            [12] 3768 	mov	r0,#_max_data_packet_length
      000EA7 74 FA            [12] 3769 	mov	a,#0xFA
      000EA9 F2               [24] 3770 	movx	@r0,a
      000EAA                       3771 00103$:
                                   3772 ;	radio/tdm.c:1017: silence_period = 2*packet_latency;
      000EAA 78r08            [12] 3773 	mov	r0,#_packet_latency
      000EAC 79r06            [12] 3774 	mov	r1,#_silence_period
      000EAE E2               [24] 3775 	movx	a,@r0
      000EAF F3               [24] 3776 	movx	@r1,a
      000EB0 08               [12] 3777 	inc	r0
      000EB1 E2               [24] 3778 	movx	a,@r0
      000EB2 F5 F0            [12] 3779 	mov	b,a
      000EB4 E3               [24] 3780 	movx	a,@r1
      000EB5 25 E0            [12] 3781 	add	a,acc
      000EB7 C5 F0            [12] 3782 	xch	a,b
      000EB9 33               [12] 3783 	rlc	a
      000EBA C5 F0            [12] 3784 	xch	a,b
      000EBC F3               [24] 3785 	movx	@r1,a
      000EBD 09               [12] 3786 	inc	r1
      000EBE E5 F0            [12] 3787 	mov	a,b
      000EC0 F3               [24] 3788 	movx	@r1,a
                                   3789 ;	radio/tdm.c:1020: window_width = 3*(packet_latency+(max_data_packet_length*(uint32_t)ticks_per_byte));
      000EC1 78r0A            [12] 3790 	mov	r0,#_ticks_per_byte
      000EC3 90r00r00         [24] 3791 	mov	dptr,#__mullong_PARM_2
      000EC6 E2               [24] 3792 	movx	a,@r0
      000EC7 F0               [24] 3793 	movx	@dptr,a
      000EC8 08               [12] 3794 	inc	r0
      000EC9 E2               [24] 3795 	movx	a,@r0
      000ECA A3               [24] 3796 	inc	dptr
      000ECB F0               [24] 3797 	movx	@dptr,a
      000ECC E4               [12] 3798 	clr	a
      000ECD A3               [24] 3799 	inc	dptr
      000ECE F0               [24] 3800 	movx	@dptr,a
      000ECF A3               [24] 3801 	inc	dptr
      000ED0 F0               [24] 3802 	movx	@dptr,a
      000ED1 78r05            [12] 3803 	mov	r0,#_max_data_packet_length
      000ED3 E2               [24] 3804 	movx	a,@r0
      000ED4 FC               [12] 3805 	mov	r4,a
      000ED5 7D 00            [12] 3806 	mov	r5,#0x00
      000ED7 7E 00            [12] 3807 	mov	r6,#0x00
      000ED9 7F 00            [12] 3808 	mov	r7,#0x00
      000EDB 8C 82            [24] 3809 	mov	dpl,r4
      000EDD 8D 83            [24] 3810 	mov	dph,r5
      000EDF 8E F0            [24] 3811 	mov	b,r6
      000EE1 EF               [12] 3812 	mov	a,r7
      000EE2 12r00r00         [24] 3813 	lcall	__mullong
      000EE5 85 82*15         [24] 3814 	mov	_tdm_init_sloc0_1_0,dpl
      000EE8 85 83*16         [24] 3815 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      000EEB 85 F0*17         [24] 3816 	mov	(_tdm_init_sloc0_1_0 + 2),b
      000EEE F5*18            [12] 3817 	mov	(_tdm_init_sloc0_1_0 + 3),a
      000EF0 78r08            [12] 3818 	mov	r0,#_packet_latency
      000EF2 E2               [24] 3819 	movx	a,@r0
      000EF3 FA               [12] 3820 	mov	r2,a
      000EF4 08               [12] 3821 	inc	r0
      000EF5 E2               [24] 3822 	movx	a,@r0
      000EF6 FB               [12] 3823 	mov	r3,a
      000EF7 7E 00            [12] 3824 	mov	r6,#0x00
      000EF9 7F 00            [12] 3825 	mov	r7,#0x00
      000EFB 90r00r00         [24] 3826 	mov	dptr,#__mullong_PARM_2
      000EFE E5*15            [12] 3827 	mov	a,_tdm_init_sloc0_1_0
      000F00 2A               [12] 3828 	add	a,r2
      000F01 F0               [24] 3829 	movx	@dptr,a
      000F02 E5*16            [12] 3830 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      000F04 3B               [12] 3831 	addc	a,r3
      000F05 A3               [24] 3832 	inc	dptr
      000F06 F0               [24] 3833 	movx	@dptr,a
      000F07 E5*17            [12] 3834 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      000F09 3E               [12] 3835 	addc	a,r6
      000F0A A3               [24] 3836 	inc	dptr
      000F0B F0               [24] 3837 	movx	@dptr,a
      000F0C E5*18            [12] 3838 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      000F0E 3F               [12] 3839 	addc	a,r7
      000F0F A3               [24] 3840 	inc	dptr
      000F10 F0               [24] 3841 	movx	@dptr,a
      000F11 90 00 03         [24] 3842 	mov	dptr,#(0x03&0x00ff)
      000F14 E4               [12] 3843 	clr	a
      000F15 F5 F0            [12] 3844 	mov	b,a
      000F17 12r00r00         [24] 3845 	lcall	__mullong
      000F1A AC 82            [24] 3846 	mov	r4,dpl
      000F1C AD 83            [24] 3847 	mov	r5,dph
      000F1E AE F0            [24] 3848 	mov	r6,b
      000F20 FF               [12] 3849 	mov	r7,a
      000F21 90r01r01         [24] 3850 	mov	dptr,#_tdm_init_window_width_1_262
      000F24 EC               [12] 3851 	mov	a,r4
      000F25 F0               [24] 3852 	movx	@dptr,a
      000F26 ED               [12] 3853 	mov	a,r5
      000F27 A3               [24] 3854 	inc	dptr
      000F28 F0               [24] 3855 	movx	@dptr,a
      000F29 EE               [12] 3856 	mov	a,r6
      000F2A A3               [24] 3857 	inc	dptr
      000F2B F0               [24] 3858 	movx	@dptr,a
      000F2C EF               [12] 3859 	mov	a,r7
      000F2D A3               [24] 3860 	inc	dptr
      000F2E F0               [24] 3861 	movx	@dptr,a
                                   3862 ;	radio/tdm.c:1023: lbt_min_time = LBT_MIN_TIME_USEC/16;
      000F2F 78r19            [12] 3863 	mov	r0,#_lbt_min_time
      000F31 74 38            [12] 3864 	mov	a,#0x38
      000F33 F2               [24] 3865 	movx	@r0,a
      000F34 08               [12] 3866 	inc	r0
      000F35 74 01            [12] 3867 	mov	a,#0x01
      000F37 F2               [24] 3868 	movx	@r0,a
                                   3869 ;	radio/tdm.c:1026: if (lbt_rssi != 0) {
      000F38 78r16            [12] 3870 	mov	r0,#_lbt_rssi
      000F3A E2               [24] 3871 	movx	a,@r0
      000F3B 60 3A            [24] 3872 	jz	00105$
                                   3873 ;	radio/tdm.c:1027: window_width = constrain(window_width, 3*lbt_min_time, window_width);
      000F3D 78r00            [12] 3874 	mov	r0,#_constrain_PARM_2
      000F3F 74 A8            [12] 3875 	mov	a,#0xA8
      000F41 F2               [24] 3876 	movx	@r0,a
      000F42 08               [12] 3877 	inc	r0
      000F43 74 03            [12] 3878 	mov	a,#0x03
      000F45 F2               [24] 3879 	movx	@r0,a
      000F46 08               [12] 3880 	inc	r0
      000F47 E4               [12] 3881 	clr	a
      000F48 F2               [24] 3882 	movx	@r0,a
      000F49 08               [12] 3883 	inc	r0
      000F4A F2               [24] 3884 	movx	@r0,a
      000F4B 78r00            [12] 3885 	mov	r0,#_constrain_PARM_3
      000F4D EC               [12] 3886 	mov	a,r4
      000F4E F2               [24] 3887 	movx	@r0,a
      000F4F 08               [12] 3888 	inc	r0
      000F50 ED               [12] 3889 	mov	a,r5
      000F51 F2               [24] 3890 	movx	@r0,a
      000F52 08               [12] 3891 	inc	r0
      000F53 EE               [12] 3892 	mov	a,r6
      000F54 F2               [24] 3893 	movx	@r0,a
      000F55 08               [12] 3894 	inc	r0
      000F56 EF               [12] 3895 	mov	a,r7
      000F57 F2               [24] 3896 	movx	@r0,a
      000F58 8C 82            [24] 3897 	mov	dpl,r4
      000F5A 8D 83            [24] 3898 	mov	dph,r5
      000F5C 8E F0            [24] 3899 	mov	b,r6
      000F5E EF               [12] 3900 	mov	a,r7
      000F5F 12r00r00         [24] 3901 	lcall	_constrain
      000F62 AC 82            [24] 3902 	mov	r4,dpl
      000F64 AD 83            [24] 3903 	mov	r5,dph
      000F66 AE F0            [24] 3904 	mov	r6,b
      000F68 FF               [12] 3905 	mov	r7,a
      000F69 90r01r01         [24] 3906 	mov	dptr,#_tdm_init_window_width_1_262
      000F6C EC               [12] 3907 	mov	a,r4
      000F6D F0               [24] 3908 	movx	@dptr,a
      000F6E ED               [12] 3909 	mov	a,r5
      000F6F A3               [24] 3910 	inc	dptr
      000F70 F0               [24] 3911 	movx	@dptr,a
      000F71 EE               [12] 3912 	mov	a,r6
      000F72 A3               [24] 3913 	inc	dptr
      000F73 F0               [24] 3914 	movx	@dptr,a
      000F74 EF               [12] 3915 	mov	a,r7
      000F75 A3               [24] 3916 	inc	dptr
      000F76 F0               [24] 3917 	movx	@dptr,a
      000F77                       3918 00105$:
                                   3919 ;	radio/tdm.c:1032: if (window_width >= REGULATORY_MAX_WINDOW && num_fh_channels > 1) {
      000F77 90r01r01         [24] 3920 	mov	dptr,#_tdm_init_window_width_1_262
      000F7A E0               [24] 3921 	movx	a,@dptr
      000F7B FC               [12] 3922 	mov	r4,a
      000F7C A3               [24] 3923 	inc	dptr
      000F7D E0               [24] 3924 	movx	a,@dptr
      000F7E FD               [12] 3925 	mov	r5,a
      000F7F A3               [24] 3926 	inc	dptr
      000F80 E0               [24] 3927 	movx	a,@dptr
      000F81 FE               [12] 3928 	mov	r6,a
      000F82 A3               [24] 3929 	inc	dptr
      000F83 E0               [24] 3930 	movx	a,@dptr
      000F84 FF               [12] 3931 	mov	r7,a
      000F85 C3               [12] 3932 	clr	c
      000F86 EC               [12] 3933 	mov	a,r4
      000F87 94 A8            [12] 3934 	subb	a,#0xA8
      000F89 ED               [12] 3935 	mov	a,r5
      000F8A 94 61            [12] 3936 	subb	a,#0x61
      000F8C EE               [12] 3937 	mov	a,r6
      000F8D 94 00            [12] 3938 	subb	a,#0x00
      000F8F EF               [12] 3939 	mov	a,r7
      000F90 94 00            [12] 3940 	subb	a,#0x00
      000F92 40 1B            [24] 3941 	jc	00107$
      000F94 78r00            [12] 3942 	mov	r0,#_num_fh_channels
      000F96 C3               [12] 3943 	clr	c
      000F97 E2               [24] 3944 	movx	a,@r0
      000F98 F5 F0            [12] 3945 	mov	b,a
      000F9A 74 01            [12] 3946 	mov	a,#0x01
      000F9C 95 F0            [12] 3947 	subb	a,b
      000F9E 50 0F            [24] 3948 	jnc	00107$
                                   3949 ;	radio/tdm.c:1033: window_width = REGULATORY_MAX_WINDOW;
      000FA0 90r01r01         [24] 3950 	mov	dptr,#_tdm_init_window_width_1_262
      000FA3 74 A8            [12] 3951 	mov	a,#0xA8
      000FA5 F0               [24] 3952 	movx	@dptr,a
      000FA6 74 61            [12] 3953 	mov	a,#0x61
      000FA8 A3               [24] 3954 	inc	dptr
      000FA9 F0               [24] 3955 	movx	@dptr,a
      000FAA E4               [12] 3956 	clr	a
      000FAB A3               [24] 3957 	inc	dptr
      000FAC F0               [24] 3958 	movx	@dptr,a
      000FAD A3               [24] 3959 	inc	dptr
      000FAE F0               [24] 3960 	movx	@dptr,a
      000FAF                       3961 00107$:
                                   3962 ;	radio/tdm.c:1037: if (window_width > param_get(PARAM_MAX_WINDOW)*(1000/16)) {
      000FAF 75 82 0F         [24] 3963 	mov	dpl,#0x0F
      000FB2 12r00r00         [24] 3964 	lcall	_param_get
      000FB5 AC 82            [24] 3965 	mov	r4,dpl
      000FB7 AD 83            [24] 3966 	mov	r5,dph
      000FB9 AE F0            [24] 3967 	mov	r6,b
      000FBB FF               [12] 3968 	mov	r7,a
      000FBC 90r00r00         [24] 3969 	mov	dptr,#__mullong_PARM_2
      000FBF EC               [12] 3970 	mov	a,r4
      000FC0 F0               [24] 3971 	movx	@dptr,a
      000FC1 ED               [12] 3972 	mov	a,r5
      000FC2 A3               [24] 3973 	inc	dptr
      000FC3 F0               [24] 3974 	movx	@dptr,a
      000FC4 EE               [12] 3975 	mov	a,r6
      000FC5 A3               [24] 3976 	inc	dptr
      000FC6 F0               [24] 3977 	movx	@dptr,a
      000FC7 EF               [12] 3978 	mov	a,r7
      000FC8 A3               [24] 3979 	inc	dptr
      000FC9 F0               [24] 3980 	movx	@dptr,a
      000FCA 90 00 3E         [24] 3981 	mov	dptr,#(0x3E&0x00ff)
      000FCD E4               [12] 3982 	clr	a
      000FCE F5 F0            [12] 3983 	mov	b,a
      000FD0 12r00r00         [24] 3984 	lcall	__mullong
      000FD3 85 82*15         [24] 3985 	mov	_tdm_init_sloc0_1_0,dpl
      000FD6 85 83*16         [24] 3986 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      000FD9 85 F0*17         [24] 3987 	mov	(_tdm_init_sloc0_1_0 + 2),b
      000FDC F5*18            [12] 3988 	mov	(_tdm_init_sloc0_1_0 + 3),a
      000FDE 90r01r01         [24] 3989 	mov	dptr,#_tdm_init_window_width_1_262
      000FE1 E0               [24] 3990 	movx	a,@dptr
      000FE2 FA               [12] 3991 	mov	r2,a
      000FE3 A3               [24] 3992 	inc	dptr
      000FE4 E0               [24] 3993 	movx	a,@dptr
      000FE5 FB               [12] 3994 	mov	r3,a
      000FE6 A3               [24] 3995 	inc	dptr
      000FE7 E0               [24] 3996 	movx	a,@dptr
      000FE8 FE               [12] 3997 	mov	r6,a
      000FE9 A3               [24] 3998 	inc	dptr
      000FEA E0               [24] 3999 	movx	a,@dptr
      000FEB FF               [12] 4000 	mov	r7,a
      000FEC C3               [12] 4001 	clr	c
      000FED E5*15            [12] 4002 	mov	a,_tdm_init_sloc0_1_0
      000FEF 9A               [12] 4003 	subb	a,r2
      000FF0 E5*16            [12] 4004 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      000FF2 9B               [12] 4005 	subb	a,r3
      000FF3 E5*17            [12] 4006 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      000FF5 9E               [12] 4007 	subb	a,r6
      000FF6 E5*18            [12] 4008 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      000FF8 9F               [12] 4009 	subb	a,r7
      000FF9 50 39            [24] 4010 	jnc	00110$
                                   4011 ;	radio/tdm.c:1038: window_width = param_get(PARAM_MAX_WINDOW)*(1000/16);
      000FFB 75 82 0F         [24] 4012 	mov	dpl,#0x0F
      000FFE 12r00r00         [24] 4013 	lcall	_param_get
      001001 AC 82            [24] 4014 	mov	r4,dpl
      001003 AD 83            [24] 4015 	mov	r5,dph
      001005 AE F0            [24] 4016 	mov	r6,b
      001007 FF               [12] 4017 	mov	r7,a
      001008 90r00r00         [24] 4018 	mov	dptr,#__mullong_PARM_2
      00100B EC               [12] 4019 	mov	a,r4
      00100C F0               [24] 4020 	movx	@dptr,a
      00100D ED               [12] 4021 	mov	a,r5
      00100E A3               [24] 4022 	inc	dptr
      00100F F0               [24] 4023 	movx	@dptr,a
      001010 EE               [12] 4024 	mov	a,r6
      001011 A3               [24] 4025 	inc	dptr
      001012 F0               [24] 4026 	movx	@dptr,a
      001013 EF               [12] 4027 	mov	a,r7
      001014 A3               [24] 4028 	inc	dptr
      001015 F0               [24] 4029 	movx	@dptr,a
      001016 90 00 3E         [24] 4030 	mov	dptr,#(0x3E&0x00ff)
      001019 E4               [12] 4031 	clr	a
      00101A F5 F0            [12] 4032 	mov	b,a
      00101C 12r00r00         [24] 4033 	lcall	__mullong
      00101F AC 82            [24] 4034 	mov	r4,dpl
      001021 AD 83            [24] 4035 	mov	r5,dph
      001023 AE F0            [24] 4036 	mov	r6,b
      001025 FF               [12] 4037 	mov	r7,a
      001026 90r01r01         [24] 4038 	mov	dptr,#_tdm_init_window_width_1_262
      001029 EC               [12] 4039 	mov	a,r4
      00102A F0               [24] 4040 	movx	@dptr,a
      00102B ED               [12] 4041 	mov	a,r5
      00102C A3               [24] 4042 	inc	dptr
      00102D F0               [24] 4043 	movx	@dptr,a
      00102E EE               [12] 4044 	mov	a,r6
      00102F A3               [24] 4045 	inc	dptr
      001030 F0               [24] 4046 	movx	@dptr,a
      001031 EF               [12] 4047 	mov	a,r7
      001032 A3               [24] 4048 	inc	dptr
      001033 F0               [24] 4049 	movx	@dptr,a
      001034                       4050 00110$:
                                   4051 ;	radio/tdm.c:1042: if (window_width > 0x1fff) {
      001034 90r01r01         [24] 4052 	mov	dptr,#_tdm_init_window_width_1_262
      001037 E0               [24] 4053 	movx	a,@dptr
      001038 FC               [12] 4054 	mov	r4,a
      001039 A3               [24] 4055 	inc	dptr
      00103A E0               [24] 4056 	movx	a,@dptr
      00103B FD               [12] 4057 	mov	r5,a
      00103C A3               [24] 4058 	inc	dptr
      00103D E0               [24] 4059 	movx	a,@dptr
      00103E FE               [12] 4060 	mov	r6,a
      00103F A3               [24] 4061 	inc	dptr
      001040 E0               [24] 4062 	movx	a,@dptr
      001041 FF               [12] 4063 	mov	r7,a
      001042 C3               [12] 4064 	clr	c
      001043 74 FF            [12] 4065 	mov	a,#0xFF
      001045 9C               [12] 4066 	subb	a,r4
      001046 74 1F            [12] 4067 	mov	a,#0x1F
      001048 9D               [12] 4068 	subb	a,r5
      001049 E4               [12] 4069 	clr	a
      00104A 9E               [12] 4070 	subb	a,r6
      00104B E4               [12] 4071 	clr	a
      00104C 9F               [12] 4072 	subb	a,r7
      00104D 50 0F            [24] 4073 	jnc	00112$
                                   4074 ;	radio/tdm.c:1043: window_width = 0x1fff;
      00104F 90r01r01         [24] 4075 	mov	dptr,#_tdm_init_window_width_1_262
      001052 74 FF            [12] 4076 	mov	a,#0xFF
      001054 F0               [24] 4077 	movx	@dptr,a
      001055 74 1F            [12] 4078 	mov	a,#0x1F
      001057 A3               [24] 4079 	inc	dptr
      001058 F0               [24] 4080 	movx	@dptr,a
      001059 E4               [12] 4081 	clr	a
      00105A A3               [24] 4082 	inc	dptr
      00105B F0               [24] 4083 	movx	@dptr,a
      00105C A3               [24] 4084 	inc	dptr
      00105D F0               [24] 4085 	movx	@dptr,a
      00105E                       4086 00112$:
                                   4087 ;	radio/tdm.c:1046: tx_window_width = window_width;
      00105E 90r01r01         [24] 4088 	mov	dptr,#_tdm_init_window_width_1_262
      001061 E0               [24] 4089 	movx	a,@dptr
      001062 FC               [12] 4090 	mov	r4,a
      001063 A3               [24] 4091 	inc	dptr
      001064 E0               [24] 4092 	movx	a,@dptr
      001065 FD               [12] 4093 	mov	r5,a
      001066 A3               [24] 4094 	inc	dptr
      001067 E0               [24] 4095 	movx	a,@dptr
      001068 A3               [24] 4096 	inc	dptr
      001069 E0               [24] 4097 	movx	a,@dptr
      00106A 78r03            [12] 4098 	mov	r0,#_tx_window_width
      00106C EC               [12] 4099 	mov	a,r4
      00106D F2               [24] 4100 	movx	@r0,a
      00106E 08               [12] 4101 	inc	r0
      00106F ED               [12] 4102 	mov	a,r5
      001070 F2               [24] 4103 	movx	@r0,a
                                   4104 ;	radio/tdm.c:1051: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
      001071 78r0B            [12] 4105 	mov	r0,#(_settings + 0x000b)
      001073 E2               [24] 4106 	movx	a,@r0
      001074 7E 00            [12] 4107 	mov	r6,#0x00
      001076 24 F6            [12] 4108 	add	a,#0xF6
      001078 FF               [12] 4109 	mov	r7,a
      001079 EE               [12] 4110 	mov	a,r6
      00107A 34 FF            [12] 4111 	addc	a,#0xFF
      00107C FE               [12] 4112 	mov	r6,a
      00107D 90r00r00         [24] 4113 	mov	dptr,#__divsint_PARM_2
      001080 74 02            [12] 4114 	mov	a,#0x02
      001082 F0               [24] 4115 	movx	@dptr,a
      001083 E4               [12] 4116 	clr	a
      001084 A3               [24] 4117 	inc	dptr
      001085 F0               [24] 4118 	movx	@dptr,a
      001086 8F 82            [24] 4119 	mov	dpl,r7
      001088 8E 83            [24] 4120 	mov	dph,r6
      00108A C0 05            [24] 4121 	push	ar5
      00108C C0 04            [24] 4122 	push	ar4
      00108E 12r00r00         [24] 4123 	lcall	__divsint
      001091 AE 82            [24] 4124 	mov	r6,dpl
      001093 AF 83            [24] 4125 	mov	r7,dph
      001095 78r0A            [12] 4126 	mov	r0,#_ticks_per_byte
      001097 90r00r00         [24] 4127 	mov	dptr,#__mulint_PARM_2
      00109A E2               [24] 4128 	movx	a,@r0
      00109B F0               [24] 4129 	movx	@dptr,a
      00109C 08               [12] 4130 	inc	r0
      00109D E2               [24] 4131 	movx	a,@r0
      00109E A3               [24] 4132 	inc	dptr
      00109F F0               [24] 4133 	movx	@dptr,a
      0010A0 8E 82            [24] 4134 	mov	dpl,r6
      0010A2 8F 83            [24] 4135 	mov	dph,r7
      0010A4 12r00r00         [24] 4136 	lcall	__mulint
      0010A7 AE 82            [24] 4137 	mov	r6,dpl
      0010A9 AF 83            [24] 4138 	mov	r7,dph
      0010AB D0 04            [24] 4139 	pop	ar4
      0010AD D0 05            [24] 4140 	pop	ar5
      0010AF 78r08            [12] 4141 	mov	r0,#_packet_latency
      0010B1 E2               [24] 4142 	movx	a,@r0
      0010B2 2E               [12] 4143 	add	a,r6
      0010B3 F2               [24] 4144 	movx	@r0,a
      0010B4 08               [12] 4145 	inc	r0
      0010B5 E2               [24] 4146 	movx	a,@r0
      0010B6 3F               [12] 4147 	addc	a,r7
      0010B7 F2               [24] 4148 	movx	@r0,a
                                   4149 ;	radio/tdm.c:1055: i = (tx_window_width - packet_latency) / ticks_per_byte;
      0010B8 78r08            [12] 4150 	mov	r0,#_packet_latency
      0010BA D3               [12] 4151 	setb	c
      0010BB E2               [24] 4152 	movx	a,@r0
      0010BC 9C               [12] 4153 	subb	a,r4
      0010BD F4               [12] 4154 	cpl	a
      0010BE B3               [12] 4155 	cpl	c
      0010BF FC               [12] 4156 	mov	r4,a
      0010C0 B3               [12] 4157 	cpl	c
      0010C1 08               [12] 4158 	inc	r0
      0010C2 E2               [24] 4159 	movx	a,@r0
      0010C3 9D               [12] 4160 	subb	a,r5
      0010C4 F4               [12] 4161 	cpl	a
      0010C5 FD               [12] 4162 	mov	r5,a
      0010C6 78r0A            [12] 4163 	mov	r0,#_ticks_per_byte
      0010C8 90r00r00         [24] 4164 	mov	dptr,#__divuint_PARM_2
      0010CB E2               [24] 4165 	movx	a,@r0
      0010CC F0               [24] 4166 	movx	@dptr,a
      0010CD 08               [12] 4167 	inc	r0
      0010CE E2               [24] 4168 	movx	a,@r0
      0010CF A3               [24] 4169 	inc	dptr
      0010D0 F0               [24] 4170 	movx	@dptr,a
      0010D1 8C 82            [24] 4171 	mov	dpl,r4
      0010D3 8D 83            [24] 4172 	mov	dph,r5
      0010D5 12r00r00         [24] 4173 	lcall	__divuint
      0010D8 AE 82            [24] 4174 	mov	r6,dpl
      0010DA AF 83            [24] 4175 	mov	r7,dph
      0010DC 90r00rFF         [24] 4176 	mov	dptr,#_tdm_init_i_1_262
      0010DF EE               [12] 4177 	mov	a,r6
      0010E0 F0               [24] 4178 	movx	@dptr,a
      0010E1 EF               [12] 4179 	mov	a,r7
      0010E2 A3               [24] 4180 	inc	dptr
      0010E3 F0               [24] 4181 	movx	@dptr,a
                                   4182 ;	radio/tdm.c:1056: if (i > max_data_packet_length) {
      0010E4 78r05            [12] 4183 	mov	r0,#_max_data_packet_length
      0010E6 E2               [24] 4184 	movx	a,@r0
      0010E7 FC               [12] 4185 	mov	r4,a
      0010E8 7D 00            [12] 4186 	mov	r5,#0x00
      0010EA C3               [12] 4187 	clr	c
      0010EB EC               [12] 4188 	mov	a,r4
      0010EC 9E               [12] 4189 	subb	a,r6
      0010ED ED               [12] 4190 	mov	a,r5
      0010EE 9F               [12] 4191 	subb	a,r7
      0010EF 50 08            [24] 4192 	jnc	00114$
                                   4193 ;	radio/tdm.c:1057: i = max_data_packet_length;
      0010F1 90r00rFF         [24] 4194 	mov	dptr,#_tdm_init_i_1_262
      0010F4 EC               [12] 4195 	mov	a,r4
      0010F5 F0               [24] 4196 	movx	@dptr,a
      0010F6 ED               [12] 4197 	mov	a,r5
      0010F7 A3               [24] 4198 	inc	dptr
      0010F8 F0               [24] 4199 	movx	@dptr,a
      0010F9                       4200 00114$:
                                   4201 ;	radio/tdm.c:1059: packet_set_max_xmit(i);
      0010F9 90r00rFF         [24] 4202 	mov	dptr,#_tdm_init_i_1_262
      0010FC E0               [24] 4203 	movx	a,@dptr
      0010FD FE               [12] 4204 	mov	r6,a
      0010FE A3               [24] 4205 	inc	dptr
      0010FF E0               [24] 4206 	movx	a,@dptr
      001100 8E 82            [24] 4207 	mov	dpl,r6
      001102 02r00r00         [24] 4208 	ljmp	_packet_set_max_xmit
                                   4209 ;------------------------------------------------------------
                                   4210 ;Allocation info for local variables in function 'tdm_report_timing'
                                   4211 ;------------------------------------------------------------
                                   4212 ;	radio/tdm.c:1075: tdm_report_timing(void)
                                   4213 ;	-----------------------------------------
                                   4214 ;	 function tdm_report_timing
                                   4215 ;	-----------------------------------------
      001105                       4216 _tdm_report_timing:
                                   4217 ;	radio/tdm.c:1077: printf("silence_period: %u\n", (unsigned)silence_period); delay_msec(1);
      001105 78r06            [12] 4218 	mov	r0,#_silence_period
      001107 E2               [24] 4219 	movx	a,@r0
      001108 C0 E0            [24] 4220 	push	acc
      00110A 08               [12] 4221 	inc	r0
      00110B E2               [24] 4222 	movx	a,@r0
      00110C C0 E0            [24] 4223 	push	acc
      00110E 74rE3            [12] 4224 	mov	a,#___str_9
      001110 C0 E0            [24] 4225 	push	acc
      001112 74s00            [12] 4226 	mov	a,#(___str_9 >> 8)
      001114 C0 E0            [24] 4227 	push	acc
      001116 74 80            [12] 4228 	mov	a,#0x80
      001118 C0 E0            [24] 4229 	push	acc
      00111A 12r00r00         [24] 4230 	lcall	_printfl
      00111D E5 81            [12] 4231 	mov	a,sp
      00111F 24 FB            [12] 4232 	add	a,#0xfb
      001121 F5 81            [12] 4233 	mov	sp,a
      001123 90 00 01         [24] 4234 	mov	dptr,#0x0001
      001126 12r00r00         [24] 4235 	lcall	_delay_msec
                                   4236 ;	radio/tdm.c:1078: printf("tx_window_width: %u\n", (unsigned)tx_window_width); delay_msec(1);
      001129 78r03            [12] 4237 	mov	r0,#_tx_window_width
      00112B E2               [24] 4238 	movx	a,@r0
      00112C C0 E0            [24] 4239 	push	acc
      00112E 08               [12] 4240 	inc	r0
      00112F E2               [24] 4241 	movx	a,@r0
      001130 C0 E0            [24] 4242 	push	acc
      001132 74rF7            [12] 4243 	mov	a,#___str_10
      001134 C0 E0            [24] 4244 	push	acc
      001136 74s00            [12] 4245 	mov	a,#(___str_10 >> 8)
      001138 C0 E0            [24] 4246 	push	acc
      00113A 74 80            [12] 4247 	mov	a,#0x80
      00113C C0 E0            [24] 4248 	push	acc
      00113E 12r00r00         [24] 4249 	lcall	_printfl
      001141 E5 81            [12] 4250 	mov	a,sp
      001143 24 FB            [12] 4251 	add	a,#0xfb
      001145 F5 81            [12] 4252 	mov	sp,a
      001147 90 00 01         [24] 4253 	mov	dptr,#0x0001
      00114A 12r00r00         [24] 4254 	lcall	_delay_msec
                                   4255 ;	radio/tdm.c:1079: printf("max_data_packet_length: %u\n", (unsigned)max_data_packet_length); delay_msec(1);
      00114D 78r05            [12] 4256 	mov	r0,#_max_data_packet_length
      00114F E2               [24] 4257 	movx	a,@r0
      001150 FE               [12] 4258 	mov	r6,a
      001151 7F 00            [12] 4259 	mov	r7,#0x00
      001153 C0 06            [24] 4260 	push	ar6
      001155 C0 07            [24] 4261 	push	ar7
      001157 74r0C            [12] 4262 	mov	a,#___str_11
      001159 C0 E0            [24] 4263 	push	acc
      00115B 74s01            [12] 4264 	mov	a,#(___str_11 >> 8)
      00115D C0 E0            [24] 4265 	push	acc
      00115F 74 80            [12] 4266 	mov	a,#0x80
      001161 C0 E0            [24] 4267 	push	acc
      001163 12r00r00         [24] 4268 	lcall	_printfl
      001166 E5 81            [12] 4269 	mov	a,sp
      001168 24 FB            [12] 4270 	add	a,#0xfb
      00116A F5 81            [12] 4271 	mov	sp,a
      00116C 90 00 01         [24] 4272 	mov	dptr,#0x0001
      00116F 02r00r00         [24] 4273 	ljmp	_delay_msec
                                   4274 	.area CSEG    (CODE)
                                   4275 	.area CONST   (CODE)
      000000                       4276 ___str_0:
      000000 4C 2F 52 20 52 53 53  4277 	.ascii "L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u "
             49 3A 20 25 75 2F 25
             75 20 20 4C 2F 52 20
             6E 6F 69 73 65 3A 20
             25 75 2F 25 75 20 70
             6B 74 73 3A 20 25 75
             20
      00002B 00                    4278 	.db 0x00
      00002C                       4279 ___str_1:
      00002C 20 74 78 65 3D 25 75  4280 	.ascii " txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u"
             20 72 78 65 3D 25 75
             20 73 74 78 3D 25 75
             20 73 72 78 3D 25 75
             20 65 63 63 3D 25 75
             2F 25 75 20 74 65 6D
             70 3D 25 64 20 64 63
             6F 3D 25 75
      000061 0A                    4281 	.db 0x0A
      000062 00                    4282 	.db 0x00
      000063                       4283 ___str_2:
      000063 54 44 4D 3A 20 25 75  4284 	.ascii "TDM: %u/%u len=%u "
             2F 25 75 20 6C 65 6E
             3D 25 75 20
      000075 00                    4285 	.db 0x00
      000076                       4286 ___str_3:
      000076 20 64 65 6C 74 61 3A  4287 	.ascii " delta: %d"
             20 25 64
      000080 0A                    4288 	.db 0x0A
      000081 00                    4289 	.db 0x00
      000082                       4290 ___str_4:
      000082 54 44 4D 3A 20 63 68  4291 	.ascii "TDM: change timing %u/%u"
             61 6E 67 65 20 74 69
             6D 69 6E 67 20 25 75
             2F 25 75
      00009A 0A                    4292 	.db 0x0A
      00009B 00                    4293 	.db 0x00
      00009C                       4294 ___str_5:
      00009C 54 44 4D 3A 20 73 63  4295 	.ascii "TDM: scanning"
             61 6E 6E 69 6E 67
      0000A9 0A                    4296 	.db 0x0A
      0000AA 00                    4297 	.db 0x00
      0000AB                       4298 ___str_6:
      0000AB 73 74 61 63 6B 20 62  4299 	.ascii "stack blown"
             6C 6F 77 6E
      0000B6 0A                    4300 	.db 0x0A
      0000B7 00                    4301 	.db 0x00
      0000B8                       4302 ___str_7:
      0000B8 70 64 61 74 61 20 63  4303 	.ascii "pdata canary changed"
             61 6E 61 72 79 20 63
             68 61 6E 67 65 64
      0000CC 0A                    4304 	.db 0x0A
      0000CD 00                    4305 	.db 0x00
      0000CE                       4306 ___str_8:
      0000CE 6F 76 65 72 73 69 7A  4307 	.ascii "oversized tdm packet"
             65 64 20 74 64 6D 20
             70 61 63 6B 65 74
      0000E2 00                    4308 	.db 0x00
      0000E3                       4309 ___str_9:
      0000E3 73 69 6C 65 6E 63 65  4310 	.ascii "silence_period: %u"
             5F 70 65 72 69 6F 64
             3A 20 25 75
      0000F5 0A                    4311 	.db 0x0A
      0000F6 00                    4312 	.db 0x00
      0000F7                       4313 ___str_10:
      0000F7 74 78 5F 77 69 6E 64  4314 	.ascii "tx_window_width: %u"
             6F 77 5F 77 69 64 74
             68 3A 20 25 75
      00010A 0A                    4315 	.db 0x0A
      00010B 00                    4316 	.db 0x00
      00010C                       4317 ___str_11:
      00010C 6D 61 78 5F 64 61 74  4318 	.ascii "max_data_packet_length: %u"
             61 5F 70 61 63 6B 65
             74 5F 6C 65 6E 67 74
             68 3A 20 25 75
      000126 0A                    4319 	.db 0x0A
      000127 00                    4320 	.db 0x00
                                   4321 	.area XINIT   (CODE)
                                   4322 	.area CABS    (ABS,CODE)
