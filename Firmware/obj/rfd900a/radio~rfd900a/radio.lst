                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Nov 22 2011) (Linux)
                              4 ; This file was generated Wed Sep  7 09:33:09 2022
                              5 ;--------------------------------------------------------
                              6 	.module radio
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Receiver_ISR
                             13 	.globl _delay_msec
                             14 	.globl _delay_expired
                             15 	.globl _delay_set
                             16 	.globl _timer2_tick
                             17 	.globl _panic
                             18 	.globl _calibration_get
                             19 	.globl _param_get
                             20 	.globl _memcpy
                             21 	.globl _NSS1
                             22 	.globl _IRQ
                             23 	.globl _PA_ENABLE
                             24 	.globl _PIN_ENABLE
                             25 	.globl _PIN_CONFIG
                             26 	.globl _LED_GREEN
                             27 	.globl _LED_RED
                             28 	.globl _SPI0EN
                             29 	.globl _TXBMT0
                             30 	.globl _NSS0MD0
                             31 	.globl _NSS0MD1
                             32 	.globl _RXOVRN0
                             33 	.globl _MODF0
                             34 	.globl _WCOL0
                             35 	.globl _SPIF0
                             36 	.globl _AD0CM0
                             37 	.globl _AD0CM1
                             38 	.globl _AD0CM2
                             39 	.globl _AD0WINT
                             40 	.globl _AD0BUSY
                             41 	.globl _AD0INT
                             42 	.globl _BURSTEN
                             43 	.globl _AD0EN
                             44 	.globl _CCF0
                             45 	.globl _CCF1
                             46 	.globl _CCF2
                             47 	.globl _CCF3
                             48 	.globl _CCF4
                             49 	.globl _CCF5
                             50 	.globl _CR
                             51 	.globl _CF
                             52 	.globl _P
                             53 	.globl _F1
                             54 	.globl _OV
                             55 	.globl _RS0
                             56 	.globl _RS1
                             57 	.globl _F0
                             58 	.globl _AC
                             59 	.globl _CY
                             60 	.globl _T2XCLK
                             61 	.globl _T2RCLK
                             62 	.globl _TR2
                             63 	.globl _T2SPLIT
                             64 	.globl _TF2CEN
                             65 	.globl _TF2LEN
                             66 	.globl _TF2L
                             67 	.globl _TF2H
                             68 	.globl _SI
                             69 	.globl _ACK
                             70 	.globl _ARBLOST
                             71 	.globl _ACKRQ
                             72 	.globl _STO
                             73 	.globl _STA
                             74 	.globl _TXMODE
                             75 	.globl _MASTER
                             76 	.globl _PX0
                             77 	.globl _PT0
                             78 	.globl _PX1
                             79 	.globl _PT1
                             80 	.globl _PS0
                             81 	.globl _PT2
                             82 	.globl _PSPI0
                             83 	.globl _SPI1EN
                             84 	.globl _TXBMT1
                             85 	.globl _NSS1MD0
                             86 	.globl _NSS1MD1
                             87 	.globl _RXOVRN1
                             88 	.globl _MODF1
                             89 	.globl _WCOL1
                             90 	.globl _SPIF1
                             91 	.globl _EX0
                             92 	.globl _ET0
                             93 	.globl _EX1
                             94 	.globl _ET1
                             95 	.globl _ES0
                             96 	.globl _ET2
                             97 	.globl _ESPI0
                             98 	.globl _EA
                             99 	.globl _RI0
                            100 	.globl _TI0
                            101 	.globl _RB80
                            102 	.globl _TB80
                            103 	.globl _REN0
                            104 	.globl _MCE0
                            105 	.globl _S0MODE
                            106 	.globl _CRC0VAL
                            107 	.globl _CRC0INIT
                            108 	.globl _CRC0SEL
                            109 	.globl _IT0
                            110 	.globl _IE0
                            111 	.globl _IT1
                            112 	.globl _IE1
                            113 	.globl _TR0
                            114 	.globl _TF0
                            115 	.globl _TR1
                            116 	.globl _TF1
                            117 	.globl _PCA0CP4
                            118 	.globl _PCA0CP0
                            119 	.globl _PCA0
                            120 	.globl _PCA0CP3
                            121 	.globl _PCA0CP2
                            122 	.globl _PCA0CP1
                            123 	.globl _PCA0CP5
                            124 	.globl _TMR2
                            125 	.globl _TMR2RL
                            126 	.globl _ADC0LT
                            127 	.globl _ADC0GT
                            128 	.globl _ADC0
                            129 	.globl _TMR3
                            130 	.globl _TMR3RL
                            131 	.globl _TOFF
                            132 	.globl _DP
                            133 	.globl _VDM0CN
                            134 	.globl _PCA0CPH4
                            135 	.globl _PCA0CPL4
                            136 	.globl _PCA0CPH0
                            137 	.globl _PCA0CPL0
                            138 	.globl _PCA0H
                            139 	.globl _PCA0L
                            140 	.globl _SPI0CN
                            141 	.globl _EIP2
                            142 	.globl _EIP1
                            143 	.globl _SMB0ADM
                            144 	.globl _SMB0ADR
                            145 	.globl _P2MDIN
                            146 	.globl _P1MDIN
                            147 	.globl _P0MDIN
                            148 	.globl _B
                            149 	.globl _RSTSRC
                            150 	.globl _PCA0CPH3
                            151 	.globl _PCA0CPL3
                            152 	.globl _PCA0CPH2
                            153 	.globl _PCA0CPL2
                            154 	.globl _PCA0CPH1
                            155 	.globl _PCA0CPL1
                            156 	.globl _ADC0CN
                            157 	.globl _EIE2
                            158 	.globl _EIE1
                            159 	.globl _FLWR
                            160 	.globl _IT01CF
                            161 	.globl _XBR2
                            162 	.globl _XBR1
                            163 	.globl _XBR0
                            164 	.globl _ACC
                            165 	.globl _PCA0PWM
                            166 	.globl _PCA0CPM4
                            167 	.globl _PCA0CPM3
                            168 	.globl _PCA0CPM2
                            169 	.globl _PCA0CPM1
                            170 	.globl _PCA0CPM0
                            171 	.globl _PCA0MD
                            172 	.globl _PCA0CN
                            173 	.globl _P0MAT
                            174 	.globl _P2SKIP
                            175 	.globl _P1SKIP
                            176 	.globl _P0SKIP
                            177 	.globl _PCA0CPH5
                            178 	.globl _PCA0CPL5
                            179 	.globl _REF0CN
                            180 	.globl _PSW
                            181 	.globl _P1MAT
                            182 	.globl _PCA0CPM5
                            183 	.globl _TMR2H
                            184 	.globl _TMR2L
                            185 	.globl _TMR2RLH
                            186 	.globl _TMR2RLL
                            187 	.globl _REG0CN
                            188 	.globl _TMR2CN
                            189 	.globl _P0MASK
                            190 	.globl _ADC0LTH
                            191 	.globl _ADC0LTL
                            192 	.globl _ADC0GTH
                            193 	.globl _ADC0GTL
                            194 	.globl _SMB0DAT
                            195 	.globl _SMB0CF
                            196 	.globl _SMB0CN
                            197 	.globl _P1MASK
                            198 	.globl _ADC0H
                            199 	.globl _ADC0L
                            200 	.globl _ADC0TK
                            201 	.globl _ADC0CF
                            202 	.globl _ADC0MX
                            203 	.globl _ADC0PWR
                            204 	.globl _ADC0AC
                            205 	.globl _IREF0CN
                            206 	.globl _IP
                            207 	.globl _FLKEY
                            208 	.globl _FLSCL
                            209 	.globl _PMU0CF
                            210 	.globl _OSCICL
                            211 	.globl _OSCICN
                            212 	.globl _OSCXCN
                            213 	.globl _SPI1CN
                            214 	.globl _ONESHOT
                            215 	.globl _EMI0TC
                            216 	.globl _RTC0KEY
                            217 	.globl _RTC0DAT
                            218 	.globl _RTC0ADR
                            219 	.globl _EMI0CF
                            220 	.globl _EMI0CN
                            221 	.globl _CLKSEL
                            222 	.globl _IE
                            223 	.globl _SFRPAGE
                            224 	.globl _P2DRV
                            225 	.globl _P2MDOUT
                            226 	.globl _P1DRV
                            227 	.globl _P1MDOUT
                            228 	.globl _P0DRV
                            229 	.globl _P0MDOUT
                            230 	.globl _SPI0DAT
                            231 	.globl _SPI0CKR
                            232 	.globl _SPI0CFG
                            233 	.globl _P2
                            234 	.globl _CPT0MX
                            235 	.globl _CPT1MX
                            236 	.globl _CPT0MD
                            237 	.globl _CPT1MD
                            238 	.globl _CPT0CN
                            239 	.globl _CPT1CN
                            240 	.globl _SBUF0
                            241 	.globl _SCON0
                            242 	.globl _CRC0CNT
                            243 	.globl _DC0CN
                            244 	.globl _CRC0AUTO
                            245 	.globl _DC0CF
                            246 	.globl _TMR3H
                            247 	.globl _CRC0FLIP
                            248 	.globl _TMR3L
                            249 	.globl _CRC0IN
                            250 	.globl _TMR3RLH
                            251 	.globl _CRC0CN
                            252 	.globl _TMR3RLL
                            253 	.globl _CRC0DAT
                            254 	.globl _TMR3CN
                            255 	.globl _P1
                            256 	.globl _PSCTL
                            257 	.globl _CKCON
                            258 	.globl _TH1
                            259 	.globl _TH0
                            260 	.globl _TL1
                            261 	.globl _TL0
                            262 	.globl _TMOD
                            263 	.globl _TCON
                            264 	.globl _PCON
                            265 	.globl _TOFFH
                            266 	.globl _SPI1DAT
                            267 	.globl _TOFFL
                            268 	.globl _SPI1CKR
                            269 	.globl _SPI1CFG
                            270 	.globl _DPH
                            271 	.globl _DPL
                            272 	.globl _SP
                            273 	.globl _P0
                            274 	.globl _radio_buffer
                            275 	.globl _radio_transmit_PARM_3
                            276 	.globl _radio_transmit_PARM_2
                            277 	.globl _radio_receive_packet_PARM_2
                            278 	.globl _settings
                            279 	.globl _netid
                            280 	.globl _last_rssi
                            281 	.globl _partial_packet_length
                            282 	.globl _receive_packet_length
                            283 	.globl _radio_receive_packet
                            284 	.globl _radio_receive_in_progress
                            285 	.globl _radio_preamble_detected
                            286 	.globl _radio_last_rssi
                            287 	.globl _radio_current_rssi
                            288 	.globl _radio_air_rate
                            289 	.globl _radio_transmit
                            290 	.globl _radio_receiver_on
                            291 	.globl _radio_initialise
                            292 	.globl _radio_set_frequency
                            293 	.globl _radio_set_channel_spacing
                            294 	.globl _radio_set_channel
                            295 	.globl _radio_get_channel
                            296 	.globl _radio_configure
                            297 	.globl _radio_set_transmit_power
                            298 	.globl _radio_get_transmit_power
                            299 	.globl _radio_set_network_id
                            300 	.globl _radio_temperature
                            301 	.globl _radio_set_diversity
                            302 ;--------------------------------------------------------
                            303 ; special function registers
                            304 ;--------------------------------------------------------
                            305 	.area RSEG    (ABS,DATA)
   0000                     306 	.org 0x0000
                    0080    307 _P0	=	0x0080
                    0081    308 _SP	=	0x0081
                    0082    309 _DPL	=	0x0082
                    0083    310 _DPH	=	0x0083
                    0084    311 _SPI1CFG	=	0x0084
                    0085    312 _SPI1CKR	=	0x0085
                    0085    313 _TOFFL	=	0x0085
                    0086    314 _SPI1DAT	=	0x0086
                    0086    315 _TOFFH	=	0x0086
                    0087    316 _PCON	=	0x0087
                    0088    317 _TCON	=	0x0088
                    0089    318 _TMOD	=	0x0089
                    008A    319 _TL0	=	0x008a
                    008B    320 _TL1	=	0x008b
                    008C    321 _TH0	=	0x008c
                    008D    322 _TH1	=	0x008d
                    008E    323 _CKCON	=	0x008e
                    008F    324 _PSCTL	=	0x008f
                    0090    325 _P1	=	0x0090
                    0091    326 _TMR3CN	=	0x0091
                    0091    327 _CRC0DAT	=	0x0091
                    0092    328 _TMR3RLL	=	0x0092
                    0092    329 _CRC0CN	=	0x0092
                    0093    330 _TMR3RLH	=	0x0093
                    0093    331 _CRC0IN	=	0x0093
                    0094    332 _TMR3L	=	0x0094
                    0095    333 _CRC0FLIP	=	0x0095
                    0095    334 _TMR3H	=	0x0095
                    0096    335 _DC0CF	=	0x0096
                    0096    336 _CRC0AUTO	=	0x0096
                    0097    337 _DC0CN	=	0x0097
                    0097    338 _CRC0CNT	=	0x0097
                    0098    339 _SCON0	=	0x0098
                    0099    340 _SBUF0	=	0x0099
                    009A    341 _CPT1CN	=	0x009a
                    009B    342 _CPT0CN	=	0x009b
                    009C    343 _CPT1MD	=	0x009c
                    009D    344 _CPT0MD	=	0x009d
                    009E    345 _CPT1MX	=	0x009e
                    009F    346 _CPT0MX	=	0x009f
                    00A0    347 _P2	=	0x00a0
                    00A1    348 _SPI0CFG	=	0x00a1
                    00A2    349 _SPI0CKR	=	0x00a2
                    00A3    350 _SPI0DAT	=	0x00a3
                    00A4    351 _P0MDOUT	=	0x00a4
                    00A4    352 _P0DRV	=	0x00a4
                    00A5    353 _P1MDOUT	=	0x00a5
                    00A5    354 _P1DRV	=	0x00a5
                    00A6    355 _P2MDOUT	=	0x00a6
                    00A6    356 _P2DRV	=	0x00a6
                    00A7    357 _SFRPAGE	=	0x00a7
                    00A8    358 _IE	=	0x00a8
                    00A9    359 _CLKSEL	=	0x00a9
                    00AA    360 _EMI0CN	=	0x00aa
                    00AB    361 _EMI0CF	=	0x00ab
                    00AC    362 _RTC0ADR	=	0x00ac
                    00AD    363 _RTC0DAT	=	0x00ad
                    00AE    364 _RTC0KEY	=	0x00ae
                    00AF    365 _EMI0TC	=	0x00af
                    00AF    366 _ONESHOT	=	0x00af
                    00B0    367 _SPI1CN	=	0x00b0
                    00B1    368 _OSCXCN	=	0x00b1
                    00B2    369 _OSCICN	=	0x00b2
                    00B3    370 _OSCICL	=	0x00b3
                    00B5    371 _PMU0CF	=	0x00b5
                    00B6    372 _FLSCL	=	0x00b6
                    00B7    373 _FLKEY	=	0x00b7
                    00B8    374 _IP	=	0x00b8
                    00B9    375 _IREF0CN	=	0x00b9
                    00BA    376 _ADC0AC	=	0x00ba
                    00BA    377 _ADC0PWR	=	0x00ba
                    00BB    378 _ADC0MX	=	0x00bb
                    00BC    379 _ADC0CF	=	0x00bc
                    00BD    380 _ADC0TK	=	0x00bd
                    00BD    381 _ADC0L	=	0x00bd
                    00BE    382 _ADC0H	=	0x00be
                    00BF    383 _P1MASK	=	0x00bf
                    00C0    384 _SMB0CN	=	0x00c0
                    00C1    385 _SMB0CF	=	0x00c1
                    00C2    386 _SMB0DAT	=	0x00c2
                    00C3    387 _ADC0GTL	=	0x00c3
                    00C4    388 _ADC0GTH	=	0x00c4
                    00C5    389 _ADC0LTL	=	0x00c5
                    00C6    390 _ADC0LTH	=	0x00c6
                    00C7    391 _P0MASK	=	0x00c7
                    00C8    392 _TMR2CN	=	0x00c8
                    00C9    393 _REG0CN	=	0x00c9
                    00CA    394 _TMR2RLL	=	0x00ca
                    00CB    395 _TMR2RLH	=	0x00cb
                    00CC    396 _TMR2L	=	0x00cc
                    00CD    397 _TMR2H	=	0x00cd
                    00CE    398 _PCA0CPM5	=	0x00ce
                    00CF    399 _P1MAT	=	0x00cf
                    00D0    400 _PSW	=	0x00d0
                    00D1    401 _REF0CN	=	0x00d1
                    00D2    402 _PCA0CPL5	=	0x00d2
                    00D3    403 _PCA0CPH5	=	0x00d3
                    00D4    404 _P0SKIP	=	0x00d4
                    00D5    405 _P1SKIP	=	0x00d5
                    00D6    406 _P2SKIP	=	0x00d6
                    00D7    407 _P0MAT	=	0x00d7
                    00D8    408 _PCA0CN	=	0x00d8
                    00D9    409 _PCA0MD	=	0x00d9
                    00DA    410 _PCA0CPM0	=	0x00da
                    00DB    411 _PCA0CPM1	=	0x00db
                    00DC    412 _PCA0CPM2	=	0x00dc
                    00DD    413 _PCA0CPM3	=	0x00dd
                    00DE    414 _PCA0CPM4	=	0x00de
                    00DF    415 _PCA0PWM	=	0x00df
                    00E0    416 _ACC	=	0x00e0
                    00E1    417 _XBR0	=	0x00e1
                    00E2    418 _XBR1	=	0x00e2
                    00E3    419 _XBR2	=	0x00e3
                    00E4    420 _IT01CF	=	0x00e4
                    00E5    421 _FLWR	=	0x00e5
                    00E6    422 _EIE1	=	0x00e6
                    00E7    423 _EIE2	=	0x00e7
                    00E8    424 _ADC0CN	=	0x00e8
                    00E9    425 _PCA0CPL1	=	0x00e9
                    00EA    426 _PCA0CPH1	=	0x00ea
                    00EB    427 _PCA0CPL2	=	0x00eb
                    00EC    428 _PCA0CPH2	=	0x00ec
                    00ED    429 _PCA0CPL3	=	0x00ed
                    00EE    430 _PCA0CPH3	=	0x00ee
                    00EF    431 _RSTSRC	=	0x00ef
                    00F0    432 _B	=	0x00f0
                    00F1    433 _P0MDIN	=	0x00f1
                    00F2    434 _P1MDIN	=	0x00f2
                    00F3    435 _P2MDIN	=	0x00f3
                    00F4    436 _SMB0ADR	=	0x00f4
                    00F5    437 _SMB0ADM	=	0x00f5
                    00F6    438 _EIP1	=	0x00f6
                    00F7    439 _EIP2	=	0x00f7
                    00F8    440 _SPI0CN	=	0x00f8
                    00F9    441 _PCA0L	=	0x00f9
                    00FA    442 _PCA0H	=	0x00fa
                    00FB    443 _PCA0CPL0	=	0x00fb
                    00FC    444 _PCA0CPH0	=	0x00fc
                    00FD    445 _PCA0CPL4	=	0x00fd
                    00FE    446 _PCA0CPH4	=	0x00fe
                    00FF    447 _VDM0CN	=	0x00ff
                    8382    448 _DP	=	0x8382
                    8685    449 _TOFF	=	0x8685
                    9392    450 _TMR3RL	=	0x9392
                    9594    451 _TMR3	=	0x9594
                    BEBD    452 _ADC0	=	0xbebd
                    C4C3    453 _ADC0GT	=	0xc4c3
                    C6C5    454 _ADC0LT	=	0xc6c5
                    CBCA    455 _TMR2RL	=	0xcbca
                    CDCC    456 _TMR2	=	0xcdcc
                    D3D2    457 _PCA0CP5	=	0xd3d2
                    EAE9    458 _PCA0CP1	=	0xeae9
                    ECEB    459 _PCA0CP2	=	0xeceb
                    EEED    460 _PCA0CP3	=	0xeeed
                    FAF9    461 _PCA0	=	0xfaf9
                    FCFB    462 _PCA0CP0	=	0xfcfb
                    FEFD    463 _PCA0CP4	=	0xfefd
                            464 ;--------------------------------------------------------
                            465 ; special function bits
                            466 ;--------------------------------------------------------
                            467 	.area RSEG    (ABS,DATA)
   0000                     468 	.org 0x0000
                    008F    469 _TF1	=	0x008f
                    008E    470 _TR1	=	0x008e
                    008D    471 _TF0	=	0x008d
                    008C    472 _TR0	=	0x008c
                    008B    473 _IE1	=	0x008b
                    008A    474 _IT1	=	0x008a
                    0089    475 _IE0	=	0x0089
                    0088    476 _IT0	=	0x0088
                    0096    477 _CRC0SEL	=	0x0096
                    0095    478 _CRC0INIT	=	0x0095
                    0094    479 _CRC0VAL	=	0x0094
                    009F    480 _S0MODE	=	0x009f
                    009D    481 _MCE0	=	0x009d
                    009C    482 _REN0	=	0x009c
                    009B    483 _TB80	=	0x009b
                    009A    484 _RB80	=	0x009a
                    0099    485 _TI0	=	0x0099
                    0098    486 _RI0	=	0x0098
                    00AF    487 _EA	=	0x00af
                    00AE    488 _ESPI0	=	0x00ae
                    00AD    489 _ET2	=	0x00ad
                    00AC    490 _ES0	=	0x00ac
                    00AB    491 _ET1	=	0x00ab
                    00AA    492 _EX1	=	0x00aa
                    00A9    493 _ET0	=	0x00a9
                    00A8    494 _EX0	=	0x00a8
                    00B7    495 _SPIF1	=	0x00b7
                    00B6    496 _WCOL1	=	0x00b6
                    00B5    497 _MODF1	=	0x00b5
                    00B4    498 _RXOVRN1	=	0x00b4
                    00B3    499 _NSS1MD1	=	0x00b3
                    00B2    500 _NSS1MD0	=	0x00b2
                    00B1    501 _TXBMT1	=	0x00b1
                    00B0    502 _SPI1EN	=	0x00b0
                    00BE    503 _PSPI0	=	0x00be
                    00BD    504 _PT2	=	0x00bd
                    00BC    505 _PS0	=	0x00bc
                    00BB    506 _PT1	=	0x00bb
                    00BA    507 _PX1	=	0x00ba
                    00B9    508 _PT0	=	0x00b9
                    00B8    509 _PX0	=	0x00b8
                    00C7    510 _MASTER	=	0x00c7
                    00C6    511 _TXMODE	=	0x00c6
                    00C5    512 _STA	=	0x00c5
                    00C4    513 _STO	=	0x00c4
                    00C3    514 _ACKRQ	=	0x00c3
                    00C2    515 _ARBLOST	=	0x00c2
                    00C1    516 _ACK	=	0x00c1
                    00C0    517 _SI	=	0x00c0
                    00CF    518 _TF2H	=	0x00cf
                    00CE    519 _TF2L	=	0x00ce
                    00CD    520 _TF2LEN	=	0x00cd
                    00CC    521 _TF2CEN	=	0x00cc
                    00CB    522 _T2SPLIT	=	0x00cb
                    00CA    523 _TR2	=	0x00ca
                    00C9    524 _T2RCLK	=	0x00c9
                    00C8    525 _T2XCLK	=	0x00c8
                    00D7    526 _CY	=	0x00d7
                    00D6    527 _AC	=	0x00d6
                    00D5    528 _F0	=	0x00d5
                    00D4    529 _RS1	=	0x00d4
                    00D3    530 _RS0	=	0x00d3
                    00D2    531 _OV	=	0x00d2
                    00D1    532 _F1	=	0x00d1
                    00D0    533 _P	=	0x00d0
                    00DF    534 _CF	=	0x00df
                    00DE    535 _CR	=	0x00de
                    00DD    536 _CCF5	=	0x00dd
                    00DC    537 _CCF4	=	0x00dc
                    00DB    538 _CCF3	=	0x00db
                    00DA    539 _CCF2	=	0x00da
                    00D9    540 _CCF1	=	0x00d9
                    00D8    541 _CCF0	=	0x00d8
                    00EF    542 _AD0EN	=	0x00ef
                    00EE    543 _BURSTEN	=	0x00ee
                    00ED    544 _AD0INT	=	0x00ed
                    00EC    545 _AD0BUSY	=	0x00ec
                    00EB    546 _AD0WINT	=	0x00eb
                    00EA    547 _AD0CM2	=	0x00ea
                    00E9    548 _AD0CM1	=	0x00e9
                    00E8    549 _AD0CM0	=	0x00e8
                    00FF    550 _SPIF0	=	0x00ff
                    00FE    551 _WCOL0	=	0x00fe
                    00FD    552 _MODF0	=	0x00fd
                    00FC    553 _RXOVRN0	=	0x00fc
                    00FB    554 _NSS0MD1	=	0x00fb
                    00FA    555 _NSS0MD0	=	0x00fa
                    00F9    556 _TXBMT0	=	0x00f9
                    00F8    557 _SPI0EN	=	0x00f8
                    0096    558 _LED_RED	=	0x0096
                    0095    559 _LED_GREEN	=	0x0095
                    0082    560 _PIN_CONFIG	=	0x0082
                    0083    561 _PIN_ENABLE	=	0x0083
                    00A5    562 _PA_ENABLE	=	0x00a5
                    0087    563 _IRQ	=	0x0087
                    0094    564 _NSS1	=	0x0094
                            565 ;--------------------------------------------------------
                            566 ; overlayable register banks
                            567 ;--------------------------------------------------------
                            568 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     569 	.ds 8
                            570 ;--------------------------------------------------------
                            571 ; overlayable bit register bank
                            572 ;--------------------------------------------------------
                            573 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     574 bits:
   0000                     575 	.ds 1
                    8000    576 	b0 = bits[0]
                    8100    577 	b1 = bits[1]
                    8200    578 	b2 = bits[2]
                    8300    579 	b3 = bits[3]
                    8400    580 	b4 = bits[4]
                    8500    581 	b5 = bits[5]
                    8600    582 	b6 = bits[6]
                    8700    583 	b7 = bits[7]
                            584 ;--------------------------------------------------------
                            585 ; internal ram data
                            586 ;--------------------------------------------------------
                            587 	.area DSEG    (DATA)
                            588 ;--------------------------------------------------------
                            589 ; overlayable items in internal ram 
                            590 ;--------------------------------------------------------
                            591 	.area	OSEG    (OVR,DATA)
                            592 ;--------------------------------------------------------
                            593 ; indirectly addressable internal ram data
                            594 ;--------------------------------------------------------
                            595 	.area ISEG    (DATA)
                            596 ;--------------------------------------------------------
                            597 ; absolute internal ram data
                            598 ;--------------------------------------------------------
                            599 	.area IABS    (ABS,DATA)
                            600 	.area IABS    (ABS,DATA)
                            601 ;--------------------------------------------------------
                            602 ; bit data
                            603 ;--------------------------------------------------------
                            604 	.area BSEG    (BIT)
   0000                     605 _packet_received:
   0000                     606 	.ds 1
   0001                     607 _preamble_detected:
   0001                     608 	.ds 1
   0002                     609 _radio_preamble_detected_EX0_saved_1_1:
   0002                     610 	.ds 1
   0003                     611 _radio_transmit_simple_transmit_started_1_1:
   0003                     612 	.ds 1
   0004                     613 _radio_transmit_ret_1_1:
   0004                     614 	.ds 1
   0005                     615 _radio_transmit_EX0_saved_1_1:
   0005                     616 	.ds 1
   0006                     617 _radio_initialise_sloc0_1_0:
   0006                     618 	.ds 1
                            619 ;--------------------------------------------------------
                            620 ; paged external ram data
                            621 ;--------------------------------------------------------
                            622 	.area PSEG    (PAG,XDATA)
   0000                     623 _receive_packet_length::
   0000                     624 	.ds 1
   0001                     625 _partial_packet_length::
   0001                     626 	.ds 1
   0002                     627 _last_rssi::
   0002                     628 	.ds 1
   0003                     629 _netid::
   0003                     630 	.ds 2
   0005                     631 _settings::
   0005                     632 	.ds 12
   0011                     633 _radio_receive_packet_PARM_2:
   0011                     634 	.ds 2
   0013                     635 _radio_write_transmit_fifo_PARM_2:
   0013                     636 	.ds 2
   0015                     637 _radio_transmit_simple_PARM_2:
   0015                     638 	.ds 2
   0017                     639 _radio_transmit_simple_PARM_3:
   0017                     640 	.ds 2
   0019                     641 _radio_transmit_PARM_2:
   0019                     642 	.ds 2
   001B                     643 _radio_transmit_PARM_3:
   001B                     644 	.ds 2
   001D                     645 _scale_uint32_PARM_2:
   001D                     646 	.ds 4
   0021                     647 _scale_uint32_value_1_1:
   0021                     648 	.ds 4
   0025                     649 _set_frequency_registers_frequency_1_1:
   0025                     650 	.ds 4
                            651 ;--------------------------------------------------------
                            652 ; external ram data
                            653 ;--------------------------------------------------------
                            654 	.area XSEG    (XDATA)
   0000                     655 _radio_buffer::
   0000                     656 	.ds 252
   00FC                     657 _radio_receive_packet_length_1_1:
   00FC                     658 	.ds 3
   00FF                     659 _radio_transmit_length_1_1:
   00FF                     660 	.ds 1
   0100                     661 _radio_set_channel_channel_1_1:
   0100                     662 	.ds 1
   0101                     663 _radio_set_transmit_power_power_1_1:
   0101                     664 	.ds 1
   0102                     665 _radio_set_network_id_id_1_1:
   0102                     666 	.ds 2
   0104                     667 _set_frequency_registers_band_1_1:
   0104                     668 	.ds 1
   0105                     669 _radio_set_diversity_state_1_1:
   0105                     670 	.ds 1
                            671 ;--------------------------------------------------------
                            672 ; absolute external ram data
                            673 ;--------------------------------------------------------
                            674 	.area XABS    (ABS,XDATA)
                            675 ;--------------------------------------------------------
                            676 ; external initialized ram data
                            677 ;--------------------------------------------------------
                            678 	.area XISEG   (XDATA)
                            679 	.area HOME    (CODE)
                            680 	.area GSINIT0 (CODE)
                            681 	.area GSINIT1 (CODE)
                            682 	.area GSINIT2 (CODE)
                            683 	.area GSINIT3 (CODE)
                            684 	.area GSINIT4 (CODE)
                            685 	.area GSINIT5 (CODE)
                            686 	.area GSINIT  (CODE)
                            687 	.area GSFINAL (CODE)
                            688 	.area CSEG    (CODE)
                            689 ;--------------------------------------------------------
                            690 ; global & static initialisations
                            691 ;--------------------------------------------------------
                            692 	.area HOME    (CODE)
                            693 	.area GSINIT  (CODE)
                            694 	.area GSFINAL (CODE)
                            695 	.area GSINIT  (CODE)
                            696 ;--------------------------------------------------------
                            697 ; Home
                            698 ;--------------------------------------------------------
                            699 	.area HOME    (CODE)
                            700 	.area HOME    (CODE)
                            701 ;--------------------------------------------------------
                            702 ; code
                            703 ;--------------------------------------------------------
                            704 	.area CSEG    (CODE)
                            705 ;------------------------------------------------------------
                            706 ;Allocation info for local variables in function 'radio_receive_packet'
                            707 ;------------------------------------------------------------
                            708 ;length                    Allocated with name '_radio_receive_packet_length_1_1'
                            709 ;------------------------------------------------------------
                            710 ;	radio/radio.c:78: radio_receive_packet(uint8_t *length, __xdata uint8_t * __pdata buf)
                            711 ;	-----------------------------------------
                            712 ;	 function radio_receive_packet
                            713 ;	-----------------------------------------
   0000                     714 _radio_receive_packet:
                    0007    715 	ar7 = 0x07
                    0006    716 	ar6 = 0x06
                    0005    717 	ar5 = 0x05
                    0004    718 	ar4 = 0x04
                    0003    719 	ar3 = 0x03
                    0002    720 	ar2 = 0x02
                    0001    721 	ar1 = 0x01
                    0000    722 	ar0 = 0x00
   0000 AF F0               723 	mov	r7,b
   0002 AE 83               724 	mov	r6,dph
   0004 E5 82               725 	mov	a,dpl
   0006 90s00rFC            726 	mov	dptr,#_radio_receive_packet_length_1_1
   0009 F0                  727 	movx	@dptr,a
   000A A3                  728 	inc	dptr
   000B EE                  729 	mov	a,r6
   000C F0                  730 	movx	@dptr,a
   000D A3                  731 	inc	dptr
   000E EF                  732 	mov	a,r7
   000F F0                  733 	movx	@dptr,a
                            734 ;	radio/radio.c:87: if (!packet_received) {
   0010 20*00 02            735 	jb	_packet_received,00102$
                            736 ;	radio/radio.c:88: return false;
   0013 C3                  737 	clr	c
   0014 22                  738 	ret
   0015                     739 00102$:
                            740 ;	radio/radio.c:91: if (receive_packet_length > MAX_PACKET_LENGTH) {
   0015 78r00               741 	mov	r0,#_receive_packet_length
   0017 C3                  742 	clr	c
   0018 E2                  743 	movx	a,@r0
   0019 F5 F0               744 	mov	b,a
   001B 74 FC               745 	mov	a,#0xFC
   001D 95 F0               746 	subb	a,b
   001F 50 05               747 	jnc	00104$
                            748 ;	radio/radio.c:92: radio_receiver_on();
   0021 12s03r79            749 	lcall	_radio_receiver_on
                            750 ;	radio/radio.c:93: goto failed;
   0024 80 45               751 	sjmp	00105$
   0026                     752 00104$:
                            753 ;	radio/radio.c:108: *length = receive_packet_length;
   0026 90s00rFC            754 	mov	dptr,#_radio_receive_packet_length_1_1
   0029 E0                  755 	movx	a,@dptr
   002A FD                  756 	mov	r5,a
   002B A3                  757 	inc	dptr
   002C E0                  758 	movx	a,@dptr
   002D FE                  759 	mov	r6,a
   002E A3                  760 	inc	dptr
   002F E0                  761 	movx	a,@dptr
   0030 FF                  762 	mov	r7,a
   0031 8D 82               763 	mov	dpl,r5
   0033 8E 83               764 	mov	dph,r6
   0035 8F F0               765 	mov	b,r7
   0037 78r00               766 	mov	r0,#_receive_packet_length
   0039 E2                  767 	movx	a,@r0
   003A 12s00r00            768 	lcall	__gptrput
                            769 ;	radio/radio.c:109: memcpy(buf, radio_buffer, receive_packet_length);
   003D 78r11               770 	mov	r0,#_radio_receive_packet_PARM_2
   003F E2                  771 	movx	a,@r0
   0040 FD                  772 	mov	r5,a
   0041 08                  773 	inc	r0
   0042 E2                  774 	movx	a,@r0
   0043 FE                  775 	mov	r6,a
   0044 7F 00               776 	mov	r7,#0x00
   0046 90s00r00            777 	mov	dptr,#_memcpy_PARM_2
   0049 74r00               778 	mov	a,#_radio_buffer
   004B F0                  779 	movx	@dptr,a
   004C A3                  780 	inc	dptr
   004D 74s00               781 	mov	a,#(_radio_buffer >> 8)
   004F F0                  782 	movx	@dptr,a
   0050 A3                  783 	inc	dptr
   0051 E4                  784 	clr	a
   0052 F0                  785 	movx	@dptr,a
   0053 78r00               786 	mov	r0,#_receive_packet_length
   0055 90s00r00            787 	mov	dptr,#_memcpy_PARM_3
   0058 E2                  788 	movx	a,@r0
   0059 F0                  789 	movx	@dptr,a
   005A A3                  790 	inc	dptr
   005B E4                  791 	clr	a
   005C F0                  792 	movx	@dptr,a
   005D 8D 82               793 	mov	dpl,r5
   005F 8E 83               794 	mov	dph,r6
   0061 8F F0               795 	mov	b,r7
   0063 12s00r00            796 	lcall	_memcpy
                            797 ;	radio/radio.c:112: radio_receiver_on();
   0066 12s03r79            798 	lcall	_radio_receiver_on
                            799 ;	radio/radio.c:113: return true;
   0069 D3                  800 	setb	c
                            801 ;	radio/radio.c:187: failed:
   006A 22                  802 	ret
   006B                     803 00105$:
                            804 ;	radio/radio.c:188: if (errors.rx_errors != 0xFFFF) {
   006B 78r00               805 	mov	r0,#_errors
   006D E2                  806 	movx	a,@r0
   006E FE                  807 	mov	r6,a
   006F 08                  808 	inc	r0
   0070 E2                  809 	movx	a,@r0
   0071 FF                  810 	mov	r7,a
   0072 BE FF 05            811 	cjne	r6,#0xFF,00115$
   0075 BF FF 02            812 	cjne	r7,#0xFF,00115$
   0078 80 0C               813 	sjmp	00107$
   007A                     814 00115$:
                            815 ;	radio/radio.c:189: errors.rx_errors++;
   007A 0E                  816 	inc	r6
   007B BE 00 01            817 	cjne	r6,#0x00,00116$
   007E 0F                  818 	inc	r7
   007F                     819 00116$:
   007F 78r00               820 	mov	r0,#_errors
   0081 EE                  821 	mov	a,r6
   0082 F2                  822 	movx	@r0,a
   0083 08                  823 	inc	r0
   0084 EF                  824 	mov	a,r7
   0085 F2                  825 	movx	@r0,a
   0086                     826 00107$:
                            827 ;	radio/radio.c:191: return false;
   0086 C3                  828 	clr	c
   0087 22                  829 	ret
                            830 ;------------------------------------------------------------
                            831 ;Allocation info for local variables in function 'radio_write_transmit_fifo'
                            832 ;------------------------------------------------------------
                            833 ;n                         Allocated to registers r7 
                            834 ;------------------------------------------------------------
                            835 ;	radio/radio.c:198: radio_write_transmit_fifo(register uint8_t n, __xdata uint8_t * __pdata buffer)
                            836 ;	-----------------------------------------
                            837 ;	 function radio_write_transmit_fifo
                            838 ;	-----------------------------------------
   0088                     839 _radio_write_transmit_fifo:
   0088 AF 82               840 	mov	r7,dpl
                            841 ;	radio/radio.c:200: RADIO_PAGE();
   008A 75 A7 00            842 	mov	_SFRPAGE,#0x00
                            843 ;	radio/radio.c:202: NSS1 = 0;
   008D C2 94               844 	clr	_NSS1
                            845 ;	radio/radio.c:203: SPIF1 = 0;
   008F C2 B7               846 	clr	_SPIF1
                            847 ;	radio/radio.c:204: SPI1DAT = (0x80 | EZRADIOPRO_FIFO_ACCESS);
   0091 75 86 FF            848 	mov	_SPI1DAT,#0xFF
                            849 ;	radio/radio.c:206: while (n--) {
   0094 78r13               850 	mov	r0,#_radio_write_transmit_fifo_PARM_2
   0096 E2                  851 	movx	a,@r0
   0097 FD                  852 	mov	r5,a
   0098 08                  853 	inc	r0
   0099 E2                  854 	movx	a,@r0
   009A FE                  855 	mov	r6,a
   009B                     856 00104$:
   009B 8F 04               857 	mov	ar4,r7
   009D 1F                  858 	dec	r7
   009E EC                  859 	mov	a,r4
   009F 60 11               860 	jz	00107$
                            861 ;	radio/radio.c:207: while (!TXBMT1) /* noop */;
   00A1                     862 00101$:
   00A1 30 B1 FD            863 	jnb	_TXBMT1,00101$
                            864 ;	radio/radio.c:208: SPI1DAT = *buffer++;
   00A4 8D 82               865 	mov	dpl,r5
   00A6 8E 83               866 	mov	dph,r6
   00A8 E0                  867 	movx	a,@dptr
   00A9 F5 86               868 	mov	_SPI1DAT,a
   00AB A3                  869 	inc	dptr
   00AC AD 82               870 	mov	r5,dpl
   00AE AE 83               871 	mov	r6,dph
                            872 ;	radio/radio.c:211: while (!TXBMT1) /* noop */;
   00B0 80 E9               873 	sjmp	00104$
   00B2                     874 00107$:
   00B2 30 B1 FD            875 	jnb	_TXBMT1,00107$
                            876 ;	radio/radio.c:212: while ((SPI1CFG & 0x80) == 0x80);
   00B5                     877 00110$:
   00B5 74 80               878 	mov	a,#0x80
   00B7 55 84               879 	anl	a,_SPI1CFG
   00B9 FF                  880 	mov	r7,a
   00BA BF 80 02            881 	cjne	r7,#0x80,00125$
   00BD 80 F6               882 	sjmp	00110$
   00BF                     883 00125$:
                            884 ;	radio/radio.c:214: SPIF1 = 0;
   00BF C2 B7               885 	clr	_SPIF1
                            886 ;	radio/radio.c:215: NSS1 = 1;
   00C1 D2 94               887 	setb	_NSS1
                            888 ;	radio/radio.c:217: SFRPAGE = LEGACY_PAGE;
   00C3 75 A7 00            889 	mov	_SFRPAGE,#0x00
   00C6 22                  890 	ret
                            891 ;------------------------------------------------------------
                            892 ;Allocation info for local variables in function 'radio_receive_in_progress'
                            893 ;------------------------------------------------------------
                            894 ;	radio/radio.c:223: radio_receive_in_progress(void)
                            895 ;	-----------------------------------------
                            896 ;	 function radio_receive_in_progress
                            897 ;	-----------------------------------------
   00C7                     898 _radio_receive_in_progress:
                            899 ;	radio/radio.c:225: if (packet_received ||
   00C7 20*00 05            900 	jb	_packet_received,00101$
                            901 ;	radio/radio.c:226: partial_packet_length != 0) {
   00CA 78r01               902 	mov	r0,#_partial_packet_length
   00CC E2                  903 	movx	a,@r0
   00CD 60 02               904 	jz	00102$
   00CF                     905 00101$:
                            906 ;	radio/radio.c:227: return true;
   00CF D3                  907 	setb	c
   00D0 22                  908 	ret
   00D1                     909 00102$:
                            910 ;	radio/radio.c:231: if (register_read(EZRADIOPRO_EZMAC_STATUS) & EZRADIOPRO_PKRX) {
   00D1 75 82 31            911 	mov	dpl,#0x31
   00D4 12s08r55            912 	lcall	_register_read
   00D7 E5 82               913 	mov	a,dpl
   00D9 30 E4 02            914 	jnb	acc.4,00105$
                            915 ;	radio/radio.c:232: return true;
   00DC D3                  916 	setb	c
   00DD 22                  917 	ret
   00DE                     918 00105$:
                            919 ;	radio/radio.c:234: return false;
   00DE C3                  920 	clr	c
   00DF 22                  921 	ret
                            922 ;------------------------------------------------------------
                            923 ;Allocation info for local variables in function 'radio_preamble_detected'
                            924 ;------------------------------------------------------------
                            925 ;	radio/radio.c:241: radio_preamble_detected(void)
                            926 ;	-----------------------------------------
                            927 ;	 function radio_preamble_detected
                            928 ;	-----------------------------------------
   00E0                     929 _radio_preamble_detected:
                            930 ;	radio/radio.c:243: EX0_SAVE_DISABLE;
   00E0 A2 A8               931 	mov	c,_EX0
   00E2 92*02               932 	mov	_radio_preamble_detected_EX0_saved_1_1,c
   00E4 C2 A8               933 	clr	_EX0
                            934 ;	radio/radio.c:244: if (preamble_detected) {
                            935 ;	radio/radio.c:245: preamble_detected = 0;
   00E6 10*01 02            936 	jbc	_preamble_detected,00106$
   00E9 80 06               937 	sjmp	00102$
   00EB                     938 00106$:
                            939 ;	radio/radio.c:246: EX0_RESTORE;
   00EB A2*02               940 	mov	c,_radio_preamble_detected_EX0_saved_1_1
   00ED 92 A8               941 	mov	_EX0,c
                            942 ;	radio/radio.c:247: return true;
   00EF D3                  943 	setb	c
   00F0 22                  944 	ret
   00F1                     945 00102$:
                            946 ;	radio/radio.c:249: EX0_RESTORE;
   00F1 A2*02               947 	mov	c,_radio_preamble_detected_EX0_saved_1_1
   00F3 92 A8               948 	mov	_EX0,c
                            949 ;	radio/radio.c:250: return false;
   00F5 C3                  950 	clr	c
   00F6 22                  951 	ret
                            952 ;------------------------------------------------------------
                            953 ;Allocation info for local variables in function 'radio_last_rssi'
                            954 ;------------------------------------------------------------
                            955 ;	radio/radio.c:258: radio_last_rssi(void)
                            956 ;	-----------------------------------------
                            957 ;	 function radio_last_rssi
                            958 ;	-----------------------------------------
   00F7                     959 _radio_last_rssi:
                            960 ;	radio/radio.c:260: return last_rssi;
   00F7 78r02               961 	mov	r0,#_last_rssi
   00F9 E2                  962 	movx	a,@r0
   00FA F5 82               963 	mov	dpl,a
   00FC 22                  964 	ret
                            965 ;------------------------------------------------------------
                            966 ;Allocation info for local variables in function 'radio_current_rssi'
                            967 ;------------------------------------------------------------
                            968 ;	radio/radio.c:266: radio_current_rssi(void)
                            969 ;	-----------------------------------------
                            970 ;	 function radio_current_rssi
                            971 ;	-----------------------------------------
   00FD                     972 _radio_current_rssi:
                            973 ;	radio/radio.c:268: return register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   00FD 75 82 26            974 	mov	dpl,#0x26
   0100 02s08r55            975 	ljmp	_register_read
                            976 ;------------------------------------------------------------
                            977 ;Allocation info for local variables in function 'radio_air_rate'
                            978 ;------------------------------------------------------------
                            979 ;	radio/radio.c:274: radio_air_rate(void)
                            980 ;	-----------------------------------------
                            981 ;	 function radio_air_rate
                            982 ;	-----------------------------------------
   0103                     983 _radio_air_rate:
                            984 ;	radio/radio.c:276: return settings.air_data_rate;
   0103 78r0D               985 	mov	r0,#(_settings + 0x0008)
   0105 E2                  986 	movx	a,@r0
   0106 F5 82               987 	mov	dpl,a
   0108 22                  988 	ret
                            989 ;------------------------------------------------------------
                            990 ;Allocation info for local variables in function 'radio_clear_transmit_fifo'
                            991 ;------------------------------------------------------------
                            992 ;control                   Allocated to registers r7 
                            993 ;------------------------------------------------------------
                            994 ;	radio/radio.c:282: radio_clear_transmit_fifo(void)
                            995 ;	-----------------------------------------
                            996 ;	 function radio_clear_transmit_fifo
                            997 ;	-----------------------------------------
   0109                     998 _radio_clear_transmit_fifo:
                            999 ;	radio/radio.c:285: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
   0109 75 82 08           1000 	mov	dpl,#0x08
   010C 12s08r55           1001 	lcall	_register_read
   010F AF 82              1002 	mov	r7,dpl
                           1003 ;	radio/radio.c:286: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRTX);
   0111 74 01              1004 	mov	a,#0x01
   0113 4F                 1005 	orl	a,r7
   0114 FE                 1006 	mov	r6,a
   0115 C0 07              1007 	push	ar7
   0117 C0 06              1008 	push	ar6
   0119 75 82 08           1009 	mov	dpl,#0x08
   011C 12s08r1F           1010 	lcall	_register_write
   011F 15 81              1011 	dec	sp
   0121 D0 07              1012 	pop	ar7
                           1013 ;	radio/radio.c:287: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRTX);
   0123 53 07 FE           1014 	anl	ar7,#0xFE
   0126 C0 07              1015 	push	ar7
   0128 75 82 08           1016 	mov	dpl,#0x08
   012B 12s08r1F           1017 	lcall	_register_write
   012E 15 81              1018 	dec	sp
   0130 22                 1019 	ret
                           1020 ;------------------------------------------------------------
                           1021 ;Allocation info for local variables in function 'radio_clear_receive_fifo'
                           1022 ;------------------------------------------------------------
                           1023 ;control                   Allocated to registers r7 
                           1024 ;------------------------------------------------------------
                           1025 ;	radio/radio.c:294: radio_clear_receive_fifo(void) __reentrant
                           1026 ;	-----------------------------------------
                           1027 ;	 function radio_clear_receive_fifo
                           1028 ;	-----------------------------------------
   0131                    1029 _radio_clear_receive_fifo:
                           1030 ;	radio/radio.c:297: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
   0131 75 82 08           1031 	mov	dpl,#0x08
   0134 12s08r55           1032 	lcall	_register_read
   0137 AF 82              1033 	mov	r7,dpl
                           1034 ;	radio/radio.c:298: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRRX);
   0139 74 02              1035 	mov	a,#0x02
   013B 4F                 1036 	orl	a,r7
   013C FE                 1037 	mov	r6,a
   013D C0 07              1038 	push	ar7
   013F C0 06              1039 	push	ar6
   0141 75 82 08           1040 	mov	dpl,#0x08
   0144 12s08r1F           1041 	lcall	_register_write
   0147 15 81              1042 	dec	sp
   0149 D0 07              1043 	pop	ar7
                           1044 ;	radio/radio.c:299: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRRX);
   014B 53 07 FD           1045 	anl	ar7,#0xFD
   014E C0 07              1046 	push	ar7
   0150 75 82 08           1047 	mov	dpl,#0x08
   0153 12s08r1F           1048 	lcall	_register_write
   0156 15 81              1049 	dec	sp
   0158 22                 1050 	ret
                           1051 ;------------------------------------------------------------
                           1052 ;Allocation info for local variables in function 'radio_transmit_simple'
                           1053 ;------------------------------------------------------------
                           1054 ;length                    Allocated to registers r7 
                           1055 ;n                         Allocated to registers r6 
                           1056 ;status                    Allocated to registers r3 
                           1057 ;------------------------------------------------------------
                           1058 ;	radio/radio.c:311: radio_transmit_simple(__data uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1059 ;	-----------------------------------------
                           1060 ;	 function radio_transmit_simple
                           1061 ;	-----------------------------------------
   0159                    1062 _radio_transmit_simple:
                           1063 ;	radio/radio.c:317: if (length > sizeof(radio_buffer)) {
   0159 E5 82              1064 	mov	a,dpl
   015B FF                 1065 	mov	r7,a
   015C 24 03              1066 	add	a,#0xff - 0xFC
   015E 50 19              1067 	jnc	00102$
                           1068 ;	radio/radio.c:318: panic("oversized packet");
   0160 C0 07              1069 	push	ar7
   0162 74r00              1070 	mov	a,#__str_0
   0164 C0 E0              1071 	push	acc
   0166 74s00              1072 	mov	a,#(__str_0 >> 8)
   0168 C0 E0              1073 	push	acc
   016A 74 80              1074 	mov	a,#0x80
   016C C0 E0              1075 	push	acc
   016E 12s00r00           1076 	lcall	_panic
   0171 15 81              1077 	dec	sp
   0173 15 81              1078 	dec	sp
   0175 15 81              1079 	dec	sp
   0177 D0 07              1080 	pop	ar7
   0179                    1081 00102$:
                           1082 ;	radio/radio.c:321: radio_clear_transmit_fifo();
   0179 C0 07              1083 	push	ar7
   017B 12s01r09           1084 	lcall	_radio_clear_transmit_fifo
   017E D0 07              1085 	pop	ar7
                           1086 ;	radio/radio.c:323: register_write(EZRADIOPRO_TRANSMIT_PACKET_LENGTH, length);
   0180 C0 07              1087 	push	ar7
   0182 C0 07              1088 	push	ar7
   0184 75 82 3E           1089 	mov	dpl,#0x3E
   0187 12s08r1F           1090 	lcall	_register_write
   018A 15 81              1091 	dec	sp
   018C D0 07              1092 	pop	ar7
                           1093 ;	radio/radio.c:326: n = length;
                           1094 ;	radio/radio.c:327: if (n > TX_FIFO_THRESHOLD_LOW) {
   018E EF                 1095 	mov	a,r7
   018F FE                 1096 	mov	r6,a
   0190 24 DF              1097 	add	a,#0xff - 0x20
   0192 50 02              1098 	jnc	00104$
                           1099 ;	radio/radio.c:328: n = TX_FIFO_THRESHOLD_LOW;
   0194 7E 20              1100 	mov	r6,#0x20
   0196                    1101 00104$:
                           1102 ;	radio/radio.c:330: radio_write_transmit_fifo(n, buf);
   0196 78r15              1103 	mov	r0,#_radio_transmit_simple_PARM_2
   0198 79r13              1104 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   019A E2                 1105 	movx	a,@r0
   019B F3                 1106 	movx	@r1,a
   019C 08                 1107 	inc	r0
   019D E2                 1108 	movx	a,@r0
   019E 09                 1109 	inc	r1
   019F F3                 1110 	movx	@r1,a
   01A0 8E 82              1111 	mov	dpl,r6
   01A2 C0 07              1112 	push	ar7
   01A4 C0 06              1113 	push	ar6
   01A6 12s00r88           1114 	lcall	_radio_write_transmit_fifo
   01A9 D0 06              1115 	pop	ar6
   01AB D0 07              1116 	pop	ar7
                           1117 ;	radio/radio.c:331: length -= n;
   01AD EF                 1118 	mov	a,r7
   01AE C3                 1119 	clr	c
   01AF 9E                 1120 	subb	a,r6
   01B0 FF                 1121 	mov	r7,a
                           1122 ;	radio/radio.c:332: buf += n;
   01B1 78r15              1123 	mov	r0,#_radio_transmit_simple_PARM_2
   01B3 E2                 1124 	movx	a,@r0
   01B4 2E                 1125 	add	a,r6
   01B5 F2                 1126 	movx	@r0,a
   01B6 08                 1127 	inc	r0
   01B7 E2                 1128 	movx	a,@r0
   01B8 34 00              1129 	addc	a,#0x00
   01BA F2                 1130 	movx	@r0,a
                           1131 ;	radio/radio.c:335: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   01BB C0 07              1132 	push	ar7
   01BD E4                 1133 	clr	a
   01BE C0 E0              1134 	push	acc
   01C0 75 82 05           1135 	mov	dpl,#0x05
   01C3 12s08r1F           1136 	lcall	_register_write
   01C6 15 81              1137 	dec	sp
                           1138 ;	radio/radio.c:336: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   01C8 E4                 1139 	clr	a
   01C9 C0 E0              1140 	push	acc
   01CB 75 82 06           1141 	mov	dpl,#0x06
   01CE 12s08r1F           1142 	lcall	_register_write
   01D1 15 81              1143 	dec	sp
                           1144 ;	radio/radio.c:338: preamble_detected = 0;
   01D3 C2*01              1145 	clr	_preamble_detected
                           1146 ;	radio/radio.c:339: transmit_started = false;
   01D5 C2*03              1147 	clr	_radio_transmit_simple_transmit_started_1_1
                           1148 ;	radio/radio.c:342: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_TXON | EZRADIOPRO_XTON);
   01D7 74 09              1149 	mov	a,#0x09
   01D9 C0 E0              1150 	push	acc
   01DB 75 82 07           1151 	mov	dpl,#0x07
   01DE 12s08r1F           1152 	lcall	_register_write
   01E1 15 81              1153 	dec	sp
                           1154 ;	radio/radio.c:348: tstart = timer2_tick();
   01E3 12s00r00           1155 	lcall	_timer2_tick
   01E6 AC 82              1156 	mov	r4,dpl
   01E8 AD 83              1157 	mov	r5,dph
   01EA D0 07              1158 	pop	ar7
                           1159 ;	radio/radio.c:349: while ((uint16_t)(timer2_tick() - tstart) < timeout_ticks) {
   01EC                    1160 00130$:
   01EC C0 07              1161 	push	ar7
   01EE C0 05              1162 	push	ar5
   01F0 C0 04              1163 	push	ar4
   01F2 12s00r00           1164 	lcall	_timer2_tick
   01F5 AA 82              1165 	mov	r2,dpl
   01F7 AB 83              1166 	mov	r3,dph
   01F9 D0 04              1167 	pop	ar4
   01FB D0 05              1168 	pop	ar5
   01FD D0 07              1169 	pop	ar7
   01FF EA                 1170 	mov	a,r2
   0200 C3                 1171 	clr	c
   0201 9C                 1172 	subb	a,r4
   0202 FA                 1173 	mov	r2,a
   0203 EB                 1174 	mov	a,r3
   0204 9D                 1175 	subb	a,r5
   0205 FB                 1176 	mov	r3,a
   0206 78r17              1177 	mov	r0,#_radio_transmit_simple_PARM_3
   0208 C3                 1178 	clr	c
   0209 E2                 1179 	movx	a,@r0
   020A F5 F0              1180 	mov	b,a
   020C EA                 1181 	mov	a,r2
   020D 95 F0              1182 	subb	a,b
   020F 08                 1183 	inc	r0
   0210 E2                 1184 	movx	a,@r0
   0211 F5 F0              1185 	mov	b,a
   0213 EB                 1186 	mov	a,r3
   0214 95 F0              1187 	subb	a,b
   0216 40 03              1188 	jc	00159$
   0218 02s03r25           1189 	ljmp	00132$
   021B                    1190 00159$:
                           1191 ;	radio/radio.c:353: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   021B 75 82 03           1192 	mov	dpl,#0x03
   021E C0 07              1193 	push	ar7
   0220 C0 05              1194 	push	ar5
   0222 C0 04              1195 	push	ar4
   0224 12s08r55           1196 	lcall	_register_read
   0227 AB 82              1197 	mov	r3,dpl
   0229 D0 04              1198 	pop	ar4
   022B D0 05              1199 	pop	ar5
   022D D0 07              1200 	pop	ar7
                           1201 ;	radio/radio.c:354: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAEM)) {
   022F 30*03 40           1202 	jnb	_radio_transmit_simple_transmit_started_1_1,00108$
   0232 EF                 1203 	mov	a,r7
   0233 60 3D              1204 	jz	00108$
   0235 EB                 1205 	mov	a,r3
   0236 30 E5 39           1206 	jnb	acc.5,00108$
                           1207 ;	radio/radio.c:361: n = 4;
   0239 7E 04              1208 	mov	r6,#0x04
                           1209 ;	radio/radio.c:362: if (n > length) {
   023B BF 04 00           1210 	cjne	r7,#0x04,00163$
   023E                    1211 00163$:
   023E 50 02              1212 	jnc	00106$
                           1213 ;	radio/radio.c:363: n = length;
   0240 8F 06              1214 	mov	ar6,r7
   0242                    1215 00106$:
                           1216 ;	radio/radio.c:365: radio_write_transmit_fifo(n, buf);
   0242 78r15              1217 	mov	r0,#_radio_transmit_simple_PARM_2
   0244 79r13              1218 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0246 E2                 1219 	movx	a,@r0
   0247 F3                 1220 	movx	@r1,a
   0248 08                 1221 	inc	r0
   0249 E2                 1222 	movx	a,@r0
   024A 09                 1223 	inc	r1
   024B F3                 1224 	movx	@r1,a
   024C 8E 82              1225 	mov	dpl,r6
   024E C0 07              1226 	push	ar7
   0250 C0 06              1227 	push	ar6
   0252 C0 05              1228 	push	ar5
   0254 C0 04              1229 	push	ar4
   0256 12s00r88           1230 	lcall	_radio_write_transmit_fifo
   0259 D0 04              1231 	pop	ar4
   025B D0 05              1232 	pop	ar5
   025D D0 06              1233 	pop	ar6
   025F D0 07              1234 	pop	ar7
                           1235 ;	radio/radio.c:366: length -= n;
   0261 EF                 1236 	mov	a,r7
   0262 C3                 1237 	clr	c
   0263 9E                 1238 	subb	a,r6
   0264 FF                 1239 	mov	r7,a
                           1240 ;	radio/radio.c:367: buf += n;
   0265 78r15              1241 	mov	r0,#_radio_transmit_simple_PARM_2
   0267 E2                 1242 	movx	a,@r0
   0268 2E                 1243 	add	a,r6
   0269 F2                 1244 	movx	@r0,a
   026A 08                 1245 	inc	r0
   026B E2                 1246 	movx	a,@r0
   026C 34 00              1247 	addc	a,#0x00
   026E F2                 1248 	movx	@r0,a
                           1249 ;	radio/radio.c:368: continue;
   026F 02s01rEC           1250 	ljmp	00130$
   0272                    1251 00108$:
                           1252 ;	radio/radio.c:370: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAFULL) == 0) {
   0272 30*03 40           1253 	jnb	_radio_transmit_simple_transmit_started_1_1,00114$
   0275 EF                 1254 	mov	a,r7
   0276 60 3D              1255 	jz	00114$
   0278 EB                 1256 	mov	a,r3
   0279 20 E6 39           1257 	jb	acc.6,00114$
                           1258 ;	radio/radio.c:374: n = 4;
   027C 7E 04              1259 	mov	r6,#0x04
                           1260 ;	radio/radio.c:375: if (n > length) {
   027E BF 04 00           1261 	cjne	r7,#0x04,00168$
   0281                    1262 00168$:
   0281 50 02              1263 	jnc	00112$
                           1264 ;	radio/radio.c:376: n = length;
   0283 8F 06              1265 	mov	ar6,r7
   0285                    1266 00112$:
                           1267 ;	radio/radio.c:378: radio_write_transmit_fifo(n, buf);
   0285 78r15              1268 	mov	r0,#_radio_transmit_simple_PARM_2
   0287 79r13              1269 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0289 E2                 1270 	movx	a,@r0
   028A F3                 1271 	movx	@r1,a
   028B 08                 1272 	inc	r0
   028C E2                 1273 	movx	a,@r0
   028D 09                 1274 	inc	r1
   028E F3                 1275 	movx	@r1,a
   028F 8E 82              1276 	mov	dpl,r6
   0291 C0 07              1277 	push	ar7
   0293 C0 06              1278 	push	ar6
   0295 C0 05              1279 	push	ar5
   0297 C0 04              1280 	push	ar4
   0299 12s00r88           1281 	lcall	_radio_write_transmit_fifo
   029C D0 04              1282 	pop	ar4
   029E D0 05              1283 	pop	ar5
   02A0 D0 06              1284 	pop	ar6
   02A2 D0 07              1285 	pop	ar7
                           1286 ;	radio/radio.c:379: length -= n;
   02A4 EF                 1287 	mov	a,r7
   02A5 C3                 1288 	clr	c
   02A6 9E                 1289 	subb	a,r6
   02A7 FF                 1290 	mov	r7,a
                           1291 ;	radio/radio.c:380: buf += n;
   02A8 78r15              1292 	mov	r0,#_radio_transmit_simple_PARM_2
   02AA E2                 1293 	movx	a,@r0
   02AB 2E                 1294 	add	a,r6
   02AC F2                 1295 	movx	@r0,a
   02AD 08                 1296 	inc	r0
   02AE E2                 1297 	movx	a,@r0
   02AF 34 00              1298 	addc	a,#0x00
   02B1 F2                 1299 	movx	@r0,a
                           1300 ;	radio/radio.c:381: continue;
   02B2 02s01rEC           1301 	ljmp	00130$
   02B5                    1302 00114$:
                           1303 ;	radio/radio.c:384: if (status & EZRADIOPRO_IFFERR) {
   02B5 EB                 1304 	mov	a,r3
   02B6 30 E7 20           1305 	jnb	acc.7,00120$
                           1306 ;	radio/radio.c:386: radio_clear_transmit_fifo();
   02B9 12s01r09           1307 	lcall	_radio_clear_transmit_fifo
                           1308 ;	radio/radio.c:388: if (errors.tx_errors != 0xFFFF) {
   02BC 78r02              1309 	mov	r0,#(_errors + 0x0002)
   02BE E2                 1310 	movx	a,@r0
   02BF FA                 1311 	mov	r2,a
   02C0 08                 1312 	inc	r0
   02C1 E2                 1313 	movx	a,@r0
   02C2 FE                 1314 	mov	r6,a
   02C3 BA FF 05           1315 	cjne	r2,#0xFF,00171$
   02C6 BE FF 02           1316 	cjne	r6,#0xFF,00171$
   02C9 80 0C              1317 	sjmp	00118$
   02CB                    1318 00171$:
                           1319 ;	radio/radio.c:389: errors.tx_errors++;
   02CB 0A                 1320 	inc	r2
   02CC BA 00 01           1321 	cjne	r2,#0x00,00172$
   02CF 0E                 1322 	inc	r6
   02D0                    1323 00172$:
   02D0 78r02              1324 	mov	r0,#(_errors + 0x0002)
   02D2 EA                 1325 	mov	a,r2
   02D3 F2                 1326 	movx	@r0,a
   02D4 08                 1327 	inc	r0
   02D5 EE                 1328 	mov	a,r6
   02D6 F2                 1329 	movx	@r0,a
   02D7                    1330 00118$:
                           1331 ;	radio/radio.c:394: return false;
   02D7 C3                 1332 	clr	c
   02D8 22                 1333 	ret
   02D9                    1334 00120$:
                           1335 ;	radio/radio.c:399: status = register_read(EZRADIOPRO_DEVICE_STATUS);
   02D9 75 82 02           1336 	mov	dpl,#0x02
   02DC C0 07              1337 	push	ar7
   02DE C0 05              1338 	push	ar5
   02E0 C0 04              1339 	push	ar4
   02E2 12s08r55           1340 	lcall	_register_read
   02E5 AB 82              1341 	mov	r3,dpl
   02E7 D0 04              1342 	pop	ar4
   02E9 D0 05              1343 	pop	ar5
   02EB D0 07              1344 	pop	ar7
                           1345 ;	radio/radio.c:400: if (status & 0x02) {
   02ED EB                 1346 	mov	a,r3
   02EE 30 E1 05           1347 	jnb	acc.1,00122$
                           1348 ;	radio/radio.c:402: transmit_started = true;
   02F1 D2*03              1349 	setb	_radio_transmit_simple_transmit_started_1_1
                           1350 ;	radio/radio.c:403: continue;
   02F3 02s01rEC           1351 	ljmp	00130$
   02F6                    1352 00122$:
                           1353 ;	radio/radio.c:405: if (transmit_started && (status & 0x02) == 0) {
   02F6 20*03 03           1354 	jb	_radio_transmit_simple_transmit_started_1_1,00174$
   02F9 02s01rEC           1355 	ljmp	00130$
   02FC                    1356 00174$:
   02FC EB                 1357 	mov	a,r3
   02FD 30 E1 03           1358 	jnb	acc.1,00175$
   0300 02s01rEC           1359 	ljmp	00130$
   0303                    1360 00175$:
                           1361 ;	radio/radio.c:408: if (length != 0) {
   0303 EF                 1362 	mov	a,r7
   0304 60 1D              1363 	jz	00126$
                           1364 ;	radio/radio.c:410: if (errors.tx_errors != 0xFFFF) {
   0306 78r02              1365 	mov	r0,#(_errors + 0x0002)
   0308 E2                 1366 	movx	a,@r0
   0309 FE                 1367 	mov	r6,a
   030A 08                 1368 	inc	r0
   030B E2                 1369 	movx	a,@r0
   030C FF                 1370 	mov	r7,a
   030D BE FF 05           1371 	cjne	r6,#0xFF,00177$
   0310 BF FF 02           1372 	cjne	r7,#0xFF,00177$
   0313 80 0C              1373 	sjmp	00124$
   0315                    1374 00177$:
                           1375 ;	radio/radio.c:411: errors.tx_errors++;
   0315 0E                 1376 	inc	r6
   0316 BE 00 01           1377 	cjne	r6,#0x00,00178$
   0319 0F                 1378 	inc	r7
   031A                    1379 00178$:
   031A 78r02              1380 	mov	r0,#(_errors + 0x0002)
   031C EE                 1381 	mov	a,r6
   031D F2                 1382 	movx	@r0,a
   031E 08                 1383 	inc	r0
   031F EF                 1384 	mov	a,r7
   0320 F2                 1385 	movx	@r0,a
   0321                    1386 00124$:
                           1387 ;	radio/radio.c:416: return false;
   0321 C3                 1388 	clr	c
   0322 22                 1389 	ret
   0323                    1390 00126$:
                           1391 ;	radio/radio.c:421: return true;
   0323 D3                 1392 	setb	c
   0324 22                 1393 	ret
   0325                    1394 00132$:
                           1395 ;	radio/radio.c:435: if (errors.tx_errors != 0xFFFF) {
   0325 78r02              1396 	mov	r0,#(_errors + 0x0002)
   0327 E2                 1397 	movx	a,@r0
   0328 FE                 1398 	mov	r6,a
   0329 08                 1399 	inc	r0
   032A E2                 1400 	movx	a,@r0
   032B FF                 1401 	mov	r7,a
   032C BE FF 05           1402 	cjne	r6,#0xFF,00179$
   032F BF FF 02           1403 	cjne	r7,#0xFF,00179$
   0332 80 0C              1404 	sjmp	00134$
   0334                    1405 00179$:
                           1406 ;	radio/radio.c:436: errors.tx_errors++;
   0334 0E                 1407 	inc	r6
   0335 BE 00 01           1408 	cjne	r6,#0x00,00180$
   0338 0F                 1409 	inc	r7
   0339                    1410 00180$:
   0339 78r02              1411 	mov	r0,#(_errors + 0x0002)
   033B EE                 1412 	mov	a,r6
   033C F2                 1413 	movx	@r0,a
   033D 08                 1414 	inc	r0
   033E EF                 1415 	mov	a,r7
   033F F2                 1416 	movx	@r0,a
   0340                    1417 00134$:
                           1418 ;	radio/radio.c:439: return false;
   0340 C3                 1419 	clr	c
   0341 22                 1420 	ret
                           1421 ;------------------------------------------------------------
                           1422 ;Allocation info for local variables in function 'radio_transmit'
                           1423 ;------------------------------------------------------------
                           1424 ;length                    Allocated with name '_radio_transmit_length_1_1'
                           1425 ;------------------------------------------------------------
                           1426 ;	radio/radio.c:503: radio_transmit(uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1427 ;	-----------------------------------------
                           1428 ;	 function radio_transmit
                           1429 ;	-----------------------------------------
   0342                    1430 _radio_transmit:
   0342 E5 82              1431 	mov	a,dpl
   0344 90s00rFF           1432 	mov	dptr,#_radio_transmit_length_1_1
   0347 F0                 1433 	movx	@dptr,a
                           1434 ;	radio/radio.c:507: EX0_SAVE_DISABLE;
   0348 A2 A8              1435 	mov	c,_EX0
   034A 92*05              1436 	mov	_radio_transmit_EX0_saved_1_1,c
   034C C2 A8              1437 	clr	_EX0
                           1438 ;	radio/radio.c:510: PA_ENABLE = 1;		// Set PA_Enable to turn on PA prior to TX cycle
   034E D2 A5              1439 	setb	_PA_ENABLE
                           1440 ;	radio/radio.c:520: ret = radio_transmit_simple(length, buf, timeout_ticks);
   0350 90s00rFF           1441 	mov	dptr,#_radio_transmit_length_1_1
   0353 E0                 1442 	movx	a,@dptr
   0354 FF                 1443 	mov	r7,a
   0355 78r19              1444 	mov	r0,#_radio_transmit_PARM_2
   0357 79r15              1445 	mov	r1,#_radio_transmit_simple_PARM_2
   0359 E2                 1446 	movx	a,@r0
   035A F3                 1447 	movx	@r1,a
   035B 08                 1448 	inc	r0
   035C E2                 1449 	movx	a,@r0
   035D 09                 1450 	inc	r1
   035E F3                 1451 	movx	@r1,a
   035F 78r1B              1452 	mov	r0,#_radio_transmit_PARM_3
   0361 79r17              1453 	mov	r1,#_radio_transmit_simple_PARM_3
   0363 E2                 1454 	movx	a,@r0
   0364 F3                 1455 	movx	@r1,a
   0365 08                 1456 	inc	r0
   0366 E2                 1457 	movx	a,@r0
   0367 09                 1458 	inc	r1
   0368 F3                 1459 	movx	@r1,a
   0369 8F 82              1460 	mov	dpl,r7
   036B 12s01r59           1461 	lcall	_radio_transmit_simple
   036E 92*04              1462 	mov	_radio_transmit_ret_1_1,c
                           1463 ;	radio/radio.c:524: PA_ENABLE = 0;		// Set PA_Enable to off the PA after TX cycle
   0370 C2 A5              1464 	clr	_PA_ENABLE
                           1465 ;	radio/radio.c:526: EX0_RESTORE;
   0372 A2*05              1466 	mov	c,_radio_transmit_EX0_saved_1_1
   0374 92 A8              1467 	mov	_EX0,c
                           1468 ;	radio/radio.c:527: return ret;
   0376 A2*04              1469 	mov	c,_radio_transmit_ret_1_1
   0378 22                 1470 	ret
                           1471 ;------------------------------------------------------------
                           1472 ;Allocation info for local variables in function 'radio_receiver_on'
                           1473 ;------------------------------------------------------------
                           1474 ;	radio/radio.c:534: radio_receiver_on(void)
                           1475 ;	-----------------------------------------
                           1476 ;	 function radio_receiver_on
                           1477 ;	-----------------------------------------
   0379                    1478 _radio_receiver_on:
                           1479 ;	radio/radio.c:536: EX0 = 0;
   0379 C2 A8              1480 	clr	_EX0
                           1481 ;	radio/radio.c:538: packet_received = 0;
   037B C2*00              1482 	clr	_packet_received
                           1483 ;	radio/radio.c:539: receive_packet_length = 0;
   037D 78r00              1484 	mov	r0,#_receive_packet_length
   037F E4                 1485 	clr	a
   0380 F2                 1486 	movx	@r0,a
                           1487 ;	radio/radio.c:540: preamble_detected = 0;
   0381 C2*01              1488 	clr	_preamble_detected
                           1489 ;	radio/radio.c:541: partial_packet_length = 0;
   0383 78r01              1490 	mov	r0,#_partial_packet_length
   0385 E4                 1491 	clr	a
   0386 F2                 1492 	movx	@r0,a
                           1493 ;	radio/radio.c:544: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, RADIO_RX_INTERRUPTS);
   0387 74 13              1494 	mov	a,#0x13
   0389 C0 E0              1495 	push	acc
   038B 75 82 05           1496 	mov	dpl,#0x05
   038E 12s08r1F           1497 	lcall	_register_write
   0391 15 81              1498 	dec	sp
                           1499 ;	radio/radio.c:545: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENPREAVAL);
   0393 74 40              1500 	mov	a,#0x40
   0395 C0 E0              1501 	push	acc
   0397 75 82 06           1502 	mov	dpl,#0x06
   039A 12s08r1F           1503 	lcall	_register_write
   039D 15 81              1504 	dec	sp
                           1505 ;	radio/radio.c:547: clear_status_registers();
   039F 12s08rC9           1506 	lcall	_clear_status_registers
                           1507 ;	radio/radio.c:548: radio_clear_transmit_fifo();
   03A2 12s01r09           1508 	lcall	_radio_clear_transmit_fifo
                           1509 ;	radio/radio.c:549: radio_clear_receive_fifo();
   03A5 12s01r31           1510 	lcall	_radio_clear_receive_fifo
                           1511 ;	radio/radio.c:552: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_RXON | EZRADIOPRO_XTON);
   03A8 74 05              1512 	mov	a,#0x05
   03AA C0 E0              1513 	push	acc
   03AC 75 82 07           1514 	mov	dpl,#0x07
   03AF 12s08r1F           1515 	lcall	_register_write
   03B2 15 81              1516 	dec	sp
                           1517 ;	radio/radio.c:555: EX0 = 1;
   03B4 D2 A8              1518 	setb	_EX0
                           1519 ;	radio/radio.c:557: return true;
   03B6 D3                 1520 	setb	c
   03B7 22                 1521 	ret
                           1522 ;------------------------------------------------------------
                           1523 ;Allocation info for local variables in function 'radio_initialise'
                           1524 ;------------------------------------------------------------
                           1525 ;status                    Allocated with name '_radio_initialise_status_1_1'
                           1526 ;------------------------------------------------------------
                           1527 ;	radio/radio.c:564: radio_initialise(void)
                           1528 ;	-----------------------------------------
                           1529 ;	 function radio_initialise
                           1530 ;	-----------------------------------------
   03B8                    1531 _radio_initialise:
                           1532 ;	radio/radio.c:568: delay_msec(50);
   03B8 90 00 32           1533 	mov	dptr,#0x0032
   03BB 12s00r00           1534 	lcall	_delay_msec
                           1535 ;	radio/radio.c:571: status = register_read(EZRADIOPRO_DEVICE_VERSION);
   03BE 75 82 01           1536 	mov	dpl,#0x01
   03C1 12s08r55           1537 	lcall	_register_read
   03C4 AF 82              1538 	mov	r7,dpl
                           1539 ;	radio/radio.c:572: if (status == 0xFF || status < 5) {
   03C6 BF FF 02           1540 	cjne	r7,#0xFF,00113$
   03C9 80 05              1541 	sjmp	00101$
   03CB                    1542 00113$:
   03CB BF 05 00           1543 	cjne	r7,#0x05,00114$
   03CE                    1544 00114$:
   03CE 50 02              1545 	jnc	00102$
   03D0                    1546 00101$:
                           1547 ;	radio/radio.c:574: return false;
   03D0 C3                 1548 	clr	c
   03D1 22                 1549 	ret
   03D2                    1550 00102$:
                           1551 ;	radio/radio.c:578: software_reset();
   03D2 12s09r29           1552 	lcall	_software_reset
                           1553 ;	radio/radio.c:580: status = register_read(EZRADIOPRO_DEVICE_VERSION);
   03D5 75 82 01           1554 	mov	dpl,#0x01
   03D8 12s08r55           1555 	lcall	_register_read
                           1556 ;	radio/radio.c:582: if ((status & EZRADIOPRO_IPOR) == 0) {
   03DB E5 82              1557 	mov	a,dpl
   03DD FF                 1558 	mov	r7,a
   03DE 20 E0 06           1559 	jb	acc.0,00105$
                           1560 ;	radio/radio.c:584: return software_reset();
   03E1 12s09r29           1561 	lcall	_software_reset
   03E4 92*06              1562 	mov  _radio_initialise_sloc0_1_0,c
   03E6 22                 1563 	ret
   03E7                    1564 00105$:
                           1565 ;	radio/radio.c:587: if (status & EZRADIOPRO_ICHIPRDY) {
   03E7 EF                 1566 	mov	a,r7
   03E8 30 E1 02           1567 	jnb	acc.1,00107$
                           1568 ;	radio/radio.c:589: return true;
   03EB D3                 1569 	setb	c
   03EC 22                 1570 	ret
   03ED                    1571 00107$:
                           1572 ;	radio/radio.c:592: return false;
   03ED C3                 1573 	clr	c
   03EE 22                 1574 	ret
                           1575 ;------------------------------------------------------------
                           1576 ;Allocation info for local variables in function 'radio_set_frequency'
                           1577 ;------------------------------------------------------------
                           1578 ;	radio/radio.c:599: radio_set_frequency(__pdata uint32_t value)
                           1579 ;	-----------------------------------------
                           1580 ;	 function radio_set_frequency
                           1581 ;	-----------------------------------------
   03EF                    1582 _radio_set_frequency:
   03EF AC 82              1583 	mov	r4,dpl
   03F1 AD 83              1584 	mov	r5,dph
   03F3 AE F0              1585 	mov	r6,b
   03F5 FF                 1586 	mov	r7,a
                           1587 ;	radio/radio.c:601: if (value < 240000000UL || value > 935000000UL) {
   03F6 C3                 1588 	clr	c
   03F7 ED                 1589 	mov	a,r5
   03F8 94 1C              1590 	subb	a,#0x1C
   03FA EE                 1591 	mov	a,r6
   03FB 94 4E              1592 	subb	a,#0x4E
   03FD EF                 1593 	mov	a,r7
   03FE 94 0E              1594 	subb	a,#0x0E
   0400 40 0E              1595 	jc	00101$
   0402 74 C0              1596 	mov	a,#0xC0
   0404 9C                 1597 	subb	a,r4
   0405 74 F7              1598 	mov	a,#0xF7
   0407 9D                 1599 	subb	a,r5
   0408 74 BA              1600 	mov	a,#0xBA
   040A 9E                 1601 	subb	a,r6
   040B 74 37              1602 	mov	a,#0x37
   040D 9F                 1603 	subb	a,r7
   040E 50 02              1604 	jnc	00102$
   0410                    1605 00101$:
                           1606 ;	radio/radio.c:602: return false;
   0410 C3                 1607 	clr	c
   0411 22                 1608 	ret
   0412                    1609 00102$:
                           1610 ;	radio/radio.c:604: settings.frequency = value;
   0412 78r05              1611 	mov	r0,#_settings
   0414 EC                 1612 	mov	a,r4
   0415 F2                 1613 	movx	@r0,a
   0416 08                 1614 	inc	r0
   0417 ED                 1615 	mov	a,r5
   0418 F2                 1616 	movx	@r0,a
   0419 08                 1617 	inc	r0
   041A EE                 1618 	mov	a,r6
   041B F2                 1619 	movx	@r0,a
   041C 08                 1620 	inc	r0
   041D EF                 1621 	mov	a,r7
   041E F2                 1622 	movx	@r0,a
                           1623 ;	radio/radio.c:605: set_frequency_registers(value);
   041F 8C 82              1624 	mov	dpl,r4
   0421 8D 83              1625 	mov	dph,r5
   0423 8E F0              1626 	mov	b,r6
   0425 EF                 1627 	mov	a,r7
   0426 12s09r95           1628 	lcall	_set_frequency_registers
                           1629 ;	radio/radio.c:606: return true;
   0429 D3                 1630 	setb	c
   042A 22                 1631 	ret
                           1632 ;------------------------------------------------------------
                           1633 ;Allocation info for local variables in function 'radio_set_channel_spacing'
                           1634 ;------------------------------------------------------------
                           1635 ;	radio/radio.c:613: radio_set_channel_spacing(__pdata uint32_t value)
                           1636 ;	-----------------------------------------
                           1637 ;	 function radio_set_channel_spacing
                           1638 ;	-----------------------------------------
   042B                    1639 _radio_set_channel_spacing:
   042B AC 82              1640 	mov	r4,dpl
   042D AD 83              1641 	mov	r5,dph
   042F AE F0              1642 	mov	r6,b
   0431 FF                 1643 	mov	r7,a
                           1644 ;	radio/radio.c:615: if (value > 2550000L)
   0432 C3                 1645 	clr	c
   0433 74 F0              1646 	mov	a,#0xF0
   0435 9C                 1647 	subb	a,r4
   0436 74 E8              1648 	mov	a,#0xE8
   0438 9D                 1649 	subb	a,r5
   0439 74 26              1650 	mov	a,#0x26
   043B 9E                 1651 	subb	a,r6
   043C E4                 1652 	clr	a
   043D 9F                 1653 	subb	a,r7
   043E 50 02              1654 	jnc	00102$
                           1655 ;	radio/radio.c:616: return false;
   0440 C3                 1656 	clr	c
   0441 22                 1657 	ret
   0442                    1658 00102$:
                           1659 ;	radio/radio.c:617: value = scale_uint32(value, 10000);
   0442 78r1D              1660 	mov	r0,#_scale_uint32_PARM_2
   0444 74 10              1661 	mov	a,#0x10
   0446 F2                 1662 	movx	@r0,a
   0447 08                 1663 	inc	r0
   0448 74 27              1664 	mov	a,#0x27
   044A F2                 1665 	movx	@r0,a
   044B 08                 1666 	inc	r0
   044C E4                 1667 	clr	a
   044D F2                 1668 	movx	@r0,a
   044E 08                 1669 	inc	r0
   044F F2                 1670 	movx	@r0,a
   0450 8C 82              1671 	mov	dpl,r4
   0452 8D 83              1672 	mov	dph,r5
   0454 8E F0              1673 	mov	b,r6
   0456 EF                 1674 	mov	a,r7
   0457 12s08rD5           1675 	lcall	_scale_uint32
   045A AC 82              1676 	mov	r4,dpl
   045C AD 83              1677 	mov	r5,dph
   045E AE F0              1678 	mov	r6,b
   0460 FF                 1679 	mov	r7,a
                           1680 ;	radio/radio.c:618: settings.channel_spacing = value;
   0461 78r09              1681 	mov	r0,#(_settings + 0x0004)
   0463 EC                 1682 	mov	a,r4
   0464 F2                 1683 	movx	@r0,a
   0465 08                 1684 	inc	r0
   0466 ED                 1685 	mov	a,r5
   0467 F2                 1686 	movx	@r0,a
   0468 08                 1687 	inc	r0
   0469 EE                 1688 	mov	a,r6
   046A F2                 1689 	movx	@r0,a
   046B 08                 1690 	inc	r0
   046C EF                 1691 	mov	a,r7
   046D F2                 1692 	movx	@r0,a
                           1693 ;	radio/radio.c:619: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, value);
   046E C0 04              1694 	push	ar4
   0470 75 82 7A           1695 	mov	dpl,#0x7A
   0473 12s08r1F           1696 	lcall	_register_write
   0476 15 81              1697 	dec	sp
                           1698 ;	radio/radio.c:620: return true;
   0478 D3                 1699 	setb	c
   0479 22                 1700 	ret
                           1701 ;------------------------------------------------------------
                           1702 ;Allocation info for local variables in function 'radio_set_channel'
                           1703 ;------------------------------------------------------------
                           1704 ;channel                   Allocated with name '_radio_set_channel_channel_1_1'
                           1705 ;------------------------------------------------------------
                           1706 ;	radio/radio.c:626: radio_set_channel(uint8_t channel)
                           1707 ;	-----------------------------------------
                           1708 ;	 function radio_set_channel
                           1709 ;	-----------------------------------------
   047A                    1710 _radio_set_channel:
   047A E5 82              1711 	mov	a,dpl
   047C 90s01r00           1712 	mov	dptr,#_radio_set_channel_channel_1_1
   047F F0                 1713 	movx	@dptr,a
                           1714 ;	radio/radio.c:628: if (channel != settings.current_channel) {
   0480 78r0E              1715 	mov	r0,#(_settings + 0x0009)
   0482 E2                 1716 	movx	a,@r0
   0483 FF                 1717 	mov	r7,a
   0484 90s01r00           1718 	mov	dptr,#_radio_set_channel_channel_1_1
   0487 E0                 1719 	movx	a,@dptr
   0488 FE                 1720 	mov	r6,a
   0489 B5 07 01           1721 	cjne	a,ar7,00106$
   048C 22                 1722 	ret
   048D                    1723 00106$:
                           1724 ;	radio/radio.c:629: settings.current_channel = channel;
   048D 78r0E              1725 	mov	r0,#(_settings + 0x0009)
   048F EE                 1726 	mov	a,r6
   0490 F2                 1727 	movx	@r0,a
                           1728 ;	radio/radio.c:630: register_write(EZRADIOPRO_FREQUENCY_HOPPING_CHANNEL_SELECT, channel);
   0491 C0 06              1729 	push	ar6
   0493 75 82 79           1730 	mov	dpl,#0x79
   0496 12s08r1F           1731 	lcall	_register_write
   0499 15 81              1732 	dec	sp
                           1733 ;	radio/radio.c:631: preamble_detected = 0;
   049B C2*01              1734 	clr	_preamble_detected
   049D 22                 1735 	ret
                           1736 ;------------------------------------------------------------
                           1737 ;Allocation info for local variables in function 'radio_get_channel'
                           1738 ;------------------------------------------------------------
                           1739 ;	radio/radio.c:638: radio_get_channel(void)
                           1740 ;	-----------------------------------------
                           1741 ;	 function radio_get_channel
                           1742 ;	-----------------------------------------
   049E                    1743 _radio_get_channel:
                           1744 ;	radio/radio.c:640: return settings.current_channel;
   049E 78r0E              1745 	mov	r0,#(_settings + 0x0009)
   04A0 E2                 1746 	movx	a,@r0
   04A1 F5 82              1747 	mov	dpl,a
   04A3 22                 1748 	ret
                           1749 ;------------------------------------------------------------
                           1750 ;Allocation info for local variables in function 'radio_configure'
                           1751 ;------------------------------------------------------------
                           1752 ;	radio/radio.c:737: radio_configure(__pdata uint8_t air_rate)
                           1753 ;	-----------------------------------------
                           1754 ;	 function radio_configure
                           1755 ;	-----------------------------------------
   04A4                    1756 _radio_configure:
   04A4 AF 82              1757 	mov	r7,dpl
                           1758 ;	radio/radio.c:742: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0x00);
   04A6 C0 07              1759 	push	ar7
   04A8 E4                 1760 	clr	a
   04A9 C0 E0              1761 	push	acc
   04AB 75 82 05           1762 	mov	dpl,#0x05
   04AE 12s08r1F           1763 	lcall	_register_write
   04B1 15 81              1764 	dec	sp
                           1765 ;	radio/radio.c:743: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0x00);
   04B3 E4                 1766 	clr	a
   04B4 C0 E0              1767 	push	acc
   04B6 75 82 06           1768 	mov	dpl,#0x06
   04B9 12s08r1F           1769 	lcall	_register_write
   04BC 15 81              1770 	dec	sp
                           1771 ;	radio/radio.c:745: clear_status_registers();
   04BE 12s08rC9           1772 	lcall	_clear_status_registers
                           1773 ;	radio/radio.c:759: register_write(EZRADIOPRO_GPIO0_CONFIGURATION, 0x15);	// RX data (output)
   04C1 74 15              1774 	mov	a,#0x15
   04C3 C0 E0              1775 	push	acc
   04C5 75 82 0B           1776 	mov	dpl,#0x0B
   04C8 12s08r1F           1777 	lcall	_register_write
   04CB 15 81              1778 	dec	sp
                           1779 ;	radio/radio.c:760: register_write(EZRADIOPRO_GPIO1_CONFIGURATION, 0x12);	// RX data (output)
   04CD 74 12              1780 	mov	a,#0x12
   04CF C0 E0              1781 	push	acc
   04D1 75 82 0C           1782 	mov	dpl,#0x0C
   04D4 12s08r1F           1783 	lcall	_register_write
   04D7 15 81              1784 	dec	sp
                           1785 ;	radio/radio.c:762: radio_set_diversity(DIVERSITY_ENABLED);
   04D9 75 82 00           1786 	mov	dpl,#0x00
   04DC 12s0BrE9           1787 	lcall	_radio_set_diversity
                           1788 ;	radio/radio.c:774: register_write(EZRADIOPRO_CRYSTAL_OSCILLATOR_LOAD_CAPACITANCE, EZRADIOPRO_OSC_CAP_VALUE);
   04DF 74 B6              1789 	mov	a,#0xB6
   04E1 C0 E0              1790 	push	acc
   04E3 75 82 09           1791 	mov	dpl,#0x09
   04E6 12s08r1F           1792 	lcall	_register_write
   04E9 15 81              1793 	dec	sp
   04EB D0 07              1794 	pop	ar7
                           1795 ;	radio/radio.c:777: if (air_rate > 100) {
   04ED EF                 1796 	mov	a,r7
   04EE 24 9B              1797 	add	a,#0xff - 0x64
   04F0 50 10              1798 	jnc	00102$
                           1799 ;	radio/radio.c:778: register_write(EZRADIOPRO_CHARGEPUMP_CURRENT_TRIMMING_OVERRIDE, 0xC0);
   04F2 C0 07              1800 	push	ar7
   04F4 74 C0              1801 	mov	a,#0xC0
   04F6 C0 E0              1802 	push	acc
   04F8 75 82 58           1803 	mov	dpl,#0x58
   04FB 12s08r1F           1804 	lcall	_register_write
   04FE 15 81              1805 	dec	sp
   0500 D0 07              1806 	pop	ar7
   0502                    1807 00102$:
                           1808 ;	radio/radio.c:782: set_frequency_registers(settings.frequency);
   0502 78r05              1809 	mov	r0,#_settings
   0504 E2                 1810 	movx	a,@r0
   0505 FB                 1811 	mov	r3,a
   0506 08                 1812 	inc	r0
   0507 E2                 1813 	movx	a,@r0
   0508 FC                 1814 	mov	r4,a
   0509 08                 1815 	inc	r0
   050A E2                 1816 	movx	a,@r0
   050B FD                 1817 	mov	r5,a
   050C 08                 1818 	inc	r0
   050D E2                 1819 	movx	a,@r0
   050E 8B 82              1820 	mov	dpl,r3
   0510 8C 83              1821 	mov	dph,r4
   0512 8D F0              1822 	mov	b,r5
   0514 C0 07              1823 	push	ar7
   0516 12s09r95           1824 	lcall	_set_frequency_registers
                           1825 ;	radio/radio.c:783: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, settings.channel_spacing);
   0519 78r09              1826 	mov	r0,#(_settings + 0x0004)
   051B E2                 1827 	movx	a,@r0
   051C FB                 1828 	mov	r3,a
   051D 08                 1829 	inc	r0
   051E E2                 1830 	movx	a,@r0
   051F 08                 1831 	inc	r0
   0520 E2                 1832 	movx	a,@r0
   0521 08                 1833 	inc	r0
   0522 E2                 1834 	movx	a,@r0
   0523 C0 03              1835 	push	ar3
   0525 75 82 7A           1836 	mov	dpl,#0x7A
   0528 12s08r1F           1837 	lcall	_register_write
   052B 15 81              1838 	dec	sp
   052D D0 07              1839 	pop	ar7
                           1840 ;	radio/radio.c:785: if (feature_golay) {
   052F 30*00 29           1841 	jnb	_feature_golay,00104$
                           1842 ;	radio/radio.c:789: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
   0532 C0 07              1843 	push	ar7
   0534 74 88              1844 	mov	a,#0x88
   0536 C0 E0              1845 	push	acc
   0538 75 82 30           1846 	mov	dpl,#0x30
   053B 12s08r1F           1847 	lcall	_register_write
   053E 15 81              1848 	dec	sp
                           1849 ;	radio/radio.c:793: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_0BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
   0540 74 02              1850 	mov	a,#0x02
   0542 C0 E0              1851 	push	acc
   0544 75 82 33           1852 	mov	dpl,#0x33
   0547 12s08r1F           1853 	lcall	_register_write
   054A 15 81              1854 	dec	sp
                           1855 ;	radio/radio.c:796: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x00);
   054C E4                 1856 	clr	a
   054D C0 E0              1857 	push	acc
   054F 75 82 32           1858 	mov	dpl,#0x32
   0552 12s08r1F           1859 	lcall	_register_write
   0555 15 81              1860 	dec	sp
   0557 D0 07              1861 	pop	ar7
   0559 80 40              1862 	sjmp	00105$
   055B                    1863 00104$:
                           1864 ;	radio/radio.c:798: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
   055B C0 07              1865 	push	ar7
   055D 74 8D              1866 	mov	a,#0x8D
   055F C0 E0              1867 	push	acc
   0561 75 82 30           1868 	mov	dpl,#0x30
   0564 12s08r1F           1869 	lcall	_register_write
   0567 15 81              1870 	dec	sp
                           1871 ;	radio/radio.c:804: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_2BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
   0569 74 22              1872 	mov	a,#0x22
   056B C0 E0              1873 	push	acc
   056D 75 82 33           1874 	mov	dpl,#0x33
   0570 12s08r1F           1875 	lcall	_register_write
   0573 15 81              1876 	dec	sp
                           1877 ;	radio/radio.c:806: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x0C);
   0575 74 0C              1878 	mov	a,#0x0C
   0577 C0 E0              1879 	push	acc
   0579 75 82 32           1880 	mov	dpl,#0x32
   057C 12s08r1F           1881 	lcall	_register_write
   057F 15 81              1882 	dec	sp
                           1883 ;	radio/radio.c:807: register_write(EZRADIOPRO_HEADER_ENABLE_3, 0xFF);
   0581 74 FF              1884 	mov	a,#0xFF
   0583 C0 E0              1885 	push	acc
   0585 75 82 43           1886 	mov	dpl,#0x43
   0588 12s08r1F           1887 	lcall	_register_write
   058B 15 81              1888 	dec	sp
                           1889 ;	radio/radio.c:808: register_write(EZRADIOPRO_HEADER_ENABLE_2, 0xFF);
   058D 74 FF              1890 	mov	a,#0xFF
   058F C0 E0              1891 	push	acc
   0591 75 82 44           1892 	mov	dpl,#0x44
   0594 12s08r1F           1893 	lcall	_register_write
   0597 15 81              1894 	dec	sp
   0599 D0 07              1895 	pop	ar7
   059B                    1896 00105$:
                           1897 ;	radio/radio.c:813: register_write(EZRADIOPRO_TX_FIFO_CONTROL_1, TX_FIFO_THRESHOLD_HIGH);
   059B C0 07              1898 	push	ar7
   059D 74 3C              1899 	mov	a,#0x3C
   059F C0 E0              1900 	push	acc
   05A1 75 82 7C           1901 	mov	dpl,#0x7C
   05A4 12s08r1F           1902 	lcall	_register_write
   05A7 15 81              1903 	dec	sp
                           1904 ;	radio/radio.c:814: register_write(EZRADIOPRO_TX_FIFO_CONTROL_2, TX_FIFO_THRESHOLD_LOW);
   05A9 74 20              1905 	mov	a,#0x20
   05AB C0 E0              1906 	push	acc
   05AD 75 82 7D           1907 	mov	dpl,#0x7D
   05B0 12s08r1F           1908 	lcall	_register_write
   05B3 15 81              1909 	dec	sp
                           1910 ;	radio/radio.c:815: register_write(EZRADIOPRO_RX_FIFO_CONTROL, RX_FIFO_THRESHOLD_HIGH);
   05B5 74 32              1911 	mov	a,#0x32
   05B7 C0 E0              1912 	push	acc
   05B9 75 82 7E           1913 	mov	dpl,#0x7E
   05BC 12s08r1F           1914 	lcall	_register_write
   05BF 15 81              1915 	dec	sp
                           1916 ;	radio/radio.c:817: settings.preamble_length = 16;
   05C1 78r10              1917 	mov	r0,#(_settings + 0x000b)
   05C3 74 10              1918 	mov	a,#0x10
   05C5 F2                 1919 	movx	@r0,a
                           1920 ;	radio/radio.c:819: register_write(EZRADIOPRO_PREAMBLE_LENGTH, settings.preamble_length); // nibbles 
   05C6 78r10              1921 	mov	r0,#(_settings + 0x000b)
   05C8 E2                 1922 	movx	a,@r0
   05C9 FE                 1923 	mov	r6,a
   05CA C0 06              1924 	push	ar6
   05CC 75 82 34           1925 	mov	dpl,#0x34
   05CF 12s08r1F           1926 	lcall	_register_write
   05D2 15 81              1927 	dec	sp
                           1928 ;	radio/radio.c:820: register_write(EZRADIOPRO_PREAMBLE_DETECTION_CONTROL, 5<<3); // 5 nibbles
   05D4 74 28              1929 	mov	a,#0x28
   05D6 C0 E0              1930 	push	acc
   05D8 75 82 35           1931 	mov	dpl,#0x35
   05DB 12s08r1F           1932 	lcall	_register_write
   05DE 15 81              1933 	dec	sp
                           1934 ;	radio/radio.c:823: radio_set_transmit_power(0);
   05E0 75 82 00           1935 	mov	dpl,#0x00
   05E3 12s07r82           1936 	lcall	_radio_set_transmit_power
   05E6 D0 07              1937 	pop	ar7
                           1938 ;	radio/radio.c:826: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
   05E8 7E 00              1939 	mov	r6,#0x00
   05EA                    1940 00108$:
   05EA BE 0C 00           1941 	cjne	r6,#0x0C,00175$
   05ED                    1942 00175$:
   05ED 50 0D              1943 	jnc	00111$
                           1944 ;	radio/radio.c:827: if (air_data_rates[i] >= air_rate) break;
   05EF EE                 1945 	mov	a,r6
   05F0 90s00r1D           1946 	mov	dptr,#_air_data_rates
   05F3 93                 1947 	movc	a,@a+dptr
   05F4 FD                 1948 	mov	r5,a
   05F5 C3                 1949 	clr	c
   05F6 9F                 1950 	subb	a,r7
   05F7 50 03              1951 	jnc	00111$
                           1952 ;	radio/radio.c:826: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
   05F9 0E                 1953 	inc	r6
   05FA 80 EE              1954 	sjmp	00108$
   05FC                    1955 00111$:
                           1956 ;	radio/radio.c:829: rate_selection = i;
                           1957 ;	radio/radio.c:831: settings.air_data_rate = air_data_rates[rate_selection];
   05FC EE                 1958 	mov	a,r6
   05FD FF                 1959 	mov	r7,a
   05FE 90s00r1D           1960 	mov	dptr,#_air_data_rates
   0601 93                 1961 	movc	a,@a+dptr
   0602 FE                 1962 	mov	r6,a
   0603 78r0D              1963 	mov	r0,#(_settings + 0x0008)
   0605 F2                 1964 	movx	@r0,a
                           1965 ;	radio/radio.c:833: if (settings.air_data_rate >= 32) {
   0606 BE 20 00           1966 	cjne	r6,#0x20,00178$
   0609                    1967 00178$:
   0609 40 04              1968 	jc	00113$
                           1969 ;	radio/radio.c:834: control = 0x0D;
   060B 7E 0D              1970 	mov	r6,#0x0D
   060D 80 02              1971 	sjmp	00114$
   060F                    1972 00113$:
                           1973 ;	radio/radio.c:836: control = 0x2D;
   060F 7E 2D              1974 	mov	r6,#0x2D
   0611                    1975 00114$:
                           1976 ;	radio/radio.c:838: if (param_get(PARAM_MANCHESTER) && settings.air_data_rate <= 128) {
   0611 75 82 0D           1977 	mov	dpl,#0x0D
   0614 C0 07              1978 	push	ar7
   0616 C0 06              1979 	push	ar6
   0618 12s00r00           1980 	lcall	_param_get
   061B AA 82              1981 	mov	r2,dpl
   061D AB 83              1982 	mov	r3,dph
   061F AC F0              1983 	mov	r4,b
   0621 FD                 1984 	mov	r5,a
   0622 D0 06              1985 	pop	ar6
   0624 D0 07              1986 	pop	ar7
   0626 EA                 1987 	mov	a,r2
   0627 4B                 1988 	orl	a,r3
   0628 4C                 1989 	orl	a,r4
   0629 4D                 1990 	orl	a,r5
   062A 60 0B              1991 	jz	00116$
   062C 78r0D              1992 	mov	r0,#(_settings + 0x0008)
   062E E2                 1993 	movx	a,@r0
   062F FD                 1994 	mov  r5,a
   0630 24 7F              1995 	add	a,#0xff - 0x80
   0632 40 03              1996 	jc	00116$
                           1997 ;	radio/radio.c:840: control |= EZRADIOPRO_ENMANCH;
   0634 43 06 02           1998 	orl	ar6,#0x02
   0637                    1999 00116$:
                           2000 ;	radio/radio.c:842: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_1, control);
   0637 C0 07              2001 	push	ar7
   0639 C0 06              2002 	push	ar6
   063B 75 82 70           2003 	mov	dpl,#0x70
   063E 12s08r1F           2004 	lcall	_register_write
   0641 15 81              2005 	dec	sp
                           2006 ;	radio/radio.c:844: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_2, 0x23);
   0643 74 23              2007 	mov	a,#0x23
   0645 C0 E0              2008 	push	acc
   0647 75 82 71           2009 	mov	dpl,#0x71
   064A 12s08r1F           2010 	lcall	_register_write
   064D 15 81              2011 	dec	sp
                           2012 ;	radio/radio.c:848: register_write(EZRADIOPRO_AFC_LOOP_GEARSHIFT_OVERRIDE, 0x44);
   064F 74 44              2013 	mov	a,#0x44
   0651 C0 E0              2014 	push	acc
   0653 75 82 1D           2015 	mov	dpl,#0x1D
   0656 12s08r1F           2016 	lcall	_register_write
   0659 15 81              2017 	dec	sp
   065B D0 07              2018 	pop	ar7
                           2019 ;	radio/radio.c:852: if (settings.air_data_rate < 200) {
   065D 78r0D              2020 	mov	r0,#(_settings + 0x0008)
   065F E2                 2021 	movx	a,@r0
   0660 FE                 2022 	mov	r6,a
   0661 BE C8 00           2023 	cjne	r6,#0xC8,00182$
   0664                    2024 00182$:
   0664 50 12              2025 	jnc	00119$
                           2026 ;	radio/radio.c:853: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x0A);
   0666 C0 07              2027 	push	ar7
   0668 74 0A              2028 	mov	a,#0x0A
   066A C0 E0              2029 	push	acc
   066C 75 82 1E           2030 	mov	dpl,#0x1E
   066F 12s08r1F           2031 	lcall	_register_write
   0672 15 81              2032 	dec	sp
   0674 D0 07              2033 	pop	ar7
   0676 80 10              2034 	sjmp	00120$
   0678                    2035 00119$:
                           2036 ;	radio/radio.c:855: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x02);
   0678 C0 07              2037 	push	ar7
   067A 74 02              2038 	mov	a,#0x02
   067C C0 E0              2039 	push	acc
   067E 75 82 1E           2040 	mov	dpl,#0x1E
   0681 12s08r1F           2041 	lcall	_register_write
   0684 15 81              2042 	dec	sp
   0686 D0 07              2043 	pop	ar7
   0688                    2044 00120$:
                           2045 ;	radio/radio.c:859: if (g_board_frequency == FREQ_433) {
   0688 78r00              2046 	mov	r0,#_g_board_frequency
   068A E2                 2047 	movx	a,@r0
   068B B4 43 3B           2048 	cjne	a,#0x43,00128$
                           2049 ;	radio/radio.c:860: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   068E 7E 00              2050 	mov	r6,#0x00
   0690                    2051 00130$:
   0690 BE 0C 00           2052 	cjne	r6,#0x0C,00186$
   0693                    2053 00186$:
   0693 40 03              2054 	jc	00187$
   0695 02s07r80           2055 	ljmp	00129$
   0698                    2056 00187$:
                           2057 ;	radio/radio.c:862: reg_table_433[i][rate_selection]);
   0698 EE                 2058 	mov	a,r6
   0699 75 F0 0D           2059 	mov	b,#0x0D
   069C A4                 2060 	mul	ab
   069D 24r2A              2061 	add	a,#_reg_table_433
   069F FC                 2062 	mov	r4,a
   06A0 E4                 2063 	clr	a
   06A1 34s00              2064 	addc	a,#(_reg_table_433 >> 8)
   06A3 FD                 2065 	mov	r5,a
   06A4 EF                 2066 	mov	a,r7
   06A5 2C                 2067 	add	a,r4
   06A6 F5 82              2068 	mov	dpl,a
   06A8 E4                 2069 	clr	a
   06A9 3D                 2070 	addc	a,r5
   06AA F5 83              2071 	mov	dph,a
   06AC E4                 2072 	clr	a
   06AD 93                 2073 	movc	a,@a+dptr
   06AE FD                 2074 	mov	r5,a
                           2075 ;	radio/radio.c:861: register_write(reg_index[i],
   06AF EE                 2076 	mov	a,r6
   06B0 90s00r11           2077 	mov	dptr,#_reg_index
   06B3 93                 2078 	movc	a,@a+dptr
   06B4 FC                 2079 	mov	r4,a
   06B5 C0 07              2080 	push	ar7
   06B7 C0 06              2081 	push	ar6
   06B9 C0 05              2082 	push	ar5
   06BB 8C 82              2083 	mov	dpl,r4
   06BD 12s08r1F           2084 	lcall	_register_write
   06C0 15 81              2085 	dec	sp
   06C2 D0 06              2086 	pop	ar6
   06C4 D0 07              2087 	pop	ar7
                           2088 ;	radio/radio.c:860: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   06C6 0E                 2089 	inc	r6
   06C7 80 C7              2090 	sjmp	00130$
   06C9                    2091 00128$:
                           2092 ;	radio/radio.c:864: } else if (g_board_frequency == FREQ_470) {
   06C9 78r00              2093 	mov	r0,#_g_board_frequency
   06CB E2                 2094 	movx	a,@r0
   06CC B4 47 3B           2095 	cjne	a,#0x47,00125$
                           2096 ;	radio/radio.c:865: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   06CF 7E 00              2097 	mov	r6,#0x00
   06D1                    2098 00134$:
   06D1 BE 0C 00           2099 	cjne	r6,#0x0C,00190$
   06D4                    2100 00190$:
   06D4 40 03              2101 	jc	00191$
   06D6 02s07r80           2102 	ljmp	00129$
   06D9                    2103 00191$:
                           2104 ;	radio/radio.c:867: reg_table_470[i][rate_selection]);
   06D9 EE                 2105 	mov	a,r6
   06DA 75 F0 0D           2106 	mov	b,#0x0D
   06DD A4                 2107 	mul	ab
   06DE 24rC6              2108 	add	a,#_reg_table_470
   06E0 FC                 2109 	mov	r4,a
   06E1 E4                 2110 	clr	a
   06E2 34s00              2111 	addc	a,#(_reg_table_470 >> 8)
   06E4 FD                 2112 	mov	r5,a
   06E5 EF                 2113 	mov	a,r7
   06E6 2C                 2114 	add	a,r4
   06E7 F5 82              2115 	mov	dpl,a
   06E9 E4                 2116 	clr	a
   06EA 3D                 2117 	addc	a,r5
   06EB F5 83              2118 	mov	dph,a
   06ED E4                 2119 	clr	a
   06EE 93                 2120 	movc	a,@a+dptr
   06EF FD                 2121 	mov	r5,a
                           2122 ;	radio/radio.c:866: register_write(reg_index[i],
   06F0 EE                 2123 	mov	a,r6
   06F1 90s00r11           2124 	mov	dptr,#_reg_index
   06F4 93                 2125 	movc	a,@a+dptr
   06F5 FC                 2126 	mov	r4,a
   06F6 C0 07              2127 	push	ar7
   06F8 C0 06              2128 	push	ar6
   06FA C0 05              2129 	push	ar5
   06FC 8C 82              2130 	mov	dpl,r4
   06FE 12s08r1F           2131 	lcall	_register_write
   0701 15 81              2132 	dec	sp
   0703 D0 06              2133 	pop	ar6
   0705 D0 07              2134 	pop	ar7
                           2135 ;	radio/radio.c:865: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0707 0E                 2136 	inc	r6
   0708 80 C7              2137 	sjmp	00134$
   070A                    2138 00125$:
                           2139 ;	radio/radio.c:869: } else if (g_board_frequency == FREQ_868) {
   070A 78r00              2140 	mov	r0,#_g_board_frequency
   070C E2                 2141 	movx	a,@r0
   070D B4 86 38           2142 	cjne	a,#0x86,00167$
                           2143 ;	radio/radio.c:870: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0710 7E 00              2144 	mov	r6,#0x00
   0712                    2145 00138$:
   0712 BE 0C 00           2146 	cjne	r6,#0x0C,00194$
   0715                    2147 00194$:
   0715 50 69              2148 	jnc	00129$
                           2149 ;	radio/radio.c:872: reg_table_868[i][rate_selection]);
   0717 EE                 2150 	mov	a,r6
   0718 75 F0 0D           2151 	mov	b,#0x0D
   071B A4                 2152 	mul	ab
   071C 24r62              2153 	add	a,#_reg_table_868
   071E FC                 2154 	mov	r4,a
   071F E4                 2155 	clr	a
   0720 34s01              2156 	addc	a,#(_reg_table_868 >> 8)
   0722 FD                 2157 	mov	r5,a
   0723 EF                 2158 	mov	a,r7
   0724 2C                 2159 	add	a,r4
   0725 F5 82              2160 	mov	dpl,a
   0727 E4                 2161 	clr	a
   0728 3D                 2162 	addc	a,r5
   0729 F5 83              2163 	mov	dph,a
   072B E4                 2164 	clr	a
   072C 93                 2165 	movc	a,@a+dptr
   072D FD                 2166 	mov	r5,a
                           2167 ;	radio/radio.c:871: register_write(reg_index[i],
   072E EE                 2168 	mov	a,r6
   072F 90s00r11           2169 	mov	dptr,#_reg_index
   0732 93                 2170 	movc	a,@a+dptr
   0733 FC                 2171 	mov	r4,a
   0734 C0 07              2172 	push	ar7
   0736 C0 06              2173 	push	ar6
   0738 C0 05              2174 	push	ar5
   073A 8C 82              2175 	mov	dpl,r4
   073C 12s08r1F           2176 	lcall	_register_write
   073F 15 81              2177 	dec	sp
   0741 D0 06              2178 	pop	ar6
   0743 D0 07              2179 	pop	ar7
                           2180 ;	radio/radio.c:870: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0745 0E                 2181 	inc	r6
                           2182 ;	radio/radio.c:875: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0746 80 CA              2183 	sjmp	00138$
   0748                    2184 00167$:
   0748 7E 00              2185 	mov	r6,#0x00
   074A                    2186 00142$:
   074A BE 0C 00           2187 	cjne	r6,#0x0C,00196$
   074D                    2188 00196$:
   074D 50 31              2189 	jnc	00129$
                           2190 ;	radio/radio.c:877: reg_table_915[i][rate_selection]);
   074F EE                 2191 	mov	a,r6
   0750 75 F0 0D           2192 	mov	b,#0x0D
   0753 A4                 2193 	mul	ab
   0754 24rFE              2194 	add	a,#_reg_table_915
   0756 FC                 2195 	mov	r4,a
   0757 E4                 2196 	clr	a
   0758 34s01              2197 	addc	a,#(_reg_table_915 >> 8)
   075A FD                 2198 	mov	r5,a
   075B EF                 2199 	mov	a,r7
   075C 2C                 2200 	add	a,r4
   075D F5 82              2201 	mov	dpl,a
   075F E4                 2202 	clr	a
   0760 3D                 2203 	addc	a,r5
   0761 F5 83              2204 	mov	dph,a
   0763 E4                 2205 	clr	a
   0764 93                 2206 	movc	a,@a+dptr
   0765 FD                 2207 	mov	r5,a
                           2208 ;	radio/radio.c:876: register_write(reg_index[i],
   0766 EE                 2209 	mov	a,r6
   0767 90s00r11           2210 	mov	dptr,#_reg_index
   076A 93                 2211 	movc	a,@a+dptr
   076B FC                 2212 	mov	r4,a
   076C C0 07              2213 	push	ar7
   076E C0 06              2214 	push	ar6
   0770 C0 05              2215 	push	ar5
   0772 8C 82              2216 	mov	dpl,r4
   0774 12s08r1F           2217 	lcall	_register_write
   0777 15 81              2218 	dec	sp
   0779 D0 06              2219 	pop	ar6
   077B D0 07              2220 	pop	ar7
                           2221 ;	radio/radio.c:875: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   077D 0E                 2222 	inc	r6
   077E 80 CA              2223 	sjmp	00142$
   0780                    2224 00129$:
                           2225 ;	radio/radio.c:881: return true;
   0780 D3                 2226 	setb	c
   0781 22                 2227 	ret
                           2228 ;------------------------------------------------------------
                           2229 ;Allocation info for local variables in function 'radio_set_transmit_power'
                           2230 ;------------------------------------------------------------
                           2231 ;power                     Allocated with name '_radio_set_transmit_power_power_1_1'
                           2232 ;i                         Allocated with name '_radio_set_transmit_power_i_1_1'
                           2233 ;------------------------------------------------------------
                           2234 ;	radio/radio.c:902: radio_set_transmit_power(uint8_t power)
                           2235 ;	-----------------------------------------
                           2236 ;	 function radio_set_transmit_power
                           2237 ;	-----------------------------------------
   0782                    2238 _radio_set_transmit_power:
   0782 E5 82              2239 	mov	a,dpl
   0784 90s01r01           2240 	mov	dptr,#_radio_set_transmit_power_power_1_1
   0787 F0                 2241 	movx	@dptr,a
                           2242 ;	radio/radio.c:907: register_write(EZRADIOPRO_TX_POWER, RFD900_INT_TX_POW); // Set output power of Si1002 to 6 = +10dBm as a nominal level
   0788 74 06              2243 	mov	a,#0x06
   078A C0 E0              2244 	push	acc
   078C 75 82 6D           2245 	mov	dpl,#0x6D
   078F 12s08r1F           2246 	lcall	_register_write
   0792 15 81              2247 	dec	sp
                           2248 ;	radio/radio.c:908: i = calibration_get(power);
   0794 90s01r01           2249 	mov	dptr,#_radio_set_transmit_power_power_1_1
   0797 E0                 2250 	movx	a,@dptr
   0798 FF                 2251 	mov	r7,a
   0799 F5 82              2252 	mov	dpl,a
   079B C0 07              2253 	push	ar7
   079D 12s00r00           2254 	lcall	_calibration_get
   07A0 AE 82              2255 	mov	r6,dpl
   07A2 D0 07              2256 	pop	ar7
                           2257 ;	radio/radio.c:909: if (i != 0xFF)
   07A4 BE FF 02           2258 	cjne	r6,#0xFF,00107$
   07A7 80 07              2259 	sjmp	00102$
   07A9                    2260 00107$:
                           2261 ;	radio/radio.c:911: PCA0CPH0 = i;     // Set PWM for PA to correct duty cycle
   07A9 8E FC              2262 	mov	_PCA0CPH0,r6
                           2263 ;	radio/radio.c:912: settings.transmit_power = power;
   07AB 78r0F              2264 	mov	r0,#(_settings + 0x000a)
   07AD EF                 2265 	mov	a,r7
   07AE F2                 2266 	movx	@r0,a
   07AF 22                 2267 	ret
   07B0                    2268 00102$:
                           2269 ;	radio/radio.c:916: i = power / POWER_LEVEL_STEP;
   07B0 EF                 2270 	mov	a,r7
   07B1 C3                 2271 	clr	c
   07B2 13                 2272 	rrc	a
                           2273 ;	radio/radio.c:917: PCA0CPH0 = power_levels[i];     // Set PWM for PA to correct duty cycle
   07B3 FF                 2274 	mov	r7,a
   07B4 90s02r9A           2275 	mov	dptr,#_power_levels
   07B7 93                 2276 	movc	a,@a+dptr
   07B8 F5 FC              2277 	mov	_PCA0CPH0,a
                           2278 ;	radio/radio.c:918: settings.transmit_power = i * POWER_LEVEL_STEP;
   07BA EF                 2279 	mov	a,r7
   07BB 2F                 2280 	add	a,r7
   07BC FF                 2281 	mov	r7,a
   07BD 78r0F              2282 	mov	r0,#(_settings + 0x000a)
   07BF EF                 2283 	mov	a,r7
   07C0 F2                 2284 	movx	@r0,a
   07C1 22                 2285 	ret
                           2286 ;------------------------------------------------------------
                           2287 ;Allocation info for local variables in function 'radio_get_transmit_power'
                           2288 ;------------------------------------------------------------
                           2289 ;	radio/radio.c:935: radio_get_transmit_power(void)
                           2290 ;	-----------------------------------------
                           2291 ;	 function radio_get_transmit_power
                           2292 ;	-----------------------------------------
   07C2                    2293 _radio_get_transmit_power:
                           2294 ;	radio/radio.c:937: return settings.transmit_power;
   07C2 78r0F              2295 	mov	r0,#(_settings + 0x000a)
   07C4 E2                 2296 	movx	a,@r0
   07C5 F5 82              2297 	mov	dpl,a
   07C7 22                 2298 	ret
                           2299 ;------------------------------------------------------------
                           2300 ;Allocation info for local variables in function 'radio_set_network_id'
                           2301 ;------------------------------------------------------------
                           2302 ;id                        Allocated with name '_radio_set_network_id_id_1_1'
                           2303 ;------------------------------------------------------------
                           2304 ;	radio/radio.c:943: radio_set_network_id(uint16_t id)
                           2305 ;	-----------------------------------------
                           2306 ;	 function radio_set_network_id
                           2307 ;	-----------------------------------------
   07C8                    2308 _radio_set_network_id:
   07C8 AF 83              2309 	mov	r7,dph
   07CA E5 82              2310 	mov	a,dpl
   07CC 90s01r02           2311 	mov	dptr,#_radio_set_network_id_id_1_1
   07CF F0                 2312 	movx	@dptr,a
   07D0 A3                 2313 	inc	dptr
   07D1 EF                 2314 	mov	a,r7
   07D2 F0                 2315 	movx	@dptr,a
                           2316 ;	radio/radio.c:945: netid[0] = id&0xFF;
   07D3 90s01r02           2317 	mov	dptr,#_radio_set_network_id_id_1_1
   07D6 E0                 2318 	movx	a,@dptr
   07D7 FE                 2319 	mov	r6,a
   07D8 A3                 2320 	inc	dptr
   07D9 E0                 2321 	movx	a,@dptr
   07DA FF                 2322 	mov	r7,a
   07DB 8E 04              2323 	mov	ar4,r6
   07DD 78r03              2324 	mov	r0,#_netid
   07DF EC                 2325 	mov	a,r4
   07E0 F2                 2326 	movx	@r0,a
                           2327 ;	radio/radio.c:946: netid[1] = id>>8;
   07E1 8F 05              2328 	mov	ar5,r7
   07E3 78r04              2329 	mov	r0,#(_netid + 0x0001)
   07E5 ED                 2330 	mov	a,r5
   07E6 F2                 2331 	movx	@r0,a
                           2332 ;	radio/radio.c:947: if (!feature_golay) {
   07E7 20*00 34           2333 	jb	_feature_golay,00103$
                           2334 ;	radio/radio.c:950: register_write(EZRADIOPRO_TRANSMIT_HEADER_3, id >> 8);
   07EA C0 07              2335 	push	ar7
   07EC C0 06              2336 	push	ar6
   07EE C0 05              2337 	push	ar5
   07F0 C0 05              2338 	push	ar5
   07F2 75 82 3A           2339 	mov	dpl,#0x3A
   07F5 12s08r1F           2340 	lcall	_register_write
   07F8 15 81              2341 	dec	sp
   07FA D0 05              2342 	pop	ar5
   07FC D0 06              2343 	pop	ar6
   07FE D0 07              2344 	pop	ar7
                           2345 ;	radio/radio.c:951: register_write(EZRADIOPRO_TRANSMIT_HEADER_2, id & 0xFF);
   0800 C0 06              2346 	push	ar6
   0802 C0 05              2347 	push	ar5
   0804 C0 06              2348 	push	ar6
   0806 75 82 3B           2349 	mov	dpl,#0x3B
   0809 12s08r1F           2350 	lcall	_register_write
   080C 15 81              2351 	dec	sp
                           2352 ;	radio/radio.c:952: register_write(EZRADIOPRO_CHECK_HEADER_3, id >> 8);
   080E 75 82 3F           2353 	mov	dpl,#0x3F
   0811 12s08r1F           2354 	lcall	_register_write
   0814 15 81              2355 	dec	sp
                           2356 ;	radio/radio.c:953: register_write(EZRADIOPRO_CHECK_HEADER_2, id & 0xFF);
   0816 75 82 40           2357 	mov	dpl,#0x40
   0819 12s08r1F           2358 	lcall	_register_write
   081C 15 81              2359 	dec	sp
   081E                    2360 00103$:
   081E 22                 2361 	ret
                           2362 ;------------------------------------------------------------
                           2363 ;Allocation info for local variables in function 'register_write'
                           2364 ;------------------------------------------------------------
                           2365 ;value                     Allocated to stack - sp -2
                           2366 ;reg                       Allocated to registers r7 
                           2367 ;EX0_saved                 Allocated to registers b0 
                           2368 ;------------------------------------------------------------
                           2369 ;	radio/radio.c:964: register_write(uint8_t reg, uint8_t value) __reentrant
                           2370 ;	-----------------------------------------
                           2371 ;	 function register_write
                           2372 ;	-----------------------------------------
   081F                    2373 _register_write:
   081F AF 82              2374 	mov	r7,dpl
                           2375 ;	radio/radio.c:966: EX0_SAVE_DISABLE;
   0821 A2 A8              2376 	mov	c,_EX0
   0823 92*00              2377 	mov	b0,c
   0825 C2 A8              2378 	clr	_EX0
                           2379 ;	radio/radio.c:968: RADIO_PAGE();
   0827 75 A7 00           2380 	mov	_SFRPAGE,#0x00
                           2381 ;	radio/radio.c:969: NSS1 = 0;                           // drive NSS low
   082A C2 94              2382 	clr	_NSS1
                           2383 ;	radio/radio.c:970: SPIF1 = 0;                          // clear SPIF
   082C C2 B7              2384 	clr	_SPIF1
                           2385 ;	radio/radio.c:971: SPI1DAT = (reg | 0x80);             // write reg address
   082E 74 80              2386 	mov	a,#0x80
   0830 4F                 2387 	orl	a,r7
   0831 F5 86              2388 	mov	_SPI1DAT,a
                           2389 ;	radio/radio.c:972: while (!TXBMT1);                    // wait on TXBMT
   0833                    2390 00101$:
   0833 30 B1 FD           2391 	jnb	_TXBMT1,00101$
                           2392 ;	radio/radio.c:973: SPI1DAT = value;                    // write value
   0836 A8 81              2393 	mov	r0,sp
   0838 18                 2394 	dec	r0
   0839 18                 2395 	dec	r0
   083A 86 86              2396 	mov	_SPI1DAT,@r0
                           2397 ;	radio/radio.c:974: while (!TXBMT1);                    // wait on TXBMT
   083C                    2398 00104$:
   083C 30 B1 FD           2399 	jnb	_TXBMT1,00104$
                           2400 ;	radio/radio.c:975: while ((SPI1CFG & 0x80) == 0x80);   // wait on SPIBSY
   083F                    2401 00107$:
   083F 74 80              2402 	mov	a,#0x80
   0841 55 84              2403 	anl	a,_SPI1CFG
   0843 FF                 2404 	mov	r7,a
   0844 BF 80 02           2405 	cjne	r7,#0x80,00119$
   0847 80 F6              2406 	sjmp	00107$
   0849                    2407 00119$:
                           2408 ;	radio/radio.c:977: SPIF1 = 0;                          // leave SPIF cleared
   0849 C2 B7              2409 	clr	_SPIF1
                           2410 ;	radio/radio.c:978: NSS1 = 1;                           // drive NSS high
   084B D2 94              2411 	setb	_NSS1
                           2412 ;	radio/radio.c:979: SFRPAGE = LEGACY_PAGE;
   084D 75 A7 00           2413 	mov	_SFRPAGE,#0x00
                           2414 ;	radio/radio.c:981: EX0_RESTORE;
   0850 A2*00              2415 	mov	c,b0
   0852 92 A8              2416 	mov	_EX0,c
   0854 22                 2417 	ret
                           2418 ;------------------------------------------------------------
                           2419 ;Allocation info for local variables in function 'register_read'
                           2420 ;------------------------------------------------------------
                           2421 ;reg                       Allocated to registers r7 
                           2422 ;value                     Allocated to registers r7 
                           2423 ;EX0_saved                 Allocated to registers b0 
                           2424 ;------------------------------------------------------------
                           2425 ;	radio/radio.c:991: register_read(uint8_t reg) __reentrant
                           2426 ;	-----------------------------------------
                           2427 ;	 function register_read
                           2428 ;	-----------------------------------------
   0855                    2429 _register_read:
   0855 AF 82              2430 	mov	r7,dpl
                           2431 ;	radio/radio.c:994: EX0_SAVE_DISABLE;
   0857 A2 A8              2432 	mov	c,_EX0
   0859 92*00              2433 	mov	b0,c
   085B C2 A8              2434 	clr	_EX0
                           2435 ;	radio/radio.c:996: RADIO_PAGE();
   085D 75 A7 00           2436 	mov	_SFRPAGE,#0x00
                           2437 ;	radio/radio.c:997: NSS1 = 0;				// dsrive NSS low
   0860 C2 94              2438 	clr	_NSS1
                           2439 ;	radio/radio.c:998: SPIF1 = 0;				// clear SPIF
   0862 C2 B7              2440 	clr	_SPIF1
                           2441 ;	radio/radio.c:999: SPI1DAT = (reg);			// write reg address
   0864 8F 86              2442 	mov	_SPI1DAT,r7
                           2443 ;	radio/radio.c:1000: while (!TXBMT1);			// wait on TXBMT
   0866                    2444 00101$:
   0866 30 B1 FD           2445 	jnb	_TXBMT1,00101$
                           2446 ;	radio/radio.c:1001: SPI1DAT = 0x00;				// write anything
   0869 75 86 00           2447 	mov	_SPI1DAT,#0x00
                           2448 ;	radio/radio.c:1002: while (!TXBMT1);			// wait on TXBMT
   086C                    2449 00104$:
   086C 30 B1 FD           2450 	jnb	_TXBMT1,00104$
                           2451 ;	radio/radio.c:1003: while ((SPI1CFG & 0x80) == 0x80);	// wait on SPIBSY
   086F                    2452 00107$:
   086F 74 80              2453 	mov	a,#0x80
   0871 55 84              2454 	anl	a,_SPI1CFG
   0873 FF                 2455 	mov	r7,a
   0874 BF 80 02           2456 	cjne	r7,#0x80,00119$
   0877 80 F6              2457 	sjmp	00107$
   0879                    2458 00119$:
                           2459 ;	radio/radio.c:1004: value = SPI1DAT;			// read value
   0879 AF 86              2460 	mov	r7,_SPI1DAT
                           2461 ;	radio/radio.c:1005: SPIF1 = 0;				// leave SPIF cleared
   087B C2 B7              2462 	clr	_SPIF1
                           2463 ;	radio/radio.c:1006: NSS1 = 1;				// drive NSS high
   087D D2 94              2464 	setb	_NSS1
                           2465 ;	radio/radio.c:1007: SFRPAGE = LEGACY_PAGE;
   087F 75 A7 00           2466 	mov	_SFRPAGE,#0x00
                           2467 ;	radio/radio.c:1009: EX0_RESTORE;
   0882 A2*00              2468 	mov	c,b0
   0884 92 A8              2469 	mov	_EX0,c
                           2470 ;	radio/radio.c:1011: return value;
   0886 8F 82              2471 	mov	dpl,r7
   0888 22                 2472 	ret
                           2473 ;------------------------------------------------------------
                           2474 ;Allocation info for local variables in function 'read_receive_fifo'
                           2475 ;------------------------------------------------------------
                           2476 ;buf                       Allocated to stack - sp -3
                           2477 ;n                         Allocated to registers r7 
                           2478 ;------------------------------------------------------------
                           2479 ;	radio/radio.c:1018: read_receive_fifo(register uint8_t n, __xdata uint8_t * buf) __reentrant
                           2480 ;	-----------------------------------------
                           2481 ;	 function read_receive_fifo
                           2482 ;	-----------------------------------------
   0889                    2483 _read_receive_fifo:
   0889 AF 82              2484 	mov	r7,dpl
                           2485 ;	radio/radio.c:1020: RADIO_PAGE();
   088B 75 A7 00           2486 	mov	_SFRPAGE,#0x00
                           2487 ;	radio/radio.c:1021: NSS1 = 0;				// drive NSS low
   088E C2 94              2488 	clr	_NSS1
                           2489 ;	radio/radio.c:1022: SPIF1 = 0;				// clear SPIF
   0890 C2 B7              2490 	clr	_SPIF1
                           2491 ;	radio/radio.c:1023: SPI1DAT = EZRADIOPRO_FIFO_ACCESS;
   0892 75 86 7F           2492 	mov	_SPI1DAT,#0x7F
                           2493 ;	radio/radio.c:1024: while (!SPIF1);				// wait on SPIF
   0895                    2494 00101$:
   0895 30 B7 FD           2495 	jnb	_SPIF1,00101$
                           2496 ;	radio/radio.c:1025: ACC = SPI1DAT;				// discard first byte
   0898 85 86 E0           2497 	mov	_ACC,_SPI1DAT
                           2498 ;	radio/radio.c:1027: while (n--) {
   089B E5 81              2499 	mov	a,sp
   089D 24 FD              2500 	add	a,#0xfd
   089F F8                 2501 	mov	r0,a
   08A0 86 05              2502 	mov	ar5,@r0
   08A2 08                 2503 	inc	r0
   08A3 86 06              2504 	mov	ar6,@r0
   08A5                    2505 00107$:
   08A5 8F 04              2506 	mov	ar4,r7
   08A7 1F                 2507 	dec	r7
   08A8 EC                 2508 	mov	a,r4
   08A9 60 16              2509 	jz	00109$
                           2510 ;	radio/radio.c:1028: SPIF1 = 0;			// clear SPIF
   08AB C2 B7              2511 	clr	_SPIF1
                           2512 ;	radio/radio.c:1029: SPI1DAT = 0x00;			// write anything
   08AD 75 86 00           2513 	mov	_SPI1DAT,#0x00
                           2514 ;	radio/radio.c:1030: while (!SPIF1);			// wait on SPIF
   08B0                    2515 00104$:
   08B0 30 B7 FD           2516 	jnb	_SPIF1,00104$
                           2517 ;	radio/radio.c:1031: *buf++ = SPI1DAT;		// copy to buffer
   08B3 8D 82              2518 	mov	dpl,r5
   08B5 8E 83              2519 	mov	dph,r6
   08B7 E5 86              2520 	mov	a,_SPI1DAT
   08B9 F0                 2521 	movx	@dptr,a
   08BA A3                 2522 	inc	dptr
   08BB AD 82              2523 	mov	r5,dpl
   08BD AE 83              2524 	mov	r6,dph
   08BF 80 E4              2525 	sjmp	00107$
   08C1                    2526 00109$:
                           2527 ;	radio/radio.c:1034: SPIF1 = 0;				// leave SPIF cleared
   08C1 C2 B7              2528 	clr	_SPIF1
                           2529 ;	radio/radio.c:1035: NSS1 = 1;				// drive NSS high
   08C3 D2 94              2530 	setb	_NSS1
                           2531 ;	radio/radio.c:1036: SFRPAGE = LEGACY_PAGE;
   08C5 75 A7 00           2532 	mov	_SFRPAGE,#0x00
   08C8 22                 2533 	ret
                           2534 ;------------------------------------------------------------
                           2535 ;Allocation info for local variables in function 'clear_status_registers'
                           2536 ;------------------------------------------------------------
                           2537 ;	radio/radio.c:1042: clear_status_registers(void)
                           2538 ;	-----------------------------------------
                           2539 ;	 function clear_status_registers
                           2540 ;	-----------------------------------------
   08C9                    2541 _clear_status_registers:
                           2542 ;	radio/radio.c:1044: register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   08C9 75 82 03           2543 	mov	dpl,#0x03
   08CC 12s08r55           2544 	lcall	_register_read
                           2545 ;	radio/radio.c:1045: register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   08CF 75 82 04           2546 	mov	dpl,#0x04
   08D2 02s08r55           2547 	ljmp	_register_read
                           2548 ;------------------------------------------------------------
                           2549 ;Allocation info for local variables in function 'scale_uint32'
                           2550 ;------------------------------------------------------------
                           2551 ;	radio/radio.c:1055: scale_uint32(__pdata uint32_t value, __pdata uint32_t scale)
                           2552 ;	-----------------------------------------
                           2553 ;	 function scale_uint32
                           2554 ;	-----------------------------------------
   08D5                    2555 _scale_uint32:
   08D5 AF 82              2556 	mov	r7,dpl
   08D7 AE 83              2557 	mov	r6,dph
   08D9 AD F0              2558 	mov	r5,b
   08DB FC                 2559 	mov	r4,a
   08DC 78r21              2560 	mov	r0,#_scale_uint32_value_1_1
   08DE EF                 2561 	mov	a,r7
   08DF F2                 2562 	movx	@r0,a
   08E0 08                 2563 	inc	r0
   08E1 EE                 2564 	mov	a,r6
   08E2 F2                 2565 	movx	@r0,a
   08E3 08                 2566 	inc	r0
   08E4 ED                 2567 	mov	a,r5
   08E5 F2                 2568 	movx	@r0,a
   08E6 08                 2569 	inc	r0
   08E7 EC                 2570 	mov	a,r4
   08E8 F2                 2571 	movx	@r0,a
                           2572 ;	radio/radio.c:1057: return (value + (scale >> 1)) / scale;
   08E9 78r20              2573 	mov	r0,#(_scale_uint32_PARM_2 + 3)
   08EB E2                 2574 	movx	a,@r0
   08EC C3                 2575 	clr	c
   08ED 13                 2576 	rrc	a
   08EE FF                 2577 	mov	r7,a
   08EF 18                 2578 	dec	r0
   08F0 E2                 2579 	movx	a,@r0
   08F1 13                 2580 	rrc	a
   08F2 FE                 2581 	mov	r6,a
   08F3 18                 2582 	dec	r0
   08F4 E2                 2583 	movx	a,@r0
   08F5 13                 2584 	rrc	a
   08F6 FB                 2585 	mov	r3,a
   08F7 18                 2586 	dec	r0
   08F8 E2                 2587 	movx	a,@r0
   08F9 13                 2588 	rrc	a
   08FA FA                 2589 	mov	r2,a
   08FB 78r21              2590 	mov	r0,#_scale_uint32_value_1_1
   08FD E2                 2591 	movx	a,@r0
   08FE 2A                 2592 	add	a,r2
   08FF FA                 2593 	mov	r2,a
   0900 08                 2594 	inc	r0
   0901 E2                 2595 	movx	a,@r0
   0902 3B                 2596 	addc	a,r3
   0903 FB                 2597 	mov	r3,a
   0904 08                 2598 	inc	r0
   0905 E2                 2599 	movx	a,@r0
   0906 3E                 2600 	addc	a,r6
   0907 FE                 2601 	mov	r6,a
   0908 08                 2602 	inc	r0
   0909 E2                 2603 	movx	a,@r0
   090A 3F                 2604 	addc	a,r7
   090B FF                 2605 	mov	r7,a
   090C 78r1D              2606 	mov	r0,#_scale_uint32_PARM_2
   090E 90s00r00           2607 	mov	dptr,#__divulong_PARM_2
   0911 E2                 2608 	movx	a,@r0
   0912 F0                 2609 	movx	@dptr,a
   0913 08                 2610 	inc	r0
   0914 E2                 2611 	movx	a,@r0
   0915 A3                 2612 	inc	dptr
   0916 F0                 2613 	movx	@dptr,a
   0917 08                 2614 	inc	r0
   0918 E2                 2615 	movx	a,@r0
   0919 A3                 2616 	inc	dptr
   091A F0                 2617 	movx	@dptr,a
   091B 08                 2618 	inc	r0
   091C E2                 2619 	movx	a,@r0
   091D A3                 2620 	inc	dptr
   091E F0                 2621 	movx	@dptr,a
   091F 8A 82              2622 	mov	dpl,r2
   0921 8B 83              2623 	mov	dph,r3
   0923 8E F0              2624 	mov	b,r6
   0925 EF                 2625 	mov	a,r7
   0926 02s00r00           2626 	ljmp	__divulong
                           2627 ;------------------------------------------------------------
                           2628 ;Allocation info for local variables in function 'software_reset'
                           2629 ;------------------------------------------------------------
                           2630 ;status                    Allocated with name '_software_reset_status_1_1'
                           2631 ;------------------------------------------------------------
                           2632 ;	radio/radio.c:1065: software_reset(void)
                           2633 ;	-----------------------------------------
                           2634 ;	 function software_reset
                           2635 ;	-----------------------------------------
   0929                    2636 _software_reset:
                           2637 ;	radio/radio.c:1070: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   0929 E4                 2638 	clr	a
   092A C0 E0              2639 	push	acc
   092C 75 82 05           2640 	mov	dpl,#0x05
   092F 12s08r1F           2641 	lcall	_register_write
   0932 15 81              2642 	dec	sp
                           2643 ;	radio/radio.c:1071: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   0934 E4                 2644 	clr	a
   0935 C0 E0              2645 	push	acc
   0937 75 82 06           2646 	mov	dpl,#0x06
   093A 12s08r1F           2647 	lcall	_register_write
   093D 15 81              2648 	dec	sp
                           2649 ;	radio/radio.c:1073: clear_status_registers();
   093F 12s08rC9           2650 	lcall	_clear_status_registers
                           2651 ;	radio/radio.c:1076: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, (EZRADIOPRO_SWRES | EZRADIOPRO_XTON));
   0942 74 81              2652 	mov	a,#0x81
   0944 C0 E0              2653 	push	acc
   0946 75 82 07           2654 	mov	dpl,#0x07
   0949 12s08r1F           2655 	lcall	_register_write
   094C 15 81              2656 	dec	sp
                           2657 ;	radio/radio.c:1079: delay_set(2);
   094E 90 00 02           2658 	mov	dptr,#0x0002
   0951 12s00r00           2659 	lcall	_delay_set
                           2660 ;	radio/radio.c:1080: while (IRQ) {
   0954                    2661 00103$:
   0954 30 87 07           2662 	jnb	_IRQ,00105$
                           2663 ;	radio/radio.c:1081: if (delay_expired()) {
   0957 12s00r00           2664 	lcall	_delay_expired
   095A 50 F8              2665 	jnc	00103$
                           2666 ;	radio/radio.c:1082: return false;
   095C C3                 2667 	clr	c
   095D 22                 2668 	ret
   095E                    2669 00105$:
                           2670 ;	radio/radio.c:1087: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   095E E4                 2671 	clr	a
   095F C0 E0              2672 	push	acc
   0961 75 82 05           2673 	mov	dpl,#0x05
   0964 12s08r1F           2674 	lcall	_register_write
   0967 15 81              2675 	dec	sp
                           2676 ;	radio/radio.c:1088: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
   0969 74 02              2677 	mov	a,#0x02
   096B C0 E0              2678 	push	acc
   096D 75 82 06           2679 	mov	dpl,#0x06
   0970 12s08r1F           2680 	lcall	_register_write
   0973 15 81              2681 	dec	sp
                           2682 ;	radio/radio.c:1090: delay_set(20);
   0975 90 00 14           2683 	mov	dptr,#0x0014
   0978 12s00r00           2684 	lcall	_delay_set
                           2685 ;	radio/radio.c:1091: while (!delay_expired()) {
   097B                    2686 00108$:
   097B 12s00r00           2687 	lcall	_delay_expired
   097E 40 13              2688 	jc	00110$
                           2689 ;	radio/radio.c:1092: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0980 75 82 03           2690 	mov	dpl,#0x03
   0983 12s08r55           2691 	lcall	_register_read
                           2692 ;	radio/radio.c:1093: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0986 75 82 04           2693 	mov	dpl,#0x04
   0989 12s08r55           2694 	lcall	_register_read
   098C E5 82              2695 	mov	a,dpl
                           2696 ;	radio/radio.c:1094: if (status & EZRADIOPRO_ICHIPRDY) {
   098E 30 E1 EA           2697 	jnb	acc.1,00108$
                           2698 ;	radio/radio.c:1095: return true;
   0991 D3                 2699 	setb	c
   0992 22                 2700 	ret
   0993                    2701 00110$:
                           2702 ;	radio/radio.c:1098: return false;
   0993 C3                 2703 	clr	c
   0994 22                 2704 	ret
                           2705 ;------------------------------------------------------------
                           2706 ;Allocation info for local variables in function 'set_frequency_registers'
                           2707 ;------------------------------------------------------------
                           2708 ;band                      Allocated with name '_set_frequency_registers_band_1_1'
                           2709 ;carrier                   Allocated with name '_set_frequency_registers_carrier_1_1'
                           2710 ;------------------------------------------------------------
                           2711 ;	radio/radio.c:1105: set_frequency_registers(__pdata uint32_t frequency)
                           2712 ;	-----------------------------------------
                           2713 ;	 function set_frequency_registers
                           2714 ;	-----------------------------------------
   0995                    2715 _set_frequency_registers:
   0995 AF 82              2716 	mov	r7,dpl
   0997 AE 83              2717 	mov	r6,dph
   0999 AD F0              2718 	mov	r5,b
   099B FC                 2719 	mov	r4,a
   099C 78r25              2720 	mov	r0,#_set_frequency_registers_frequency_1_1
   099E EF                 2721 	mov	a,r7
   099F F2                 2722 	movx	@r0,a
   09A0 08                 2723 	inc	r0
   09A1 EE                 2724 	mov	a,r6
   09A2 F2                 2725 	movx	@r0,a
   09A3 08                 2726 	inc	r0
   09A4 ED                 2727 	mov	a,r5
   09A5 F2                 2728 	movx	@r0,a
   09A6 08                 2729 	inc	r0
   09A7 EC                 2730 	mov	a,r4
   09A8 F2                 2731 	movx	@r0,a
                           2732 ;	radio/radio.c:1110: if (frequency > 480000000UL) {
   09A9 78r25              2733 	mov	r0,#_set_frequency_registers_frequency_1_1
   09AB C3                 2734 	clr	c
   09AC E2                 2735 	movx	a,@r0
   09AD F5 F0              2736 	mov	b,a
   09AF E4                 2737 	clr	a
   09B0 95 F0              2738 	subb	a,b
   09B2 08                 2739 	inc	r0
   09B3 E2                 2740 	movx	a,@r0
   09B4 F5 F0              2741 	mov	b,a
   09B6 74 38              2742 	mov	a,#0x38
   09B8 95 F0              2743 	subb	a,b
   09BA 08                 2744 	inc	r0
   09BB E2                 2745 	movx	a,@r0
   09BC F5 F0              2746 	mov	b,a
   09BE 74 9C              2747 	mov	a,#0x9C
   09C0 95 F0              2748 	subb	a,b
   09C2 08                 2749 	inc	r0
   09C3 E2                 2750 	movx	a,@r0
   09C4 F5 F0              2751 	mov	b,a
   09C6 74 1C              2752 	mov	a,#0x1C
   09C8 95 F0              2753 	subb	a,b
   09CA 40 03              2754 	jc	00107$
   09CC 02s0Ar89           2755 	ljmp	00102$
   09CF                    2756 00107$:
                           2757 ;	radio/radio.c:1111: frequency -= 480000000UL;
   09CF 78r26              2758 	mov	r0,#(_set_frequency_registers_frequency_1_1 + 1)
   09D1 E2                 2759 	movx	a,@r0
   09D2 24 C8              2760 	add	a,#0xC8
   09D4 F2                 2761 	movx	@r0,a
   09D5 08                 2762 	inc	r0
   09D6 E2                 2763 	movx	a,@r0
   09D7 34 63              2764 	addc	a,#0x63
   09D9 F2                 2765 	movx	@r0,a
   09DA 08                 2766 	inc	r0
   09DB E2                 2767 	movx	a,@r0
   09DC 34 E3              2768 	addc	a,#0xE3
   09DE F2                 2769 	movx	@r0,a
                           2770 ;	radio/radio.c:1112: band  = frequency / 20000000UL;
   09DF 90s00r00           2771 	mov	dptr,#__divulong_PARM_2
   09E2 E4                 2772 	clr	a
   09E3 F0                 2773 	movx	@dptr,a
   09E4 A3                 2774 	inc	dptr
   09E5 74 2D              2775 	mov	a,#0x2D
   09E7 F0                 2776 	movx	@dptr,a
   09E8 A3                 2777 	inc	dptr
   09E9 74 31              2778 	mov	a,#0x31
   09EB F0                 2779 	movx	@dptr,a
   09EC A3                 2780 	inc	dptr
   09ED 74 01              2781 	mov	a,#0x01
   09EF F0                 2782 	movx	@dptr,a
   09F0 78r25              2783 	mov	r0,#_set_frequency_registers_frequency_1_1
   09F2 E2                 2784 	movx	a,@r0
   09F3 F5 82              2785 	mov	dpl,a
   09F5 08                 2786 	inc	r0
   09F6 E2                 2787 	movx	a,@r0
   09F7 F5 83              2788 	mov	dph,a
   09F9 08                 2789 	inc	r0
   09FA E2                 2790 	movx	a,@r0
   09FB F5 F0              2791 	mov	b,a
   09FD 08                 2792 	inc	r0
   09FE E2                 2793 	movx	a,@r0
   09FF 12s00r00           2794 	lcall	__divulong
   0A02 AA 82              2795 	mov	r2,dpl
   0A04 90s01r04           2796 	mov	dptr,#_set_frequency_registers_band_1_1
   0A07 EA                 2797 	mov	a,r2
   0A08 F0                 2798 	movx	@dptr,a
                           2799 ;	radio/radio.c:1113: frequency -= (uint32_t)band * 20000000UL;
   0A09 90s00r00           2800 	mov	dptr,#__mullong_PARM_2
   0A0C EA                 2801 	mov	a,r2
   0A0D F0                 2802 	movx	@dptr,a
   0A0E A3                 2803 	inc	dptr
   0A0F E4                 2804 	clr	a
   0A10 F0                 2805 	movx	@dptr,a
   0A11 A3                 2806 	inc	dptr
   0A12 F0                 2807 	movx	@dptr,a
   0A13 A3                 2808 	inc	dptr
   0A14 F0                 2809 	movx	@dptr,a
   0A15 90 2D 00           2810 	mov	dptr,#0x2D00
   0A18 75 F0 31           2811 	mov	b,#0x31
   0A1B 74 01              2812 	mov	a,#0x01
   0A1D 12s00r00           2813 	lcall	__mullong
   0A20 AC 82              2814 	mov	r4,dpl
   0A22 AD 83              2815 	mov	r5,dph
   0A24 AE F0              2816 	mov	r6,b
   0A26 FF                 2817 	mov	r7,a
   0A27 78r25              2818 	mov	r0,#_set_frequency_registers_frequency_1_1
   0A29 E2                 2819 	movx	a,@r0
   0A2A C3                 2820 	clr	c
   0A2B 9C                 2821 	subb	a,r4
   0A2C F2                 2822 	movx	@r0,a
   0A2D 08                 2823 	inc	r0
   0A2E E2                 2824 	movx	a,@r0
   0A2F 9D                 2825 	subb	a,r5
   0A30 F2                 2826 	movx	@r0,a
   0A31 08                 2827 	inc	r0
   0A32 E2                 2828 	movx	a,@r0
   0A33 9E                 2829 	subb	a,r6
   0A34 F2                 2830 	movx	@r0,a
   0A35 08                 2831 	inc	r0
   0A36 E2                 2832 	movx	a,@r0
   0A37 9F                 2833 	subb	a,r7
   0A38 F2                 2834 	movx	@r0,a
                           2835 ;	radio/radio.c:1114: frequency  = scale_uint32(frequency, 625);
   0A39 78r1D              2836 	mov	r0,#_scale_uint32_PARM_2
   0A3B 74 71              2837 	mov	a,#0x71
   0A3D F2                 2838 	movx	@r0,a
   0A3E 08                 2839 	inc	r0
   0A3F 74 02              2840 	mov	a,#0x02
   0A41 F2                 2841 	movx	@r0,a
   0A42 08                 2842 	inc	r0
   0A43 E4                 2843 	clr	a
   0A44 F2                 2844 	movx	@r0,a
   0A45 08                 2845 	inc	r0
   0A46 F2                 2846 	movx	@r0,a
   0A47 78r25              2847 	mov	r0,#_set_frequency_registers_frequency_1_1
   0A49 E2                 2848 	movx	a,@r0
   0A4A F5 82              2849 	mov	dpl,a
   0A4C 08                 2850 	inc	r0
   0A4D E2                 2851 	movx	a,@r0
   0A4E F5 83              2852 	mov	dph,a
   0A50 08                 2853 	inc	r0
   0A51 E2                 2854 	movx	a,@r0
   0A52 F5 F0              2855 	mov	b,a
   0A54 08                 2856 	inc	r0
   0A55 E2                 2857 	movx	a,@r0
   0A56 12s08rD5           2858 	lcall	_scale_uint32
   0A59 78r25              2859 	mov	r0,#_set_frequency_registers_frequency_1_1
   0A5B C0 E0              2860 	push	acc
   0A5D E5 82              2861 	mov	a,dpl
   0A5F F2                 2862 	movx	@r0,a
   0A60 08                 2863 	inc	r0
   0A61 E5 83              2864 	mov	a,dph
   0A63 F2                 2865 	movx	@r0,a
   0A64 08                 2866 	inc	r0
   0A65 E5 F0              2867 	mov	a,b
   0A67 F2                 2868 	movx	@r0,a
   0A68 D0 E0              2869 	pop	acc
   0A6A 08                 2870 	inc	r0
   0A6B F2                 2871 	movx	@r0,a
                           2872 ;	radio/radio.c:1115: frequency <<= 1;
   0A6C 78r25              2873 	mov	r0,#_set_frequency_registers_frequency_1_1
   0A6E E2                 2874 	movx	a,@r0
   0A6F 25 E0              2875 	add	a,acc
   0A71 F2                 2876 	movx	@r0,a
   0A72 08                 2877 	inc	r0
   0A73 E2                 2878 	movx	a,@r0
   0A74 33                 2879 	rlc	a
   0A75 F2                 2880 	movx	@r0,a
   0A76 08                 2881 	inc	r0
   0A77 E2                 2882 	movx	a,@r0
   0A78 33                 2883 	rlc	a
   0A79 F2                 2884 	movx	@r0,a
   0A7A 08                 2885 	inc	r0
   0A7B E2                 2886 	movx	a,@r0
   0A7C 33                 2887 	rlc	a
   0A7D F2                 2888 	movx	@r0,a
                           2889 ;	radio/radio.c:1116: band |= EZRADIOPRO_HBSEL;
   0A7E 90s01r04           2890 	mov	dptr,#_set_frequency_registers_band_1_1
   0A81 E0                 2891 	movx	a,@dptr
   0A82 FF                 2892 	mov	r7,a
   0A83 44 20              2893 	orl	a,#0x20
   0A85 F0                 2894 	movx	@dptr,a
   0A86 02s0Br4A           2895 	ljmp	00103$
   0A89                    2896 00102$:
                           2897 ;	radio/radio.c:1118: frequency -= 240000000UL;
   0A89 78r26              2898 	mov	r0,#(_set_frequency_registers_frequency_1_1 + 1)
   0A8B E2                 2899 	movx	a,@r0
   0A8C 24 E4              2900 	add	a,#0xE4
   0A8E F2                 2901 	movx	@r0,a
   0A8F 08                 2902 	inc	r0
   0A90 E2                 2903 	movx	a,@r0
   0A91 34 B1              2904 	addc	a,#0xB1
   0A93 F2                 2905 	movx	@r0,a
   0A94 08                 2906 	inc	r0
   0A95 E2                 2907 	movx	a,@r0
   0A96 34 F1              2908 	addc	a,#0xF1
   0A98 F2                 2909 	movx	@r0,a
                           2910 ;	radio/radio.c:1119: band  = frequency / 10000000UL;
   0A99 90s00r00           2911 	mov	dptr,#__divulong_PARM_2
   0A9C 74 80              2912 	mov	a,#0x80
   0A9E F0                 2913 	movx	@dptr,a
   0A9F A3                 2914 	inc	dptr
   0AA0 74 96              2915 	mov	a,#0x96
   0AA2 F0                 2916 	movx	@dptr,a
   0AA3 A3                 2917 	inc	dptr
   0AA4 74 98              2918 	mov	a,#0x98
   0AA6 F0                 2919 	movx	@dptr,a
   0AA7 A3                 2920 	inc	dptr
   0AA8 E4                 2921 	clr	a
   0AA9 F0                 2922 	movx	@dptr,a
   0AAA 78r25              2923 	mov	r0,#_set_frequency_registers_frequency_1_1
   0AAC E2                 2924 	movx	a,@r0
   0AAD F5 82              2925 	mov	dpl,a
   0AAF 08                 2926 	inc	r0
   0AB0 E2                 2927 	movx	a,@r0
   0AB1 F5 83              2928 	mov	dph,a
   0AB3 08                 2929 	inc	r0
   0AB4 E2                 2930 	movx	a,@r0
   0AB5 F5 F0              2931 	mov	b,a
   0AB7 08                 2932 	inc	r0
   0AB8 E2                 2933 	movx	a,@r0
   0AB9 12s00r00           2934 	lcall	__divulong
   0ABC AC 82              2935 	mov	r4,dpl
   0ABE 90s01r04           2936 	mov	dptr,#_set_frequency_registers_band_1_1
   0AC1 EC                 2937 	mov	a,r4
   0AC2 F0                 2938 	movx	@dptr,a
                           2939 ;	radio/radio.c:1120: frequency -= (uint32_t)band * 10000000UL;
   0AC3 90s00r00           2940 	mov	dptr,#__mullong_PARM_2
   0AC6 EC                 2941 	mov	a,r4
   0AC7 F0                 2942 	movx	@dptr,a
   0AC8 A3                 2943 	inc	dptr
   0AC9 E4                 2944 	clr	a
   0ACA F0                 2945 	movx	@dptr,a
   0ACB A3                 2946 	inc	dptr
   0ACC F0                 2947 	movx	@dptr,a
   0ACD A3                 2948 	inc	dptr
   0ACE F0                 2949 	movx	@dptr,a
   0ACF 90 96 80           2950 	mov	dptr,#0x9680
   0AD2 75 F0 98           2951 	mov	b,#0x98
   0AD5 E4                 2952 	clr	a
   0AD6 12s00r00           2953 	lcall	__mullong
   0AD9 AC 82              2954 	mov	r4,dpl
   0ADB AD 83              2955 	mov	r5,dph
   0ADD AE F0              2956 	mov	r6,b
   0ADF FF                 2957 	mov	r7,a
   0AE0 78r25              2958 	mov	r0,#_set_frequency_registers_frequency_1_1
   0AE2 E2                 2959 	movx	a,@r0
   0AE3 C3                 2960 	clr	c
   0AE4 9C                 2961 	subb	a,r4
   0AE5 F2                 2962 	movx	@r0,a
   0AE6 08                 2963 	inc	r0
   0AE7 E2                 2964 	movx	a,@r0
   0AE8 9D                 2965 	subb	a,r5
   0AE9 F2                 2966 	movx	@r0,a
   0AEA 08                 2967 	inc	r0
   0AEB E2                 2968 	movx	a,@r0
   0AEC 9E                 2969 	subb	a,r6
   0AED F2                 2970 	movx	@r0,a
   0AEE 08                 2971 	inc	r0
   0AEF E2                 2972 	movx	a,@r0
   0AF0 9F                 2973 	subb	a,r7
   0AF1 F2                 2974 	movx	@r0,a
                           2975 ;	radio/radio.c:1121: frequency  = scale_uint32(frequency, 625);
   0AF2 78r1D              2976 	mov	r0,#_scale_uint32_PARM_2
   0AF4 74 71              2977 	mov	a,#0x71
   0AF6 F2                 2978 	movx	@r0,a
   0AF7 08                 2979 	inc	r0
   0AF8 74 02              2980 	mov	a,#0x02
   0AFA F2                 2981 	movx	@r0,a
   0AFB 08                 2982 	inc	r0
   0AFC E4                 2983 	clr	a
   0AFD F2                 2984 	movx	@r0,a
   0AFE 08                 2985 	inc	r0
   0AFF F2                 2986 	movx	@r0,a
   0B00 78r25              2987 	mov	r0,#_set_frequency_registers_frequency_1_1
   0B02 E2                 2988 	movx	a,@r0
   0B03 F5 82              2989 	mov	dpl,a
   0B05 08                 2990 	inc	r0
   0B06 E2                 2991 	movx	a,@r0
   0B07 F5 83              2992 	mov	dph,a
   0B09 08                 2993 	inc	r0
   0B0A E2                 2994 	movx	a,@r0
   0B0B F5 F0              2995 	mov	b,a
   0B0D 08                 2996 	inc	r0
   0B0E E2                 2997 	movx	a,@r0
   0B0F 12s08rD5           2998 	lcall	_scale_uint32
   0B12 78r25              2999 	mov	r0,#_set_frequency_registers_frequency_1_1
   0B14 C0 E0              3000 	push	acc
   0B16 E5 82              3001 	mov	a,dpl
   0B18 F2                 3002 	movx	@r0,a
   0B19 08                 3003 	inc	r0
   0B1A E5 83              3004 	mov	a,dph
   0B1C F2                 3005 	movx	@r0,a
   0B1D 08                 3006 	inc	r0
   0B1E E5 F0              3007 	mov	a,b
   0B20 F2                 3008 	movx	@r0,a
   0B21 D0 E0              3009 	pop	acc
   0B23 08                 3010 	inc	r0
   0B24 F2                 3011 	movx	@r0,a
                           3012 ;	radio/radio.c:1122: frequency <<= 2;
   0B25 78r25              3013 	mov	r0,#_set_frequency_registers_frequency_1_1
   0B27 E2                 3014 	movx	a,@r0
   0B28 25 E0              3015 	add	a,acc
   0B2A F2                 3016 	movx	@r0,a
   0B2B 08                 3017 	inc	r0
   0B2C E2                 3018 	movx	a,@r0
   0B2D 33                 3019 	rlc	a
   0B2E F2                 3020 	movx	@r0,a
   0B2F 08                 3021 	inc	r0
   0B30 E2                 3022 	movx	a,@r0
   0B31 33                 3023 	rlc	a
   0B32 F2                 3024 	movx	@r0,a
   0B33 08                 3025 	inc	r0
   0B34 E2                 3026 	movx	a,@r0
   0B35 33                 3027 	rlc	a
   0B36 F2                 3028 	movx	@r0,a
   0B37 18                 3029 	dec	r0
   0B38 18                 3030 	dec	r0
   0B39 18                 3031 	dec	r0
   0B3A E2                 3032 	movx	a,@r0
   0B3B 25 E0              3033 	add	a,acc
   0B3D F2                 3034 	movx	@r0,a
   0B3E 08                 3035 	inc	r0
   0B3F E2                 3036 	movx	a,@r0
   0B40 33                 3037 	rlc	a
   0B41 F2                 3038 	movx	@r0,a
   0B42 08                 3039 	inc	r0
   0B43 E2                 3040 	movx	a,@r0
   0B44 33                 3041 	rlc	a
   0B45 F2                 3042 	movx	@r0,a
   0B46 08                 3043 	inc	r0
   0B47 E2                 3044 	movx	a,@r0
   0B48 33                 3045 	rlc	a
   0B49 F2                 3046 	movx	@r0,a
   0B4A                    3047 00103$:
                           3048 ;	radio/radio.c:1125: band |= EZRADIOPRO_SBSEL;
   0B4A 90s01r04           3049 	mov	dptr,#_set_frequency_registers_band_1_1
   0B4D E0                 3050 	movx	a,@dptr
   0B4E 44 40              3051 	orl	a,#0x40
   0B50 F0                 3052 	movx	@dptr,a
                           3053 ;	radio/radio.c:1126: carrier = (uint16_t)frequency;
   0B51 78r25              3054 	mov	r0,#_set_frequency_registers_frequency_1_1
   0B53 E2                 3055 	movx	a,@r0
   0B54 FC                 3056 	mov	r4,a
   0B55 08                 3057 	inc	r0
   0B56 E2                 3058 	movx	a,@r0
   0B57 FD                 3059 	mov	r5,a
                           3060 ;	radio/radio.c:1128: register_write(EZRADIOPRO_FREQUENCY_BAND_SELECT, band);
   0B58 C0 05              3061 	push	ar5
   0B5A C0 04              3062 	push	ar4
   0B5C 90s01r04           3063 	mov	dptr,#_set_frequency_registers_band_1_1
   0B5F E0                 3064 	movx	a,@dptr
   0B60 C0 E0              3065 	push	acc
   0B62 75 82 75           3066 	mov	dpl,#0x75
   0B65 12s08r1F           3067 	lcall	_register_write
   0B68 15 81              3068 	dec	sp
   0B6A D0 04              3069 	pop	ar4
   0B6C D0 05              3070 	pop	ar5
                           3071 ;	radio/radio.c:1129: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_1, carrier >> 8);
   0B6E 8D 07              3072 	mov	ar7,r5
   0B70 C0 05              3073 	push	ar5
   0B72 C0 04              3074 	push	ar4
   0B74 C0 07              3075 	push	ar7
   0B76 75 82 76           3076 	mov	dpl,#0x76
   0B79 12s08r1F           3077 	lcall	_register_write
   0B7C 15 81              3078 	dec	sp
   0B7E D0 04              3079 	pop	ar4
   0B80 D0 05              3080 	pop	ar5
                           3081 ;	radio/radio.c:1130: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_0, carrier & 0xFF);
   0B82 C0 04              3082 	push	ar4
   0B84 75 82 77           3083 	mov	dpl,#0x77
   0B87 12s08r1F           3084 	lcall	_register_write
   0B8A 15 81              3085 	dec	sp
   0B8C 22                 3086 	ret
                           3087 ;------------------------------------------------------------
                           3088 ;Allocation info for local variables in function 'radio_temperature'
                           3089 ;------------------------------------------------------------
                           3090 ;temp_local                Allocated to registers r4 r5 
                           3091 ;temp_offset               Allocated to registers r6 r7 
                           3092 ;------------------------------------------------------------
                           3093 ;	radio/radio.c:1139: radio_temperature(void)
                           3094 ;	-----------------------------------------
                           3095 ;	 function radio_temperature
                           3096 ;	-----------------------------------------
   0B8D                    3097 _radio_temperature:
                           3098 ;	radio/radio.c:1144: SFRPAGE	 = TOFF_PAGE;
   0B8D 75 A7 0F           3099 	mov	_SFRPAGE,#0x0F
                           3100 ;	radio/radio.c:1145: temp_offset = (TOFFH << 2) | (TOFFL >> 6);
   0B90 AE 86              3101 	mov	r6,_TOFFH
   0B92 E4                 3102 	clr	a
   0B93 CE                 3103 	xch	a,r6
   0B94 25 E0              3104 	add	a,acc
   0B96 CE                 3105 	xch	a,r6
   0B97 33                 3106 	rlc	a
   0B98 CE                 3107 	xch	a,r6
   0B99 25 E0              3108 	add	a,acc
   0B9B CE                 3109 	xch	a,r6
   0B9C 33                 3110 	rlc	a
   0B9D FF                 3111 	mov	r7,a
   0B9E E5 85              3112 	mov	a,_TOFFL
   0BA0 23                 3113 	rl	a
   0BA1 23                 3114 	rl	a
   0BA2 54 03              3115 	anl	a,#0x03
   0BA4 FD                 3116 	mov	r5,a
   0BA5 7C 00              3117 	mov	r4,#0x00
   0BA7 42 06              3118 	orl	ar6,a
   0BA9 EC                 3119 	mov	a,r4
   0BAA 42 07              3120 	orl	ar7,a
                           3121 ;	radio/radio.c:1146: SFRPAGE	 = LEGACY_PAGE;
   0BAC 75 A7 00           3122 	mov	_SFRPAGE,#0x00
                           3123 ;	radio/radio.c:1148: AD0BUSY = 1;		// Start ADC conversion
   0BAF D2 EC              3124 	setb	_AD0BUSY
                           3125 ;	radio/radio.c:1149: while (AD0BUSY) ;  	// Wait for completion of conversion
   0BB1                    3126 00101$:
   0BB1 20 EC FD           3127 	jb	_AD0BUSY,00101$
                           3128 ;	radio/radio.c:1151: temp_local = (ADC0H << 8) | ADC0L;
   0BB4 AD BE              3129 	mov	r5,_ADC0H
   0BB6 7C 00              3130 	mov	r4,#0x00
   0BB8 AA BD              3131 	mov	r2,_ADC0L
   0BBA 7B 00              3132 	mov	r3,#0x00
   0BBC EA                 3133 	mov	a,r2
   0BBD 42 04              3134 	orl	ar4,a
   0BBF EB                 3135 	mov	a,r3
   0BC0 42 05              3136 	orl	ar5,a
                           3137 ;	radio/radio.c:1152: temp_local = TEMP_OFFSET + (temp_local - temp_offset) / 2; // convert reading into degC.
   0BC2 EC                 3138 	mov	a,r4
   0BC3 C3                 3139 	clr	c
   0BC4 9E                 3140 	subb	a,r6
   0BC5 FE                 3141 	mov	r6,a
   0BC6 ED                 3142 	mov	a,r5
   0BC7 9F                 3143 	subb	a,r7
   0BC8 FF                 3144 	mov	r7,a
   0BC9 90s00r00           3145 	mov	dptr,#__divsint_PARM_2
   0BCC 74 02              3146 	mov	a,#0x02
   0BCE F0                 3147 	movx	@dptr,a
   0BCF A3                 3148 	inc	dptr
   0BD0 E4                 3149 	clr	a
   0BD1 F0                 3150 	movx	@dptr,a
   0BD2 8E 82              3151 	mov	dpl,r6
   0BD4 8F 83              3152 	mov	dph,r7
   0BD6 12s00r00           3153 	lcall	__divsint
   0BD9 E5 82              3154 	mov	a,dpl
   0BDB 85 83 F0           3155 	mov	b,dph
   0BDE 24 21              3156 	add	a,#0x21
   0BE0 FC                 3157 	mov	r4,a
   0BE1 E4                 3158 	clr	a
   0BE2 35 F0              3159 	addc	a,b
                           3160 ;	radio/radio.c:1163: return temp_local;
   0BE4 8C 82              3161 	mov	dpl,r4
   0BE6 F5 83              3162 	mov	dph,a
   0BE8 22                 3163 	ret
                           3164 ;------------------------------------------------------------
                           3165 ;Allocation info for local variables in function 'radio_set_diversity'
                           3166 ;------------------------------------------------------------
                           3167 ;state                     Allocated with name '_radio_set_diversity_state_1_1'
                           3168 ;------------------------------------------------------------
                           3169 ;	radio/radio.c:1169: radio_set_diversity(enum DIVERSITY_Enum state)
                           3170 ;	-----------------------------------------
                           3171 ;	 function radio_set_diversity
                           3172 ;	-----------------------------------------
   0BE9                    3173 _radio_set_diversity:
   0BE9 E5 82              3174 	mov	a,dpl
                           3175 ;	radio/radio.c:1171: switch (state) {
   0BEB 90s01r05           3176 	mov	dptr,#_radio_set_diversity_state_1_1
   0BEE F0                 3177 	movx	@dptr,a
   0BEF FF                 3178 	mov  r7,a
   0BF0 24 FC              3179 	add	a,#0xff - 0x03
   0BF2 40 68              3180 	jc	00105$
   0BF4 EF                 3181 	mov	a,r7
   0BF5 2F                 3182 	add	a,r7
   0BF6 2F                 3183 	add	a,r7
   0BF7 90s0BrFB           3184 	mov	dptr,#00111$
   0BFA 73                 3185 	jmp	@a+dptr
   0BFB                    3186 00111$:
   0BFB 02s0Cr07           3187 	ljmp	00101$
   0BFE 02s0Cr5C           3188 	ljmp	00103$
   0C01 02s0Cr5C           3189 	ljmp	00104$
   0C04 02s0Cr2C           3190 	ljmp	00102$
                           3191 ;	radio/radio.c:1172: case DIVERSITY_ENABLED:
   0C07                    3192 00101$:
                           3193 ;	radio/radio.c:1173: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x18);
   0C07 74 18              3194 	mov	a,#0x18
   0C09 C0 E0              3195 	push	acc
   0C0B 75 82 0D           3196 	mov	dpl,#0x0D
   0C0E 12s08r1F           3197 	lcall	_register_write
   0C11 15 81              3198 	dec	sp
                           3199 ;	radio/radio.c:1175: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK) | 0x80);
   0C13 75 82 08           3200 	mov	dpl,#0x08
   0C16 12s08r55           3201 	lcall	_register_read
   0C19 AF 82              3202 	mov	r7,dpl
   0C1B 74 1F              3203 	mov	a,#0x1F
   0C1D 5F                 3204 	anl	a,r7
   0C1E 44 80              3205 	orl	a,#0x80
   0C20 FF                 3206 	mov	r7,a
   0C21 C0 07              3207 	push	ar7
   0C23 75 82 08           3208 	mov	dpl,#0x08
   0C26 12s08r1F           3209 	lcall	_register_write
   0C29 15 81              3210 	dec	sp
                           3211 ;	radio/radio.c:1176: break;
                           3212 ;	radio/radio.c:1178: case DIVERSITY_ANT2:
   0C2B 22                 3213 	ret
   0C2C                    3214 00102$:
                           3215 ;	radio/radio.c:1180: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK) | 0x20);
   0C2C 75 82 08           3216 	mov	dpl,#0x08
   0C2F 12s08r55           3217 	lcall	_register_read
   0C32 AF 82              3218 	mov	r7,dpl
   0C34 74 1F              3219 	mov	a,#0x1F
   0C36 5F                 3220 	anl	a,r7
   0C37 44 20              3221 	orl	a,#0x20
   0C39 FF                 3222 	mov	r7,a
   0C3A C0 07              3223 	push	ar7
   0C3C 75 82 08           3224 	mov	dpl,#0x08
   0C3F 12s08r1F           3225 	lcall	_register_write
   0C42 15 81              3226 	dec	sp
                           3227 ;	radio/radio.c:1182: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x0A);	// GPIO2 output set high fixed
   0C44 74 0A              3228 	mov	a,#0x0A
   0C46 C0 E0              3229 	push	acc
   0C48 75 82 0D           3230 	mov	dpl,#0x0D
   0C4B 12s08r1F           3231 	lcall	_register_write
   0C4E 15 81              3232 	dec	sp
                           3233 ;	radio/radio.c:1183: register_write(EZRADIOPRO_IO_PORT_CONFIGURATION, 0x00);	// GPIO2 output set low (fixed on ant 2)
   0C50 E4                 3234 	clr	a
   0C51 C0 E0              3235 	push	acc
   0C53 75 82 0E           3236 	mov	dpl,#0x0E
   0C56 12s08r1F           3237 	lcall	_register_write
   0C59 15 81              3238 	dec	sp
                           3239 ;	radio/radio.c:1184: break;
                           3240 ;	radio/radio.c:1186: case DIVERSITY_DISABLED:
   0C5B 22                 3241 	ret
   0C5C                    3242 00103$:
                           3243 ;	radio/radio.c:1187: case DIVERSITY_ANT1:
   0C5C                    3244 00104$:
                           3245 ;	radio/radio.c:1188: default:
   0C5C                    3246 00105$:
                           3247 ;	radio/radio.c:1190: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK));
   0C5C 75 82 08           3248 	mov	dpl,#0x08
   0C5F 12s08r55           3249 	lcall	_register_read
   0C62 AF 82              3250 	mov	r7,dpl
   0C64 53 07 1F           3251 	anl	ar7,#0x1F
   0C67 C0 07              3252 	push	ar7
   0C69 75 82 08           3253 	mov	dpl,#0x08
   0C6C 12s08r1F           3254 	lcall	_register_write
   0C6F 15 81              3255 	dec	sp
                           3256 ;	radio/radio.c:1192: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x0A);	// GPIO2 output set high fixed
   0C71 74 0A              3257 	mov	a,#0x0A
   0C73 C0 E0              3258 	push	acc
   0C75 75 82 0D           3259 	mov	dpl,#0x0D
   0C78 12s08r1F           3260 	lcall	_register_write
   0C7B 15 81              3261 	dec	sp
                           3262 ;	radio/radio.c:1193: register_write(EZRADIOPRO_IO_PORT_CONFIGURATION, 0x04);	// GPIO2 output set high (fixed on ant 1)
   0C7D 74 04              3263 	mov	a,#0x04
   0C7F C0 E0              3264 	push	acc
   0C81 75 82 0E           3265 	mov	dpl,#0x0E
   0C84 12s08r1F           3266 	lcall	_register_write
   0C87 15 81              3267 	dec	sp
                           3268 ;	radio/radio.c:1195: }
   0C89 22                 3269 	ret
                           3270 ;------------------------------------------------------------
                           3271 ;Allocation info for local variables in function 'Receiver_ISR'
                           3272 ;------------------------------------------------------------
                           3273 ;status                    Allocated to registers r6 
                           3274 ;status2                   Allocated to registers r7 
                           3275 ;len                       Allocated to registers r7 
                           3276 ;------------------------------------------------------------
                           3277 ;	radio/radio.c:1206: INTERRUPT(Receiver_ISR, INTERRUPT_INT0)
                           3278 ;	-----------------------------------------
                           3279 ;	 function Receiver_ISR
                           3280 ;	-----------------------------------------
   0C8A                    3281 _Receiver_ISR:
   0C8A C0*00              3282 	push	bits
   0C8C C0 E0              3283 	push	acc
   0C8E C0 F0              3284 	push	b
   0C90 C0 82              3285 	push	dpl
   0C92 C0 83              3286 	push	dph
   0C94 C0 07              3287 	push	(0+7)
   0C96 C0 06              3288 	push	(0+6)
   0C98 C0 05              3289 	push	(0+5)
   0C9A C0 04              3290 	push	(0+4)
   0C9C C0 03              3291 	push	(0+3)
   0C9E C0 02              3292 	push	(0+2)
   0CA0 C0 01              3293 	push	(0+1)
   0CA2 C0 00              3294 	push	(0+0)
   0CA4 C0 D0              3295 	push	psw
   0CA6 75 D0 00           3296 	mov	psw,#0x00
                           3297 ;	radio/radio.c:1214: status2 = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0CA9 75 82 04           3298 	mov	dpl,#0x04
   0CAC 12s08r55           3299 	lcall	_register_read
   0CAF AF 82              3300 	mov	r7,dpl
                           3301 ;	radio/radio.c:1215: status  = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0CB1 75 82 03           3302 	mov	dpl,#0x03
   0CB4 C0 07              3303 	push	ar7
   0CB6 12s08r55           3304 	lcall	_register_read
   0CB9 AE 82              3305 	mov	r6,dpl
   0CBB D0 07              3306 	pop	ar7
                           3307 ;	radio/radio.c:1217: if (status & EZRADIOPRO_IRXFFAFULL) {
   0CBD EE                 3308 	mov	a,r6
   0CBE 30 E4 49           3309 	jnb	acc.4,00104$
                           3310 ;	radio/radio.c:1218: if (RX_FIFO_THRESHOLD_HIGH + (uint16_t)partial_packet_length > MAX_PACKET_LENGTH) {
   0CC1 78r01              3311 	mov	r0,#_partial_packet_length
   0CC3 E2                 3312 	movx	a,@r0
   0CC4 FC                 3313 	mov	r4,a
   0CC5 7D 00              3314 	mov	r5,#0x00
   0CC7 74 32              3315 	mov	a,#0x32
   0CC9 2C                 3316 	add	a,r4
   0CCA FC                 3317 	mov	r4,a
   0CCB E4                 3318 	clr	a
   0CCC 3D                 3319 	addc	a,r5
   0CCD FD                 3320 	mov	r5,a
   0CCE C3                 3321 	clr	c
   0CCF 74 FC              3322 	mov	a,#0xFC
   0CD1 9C                 3323 	subb	a,r4
   0CD2 E4                 3324 	clr	a
   0CD3 9D                 3325 	subb	a,r5
   0CD4 50 03              3326 	jnc	00132$
   0CD6 02s0Dr95           3327 	ljmp	00117$
   0CD9                    3328 00132$:
                           3329 ;	radio/radio.c:1222: read_receive_fifo(RX_FIFO_THRESHOLD_HIGH, &radio_buffer[partial_packet_length]);
   0CD9 78r01              3330 	mov	r0,#_partial_packet_length
   0CDB E2                 3331 	movx	a,@r0
   0CDC 24r00              3332 	add	a,#_radio_buffer
   0CDE FC                 3333 	mov	r4,a
   0CDF E4                 3334 	clr	a
   0CE0 34s00              3335 	addc	a,#(_radio_buffer >> 8)
   0CE2 FD                 3336 	mov	r5,a
   0CE3 C0 07              3337 	push	ar7
   0CE5 C0 06              3338 	push	ar6
   0CE7 C0 04              3339 	push	ar4
   0CE9 C0 05              3340 	push	ar5
   0CEB 75 82 32           3341 	mov	dpl,#0x32
   0CEE 12s08r89           3342 	lcall	_read_receive_fifo
   0CF1 15 81              3343 	dec	sp
   0CF3 15 81              3344 	dec	sp
                           3345 ;	radio/radio.c:1223: partial_packet_length += RX_FIFO_THRESHOLD_HIGH;
   0CF5 78r01              3346 	mov	r0,#_partial_packet_length
   0CF7 E2                 3347 	movx	a,@r0
   0CF8 24 32              3348 	add	a,#0x32
   0CFA F2                 3349 	movx	@r0,a
                           3350 ;	radio/radio.c:1224: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   0CFB 75 82 26           3351 	mov	dpl,#0x26
   0CFE 12s08r55           3352 	lcall	_register_read
   0D01 E5 82              3353 	mov	a,dpl
   0D03 D0 06              3354 	pop	ar6
   0D05 D0 07              3355 	pop	ar7
   0D07 78r02              3356 	mov	r0,#_last_rssi
   0D09 F2                 3357 	movx	@r0,a
   0D0A                    3358 00104$:
                           3359 ;	radio/radio.c:1227: if (status2 & EZRADIOPRO_IPREAVAL) {
   0D0A EF                 3360 	mov	a,r7
   0D0B 30 E6 11           3361 	jnb	acc.6,00106$
                           3362 ;	radio/radio.c:1229: preamble_detected = true;
   0D0E D2*01              3363 	setb	_preamble_detected
                           3364 ;	radio/radio.c:1232: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   0D10 75 82 26           3365 	mov	dpl,#0x26
   0D13 C0 06              3366 	push	ar6
   0D15 12s08r55           3367 	lcall	_register_read
   0D18 E5 82              3368 	mov	a,dpl
   0D1A D0 06              3369 	pop	ar6
   0D1C 78r02              3370 	mov	r0,#_last_rssi
   0D1E F2                 3371 	movx	@r0,a
   0D1F                    3372 00106$:
                           3373 ;	radio/radio.c:1235: if (feature_golay == false && (status & EZRADIOPRO_ICRCERROR)) {
   0D1F 20*00 04           3374 	jb	_feature_golay,00108$
   0D22 EE                 3375 	mov	a,r6
   0D23 20 E0 6F           3376 	jb	acc.0,00117$
                           3377 ;	radio/radio.c:1236: goto rxfail;
   0D26                    3378 00108$:
                           3379 ;	radio/radio.c:1239: if (status & EZRADIOPRO_IPKVALID) {
   0D26 EE                 3380 	mov	a,r6
   0D27 30 E1 69           3381 	jnb	acc.1,00116$
                           3382 ;	radio/radio.c:1240: __data uint8_t len = register_read(EZRADIOPRO_RECEIVED_PACKET_LENGTH);
   0D2A 75 82 4B           3383 	mov	dpl,#0x4B
   0D2D 12s08r55           3384 	lcall	_register_read
                           3385 ;	radio/radio.c:1241: if (len > MAX_PACKET_LENGTH || partial_packet_length > len) {
   0D30 E5 82              3386 	mov	a,dpl
   0D32 FF                 3387 	mov	r7,a
   0D33 24 03              3388 	add	a,#0xff - 0xFC
   0D35 40 5E              3389 	jc	00117$
   0D37 78r01              3390 	mov	r0,#_partial_packet_length
   0D39 C3                 3391 	clr	c
   0D3A E2                 3392 	movx	a,@r0
   0D3B F5 F0              3393 	mov	b,a
   0D3D EF                 3394 	mov	a,r7
   0D3E 95 F0              3395 	subb	a,b
   0D40 40 53              3396 	jc	00117$
                           3397 ;	radio/radio.c:1245: if (partial_packet_length < len) {
   0D42 78r01              3398 	mov	r0,#_partial_packet_length
   0D44 C3                 3399 	clr	c
   0D45 E2                 3400 	movx	a,@r0
   0D46 9F                 3401 	subb	a,r7
   0D47 50 22              3402 	jnc	00114$
                           3403 ;	radio/radio.c:1246: read_receive_fifo(len-partial_packet_length, &radio_buffer[partial_packet_length]);
   0D49 78r01              3404 	mov	r0,#_partial_packet_length
   0D4B E2                 3405 	movx	a,@r0
   0D4C 24r00              3406 	add	a,#_radio_buffer
   0D4E FD                 3407 	mov	r5,a
   0D4F E4                 3408 	clr	a
   0D50 34s00              3409 	addc	a,#(_radio_buffer >> 8)
   0D52 FE                 3410 	mov	r6,a
   0D53 78r01              3411 	mov	r0,#_partial_packet_length
   0D55 D3                 3412 	setb	c
   0D56 E2                 3413 	movx	a,@r0
   0D57 9F                 3414 	subb	a,r7
   0D58 F4                 3415 	cpl	a
   0D59 FC                 3416 	mov	r4,a
   0D5A C0 07              3417 	push	ar7
   0D5C C0 05              3418 	push	ar5
   0D5E C0 06              3419 	push	ar6
   0D60 8C 82              3420 	mov	dpl,r4
   0D62 12s08r89           3421 	lcall	_read_receive_fifo
   0D65 15 81              3422 	dec	sp
   0D67 15 81              3423 	dec	sp
   0D69 D0 07              3424 	pop	ar7
   0D6B                    3425 00114$:
                           3426 ;	radio/radio.c:1248: receive_packet_length = len;
   0D6B 78r00              3427 	mov	r0,#_receive_packet_length
   0D6D EF                 3428 	mov	a,r7
   0D6E F2                 3429 	movx	@r0,a
                           3430 ;	radio/radio.c:1251: packet_received = true;
   0D6F D2*00              3431 	setb	_packet_received
                           3432 ;	radio/radio.c:1254: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   0D71 E4                 3433 	clr	a
   0D72 C0 E0              3434 	push	acc
   0D74 75 82 05           3435 	mov	dpl,#0x05
   0D77 12s08r1F           3436 	lcall	_register_write
   0D7A 15 81              3437 	dec	sp
                           3438 ;	radio/radio.c:1255: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   0D7C E4                 3439 	clr	a
   0D7D C0 E0              3440 	push	acc
   0D7F 75 82 06           3441 	mov	dpl,#0x06
   0D82 12s08r1F           3442 	lcall	_register_write
   0D85 15 81              3443 	dec	sp
                           3444 ;	radio/radio.c:1258: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_PLLON);
   0D87 74 02              3445 	mov	a,#0x02
   0D89 C0 E0              3446 	push	acc
   0D8B 75 82 07           3447 	mov	dpl,#0x07
   0D8E 12s08r1F           3448 	lcall	_register_write
   0D91 15 81              3449 	dec	sp
   0D93                    3450 00116$:
                           3451 ;	radio/radio.c:1263: return;
                           3452 ;	radio/radio.c:1265: rxfail:
   0D93 80 1E              3453 	sjmp	00120$
   0D95                    3454 00117$:
                           3455 ;	radio/radio.c:1266: if (errors.rx_errors != 0xFFFF) {
   0D95 78r00              3456 	mov	r0,#_errors
   0D97 E2                 3457 	movx	a,@r0
   0D98 FE                 3458 	mov	r6,a
   0D99 08                 3459 	inc	r0
   0D9A E2                 3460 	movx	a,@r0
   0D9B FF                 3461 	mov	r7,a
   0D9C BE FF 05           3462 	cjne	r6,#0xFF,00140$
   0D9F BF FF 02           3463 	cjne	r7,#0xFF,00140$
   0DA2 80 0C              3464 	sjmp	00119$
   0DA4                    3465 00140$:
                           3466 ;	radio/radio.c:1267: errors.rx_errors++;
   0DA4 0E                 3467 	inc	r6
   0DA5 BE 00 01           3468 	cjne	r6,#0x00,00141$
   0DA8 0F                 3469 	inc	r7
   0DA9                    3470 00141$:
   0DA9 78r00              3471 	mov	r0,#_errors
   0DAB EE                 3472 	mov	a,r6
   0DAC F2                 3473 	movx	@r0,a
   0DAD 08                 3474 	inc	r0
   0DAE EF                 3475 	mov	a,r7
   0DAF F2                 3476 	movx	@r0,a
   0DB0                    3477 00119$:
                           3478 ;	radio/radio.c:1269: radio_receiver_on();
   0DB0 12s03r79           3479 	lcall	_radio_receiver_on
   0DB3                    3480 00120$:
   0DB3 D0 D0              3481 	pop	psw
   0DB5 D0 00              3482 	pop	(0+0)
   0DB7 D0 01              3483 	pop	(0+1)
   0DB9 D0 02              3484 	pop	(0+2)
   0DBB D0 03              3485 	pop	(0+3)
   0DBD D0 04              3486 	pop	(0+4)
   0DBF D0 05              3487 	pop	(0+5)
   0DC1 D0 06              3488 	pop	(0+6)
   0DC3 D0 07              3489 	pop	(0+7)
   0DC5 D0 83              3490 	pop	dph
   0DC7 D0 82              3491 	pop	dpl
   0DC9 D0 F0              3492 	pop	b
   0DCB D0 E0              3493 	pop	acc
   0DCD D0*00              3494 	pop	bits
   0DCF 32                 3495 	reti
                           3496 	.area CSEG    (CODE)
                           3497 	.area CONST   (CODE)
   0000                    3498 __str_0:
   0000 6F 76 65 72 73 69  3499 	.ascii "oversized packet"
        7A 65 64 20 70 61
        63 6B 65 74
   0010 00                 3500 	.db 0x00
   0011                    3501 _reg_index:
   0011 1C                 3502 	.db #0x1C	; 28
   0012 1F                 3503 	.db #0x1F	; 31
   0013 20                 3504 	.db #0x20	; 32
   0014 21                 3505 	.db #0x21	; 33
   0015 22                 3506 	.db #0x22	; 34
   0016 23                 3507 	.db #0x23	; 35
   0017 24                 3508 	.db #0x24	; 36
   0018 25                 3509 	.db #0x25	; 37
   0019 2A                 3510 	.db #0x2A	; 42
   001A 6E                 3511 	.db #0x6E	; 110	'n'
   001B 6F                 3512 	.db #0x6F	; 111	'o'
   001C 72                 3513 	.db #0x72	; 114	'r'
   001D                    3514 _air_data_rates:
   001D 02                 3515 	.db #0x02	; 2
   001E 04                 3516 	.db #0x04	; 4
   001F 08                 3517 	.db #0x08	; 8
   0020 10                 3518 	.db #0x10	; 16
   0021 13                 3519 	.db #0x13	; 19
   0022 18                 3520 	.db #0x18	; 24
   0023 20                 3521 	.db #0x20	; 32
   0024 30                 3522 	.db #0x30	; 48	'0'
   0025 40                 3523 	.db #0x40	; 64
   0026 60                 3524 	.db #0x60	; 96
   0027 80                 3525 	.db #0x80	; 128
   0028 C0                 3526 	.db #0xC0	; 192
   0029 FA                 3527 	.db #0xFA	; 250
   002A                    3528 _reg_table_433:
   002A 27                 3529 	.db #0x27	; 39
   002B 27                 3530 	.db #0x27	; 39
   002C 27                 3531 	.db #0x27	; 39
   002D 2E                 3532 	.db #0x2E	; 46
   002E 16                 3533 	.db #0x16	; 22
   002F 01                 3534 	.db #0x01	; 1
   0030 05                 3535 	.db #0x05	; 5
   0031 0B                 3536 	.db #0x0B	; 11
   0032 9A                 3537 	.db #0x9A	; 154
   0033 88                 3538 	.db #0x88	; 136
   0034 8A                 3539 	.db #0x8A	; 138
   0035 8C                 3540 	.db #0x8C	; 140
   0036 8D                 3541 	.db #0x8D	; 141
   0037 03                 3542 	.db #0x03	; 3
   0038 03                 3543 	.db #0x03	; 3
   0039 03                 3544 	.db #0x03	; 3
   003A 03                 3545 	.db #0x03	; 3
   003B 03                 3546 	.db #0x03	; 3
   003C 03                 3547 	.db #0x03	; 3
   003D 03                 3548 	.db #0x03	; 3
   003E 03                 3549 	.db #0x03	; 3
   003F 03                 3550 	.db #0x03	; 3
   0040 03                 3551 	.db #0x03	; 3
   0041 03                 3552 	.db #0x03	; 3
   0042 03                 3553 	.db #0x03	; 3
   0043 03                 3554 	.db #0x03	; 3
   0044 F4                 3555 	.db #0xF4	; 244
   0045 FA                 3556 	.db #0xFA	; 250
   0046 7D                 3557 	.db #0x7D	; 125
   0047 3F                 3558 	.db #0x3F	; 63
   0048 69                 3559 	.db #0x69	; 105	'i'
   0049 A7                 3560 	.db #0xA7	; 167
   004A 7D                 3561 	.db #0x7D	; 125
   004B 53                 3562 	.db #0x53	; 83	'S'
   004C 5E                 3563 	.db #0x5E	; 94
   004D 7D                 3564 	.db #0x7D	; 125
   004E 5E                 3565 	.db #0x5E	; 94
   004F 3F                 3566 	.db #0x3F	; 63
   0050 30                 3567 	.db #0x30	; 48	'0'
   0051 20                 3568 	.db #0x20	; 32
   0052 00                 3569 	.db #0x00	; 0
   0053 01                 3570 	.db #0x01	; 1
   0054 02                 3571 	.db #0x02	; 2
   0055 01                 3572 	.db #0x01	; 1
   0056 00                 3573 	.db #0x00	; 0
   0057 01                 3574 	.db #0x01	; 1
   0058 01                 3575 	.db #0x01	; 1
   0059 01                 3576 	.db #0x01	; 1
   005A 01                 3577 	.db #0x01	; 1
   005B 01                 3578 	.db #0x01	; 1
   005C 02                 3579 	.db #0x02	; 2
   005D 02                 3580 	.db #0x02	; 2
   005E 41                 3581 	.db #0x41	; 65	'A'
   005F 83                 3582 	.db #0x83	; 131
   0060 06                 3583 	.db #0x06	; 6
   0061 0C                 3584 	.db #0x0C	; 12
   0062 37                 3585 	.db #0x37	; 55	'7'
   0063 C4                 3586 	.db #0xC4	; 196
   0064 06                 3587 	.db #0x06	; 6
   0065 89                 3588 	.db #0x89	; 137
   0066 5D                 3589 	.db #0x5D	; 93
   0067 06                 3590 	.db #0x06	; 6
   0068 5D                 3591 	.db #0x5D	; 93
   0069 0C                 3592 	.db #0x0C	; 12
   006A AA                 3593 	.db #0xAA	; 170
   006B 89                 3594 	.db #0x89	; 137
   006C 12                 3595 	.db #0x12	; 18
   006D 25                 3596 	.db #0x25	; 37
   006E 4A                 3597 	.db #0x4A	; 74	'J'
   006F 4C                 3598 	.db #0x4C	; 76	'L'
   0070 9C                 3599 	.db #0x9C	; 156
   0071 25                 3600 	.db #0x25	; 37
   0072 37                 3601 	.db #0x37	; 55	'7'
   0073 86                 3602 	.db #0x86	; 134
   0074 25                 3603 	.db #0x25	; 37
   0075 86                 3604 	.db #0x86	; 134
   0076 4A                 3605 	.db #0x4A	; 74	'J'
   0077 AB                 3606 	.db #0xAB	; 171
   0078 00                 3607 	.db #0x00	; 0
   0079 01                 3608 	.db #0x01	; 1
   007A 02                 3609 	.db #0x02	; 2
   007B 04                 3610 	.db #0x04	; 4
   007C 02                 3611 	.db #0x02	; 2
   007D 01                 3612 	.db #0x01	; 1
   007E 02                 3613 	.db #0x02	; 2
   007F 03                 3614 	.db #0x03	; 3
   0080 02                 3615 	.db #0x02	; 2
   0081 02                 3616 	.db #0x02	; 2
   0082 02                 3617 	.db #0x02	; 2
   0083 04                 3618 	.db #0x04	; 4
   0084 07                 3619 	.db #0x07	; 7
   0085 85                 3620 	.db #0x85	; 133
   0086 08                 3621 	.db #0x08	; 8
   0087 0E                 3622 	.db #0x0E	; 14
   0088 12                 3623 	.db #0x12	; 18
   0089 72                 3624 	.db #0x72	; 114	'r'
   008A 8A                 3625 	.db #0x8A	; 138
   008B 0E                 3626 	.db #0x0E	; 14
   008C 18                 3627 	.db #0x18	; 24
   008D BB                 3628 	.db #0xBB	; 187
   008E 0E                 3629 	.db #0x0E	; 14
   008F BB                 3630 	.db #0xBB	; 187
   0090 EA                 3631 	.db #0xEA	; 234
   0091 FF                 3632 	.db #0xFF	; 255
   0092 1D                 3633 	.db #0x1D	; 29
   0093 1D                 3634 	.db #0x1D	; 29
   0094 1D                 3635 	.db #0x1D	; 29
   0095 1E                 3636 	.db #0x1E	; 30
   0096 1E                 3637 	.db #0x1E	; 30
   0097 1E                 3638 	.db #0x1E	; 30
   0098 20                 3639 	.db #0x20	; 32
   0099 30                 3640 	.db #0x30	; 48	'0'
   009A 41                 3641 	.db #0x41	; 65	'A'
   009B 50                 3642 	.db #0x50	; 80	'P'
   009C 50                 3643 	.db #0x50	; 80	'P'
   009D 50                 3644 	.db #0x50	; 80	'P'
   009E 50                 3645 	.db #0x50	; 80	'P'
   009F 10                 3646 	.db #0x10	; 16
   00A0 20                 3647 	.db #0x20	; 32
   00A1 41                 3648 	.db #0x41	; 65	'A'
   00A2 83                 3649 	.db #0x83	; 131
   00A3 9B                 3650 	.db #0x9B	; 155
   00A4 C4                 3651 	.db #0xC4	; 196
   00A5 08                 3652 	.db #0x08	; 8
   00A6 0C                 3653 	.db #0x0C	; 12
   00A7 10                 3654 	.db #0x10	; 16
   00A8 18                 3655 	.db #0x18	; 24
   00A9 20                 3656 	.db #0x20	; 32
   00AA 31                 3657 	.db #0x31	; 49	'1'
   00AB 40                 3658 	.db #0x40	; 64
   00AC 62                 3659 	.db #0x62	; 98	'b'
   00AD C5                 3660 	.db #0xC5	; 197
   00AE 89                 3661 	.db #0x89	; 137
   00AF 12                 3662 	.db #0x12	; 18
   00B0 A6                 3663 	.db #0xA6	; 166
   00B1 9C                 3664 	.db #0x9C	; 156
   00B2 31                 3665 	.db #0x31	; 49	'1'
   00B3 4A                 3666 	.db #0x4A	; 74	'J'
   00B4 62                 3667 	.db #0x62	; 98	'b'
   00B5 93                 3668 	.db #0x93	; 147
   00B6 C5                 3669 	.db #0xC5	; 197
   00B7 27                 3670 	.db #0x27	; 39
   00B8 00                 3671 	.db #0x00	; 0
   00B9 03                 3672 	.db #0x03	; 3
   00BA 06                 3673 	.db #0x06	; 6
   00BB 0D                 3674 	.db #0x0D	; 13
   00BC 1A                 3675 	.db #0x1A	; 26
   00BD 1E                 3676 	.db #0x1E	; 30
   00BE 26                 3677 	.db #0x26	; 38
   00BF 33                 3678 	.db #0x33	; 51	'3'
   00C0 4D                 3679 	.db #0x4D	; 77	'M'
   00C1 66                 3680 	.db #0x66	; 102	'f'
   00C2 9A                 3681 	.db #0x9A	; 154
   00C3 CD                 3682 	.db #0xCD	; 205
   00C4 FE                 3683 	.db #0xFE	; 254
   00C5 FE                 3684 	.db #0xFE	; 254
   00C6                    3685 _reg_table_470:
   00C6 2B                 3686 	.db #0x2B	; 43
   00C7 2B                 3687 	.db #0x2B	; 43
   00C8 2B                 3688 	.db #0x2B	; 43
   00C9 2E                 3689 	.db #0x2E	; 46
   00CA 16                 3690 	.db #0x16	; 22
   00CB 01                 3691 	.db #0x01	; 1
   00CC 05                 3692 	.db #0x05	; 5
   00CD 0B                 3693 	.db #0x0B	; 11
   00CE 9A                 3694 	.db #0x9A	; 154
   00CF 88                 3695 	.db #0x88	; 136
   00D0 8A                 3696 	.db #0x8A	; 138
   00D1 8C                 3697 	.db #0x8C	; 140
   00D2 8D                 3698 	.db #0x8D	; 141
   00D3 03                 3699 	.db #0x03	; 3
   00D4 03                 3700 	.db #0x03	; 3
   00D5 03                 3701 	.db #0x03	; 3
   00D6 03                 3702 	.db #0x03	; 3
   00D7 03                 3703 	.db #0x03	; 3
   00D8 03                 3704 	.db #0x03	; 3
   00D9 03                 3705 	.db #0x03	; 3
   00DA 03                 3706 	.db #0x03	; 3
   00DB 03                 3707 	.db #0x03	; 3
   00DC 03                 3708 	.db #0x03	; 3
   00DD 03                 3709 	.db #0x03	; 3
   00DE 03                 3710 	.db #0x03	; 3
   00DF 03                 3711 	.db #0x03	; 3
   00E0 F4                 3712 	.db #0xF4	; 244
   00E1 FA                 3713 	.db #0xFA	; 250
   00E2 7D                 3714 	.db #0x7D	; 125
   00E3 3F                 3715 	.db #0x3F	; 63
   00E4 69                 3716 	.db #0x69	; 105	'i'
   00E5 A7                 3717 	.db #0xA7	; 167
   00E6 7D                 3718 	.db #0x7D	; 125
   00E7 53                 3719 	.db #0x53	; 83	'S'
   00E8 5E                 3720 	.db #0x5E	; 94
   00E9 7D                 3721 	.db #0x7D	; 125
   00EA 5E                 3722 	.db #0x5E	; 94
   00EB 3F                 3723 	.db #0x3F	; 63
   00EC 30                 3724 	.db #0x30	; 48	'0'
   00ED 20                 3725 	.db #0x20	; 32
   00EE 00                 3726 	.db #0x00	; 0
   00EF 01                 3727 	.db #0x01	; 1
   00F0 02                 3728 	.db #0x02	; 2
   00F1 01                 3729 	.db #0x01	; 1
   00F2 00                 3730 	.db #0x00	; 0
   00F3 01                 3731 	.db #0x01	; 1
   00F4 01                 3732 	.db #0x01	; 1
   00F5 01                 3733 	.db #0x01	; 1
   00F6 01                 3734 	.db #0x01	; 1
   00F7 01                 3735 	.db #0x01	; 1
   00F8 02                 3736 	.db #0x02	; 2
   00F9 02                 3737 	.db #0x02	; 2
   00FA 41                 3738 	.db #0x41	; 65	'A'
   00FB 83                 3739 	.db #0x83	; 131
   00FC 06                 3740 	.db #0x06	; 6
   00FD 0C                 3741 	.db #0x0C	; 12
   00FE 37                 3742 	.db #0x37	; 55	'7'
   00FF C4                 3743 	.db #0xC4	; 196
   0100 06                 3744 	.db #0x06	; 6
   0101 89                 3745 	.db #0x89	; 137
   0102 5D                 3746 	.db #0x5D	; 93
   0103 06                 3747 	.db #0x06	; 6
   0104 5D                 3748 	.db #0x5D	; 93
   0105 0C                 3749 	.db #0x0C	; 12
   0106 AA                 3750 	.db #0xAA	; 170
   0107 89                 3751 	.db #0x89	; 137
   0108 12                 3752 	.db #0x12	; 18
   0109 25                 3753 	.db #0x25	; 37
   010A 4A                 3754 	.db #0x4A	; 74	'J'
   010B 4C                 3755 	.db #0x4C	; 76	'L'
   010C 9C                 3756 	.db #0x9C	; 156
   010D 25                 3757 	.db #0x25	; 37
   010E 37                 3758 	.db #0x37	; 55	'7'
   010F 86                 3759 	.db #0x86	; 134
   0110 25                 3760 	.db #0x25	; 37
   0111 86                 3761 	.db #0x86	; 134
   0112 4A                 3762 	.db #0x4A	; 74	'J'
   0113 AB                 3763 	.db #0xAB	; 171
   0114 00                 3764 	.db #0x00	; 0
   0115 01                 3765 	.db #0x01	; 1
   0116 02                 3766 	.db #0x02	; 2
   0117 04                 3767 	.db #0x04	; 4
   0118 02                 3768 	.db #0x02	; 2
   0119 01                 3769 	.db #0x01	; 1
   011A 02                 3770 	.db #0x02	; 2
   011B 03                 3771 	.db #0x03	; 3
   011C 02                 3772 	.db #0x02	; 2
   011D 02                 3773 	.db #0x02	; 2
   011E 02                 3774 	.db #0x02	; 2
   011F 04                 3775 	.db #0x04	; 4
   0120 07                 3776 	.db #0x07	; 7
   0121 85                 3777 	.db #0x85	; 133
   0122 08                 3778 	.db #0x08	; 8
   0123 0E                 3779 	.db #0x0E	; 14
   0124 12                 3780 	.db #0x12	; 18
   0125 72                 3781 	.db #0x72	; 114	'r'
   0126 8A                 3782 	.db #0x8A	; 138
   0127 0E                 3783 	.db #0x0E	; 14
   0128 18                 3784 	.db #0x18	; 24
   0129 BB                 3785 	.db #0xBB	; 187
   012A 0E                 3786 	.db #0x0E	; 14
   012B BB                 3787 	.db #0xBB	; 187
   012C EA                 3788 	.db #0xEA	; 234
   012D FF                 3789 	.db #0xFF	; 255
   012E 1E                 3790 	.db #0x1E	; 30
   012F 1E                 3791 	.db #0x1E	; 30
   0130 1E                 3792 	.db #0x1E	; 30
   0131 21                 3793 	.db #0x21	; 33
   0132 21                 3794 	.db #0x21	; 33
   0133 21                 3795 	.db #0x21	; 33
   0134 21                 3796 	.db #0x21	; 33
   0135 30                 3797 	.db #0x30	; 48	'0'
   0136 41                 3798 	.db #0x41	; 65	'A'
   0137 50                 3799 	.db #0x50	; 80	'P'
   0138 50                 3800 	.db #0x50	; 80	'P'
   0139 50                 3801 	.db #0x50	; 80	'P'
   013A 50                 3802 	.db #0x50	; 80	'P'
   013B 10                 3803 	.db #0x10	; 16
   013C 20                 3804 	.db #0x20	; 32
   013D 41                 3805 	.db #0x41	; 65	'A'
   013E 83                 3806 	.db #0x83	; 131
   013F 9B                 3807 	.db #0x9B	; 155
   0140 C4                 3808 	.db #0xC4	; 196
   0141 08                 3809 	.db #0x08	; 8
   0142 0C                 3810 	.db #0x0C	; 12
   0143 10                 3811 	.db #0x10	; 16
   0144 18                 3812 	.db #0x18	; 24
   0145 20                 3813 	.db #0x20	; 32
   0146 31                 3814 	.db #0x31	; 49	'1'
   0147 40                 3815 	.db #0x40	; 64
   0148 62                 3816 	.db #0x62	; 98	'b'
   0149 C5                 3817 	.db #0xC5	; 197
   014A 89                 3818 	.db #0x89	; 137
   014B 12                 3819 	.db #0x12	; 18
   014C A6                 3820 	.db #0xA6	; 166
   014D 9C                 3821 	.db #0x9C	; 156
   014E 31                 3822 	.db #0x31	; 49	'1'
   014F 4A                 3823 	.db #0x4A	; 74	'J'
   0150 62                 3824 	.db #0x62	; 98	'b'
   0151 93                 3825 	.db #0x93	; 147
   0152 C5                 3826 	.db #0xC5	; 197
   0153 27                 3827 	.db #0x27	; 39
   0154 00                 3828 	.db #0x00	; 0
   0155 03                 3829 	.db #0x03	; 3
   0156 06                 3830 	.db #0x06	; 6
   0157 0D                 3831 	.db #0x0D	; 13
   0158 1A                 3832 	.db #0x1A	; 26
   0159 1E                 3833 	.db #0x1E	; 30
   015A 26                 3834 	.db #0x26	; 38
   015B 33                 3835 	.db #0x33	; 51	'3'
   015C 4D                 3836 	.db #0x4D	; 77	'M'
   015D 66                 3837 	.db #0x66	; 102	'f'
   015E 9A                 3838 	.db #0x9A	; 154
   015F CD                 3839 	.db #0xCD	; 205
   0160 FE                 3840 	.db #0xFE	; 254
   0161 FE                 3841 	.db #0xFE	; 254
   0162                    3842 _reg_table_868:
   0162 01                 3843 	.db #0x01	; 1
   0163 01                 3844 	.db #0x01	; 1
   0164 01                 3845 	.db #0x01	; 1
   0165 01                 3846 	.db #0x01	; 1
   0166 01                 3847 	.db #0x01	; 1
   0167 01                 3848 	.db #0x01	; 1
   0168 05                 3849 	.db #0x05	; 5
   0169 0B                 3850 	.db #0x0B	; 11
   016A 9A                 3851 	.db #0x9A	; 154
   016B 88                 3852 	.db #0x88	; 136
   016C 8A                 3853 	.db #0x8A	; 138
   016D 8C                 3854 	.db #0x8C	; 140
   016E 8D                 3855 	.db #0x8D	; 141
   016F 03                 3856 	.db #0x03	; 3
   0170 03                 3857 	.db #0x03	; 3
   0171 03                 3858 	.db #0x03	; 3
   0172 03                 3859 	.db #0x03	; 3
   0173 03                 3860 	.db #0x03	; 3
   0174 03                 3861 	.db #0x03	; 3
   0175 03                 3862 	.db #0x03	; 3
   0176 03                 3863 	.db #0x03	; 3
   0177 03                 3864 	.db #0x03	; 3
   0178 03                 3865 	.db #0x03	; 3
   0179 03                 3866 	.db #0x03	; 3
   017A 03                 3867 	.db #0x03	; 3
   017B 03                 3868 	.db #0x03	; 3
   017C D0                 3869 	.db #0xD0	; 208
   017D E8                 3870 	.db #0xE8	; 232
   017E F4                 3871 	.db #0xF4	; 244
   017F FA                 3872 	.db #0xFA	; 250
   0180 D3                 3873 	.db #0xD3	; 211
   0181 A7                 3874 	.db #0xA7	; 167
   0182 7D                 3875 	.db #0x7D	; 125
   0183 53                 3876 	.db #0x53	; 83	'S'
   0184 5E                 3877 	.db #0x5E	; 94
   0185 7D                 3878 	.db #0x7D	; 125
   0186 5E                 3879 	.db #0x5E	; 94
   0187 3F                 3880 	.db #0x3F	; 63
   0188 30                 3881 	.db #0x30	; 48	'0'
   0189 E0                 3882 	.db #0xE0	; 224
   018A 60                 3883 	.db #0x60	; 96
   018B 20                 3884 	.db #0x20	; 32
   018C 00                 3885 	.db #0x00	; 0
   018D 00                 3886 	.db #0x00	; 0
   018E 00                 3887 	.db #0x00	; 0
   018F 01                 3888 	.db #0x01	; 1
   0190 01                 3889 	.db #0x01	; 1
   0191 01                 3890 	.db #0x01	; 1
   0192 01                 3891 	.db #0x01	; 1
   0193 01                 3892 	.db #0x01	; 1
   0194 02                 3893 	.db #0x02	; 2
   0195 02                 3894 	.db #0x02	; 2
   0196 10                 3895 	.db #0x10	; 16
   0197 20                 3896 	.db #0x20	; 32
   0198 41                 3897 	.db #0x41	; 65	'A'
   0199 83                 3898 	.db #0x83	; 131
   019A 9B                 3899 	.db #0x9B	; 155
   019B C4                 3900 	.db #0xC4	; 196
   019C 06                 3901 	.db #0x06	; 6
   019D 89                 3902 	.db #0x89	; 137
   019E 5D                 3903 	.db #0x5D	; 93
   019F 06                 3904 	.db #0x06	; 6
   01A0 5D                 3905 	.db #0x5D	; 93
   01A1 0C                 3906 	.db #0x0C	; 12
   01A2 AA                 3907 	.db #0xAA	; 170
   01A3 62                 3908 	.db #0x62	; 98	'b'
   01A4 C5                 3909 	.db #0xC5	; 197
   01A5 89                 3910 	.db #0x89	; 137
   01A6 12                 3911 	.db #0x12	; 18
   01A7 A6                 3912 	.db #0xA6	; 166
   01A8 9C                 3913 	.db #0x9C	; 156
   01A9 25                 3914 	.db #0x25	; 37
   01AA 37                 3915 	.db #0x37	; 55	'7'
   01AB 86                 3916 	.db #0x86	; 134
   01AC 25                 3917 	.db #0x25	; 37
   01AD 86                 3918 	.db #0x86	; 134
   01AE 4A                 3919 	.db #0x4A	; 74	'J'
   01AF AB                 3920 	.db #0xAB	; 171
   01B0 00                 3921 	.db #0x00	; 0
   01B1 00                 3922 	.db #0x00	; 0
   01B2 00                 3923 	.db #0x00	; 0
   01B3 01                 3924 	.db #0x01	; 1
   01B4 01                 3925 	.db #0x01	; 1
   01B5 01                 3926 	.db #0x01	; 1
   01B6 02                 3927 	.db #0x02	; 2
   01B7 03                 3928 	.db #0x03	; 3
   01B8 02                 3929 	.db #0x02	; 2
   01B9 02                 3930 	.db #0x02	; 2
   01BA 02                 3931 	.db #0x02	; 2
   01BB 04                 3932 	.db #0x04	; 4
   01BC 07                 3933 	.db #0x07	; 7
   01BD 23                 3934 	.db #0x23	; 35
   01BE 44                 3935 	.db #0x44	; 68	'D'
   01BF 85                 3936 	.db #0x85	; 133
   01C0 08                 3937 	.db #0x08	; 8
   01C1 39                 3938 	.db #0x39	; 57	'9'
   01C2 8A                 3939 	.db #0x8A	; 138
   01C3 0E                 3940 	.db #0x0E	; 14
   01C4 18                 3941 	.db #0x18	; 24
   01C5 BB                 3942 	.db #0xBB	; 187
   01C6 0E                 3943 	.db #0x0E	; 14
   01C7 BB                 3944 	.db #0xBB	; 187
   01C8 EA                 3945 	.db #0xEA	; 234
   01C9 FF                 3946 	.db #0xFF	; 255
   01CA 1C                 3947 	.db #0x1C	; 28
   01CB 1C                 3948 	.db #0x1C	; 28
   01CC 1C                 3949 	.db #0x1C	; 28
   01CD 1C                 3950 	.db #0x1C	; 28
   01CE 1C                 3951 	.db #0x1C	; 28
   01CF 1E                 3952 	.db #0x1E	; 30
   01D0 20                 3953 	.db #0x20	; 32
   01D1 30                 3954 	.db #0x30	; 48	'0'
   01D2 41                 3955 	.db #0x41	; 65	'A'
   01D3 50                 3956 	.db #0x50	; 80	'P'
   01D4 50                 3957 	.db #0x50	; 80	'P'
   01D5 50                 3958 	.db #0x50	; 80	'P'
   01D6 50                 3959 	.db #0x50	; 80	'P'
   01D7 10                 3960 	.db #0x10	; 16
   01D8 20                 3961 	.db #0x20	; 32
   01D9 41                 3962 	.db #0x41	; 65	'A'
   01DA 83                 3963 	.db #0x83	; 131
   01DB 9B                 3964 	.db #0x9B	; 155
   01DC C4                 3965 	.db #0xC4	; 196
   01DD 08                 3966 	.db #0x08	; 8
   01DE 0C                 3967 	.db #0x0C	; 12
   01DF 10                 3968 	.db #0x10	; 16
   01E0 18                 3969 	.db #0x18	; 24
   01E1 20                 3970 	.db #0x20	; 32
   01E2 31                 3971 	.db #0x31	; 49	'1'
   01E3 40                 3972 	.db #0x40	; 64
   01E4 62                 3973 	.db #0x62	; 98	'b'
   01E5 C5                 3974 	.db #0xC5	; 197
   01E6 89                 3975 	.db #0x89	; 137
   01E7 12                 3976 	.db #0x12	; 18
   01E8 A6                 3977 	.db #0xA6	; 166
   01E9 9C                 3978 	.db #0x9C	; 156
   01EA 31                 3979 	.db #0x31	; 49	'1'
   01EB 4A                 3980 	.db #0x4A	; 74	'J'
   01EC 62                 3981 	.db #0x62	; 98	'b'
   01ED 93                 3982 	.db #0x93	; 147
   01EE C5                 3983 	.db #0xC5	; 197
   01EF 27                 3984 	.db #0x27	; 39
   01F0 00                 3985 	.db #0x00	; 0
   01F1 03                 3986 	.db #0x03	; 3
   01F2 06                 3987 	.db #0x06	; 6
   01F3 0D                 3988 	.db #0x0D	; 13
   01F4 1A                 3989 	.db #0x1A	; 26
   01F5 1E                 3990 	.db #0x1E	; 30
   01F6 26                 3991 	.db #0x26	; 38
   01F7 33                 3992 	.db #0x33	; 51	'3'
   01F8 4D                 3993 	.db #0x4D	; 77	'M'
   01F9 66                 3994 	.db #0x66	; 102	'f'
   01FA 9A                 3995 	.db #0x9A	; 154
   01FB CD                 3996 	.db #0xCD	; 205
   01FC FE                 3997 	.db #0xFE	; 254
   01FD FE                 3998 	.db #0xFE	; 254
   01FE                    3999 _reg_table_915:
   01FE 01                 4000 	.db #0x01	; 1
   01FF 01                 4001 	.db #0x01	; 1
   0200 01                 4002 	.db #0x01	; 1
   0201 01                 4003 	.db #0x01	; 1
   0202 01                 4004 	.db #0x01	; 1
   0203 01                 4005 	.db #0x01	; 1
   0204 05                 4006 	.db #0x05	; 5
   0205 0B                 4007 	.db #0x0B	; 11
   0206 9A                 4008 	.db #0x9A	; 154
   0207 88                 4009 	.db #0x88	; 136
   0208 8A                 4010 	.db #0x8A	; 138
   0209 8C                 4011 	.db #0x8C	; 140
   020A 8D                 4012 	.db #0x8D	; 141
   020B 03                 4013 	.db #0x03	; 3
   020C 03                 4014 	.db #0x03	; 3
   020D 03                 4015 	.db #0x03	; 3
   020E 03                 4016 	.db #0x03	; 3
   020F 03                 4017 	.db #0x03	; 3
   0210 03                 4018 	.db #0x03	; 3
   0211 03                 4019 	.db #0x03	; 3
   0212 03                 4020 	.db #0x03	; 3
   0213 03                 4021 	.db #0x03	; 3
   0214 03                 4022 	.db #0x03	; 3
   0215 03                 4023 	.db #0x03	; 3
   0216 03                 4024 	.db #0x03	; 3
   0217 03                 4025 	.db #0x03	; 3
   0218 D0                 4026 	.db #0xD0	; 208
   0219 E8                 4027 	.db #0xE8	; 232
   021A F4                 4028 	.db #0xF4	; 244
   021B FA                 4029 	.db #0xFA	; 250
   021C D3                 4030 	.db #0xD3	; 211
   021D A7                 4031 	.db #0xA7	; 167
   021E 7D                 4032 	.db #0x7D	; 125
   021F 53                 4033 	.db #0x53	; 83	'S'
   0220 5E                 4034 	.db #0x5E	; 94
   0221 7D                 4035 	.db #0x7D	; 125
   0222 5E                 4036 	.db #0x5E	; 94
   0223 3F                 4037 	.db #0x3F	; 63
   0224 30                 4038 	.db #0x30	; 48	'0'
   0225 E0                 4039 	.db #0xE0	; 224
   0226 60                 4040 	.db #0x60	; 96
   0227 20                 4041 	.db #0x20	; 32
   0228 00                 4042 	.db #0x00	; 0
   0229 00                 4043 	.db #0x00	; 0
   022A 00                 4044 	.db #0x00	; 0
   022B 01                 4045 	.db #0x01	; 1
   022C 01                 4046 	.db #0x01	; 1
   022D 01                 4047 	.db #0x01	; 1
   022E 01                 4048 	.db #0x01	; 1
   022F 01                 4049 	.db #0x01	; 1
   0230 02                 4050 	.db #0x02	; 2
   0231 02                 4051 	.db #0x02	; 2
   0232 10                 4052 	.db #0x10	; 16
   0233 20                 4053 	.db #0x20	; 32
   0234 41                 4054 	.db #0x41	; 65	'A'
   0235 83                 4055 	.db #0x83	; 131
   0236 9B                 4056 	.db #0x9B	; 155
   0237 C4                 4057 	.db #0xC4	; 196
   0238 06                 4058 	.db #0x06	; 6
   0239 89                 4059 	.db #0x89	; 137
   023A 5D                 4060 	.db #0x5D	; 93
   023B 06                 4061 	.db #0x06	; 6
   023C 5D                 4062 	.db #0x5D	; 93
   023D 0C                 4063 	.db #0x0C	; 12
   023E AA                 4064 	.db #0xAA	; 170
   023F 62                 4065 	.db #0x62	; 98	'b'
   0240 C5                 4066 	.db #0xC5	; 197
   0241 89                 4067 	.db #0x89	; 137
   0242 12                 4068 	.db #0x12	; 18
   0243 A6                 4069 	.db #0xA6	; 166
   0244 9C                 4070 	.db #0x9C	; 156
   0245 25                 4071 	.db #0x25	; 37
   0246 37                 4072 	.db #0x37	; 55	'7'
   0247 86                 4073 	.db #0x86	; 134
   0248 25                 4074 	.db #0x25	; 37
   0249 86                 4075 	.db #0x86	; 134
   024A 4A                 4076 	.db #0x4A	; 74	'J'
   024B AB                 4077 	.db #0xAB	; 171
   024C 00                 4078 	.db #0x00	; 0
   024D 00                 4079 	.db #0x00	; 0
   024E 00                 4080 	.db #0x00	; 0
   024F 01                 4081 	.db #0x01	; 1
   0250 01                 4082 	.db #0x01	; 1
   0251 01                 4083 	.db #0x01	; 1
   0252 02                 4084 	.db #0x02	; 2
   0253 03                 4085 	.db #0x03	; 3
   0254 02                 4086 	.db #0x02	; 2
   0255 02                 4087 	.db #0x02	; 2
   0256 02                 4088 	.db #0x02	; 2
   0257 04                 4089 	.db #0x04	; 4
   0258 07                 4090 	.db #0x07	; 7
   0259 23                 4091 	.db #0x23	; 35
   025A 44                 4092 	.db #0x44	; 68	'D'
   025B 85                 4093 	.db #0x85	; 133
   025C 08                 4094 	.db #0x08	; 8
   025D 39                 4095 	.db #0x39	; 57	'9'
   025E 8A                 4096 	.db #0x8A	; 138
   025F 0E                 4097 	.db #0x0E	; 14
   0260 18                 4098 	.db #0x18	; 24
   0261 BB                 4099 	.db #0xBB	; 187
   0262 0E                 4100 	.db #0x0E	; 14
   0263 BB                 4101 	.db #0xBB	; 187
   0264 EA                 4102 	.db #0xEA	; 234
   0265 FF                 4103 	.db #0xFF	; 255
   0266 1E                 4104 	.db #0x1E	; 30
   0267 1E                 4105 	.db #0x1E	; 30
   0268 1E                 4106 	.db #0x1E	; 30
   0269 1E                 4107 	.db #0x1E	; 30
   026A 1E                 4108 	.db #0x1E	; 30
   026B 1E                 4109 	.db #0x1E	; 30
   026C 20                 4110 	.db #0x20	; 32
   026D 30                 4111 	.db #0x30	; 48	'0'
   026E 41                 4112 	.db #0x41	; 65	'A'
   026F 50                 4113 	.db #0x50	; 80	'P'
   0270 50                 4114 	.db #0x50	; 80	'P'
   0271 50                 4115 	.db #0x50	; 80	'P'
   0272 50                 4116 	.db #0x50	; 80	'P'
   0273 10                 4117 	.db #0x10	; 16
   0274 20                 4118 	.db #0x20	; 32
   0275 41                 4119 	.db #0x41	; 65	'A'
   0276 83                 4120 	.db #0x83	; 131
   0277 9B                 4121 	.db #0x9B	; 155
   0278 C4                 4122 	.db #0xC4	; 196
   0279 08                 4123 	.db #0x08	; 8
   027A 0C                 4124 	.db #0x0C	; 12
   027B 10                 4125 	.db #0x10	; 16
   027C 18                 4126 	.db #0x18	; 24
   027D 20                 4127 	.db #0x20	; 32
   027E 31                 4128 	.db #0x31	; 49	'1'
   027F 40                 4129 	.db #0x40	; 64
   0280 62                 4130 	.db #0x62	; 98	'b'
   0281 C5                 4131 	.db #0xC5	; 197
   0282 89                 4132 	.db #0x89	; 137
   0283 12                 4133 	.db #0x12	; 18
   0284 A6                 4134 	.db #0xA6	; 166
   0285 9C                 4135 	.db #0x9C	; 156
   0286 31                 4136 	.db #0x31	; 49	'1'
   0287 4A                 4137 	.db #0x4A	; 74	'J'
   0288 62                 4138 	.db #0x62	; 98	'b'
   0289 93                 4139 	.db #0x93	; 147
   028A C5                 4140 	.db #0xC5	; 197
   028B 27                 4141 	.db #0x27	; 39
   028C 00                 4142 	.db #0x00	; 0
   028D 03                 4143 	.db #0x03	; 3
   028E 06                 4144 	.db #0x06	; 6
   028F 0D                 4145 	.db #0x0D	; 13
   0290 1A                 4146 	.db #0x1A	; 26
   0291 1E                 4147 	.db #0x1E	; 30
   0292 26                 4148 	.db #0x26	; 38
   0293 33                 4149 	.db #0x33	; 51	'3'
   0294 4D                 4150 	.db #0x4D	; 77	'M'
   0295 66                 4151 	.db #0x66	; 102	'f'
   0296 9A                 4152 	.db #0x9A	; 154
   0297 CD                 4153 	.db #0xCD	; 205
   0298 FE                 4154 	.db #0xFE	; 254
   0299 FE                 4155 	.db #0xFE	; 254
   029A                    4156 _power_levels:
   029A EB                 4157 	.db #0xEB	; 235
   029B E6                 4158 	.db #0xE6	; 230
   029C E0                 4159 	.db #0xE0	; 224
   029D DA                 4160 	.db #0xDA	; 218
   029E D3                 4161 	.db #0xD3	; 211
   029F CE                 4162 	.db #0xCE	; 206
   02A0 C9                 4163 	.db #0xC9	; 201
   02A1 C4                 4164 	.db #0xC4	; 196
   02A2 BE                 4165 	.db #0xBE	; 190
   02A3 B8                 4166 	.db #0xB8	; 184
   02A4 B2                 4167 	.db #0xB2	; 178
   02A5 AB                 4168 	.db #0xAB	; 171
   02A6 A4                 4169 	.db #0xA4	; 164
   02A7 96                 4170 	.db #0x96	; 150
   02A8 88                 4171 	.db #0x88	; 136
   02A9 50                 4172 	.db #0x50	; 80	'P'
                           4173 	.area XINIT   (CODE)
                           4174 	.area CABS    (ABS,CODE)
