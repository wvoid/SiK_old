                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Nov 22 2011) (Linux)
                              4 ; This file was generated Wed Sep  7 09:33:09 2022
                              5 ;--------------------------------------------------------
                              6 	.module tdm
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _fhop_set_locked
                             13 	.globl _fhop_window_change
                             14 	.globl _fhop_receive_channel
                             15 	.globl _fhop_transmit_channel
                             16 	.globl _packet_inject
                             17 	.globl _packet_set_max_xmit
                             18 	.globl _packet_force_resend
                             19 	.globl _packet_is_duplicate
                             20 	.globl _packet_is_injected
                             21 	.globl _packet_is_resend
                             22 	.globl _packet_get_next
                             23 	.globl _timer_entropy
                             24 	.globl _delay_msec
                             25 	.globl _timer2_tick
                             26 	.globl _radio_temperature
                             27 	.globl _MAVLink_report
                             28 	.globl _radio_receive_in_progress
                             29 	.globl _radio_get_transmit_power
                             30 	.globl _radio_air_rate
                             31 	.globl _radio_current_rssi
                             32 	.globl _radio_last_rssi
                             33 	.globl _radio_set_channel
                             34 	.globl _radio_receiver_on
                             35 	.globl _radio_transmit
                             36 	.globl _radio_preamble_detected
                             37 	.globl _radio_receive_packet
                             38 	.globl _printf_end_capture
                             39 	.globl _printf_start_capture
                             40 	.globl _printfl
                             41 	.globl _panic
                             42 	.globl _at_command
                             43 	.globl _constrain
                             44 	.globl _param_get
                             45 	.globl _pins_user_check
                             46 	.globl _serial_write_buf
                             47 	.globl _strlen
                             48 	.globl _memset
                             49 	.globl _memcpy
                             50 	.globl _rand
                             51 	.globl _NSS1
                             52 	.globl _IRQ
                             53 	.globl _PA_ENABLE
                             54 	.globl _PIN_ENABLE
                             55 	.globl _PIN_CONFIG
                             56 	.globl _LED_GREEN
                             57 	.globl _LED_RED
                             58 	.globl _SPI0EN
                             59 	.globl _TXBMT0
                             60 	.globl _NSS0MD0
                             61 	.globl _NSS0MD1
                             62 	.globl _RXOVRN0
                             63 	.globl _MODF0
                             64 	.globl _WCOL0
                             65 	.globl _SPIF0
                             66 	.globl _AD0CM0
                             67 	.globl _AD0CM1
                             68 	.globl _AD0CM2
                             69 	.globl _AD0WINT
                             70 	.globl _AD0BUSY
                             71 	.globl _AD0INT
                             72 	.globl _BURSTEN
                             73 	.globl _AD0EN
                             74 	.globl _CCF0
                             75 	.globl _CCF1
                             76 	.globl _CCF2
                             77 	.globl _CCF3
                             78 	.globl _CCF4
                             79 	.globl _CCF5
                             80 	.globl _CR
                             81 	.globl _CF
                             82 	.globl _P
                             83 	.globl _F1
                             84 	.globl _OV
                             85 	.globl _RS0
                             86 	.globl _RS1
                             87 	.globl _F0
                             88 	.globl _AC
                             89 	.globl _CY
                             90 	.globl _T2XCLK
                             91 	.globl _T2RCLK
                             92 	.globl _TR2
                             93 	.globl _T2SPLIT
                             94 	.globl _TF2CEN
                             95 	.globl _TF2LEN
                             96 	.globl _TF2L
                             97 	.globl _TF2H
                             98 	.globl _SI
                             99 	.globl _ACK
                            100 	.globl _ARBLOST
                            101 	.globl _ACKRQ
                            102 	.globl _STO
                            103 	.globl _STA
                            104 	.globl _TXMODE
                            105 	.globl _MASTER
                            106 	.globl _PX0
                            107 	.globl _PT0
                            108 	.globl _PX1
                            109 	.globl _PT1
                            110 	.globl _PS0
                            111 	.globl _PT2
                            112 	.globl _PSPI0
                            113 	.globl _SPI1EN
                            114 	.globl _TXBMT1
                            115 	.globl _NSS1MD0
                            116 	.globl _NSS1MD1
                            117 	.globl _RXOVRN1
                            118 	.globl _MODF1
                            119 	.globl _WCOL1
                            120 	.globl _SPIF1
                            121 	.globl _EX0
                            122 	.globl _ET0
                            123 	.globl _EX1
                            124 	.globl _ET1
                            125 	.globl _ES0
                            126 	.globl _ET2
                            127 	.globl _ESPI0
                            128 	.globl _EA
                            129 	.globl _RI0
                            130 	.globl _TI0
                            131 	.globl _RB80
                            132 	.globl _TB80
                            133 	.globl _REN0
                            134 	.globl _MCE0
                            135 	.globl _S0MODE
                            136 	.globl _CRC0VAL
                            137 	.globl _CRC0INIT
                            138 	.globl _CRC0SEL
                            139 	.globl _IT0
                            140 	.globl _IE0
                            141 	.globl _IT1
                            142 	.globl _IE1
                            143 	.globl _TR0
                            144 	.globl _TF0
                            145 	.globl _TR1
                            146 	.globl _TF1
                            147 	.globl _PCA0CP4
                            148 	.globl _PCA0CP0
                            149 	.globl _PCA0
                            150 	.globl _PCA0CP3
                            151 	.globl _PCA0CP2
                            152 	.globl _PCA0CP1
                            153 	.globl _PCA0CP5
                            154 	.globl _TMR2
                            155 	.globl _TMR2RL
                            156 	.globl _ADC0LT
                            157 	.globl _ADC0GT
                            158 	.globl _ADC0
                            159 	.globl _TMR3
                            160 	.globl _TMR3RL
                            161 	.globl _TOFF
                            162 	.globl _DP
                            163 	.globl _VDM0CN
                            164 	.globl _PCA0CPH4
                            165 	.globl _PCA0CPL4
                            166 	.globl _PCA0CPH0
                            167 	.globl _PCA0CPL0
                            168 	.globl _PCA0H
                            169 	.globl _PCA0L
                            170 	.globl _SPI0CN
                            171 	.globl _EIP2
                            172 	.globl _EIP1
                            173 	.globl _SMB0ADM
                            174 	.globl _SMB0ADR
                            175 	.globl _P2MDIN
                            176 	.globl _P1MDIN
                            177 	.globl _P0MDIN
                            178 	.globl _B
                            179 	.globl _RSTSRC
                            180 	.globl _PCA0CPH3
                            181 	.globl _PCA0CPL3
                            182 	.globl _PCA0CPH2
                            183 	.globl _PCA0CPL2
                            184 	.globl _PCA0CPH1
                            185 	.globl _PCA0CPL1
                            186 	.globl _ADC0CN
                            187 	.globl _EIE2
                            188 	.globl _EIE1
                            189 	.globl _FLWR
                            190 	.globl _IT01CF
                            191 	.globl _XBR2
                            192 	.globl _XBR1
                            193 	.globl _XBR0
                            194 	.globl _ACC
                            195 	.globl _PCA0PWM
                            196 	.globl _PCA0CPM4
                            197 	.globl _PCA0CPM3
                            198 	.globl _PCA0CPM2
                            199 	.globl _PCA0CPM1
                            200 	.globl _PCA0CPM0
                            201 	.globl _PCA0MD
                            202 	.globl _PCA0CN
                            203 	.globl _P0MAT
                            204 	.globl _P2SKIP
                            205 	.globl _P1SKIP
                            206 	.globl _P0SKIP
                            207 	.globl _PCA0CPH5
                            208 	.globl _PCA0CPL5
                            209 	.globl _REF0CN
                            210 	.globl _PSW
                            211 	.globl _P1MAT
                            212 	.globl _PCA0CPM5
                            213 	.globl _TMR2H
                            214 	.globl _TMR2L
                            215 	.globl _TMR2RLH
                            216 	.globl _TMR2RLL
                            217 	.globl _REG0CN
                            218 	.globl _TMR2CN
                            219 	.globl _P0MASK
                            220 	.globl _ADC0LTH
                            221 	.globl _ADC0LTL
                            222 	.globl _ADC0GTH
                            223 	.globl _ADC0GTL
                            224 	.globl _SMB0DAT
                            225 	.globl _SMB0CF
                            226 	.globl _SMB0CN
                            227 	.globl _P1MASK
                            228 	.globl _ADC0H
                            229 	.globl _ADC0L
                            230 	.globl _ADC0TK
                            231 	.globl _ADC0CF
                            232 	.globl _ADC0MX
                            233 	.globl _ADC0PWR
                            234 	.globl _ADC0AC
                            235 	.globl _IREF0CN
                            236 	.globl _IP
                            237 	.globl _FLKEY
                            238 	.globl _FLSCL
                            239 	.globl _PMU0CF
                            240 	.globl _OSCICL
                            241 	.globl _OSCICN
                            242 	.globl _OSCXCN
                            243 	.globl _SPI1CN
                            244 	.globl _ONESHOT
                            245 	.globl _EMI0TC
                            246 	.globl _RTC0KEY
                            247 	.globl _RTC0DAT
                            248 	.globl _RTC0ADR
                            249 	.globl _EMI0CF
                            250 	.globl _EMI0CN
                            251 	.globl _CLKSEL
                            252 	.globl _IE
                            253 	.globl _SFRPAGE
                            254 	.globl _P2DRV
                            255 	.globl _P2MDOUT
                            256 	.globl _P1DRV
                            257 	.globl _P1MDOUT
                            258 	.globl _P0DRV
                            259 	.globl _P0MDOUT
                            260 	.globl _SPI0DAT
                            261 	.globl _SPI0CKR
                            262 	.globl _SPI0CFG
                            263 	.globl _P2
                            264 	.globl _CPT0MX
                            265 	.globl _CPT1MX
                            266 	.globl _CPT0MD
                            267 	.globl _CPT1MD
                            268 	.globl _CPT0CN
                            269 	.globl _CPT1CN
                            270 	.globl _SBUF0
                            271 	.globl _SCON0
                            272 	.globl _CRC0CNT
                            273 	.globl _DC0CN
                            274 	.globl _CRC0AUTO
                            275 	.globl _DC0CF
                            276 	.globl _TMR3H
                            277 	.globl _CRC0FLIP
                            278 	.globl _TMR3L
                            279 	.globl _CRC0IN
                            280 	.globl _TMR3RLH
                            281 	.globl _CRC0CN
                            282 	.globl _TMR3RLL
                            283 	.globl _CRC0DAT
                            284 	.globl _TMR3CN
                            285 	.globl _P1
                            286 	.globl _PSCTL
                            287 	.globl _CKCON
                            288 	.globl _TH1
                            289 	.globl _TH0
                            290 	.globl _TL1
                            291 	.globl _TL0
                            292 	.globl _TMOD
                            293 	.globl _TCON
                            294 	.globl _PCON
                            295 	.globl _TOFFH
                            296 	.globl _SPI1DAT
                            297 	.globl _TOFFL
                            298 	.globl _SPI1CKR
                            299 	.globl _SPI1CFG
                            300 	.globl _DPH
                            301 	.globl _DPL
                            302 	.globl _SP
                            303 	.globl _P0
                            304 	.globl _test_display
                            305 	.globl _pbuf
                            306 	.globl _trailer
                            307 	.globl _lbt_rssi
                            308 	.globl _duty_cycle_offset
                            309 	.globl _duty_cycle
                            310 	.globl _transmit_wait
                            311 	.globl __canary
                            312 	.globl _tdm_show_rssi
                            313 	.globl _tdm_change_phase
                            314 	.globl _tdm_remote_at
                            315 	.globl _tdm_serial_loop
                            316 	.globl _tdm_init
                            317 	.globl _tdm_report_timing
                            318 ;--------------------------------------------------------
                            319 ; special function registers
                            320 ;--------------------------------------------------------
                            321 	.area RSEG    (ABS,DATA)
   0000                     322 	.org 0x0000
                    0080    323 _P0	=	0x0080
                    0081    324 _SP	=	0x0081
                    0082    325 _DPL	=	0x0082
                    0083    326 _DPH	=	0x0083
                    0084    327 _SPI1CFG	=	0x0084
                    0085    328 _SPI1CKR	=	0x0085
                    0085    329 _TOFFL	=	0x0085
                    0086    330 _SPI1DAT	=	0x0086
                    0086    331 _TOFFH	=	0x0086
                    0087    332 _PCON	=	0x0087
                    0088    333 _TCON	=	0x0088
                    0089    334 _TMOD	=	0x0089
                    008A    335 _TL0	=	0x008a
                    008B    336 _TL1	=	0x008b
                    008C    337 _TH0	=	0x008c
                    008D    338 _TH1	=	0x008d
                    008E    339 _CKCON	=	0x008e
                    008F    340 _PSCTL	=	0x008f
                    0090    341 _P1	=	0x0090
                    0091    342 _TMR3CN	=	0x0091
                    0091    343 _CRC0DAT	=	0x0091
                    0092    344 _TMR3RLL	=	0x0092
                    0092    345 _CRC0CN	=	0x0092
                    0093    346 _TMR3RLH	=	0x0093
                    0093    347 _CRC0IN	=	0x0093
                    0094    348 _TMR3L	=	0x0094
                    0095    349 _CRC0FLIP	=	0x0095
                    0095    350 _TMR3H	=	0x0095
                    0096    351 _DC0CF	=	0x0096
                    0096    352 _CRC0AUTO	=	0x0096
                    0097    353 _DC0CN	=	0x0097
                    0097    354 _CRC0CNT	=	0x0097
                    0098    355 _SCON0	=	0x0098
                    0099    356 _SBUF0	=	0x0099
                    009A    357 _CPT1CN	=	0x009a
                    009B    358 _CPT0CN	=	0x009b
                    009C    359 _CPT1MD	=	0x009c
                    009D    360 _CPT0MD	=	0x009d
                    009E    361 _CPT1MX	=	0x009e
                    009F    362 _CPT0MX	=	0x009f
                    00A0    363 _P2	=	0x00a0
                    00A1    364 _SPI0CFG	=	0x00a1
                    00A2    365 _SPI0CKR	=	0x00a2
                    00A3    366 _SPI0DAT	=	0x00a3
                    00A4    367 _P0MDOUT	=	0x00a4
                    00A4    368 _P0DRV	=	0x00a4
                    00A5    369 _P1MDOUT	=	0x00a5
                    00A5    370 _P1DRV	=	0x00a5
                    00A6    371 _P2MDOUT	=	0x00a6
                    00A6    372 _P2DRV	=	0x00a6
                    00A7    373 _SFRPAGE	=	0x00a7
                    00A8    374 _IE	=	0x00a8
                    00A9    375 _CLKSEL	=	0x00a9
                    00AA    376 _EMI0CN	=	0x00aa
                    00AB    377 _EMI0CF	=	0x00ab
                    00AC    378 _RTC0ADR	=	0x00ac
                    00AD    379 _RTC0DAT	=	0x00ad
                    00AE    380 _RTC0KEY	=	0x00ae
                    00AF    381 _EMI0TC	=	0x00af
                    00AF    382 _ONESHOT	=	0x00af
                    00B0    383 _SPI1CN	=	0x00b0
                    00B1    384 _OSCXCN	=	0x00b1
                    00B2    385 _OSCICN	=	0x00b2
                    00B3    386 _OSCICL	=	0x00b3
                    00B5    387 _PMU0CF	=	0x00b5
                    00B6    388 _FLSCL	=	0x00b6
                    00B7    389 _FLKEY	=	0x00b7
                    00B8    390 _IP	=	0x00b8
                    00B9    391 _IREF0CN	=	0x00b9
                    00BA    392 _ADC0AC	=	0x00ba
                    00BA    393 _ADC0PWR	=	0x00ba
                    00BB    394 _ADC0MX	=	0x00bb
                    00BC    395 _ADC0CF	=	0x00bc
                    00BD    396 _ADC0TK	=	0x00bd
                    00BD    397 _ADC0L	=	0x00bd
                    00BE    398 _ADC0H	=	0x00be
                    00BF    399 _P1MASK	=	0x00bf
                    00C0    400 _SMB0CN	=	0x00c0
                    00C1    401 _SMB0CF	=	0x00c1
                    00C2    402 _SMB0DAT	=	0x00c2
                    00C3    403 _ADC0GTL	=	0x00c3
                    00C4    404 _ADC0GTH	=	0x00c4
                    00C5    405 _ADC0LTL	=	0x00c5
                    00C6    406 _ADC0LTH	=	0x00c6
                    00C7    407 _P0MASK	=	0x00c7
                    00C8    408 _TMR2CN	=	0x00c8
                    00C9    409 _REG0CN	=	0x00c9
                    00CA    410 _TMR2RLL	=	0x00ca
                    00CB    411 _TMR2RLH	=	0x00cb
                    00CC    412 _TMR2L	=	0x00cc
                    00CD    413 _TMR2H	=	0x00cd
                    00CE    414 _PCA0CPM5	=	0x00ce
                    00CF    415 _P1MAT	=	0x00cf
                    00D0    416 _PSW	=	0x00d0
                    00D1    417 _REF0CN	=	0x00d1
                    00D2    418 _PCA0CPL5	=	0x00d2
                    00D3    419 _PCA0CPH5	=	0x00d3
                    00D4    420 _P0SKIP	=	0x00d4
                    00D5    421 _P1SKIP	=	0x00d5
                    00D6    422 _P2SKIP	=	0x00d6
                    00D7    423 _P0MAT	=	0x00d7
                    00D8    424 _PCA0CN	=	0x00d8
                    00D9    425 _PCA0MD	=	0x00d9
                    00DA    426 _PCA0CPM0	=	0x00da
                    00DB    427 _PCA0CPM1	=	0x00db
                    00DC    428 _PCA0CPM2	=	0x00dc
                    00DD    429 _PCA0CPM3	=	0x00dd
                    00DE    430 _PCA0CPM4	=	0x00de
                    00DF    431 _PCA0PWM	=	0x00df
                    00E0    432 _ACC	=	0x00e0
                    00E1    433 _XBR0	=	0x00e1
                    00E2    434 _XBR1	=	0x00e2
                    00E3    435 _XBR2	=	0x00e3
                    00E4    436 _IT01CF	=	0x00e4
                    00E5    437 _FLWR	=	0x00e5
                    00E6    438 _EIE1	=	0x00e6
                    00E7    439 _EIE2	=	0x00e7
                    00E8    440 _ADC0CN	=	0x00e8
                    00E9    441 _PCA0CPL1	=	0x00e9
                    00EA    442 _PCA0CPH1	=	0x00ea
                    00EB    443 _PCA0CPL2	=	0x00eb
                    00EC    444 _PCA0CPH2	=	0x00ec
                    00ED    445 _PCA0CPL3	=	0x00ed
                    00EE    446 _PCA0CPH3	=	0x00ee
                    00EF    447 _RSTSRC	=	0x00ef
                    00F0    448 _B	=	0x00f0
                    00F1    449 _P0MDIN	=	0x00f1
                    00F2    450 _P1MDIN	=	0x00f2
                    00F3    451 _P2MDIN	=	0x00f3
                    00F4    452 _SMB0ADR	=	0x00f4
                    00F5    453 _SMB0ADM	=	0x00f5
                    00F6    454 _EIP1	=	0x00f6
                    00F7    455 _EIP2	=	0x00f7
                    00F8    456 _SPI0CN	=	0x00f8
                    00F9    457 _PCA0L	=	0x00f9
                    00FA    458 _PCA0H	=	0x00fa
                    00FB    459 _PCA0CPL0	=	0x00fb
                    00FC    460 _PCA0CPH0	=	0x00fc
                    00FD    461 _PCA0CPL4	=	0x00fd
                    00FE    462 _PCA0CPH4	=	0x00fe
                    00FF    463 _VDM0CN	=	0x00ff
                    8382    464 _DP	=	0x8382
                    8685    465 _TOFF	=	0x8685
                    9392    466 _TMR3RL	=	0x9392
                    9594    467 _TMR3	=	0x9594
                    BEBD    468 _ADC0	=	0xbebd
                    C4C3    469 _ADC0GT	=	0xc4c3
                    C6C5    470 _ADC0LT	=	0xc6c5
                    CBCA    471 _TMR2RL	=	0xcbca
                    CDCC    472 _TMR2	=	0xcdcc
                    D3D2    473 _PCA0CP5	=	0xd3d2
                    EAE9    474 _PCA0CP1	=	0xeae9
                    ECEB    475 _PCA0CP2	=	0xeceb
                    EEED    476 _PCA0CP3	=	0xeeed
                    FAF9    477 _PCA0	=	0xfaf9
                    FCFB    478 _PCA0CP0	=	0xfcfb
                    FEFD    479 _PCA0CP4	=	0xfefd
                            480 ;--------------------------------------------------------
                            481 ; special function bits
                            482 ;--------------------------------------------------------
                            483 	.area RSEG    (ABS,DATA)
   0000                     484 	.org 0x0000
                    008F    485 _TF1	=	0x008f
                    008E    486 _TR1	=	0x008e
                    008D    487 _TF0	=	0x008d
                    008C    488 _TR0	=	0x008c
                    008B    489 _IE1	=	0x008b
                    008A    490 _IT1	=	0x008a
                    0089    491 _IE0	=	0x0089
                    0088    492 _IT0	=	0x0088
                    0096    493 _CRC0SEL	=	0x0096
                    0095    494 _CRC0INIT	=	0x0095
                    0094    495 _CRC0VAL	=	0x0094
                    009F    496 _S0MODE	=	0x009f
                    009D    497 _MCE0	=	0x009d
                    009C    498 _REN0	=	0x009c
                    009B    499 _TB80	=	0x009b
                    009A    500 _RB80	=	0x009a
                    0099    501 _TI0	=	0x0099
                    0098    502 _RI0	=	0x0098
                    00AF    503 _EA	=	0x00af
                    00AE    504 _ESPI0	=	0x00ae
                    00AD    505 _ET2	=	0x00ad
                    00AC    506 _ES0	=	0x00ac
                    00AB    507 _ET1	=	0x00ab
                    00AA    508 _EX1	=	0x00aa
                    00A9    509 _ET0	=	0x00a9
                    00A8    510 _EX0	=	0x00a8
                    00B7    511 _SPIF1	=	0x00b7
                    00B6    512 _WCOL1	=	0x00b6
                    00B5    513 _MODF1	=	0x00b5
                    00B4    514 _RXOVRN1	=	0x00b4
                    00B3    515 _NSS1MD1	=	0x00b3
                    00B2    516 _NSS1MD0	=	0x00b2
                    00B1    517 _TXBMT1	=	0x00b1
                    00B0    518 _SPI1EN	=	0x00b0
                    00BE    519 _PSPI0	=	0x00be
                    00BD    520 _PT2	=	0x00bd
                    00BC    521 _PS0	=	0x00bc
                    00BB    522 _PT1	=	0x00bb
                    00BA    523 _PX1	=	0x00ba
                    00B9    524 _PT0	=	0x00b9
                    00B8    525 _PX0	=	0x00b8
                    00C7    526 _MASTER	=	0x00c7
                    00C6    527 _TXMODE	=	0x00c6
                    00C5    528 _STA	=	0x00c5
                    00C4    529 _STO	=	0x00c4
                    00C3    530 _ACKRQ	=	0x00c3
                    00C2    531 _ARBLOST	=	0x00c2
                    00C1    532 _ACK	=	0x00c1
                    00C0    533 _SI	=	0x00c0
                    00CF    534 _TF2H	=	0x00cf
                    00CE    535 _TF2L	=	0x00ce
                    00CD    536 _TF2LEN	=	0x00cd
                    00CC    537 _TF2CEN	=	0x00cc
                    00CB    538 _T2SPLIT	=	0x00cb
                    00CA    539 _TR2	=	0x00ca
                    00C9    540 _T2RCLK	=	0x00c9
                    00C8    541 _T2XCLK	=	0x00c8
                    00D7    542 _CY	=	0x00d7
                    00D6    543 _AC	=	0x00d6
                    00D5    544 _F0	=	0x00d5
                    00D4    545 _RS1	=	0x00d4
                    00D3    546 _RS0	=	0x00d3
                    00D2    547 _OV	=	0x00d2
                    00D1    548 _F1	=	0x00d1
                    00D0    549 _P	=	0x00d0
                    00DF    550 _CF	=	0x00df
                    00DE    551 _CR	=	0x00de
                    00DD    552 _CCF5	=	0x00dd
                    00DC    553 _CCF4	=	0x00dc
                    00DB    554 _CCF3	=	0x00db
                    00DA    555 _CCF2	=	0x00da
                    00D9    556 _CCF1	=	0x00d9
                    00D8    557 _CCF0	=	0x00d8
                    00EF    558 _AD0EN	=	0x00ef
                    00EE    559 _BURSTEN	=	0x00ee
                    00ED    560 _AD0INT	=	0x00ed
                    00EC    561 _AD0BUSY	=	0x00ec
                    00EB    562 _AD0WINT	=	0x00eb
                    00EA    563 _AD0CM2	=	0x00ea
                    00E9    564 _AD0CM1	=	0x00e9
                    00E8    565 _AD0CM0	=	0x00e8
                    00FF    566 _SPIF0	=	0x00ff
                    00FE    567 _WCOL0	=	0x00fe
                    00FD    568 _MODF0	=	0x00fd
                    00FC    569 _RXOVRN0	=	0x00fc
                    00FB    570 _NSS0MD1	=	0x00fb
                    00FA    571 _NSS0MD0	=	0x00fa
                    00F9    572 _TXBMT0	=	0x00f9
                    00F8    573 _SPI0EN	=	0x00f8
                    0096    574 _LED_RED	=	0x0096
                    0095    575 _LED_GREEN	=	0x0095
                    0082    576 _PIN_CONFIG	=	0x0082
                    0083    577 _PIN_ENABLE	=	0x0083
                    00A5    578 _PA_ENABLE	=	0x00a5
                    0087    579 _IRQ	=	0x0087
                    0094    580 _NSS1	=	0x0094
                            581 ;--------------------------------------------------------
                            582 ; overlayable register banks
                            583 ;--------------------------------------------------------
                            584 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     585 	.ds 8
                            586 ;--------------------------------------------------------
                            587 ; internal ram data
                            588 ;--------------------------------------------------------
                            589 	.area DSEG    (DATA)
   0000                     590 _tdm_show_rssi_sloc0_1_0:
   0000                     591 	.ds 2
   0002                     592 _tdm_show_rssi_sloc1_1_0:
   0002                     593 	.ds 2
   0004                     594 _tdm_show_rssi_sloc2_1_0:
   0004                     595 	.ds 2
   0006                     596 _tdm_show_rssi_sloc3_1_0:
   0006                     597 	.ds 2
   0008                     598 _tdm_show_rssi_sloc4_1_0:
   0008                     599 	.ds 2
   000A                     600 _sync_tx_windows_old_state_1_1:
   000A                     601 	.ds 1
   000B                     602 _tdm_state_update_sloc0_1_0:
   000B                     603 	.ds 2
   000D                     604 _tdm_state_update_sloc1_1_0:
   000D                     605 	.ds 4
   0011                     606 _tdm_state_update_sloc2_1_0:
   0011                     607 	.ds 4
   0015                     608 _tdm_init_sloc0_1_0:
   0015                     609 	.ds 4
                            610 ;--------------------------------------------------------
                            611 ; overlayable items in internal ram 
                            612 ;--------------------------------------------------------
                            613 	.area OSEG    (OVR,DATA)
                            614 ;--------------------------------------------------------
                            615 ; indirectly addressable internal ram data
                            616 ;--------------------------------------------------------
                            617 	.area ISEG    (DATA)
                    00FF    618 __canary	=	0x00ff
                            619 ;--------------------------------------------------------
                            620 ; absolute internal ram data
                            621 ;--------------------------------------------------------
                            622 	.area IABS    (ABS,DATA)
                            623 	.area IABS    (ABS,DATA)
                            624 ;--------------------------------------------------------
                            625 ; bit data
                            626 ;--------------------------------------------------------
                            627 	.area BSEG    (BIT)
   0000                     628 _bonus_transmit:
   0000                     629 	.ds 1
   0001                     630 _transmit_yield:
   0001                     631 	.ds 1
   0002                     632 _blink_state:
   0002                     633 	.ds 1
   0003                     634 _received_packet:
   0003                     635 	.ds 1
   0004                     636 _duty_cycle_wait:
   0004                     637 	.ds 1
   0005                     638 _send_statistics:
   0005                     639 	.ds 1
   0006                     640 _send_at_command:
   0006                     641 	.ds 1
   0007                     642 _sync_tx_windows_sloc0_1_0:
   0007                     643 	.ds 1
   0008                     644 _tdm_state_update_sloc3_1_0:
   0008                     645 	.ds 1
   0009                     646 _tdm_serial_loop_sloc0_1_0:
   0009                     647 	.ds 1
                            648 ;--------------------------------------------------------
                            649 ; paged external ram data
                            650 ;--------------------------------------------------------
                            651 	.area PSEG    (PAG,XDATA)
   0000                     652 _tdm_state:
   0000                     653 	.ds 1
   0001                     654 _tdm_state_remaining:
   0001                     655 	.ds 2
   0003                     656 _tx_window_width:
   0003                     657 	.ds 2
   0005                     658 _max_data_packet_length:
   0005                     659 	.ds 1
   0006                     660 _silence_period:
   0006                     661 	.ds 2
   0008                     662 _packet_latency:
   0008                     663 	.ds 2
   000A                     664 _ticks_per_byte:
   000A                     665 	.ds 2
   000C                     666 _transmit_wait::
   000C                     667 	.ds 2
   000E                     668 _duty_cycle::
   000E                     669 	.ds 1
   000F                     670 _average_duty_cycle:
   000F                     671 	.ds 4
   0013                     672 _duty_cycle_offset::
   0013                     673 	.ds 1
   0014                     674 _transmitted_ticks:
   0014                     675 	.ds 2
   0016                     676 _lbt_rssi::
   0016                     677 	.ds 1
   0017                     678 _lbt_listen_time:
   0017                     679 	.ds 2
   0019                     680 _lbt_min_time:
   0019                     681 	.ds 2
   001B                     682 _lbt_rand:
   001B                     683 	.ds 2
   001D                     684 _trailer::
   001D                     685 	.ds 2
   001F                     686 _remote_at_cmd:
   001F                     687 	.ds 17
   0030                     688 _sync_tx_windows_delta_2_8:
   0030                     689 	.ds 2
   0032                     690 _tdm_serial_loop_len_1_1:
   0032                     691 	.ds 1
   0033                     692 _tdm_serial_loop_tdelta_1_1:
   0033                     693 	.ds 2
   0035                     694 _tdm_serial_loop_last_t_1_1:
   0035                     695 	.ds 2
   0037                     696 _tdm_serial_loop_last_link_update_1_1:
   0037                     697 	.ds 2
                            698 ;--------------------------------------------------------
                            699 ; external ram data
                            700 ;--------------------------------------------------------
                            701 	.area XSEG    (XDATA)
   0000                     702 _pbuf::
   0000                     703 	.ds 252
   00FC                     704 _test_display::
   00FC                     705 	.ds 1
   00FD                     706 _link_update_unlock_count_1_1:
   00FD                     707 	.ds 1
   00FE                     708 _link_update_temperature_count_1_1:
   00FE                     709 	.ds 1
   00FF                     710 _tdm_init_i_1_1:
   00FF                     711 	.ds 2
   0101                     712 _tdm_init_window_width_1_1:
   0101                     713 	.ds 4
                            714 ;--------------------------------------------------------
                            715 ; absolute external ram data
                            716 ;--------------------------------------------------------
                            717 	.area XABS    (ABS,XDATA)
                            718 ;--------------------------------------------------------
                            719 ; external initialized ram data
                            720 ;--------------------------------------------------------
                            721 	.area XISEG   (XDATA)
                            722 	.area HOME    (CODE)
                            723 	.area GSINIT0 (CODE)
                            724 	.area GSINIT1 (CODE)
                            725 	.area GSINIT2 (CODE)
                            726 	.area GSINIT3 (CODE)
                            727 	.area GSINIT4 (CODE)
                            728 	.area GSINIT5 (CODE)
                            729 	.area GSINIT  (CODE)
                            730 	.area GSFINAL (CODE)
                            731 	.area CSEG    (CODE)
                            732 ;--------------------------------------------------------
                            733 ; global & static initialisations
                            734 ;--------------------------------------------------------
                            735 	.area HOME    (CODE)
                            736 	.area GSINIT  (CODE)
                            737 	.area GSFINAL (CODE)
                            738 	.area GSINIT  (CODE)
                            739 ;------------------------------------------------------------
                            740 ;Allocation info for local variables in function 'link_update'
                            741 ;------------------------------------------------------------
                            742 ;old_remaining             Allocated to registers r6 r7 
                            743 ;unlock_count              Allocated with name '_link_update_unlock_count_1_1'
                            744 ;temperature_count         Allocated with name '_link_update_temperature_count_1_1'
                            745 ;------------------------------------------------------------
                            746 ;	radio/tdm.c:383: static uint8_t unlock_count = 10, temperature_count;
   0000 90s00rFD            747 	mov	dptr,#_link_update_unlock_count_1_1
   0003 74 0A               748 	mov	a,#0x0A
   0005 F0                  749 	movx	@dptr,a
                            750 ;--------------------------------------------------------
                            751 ; Home
                            752 ;--------------------------------------------------------
                            753 	.area HOME    (CODE)
                            754 	.area HOME    (CODE)
                            755 ;--------------------------------------------------------
                            756 ; code
                            757 ;--------------------------------------------------------
                            758 	.area CSEG    (CODE)
                            759 ;------------------------------------------------------------
                            760 ;Allocation info for local variables in function 'tdm_show_rssi'
                            761 ;------------------------------------------------------------
                            762 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                            763 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                            764 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                            765 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                            766 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                            767 ;------------------------------------------------------------
                            768 ;	radio/tdm.c:162: tdm_show_rssi(void)
                            769 ;	-----------------------------------------
                            770 ;	 function tdm_show_rssi
                            771 ;	-----------------------------------------
   0000                     772 _tdm_show_rssi:
                    0007    773 	ar7 = 0x07
                    0006    774 	ar6 = 0x06
                    0005    775 	ar5 = 0x05
                    0004    776 	ar4 = 0x04
                    0003    777 	ar3 = 0x03
                    0002    778 	ar2 = 0x02
                    0001    779 	ar1 = 0x01
                    0000    780 	ar0 = 0x00
                            781 ;	radio/tdm.c:164: printf("L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u ",
   0000 78r02               782 	mov	r0,#(_statistics + 0x0002)
   0002 E2                  783 	movx	a,@r0
   0003 FE                  784 	mov	r6,a
   0004 08                  785 	inc	r0
   0005 E2                  786 	movx	a,@r0
   0006 FF                  787 	mov	r7,a
   0007 78r01               788 	mov	r0,#(_remote_statistics + 0x0001)
   0009 E2                  789 	movx	a,@r0
   000A FD                  790 	mov	r5,a
   000B 7C 00               791 	mov	r4,#0x00
   000D 78r01               792 	mov	r0,#(_statistics + 0x0001)
   000F E2                  793 	movx	a,@r0
   0010 FB                  794 	mov	r3,a
   0011 8B*00               795 	mov	_tdm_show_rssi_sloc0_1_0,r3
   0013 75*01 00            796 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),#0x00
   0016 78r00               797 	mov	r0,#_remote_statistics
   0018 E2                  798 	movx	a,@r0
   0019 FB                  799 	mov	r3,a
   001A 8B*02               800 	mov	_tdm_show_rssi_sloc1_1_0,r3
   001C 75*03 00            801 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
   001F 78r00               802 	mov	r0,#_statistics
   0021 E2                  803 	movx	a,@r0
   0022 FB                  804 	mov	r3,a
   0023 7A 00               805 	mov	r2,#0x00
   0025 C0 06               806 	push	ar6
   0027 C0 07               807 	push	ar7
   0029 C0 05               808 	push	ar5
   002B C0 04               809 	push	ar4
   002D C0*00               810 	push	_tdm_show_rssi_sloc0_1_0
   002F C0*01               811 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
   0031 C0*02               812 	push	_tdm_show_rssi_sloc1_1_0
   0033 C0*03               813 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
   0035 C0 03               814 	push	ar3
   0037 C0 02               815 	push	ar2
   0039 74r00               816 	mov	a,#__str_0
   003B C0 E0               817 	push	acc
   003D 74s00               818 	mov	a,#(__str_0 >> 8)
   003F C0 E0               819 	push	acc
   0041 74 80               820 	mov	a,#0x80
   0043 C0 E0               821 	push	acc
   0045 12s00r00            822 	lcall	_printfl
   0048 E5 81               823 	mov	a,sp
   004A 24 F3               824 	add	a,#0xf3
   004C F5 81               825 	mov	sp,a
                            826 ;	radio/tdm.c:173: printf(" txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u\n",
   004E 78r13               827 	mov	r0,#_duty_cycle_offset
   0050 E2                  828 	movx	a,@r0
   0051 FE                  829 	mov	r6,a
   0052 7F 00               830 	mov	r7,#0x00
   0054 C0 07               831 	push	ar7
   0056 C0 06               832 	push	ar6
   0058 12s00r00            833 	lcall	_radio_temperature
   005B AC 82               834 	mov	r4,dpl
   005D AD 83               835 	mov	r5,dph
   005F D0 06               836 	pop	ar6
   0061 D0 07               837 	pop	ar7
   0063 78r0A               838 	mov	r0,#(_errors + 0x000a)
   0065 E2                  839 	movx	a,@r0
   0066 F5*02               840 	mov	_tdm_show_rssi_sloc1_1_0,a
   0068 08                  841 	inc	r0
   0069 E2                  842 	movx	a,@r0
   006A F5*03               843 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
   006C 78r08               844 	mov	r0,#(_errors + 0x0008)
   006E E2                  845 	movx	a,@r0
   006F F5*00               846 	mov	_tdm_show_rssi_sloc0_1_0,a
   0071 08                  847 	inc	r0
   0072 E2                  848 	movx	a,@r0
   0073 F5*01               849 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
   0075 78r06               850 	mov	r0,#(_errors + 0x0006)
   0077 E2                  851 	movx	a,@r0
   0078 F5*04               852 	mov	_tdm_show_rssi_sloc2_1_0,a
   007A 08                  853 	inc	r0
   007B E2                  854 	movx	a,@r0
   007C F5*05               855 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
   007E 78r04               856 	mov	r0,#(_errors + 0x0004)
   0080 E2                  857 	movx	a,@r0
   0081 F5*06               858 	mov	_tdm_show_rssi_sloc3_1_0,a
   0083 08                  859 	inc	r0
   0084 E2                  860 	movx	a,@r0
   0085 F5*07               861 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
   0087 78r00               862 	mov	r0,#_errors
   0089 E2                  863 	movx	a,@r0
   008A F5*08               864 	mov	_tdm_show_rssi_sloc4_1_0,a
   008C 08                  865 	inc	r0
   008D E2                  866 	movx	a,@r0
   008E F5*09               867 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
   0090 78r02               868 	mov	r0,#(_errors + 0x0002)
   0092 E2                  869 	movx	a,@r0
   0093 FA                  870 	mov	r2,a
   0094 08                  871 	inc	r0
   0095 E2                  872 	movx	a,@r0
   0096 FB                  873 	mov	r3,a
   0097 C0 06               874 	push	ar6
   0099 C0 07               875 	push	ar7
   009B C0 04               876 	push	ar4
   009D C0 05               877 	push	ar5
   009F C0*02               878 	push	_tdm_show_rssi_sloc1_1_0
   00A1 C0*03               879 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
   00A3 C0*00               880 	push	_tdm_show_rssi_sloc0_1_0
   00A5 C0*01               881 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
   00A7 C0*04               882 	push	_tdm_show_rssi_sloc2_1_0
   00A9 C0*05               883 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
   00AB C0*06               884 	push	_tdm_show_rssi_sloc3_1_0
   00AD C0*07               885 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
   00AF C0*08               886 	push	_tdm_show_rssi_sloc4_1_0
   00B1 C0*09               887 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
   00B3 C0 02               888 	push	ar2
   00B5 C0 03               889 	push	ar3
   00B7 74r2C               890 	mov	a,#__str_1
   00B9 C0 E0               891 	push	acc
   00BB 74s00               892 	mov	a,#(__str_1 >> 8)
   00BD C0 E0               893 	push	acc
   00BF 74 80               894 	mov	a,#0x80
   00C1 C0 E0               895 	push	acc
   00C3 12s00r00            896 	lcall	_printfl
   00C6 E5 81               897 	mov	a,sp
   00C8 24 ED               898 	add	a,#0xed
   00CA F5 81               899 	mov	sp,a
                            900 ;	radio/tdm.c:186: statistics.receive_count = 0;
   00CC 78r02               901 	mov	r0,#(_statistics + 0x0002)
   00CE E4                  902 	clr	a
   00CF F2                  903 	movx	@r0,a
   00D0 08                  904 	inc	r0
   00D1 F2                  905 	movx	@r0,a
   00D2 22                  906 	ret
                            907 ;------------------------------------------------------------
                            908 ;Allocation info for local variables in function 'display_test_output'
                            909 ;------------------------------------------------------------
                            910 ;	radio/tdm.c:192: display_test_output(void)
                            911 ;	-----------------------------------------
                            912 ;	 function display_test_output
                            913 ;	-----------------------------------------
   00D3                     914 _display_test_output:
                            915 ;	radio/tdm.c:194: if (test_display & AT_TEST_RSSI) {
   00D3 90s00rFC            916 	mov	dptr,#_test_display
   00D6 E0                  917 	movx	a,@dptr
   00D7 FF                  918 	mov	r7,a
   00D8 30 E0 03            919 	jnb	acc.0,00103$
                            920 ;	radio/tdm.c:195: tdm_show_rssi();
   00DB 02s00r00            921 	ljmp	_tdm_show_rssi
   00DE                     922 00103$:
   00DE 22                  923 	ret
                            924 ;------------------------------------------------------------
                            925 ;Allocation info for local variables in function 'flight_time_estimate'
                            926 ;------------------------------------------------------------
                            927 ;	radio/tdm.c:205: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                            928 ;	-----------------------------------------
                            929 ;	 function flight_time_estimate
                            930 ;	-----------------------------------------
   00DF                     931 _flight_time_estimate:
   00DF AF 82               932 	mov	r7,dpl
                            933 ;	radio/tdm.c:207: return packet_latency + (packet_len * ticks_per_byte);
   00E1 7E 00               934 	mov	r6,#0x00
   00E3 78r0A               935 	mov	r0,#_ticks_per_byte
   00E5 90s00r00            936 	mov	dptr,#__mulint_PARM_2
   00E8 E2                  937 	movx	a,@r0
   00E9 F0                  938 	movx	@dptr,a
   00EA 08                  939 	inc	r0
   00EB E2                  940 	movx	a,@r0
   00EC A3                  941 	inc	dptr
   00ED F0                  942 	movx	@dptr,a
   00EE 8F 82               943 	mov	dpl,r7
   00F0 8E 83               944 	mov	dph,r6
   00F2 12s00r00            945 	lcall	__mulint
   00F5 AE 82               946 	mov	r6,dpl
   00F7 AF 83               947 	mov	r7,dph
   00F9 78r08               948 	mov	r0,#_packet_latency
   00FB E2                  949 	movx	a,@r0
   00FC 2E                  950 	add	a,r6
   00FD FE                  951 	mov	r6,a
   00FE 08                  952 	inc	r0
   00FF E2                  953 	movx	a,@r0
   0100 3F                  954 	addc	a,r7
   0101 8E 82               955 	mov	dpl,r6
   0103 F5 83               956 	mov	dph,a
   0105 22                  957 	ret
                            958 ;------------------------------------------------------------
                            959 ;Allocation info for local variables in function 'sync_tx_windows'
                            960 ;------------------------------------------------------------
                            961 ;old_state                 Allocated with name '_sync_tx_windows_old_state_1_1'
                            962 ;------------------------------------------------------------
                            963 ;	radio/tdm.c:221: sync_tx_windows(__pdata uint8_t packet_length)
                            964 ;	-----------------------------------------
                            965 ;	 function sync_tx_windows
                            966 ;	-----------------------------------------
   0106                     967 _sync_tx_windows:
   0106 AF 82               968 	mov	r7,dpl
                            969 ;	radio/tdm.c:223: __data enum tdm_state old_state = tdm_state;
   0108 78r00               970 	mov	r0,#_tdm_state
   010A E2                  971 	movx	a,@r0
   010B F5*0A               972 	mov	_sync_tx_windows_old_state_1_1,a
                            973 ;	radio/tdm.c:224: __pdata uint16_t old_remaining = tdm_state_remaining;
   010D 78r01               974 	mov	r0,#_tdm_state_remaining
   010F E2                  975 	movx	a,@r0
   0110 FC                  976 	mov	r4,a
   0111 08                  977 	inc	r0
   0112 E2                  978 	movx	a,@r0
   0113 FD                  979 	mov	r5,a
                            980 ;	radio/tdm.c:226: if (trailer.bonus) {
   0114 78r1E               981 	mov	r0,#(_trailer + 0x0001)
   0116 E2                  982 	movx	a,@r0
   0117 30 E6 46            983 	jnb	acc.6,00109$
                            984 ;	radio/tdm.c:229: if (old_state == TDM_SILENCE1) {
   011A 74 01               985 	mov	a,#0x01
   011C B5*0A 10            986 	cjne	a,_sync_tx_windows_old_state_1_1,00106$
                            987 ;	radio/tdm.c:235: tdm_state_remaining = silence_period;
   011F 78r06               988 	mov	r0,#_silence_period
   0121 E2                  989 	movx	a,@r0
   0122 FA                  990 	mov	r2,a
   0123 08                  991 	inc	r0
   0124 E2                  992 	movx	a,@r0
   0125 FB                  993 	mov	r3,a
   0126 78r01               994 	mov	r0,#_tdm_state_remaining
   0128 EA                  995 	mov	a,r2
   0129 F2                  996 	movx	@r0,a
   012A 08                  997 	inc	r0
   012B EB                  998 	mov	a,r3
   012C F2                  999 	movx	@r0,a
   012D 80 46              1000 	sjmp	00110$
   012F                    1001 00106$:
                           1002 ;	radio/tdm.c:236: } else if (old_state == TDM_RECEIVE || old_state == TDM_SILENCE2) {
   012F 74 02              1003 	mov	a,#0x02
   0131 B5*0A 02           1004 	cjne	a,_sync_tx_windows_old_state_1_1,00135$
   0134 80 05              1005 	sjmp	00101$
   0136                    1006 00135$:
   0136 74 03              1007 	mov	a,#0x03
   0138 B5*0A 0F           1008 	cjne	a,_sync_tx_windows_old_state_1_1,00102$
   013B                    1009 00101$:
                           1010 ;	radio/tdm.c:241: tdm_state = TDM_SILENCE2;
   013B 78r00              1011 	mov	r0,#_tdm_state
   013D 74 03              1012 	mov	a,#0x03
   013F F2                 1013 	movx	@r0,a
                           1014 ;	radio/tdm.c:242: tdm_state_remaining = 1;
   0140 78r01              1015 	mov	r0,#_tdm_state_remaining
   0142 74 01              1016 	mov	a,#0x01
   0144 F2                 1017 	movx	@r0,a
   0145 08                 1018 	inc	r0
   0146 E4                 1019 	clr	a
   0147 F2                 1020 	movx	@r0,a
   0148 80 2B              1021 	sjmp	00110$
   014A                    1022 00102$:
                           1023 ;	radio/tdm.c:244: tdm_state = TDM_TRANSMIT;
   014A 78r00              1024 	mov	r0,#_tdm_state
   014C E4                 1025 	clr	a
   014D F2                 1026 	movx	@r0,a
                           1027 ;	radio/tdm.c:245: tdm_state_remaining = trailer.window;
   014E 78r1D              1028 	mov	r0,#_trailer
   0150 E2                 1029 	movx	a,@r0
   0151 FA                 1030 	mov	r2,a
   0152 08                 1031 	inc	r0
   0153 E2                 1032 	movx	a,@r0
   0154 54 1F              1033 	anl	a,#0x1F
   0156 FB                 1034 	mov	r3,a
   0157 78r01              1035 	mov	r0,#_tdm_state_remaining
   0159 EA                 1036 	mov	a,r2
   015A F2                 1037 	movx	@r0,a
   015B 08                 1038 	inc	r0
   015C EB                 1039 	mov	a,r3
   015D F2                 1040 	movx	@r0,a
   015E 80 15              1041 	sjmp	00110$
   0160                    1042 00109$:
                           1043 ;	radio/tdm.c:250: tdm_state = TDM_RECEIVE;
   0160 78r00              1044 	mov	r0,#_tdm_state
   0162 74 02              1045 	mov	a,#0x02
   0164 F2                 1046 	movx	@r0,a
                           1047 ;	radio/tdm.c:251: tdm_state_remaining = trailer.window;
   0165 78r1D              1048 	mov	r0,#_trailer
   0167 E2                 1049 	movx	a,@r0
   0168 FA                 1050 	mov	r2,a
   0169 08                 1051 	inc	r0
   016A E2                 1052 	movx	a,@r0
   016B 54 1F              1053 	anl	a,#0x1F
   016D FB                 1054 	mov	r3,a
   016E 78r01              1055 	mov	r0,#_tdm_state_remaining
   0170 EA                 1056 	mov	a,r2
   0171 F2                 1057 	movx	@r0,a
   0172 08                 1058 	inc	r0
   0173 EB                 1059 	mov	a,r3
   0174 F2                 1060 	movx	@r0,a
   0175                    1061 00110$:
                           1062 ;	radio/tdm.c:256: bonus_transmit = (tdm_state == TDM_RECEIVE && packet_length==0);
   0175 78r00              1063 	mov	r0,#_tdm_state
   0177 E2                 1064 	movx	a,@r0
   0178 B4 02 09           1065 	cjne	a,#0x02,00121$
   017B EF                 1066 	mov	a,r7
   017C B4 01 00           1067 	cjne	a,#0x01,00140$
   017F                    1068 00140$:
   017F E4                 1069 	clr	a
   0180 33                 1070 	rlc	a
   0181 FB                 1071 	mov	r3,a
   0182 70 04              1072 	jnz	00122$
   0184                    1073 00121$:
   0184 C2*07              1074 	clr	_sync_tx_windows_sloc0_1_0
   0186 80 02              1075 	sjmp	00123$
   0188                    1076 00122$:
   0188 D2*07              1077 	setb	_sync_tx_windows_sloc0_1_0
   018A                    1078 00123$:
   018A A2*07              1079 	mov	c,_sync_tx_windows_sloc0_1_0
   018C 92*00              1080 	mov	_bonus_transmit,c
                           1081 ;	radio/tdm.c:259: if (tdm_state != TDM_TRANSMIT) {
   018E 78r00              1082 	mov	r0,#_tdm_state
   0190 E2                 1083 	movx	a,@r0
   0191 60 02              1084 	jz	00112$
                           1085 ;	radio/tdm.c:260: transmit_yield = 0;
   0193 C2*01              1086 	clr	_transmit_yield
   0195                    1087 00112$:
                           1088 ;	radio/tdm.c:263: if (at_testmode & AT_TEST_TDM) {
   0195 78r00              1089 	mov	r0,#_at_testmode
   0197 E2                 1090 	movx	a,@r0
   0198 54 02              1091 	anl	a,#0x02
   019A 70 01              1092 	jnz	00143$
   019C 22                 1093 	ret
   019D                    1094 00143$:
                           1095 ;	radio/tdm.c:265: delta = old_remaining - tdm_state_remaining;
   019D 78r01              1096 	mov	r0,#_tdm_state_remaining
   019F D3                 1097 	setb	c
   01A0 E2                 1098 	movx	a,@r0
   01A1 9C                 1099 	subb	a,r4
   01A2 F4                 1100 	cpl	a
   01A3 B3                 1101 	cpl	c
   01A4 FC                 1102 	mov	r4,a
   01A5 B3                 1103 	cpl	c
   01A6 08                 1104 	inc	r0
   01A7 E2                 1105 	movx	a,@r0
   01A8 9D                 1106 	subb	a,r5
   01A9 F4                 1107 	cpl	a
   01AA FD                 1108 	mov	r5,a
   01AB 78r30              1109 	mov	r0,#_sync_tx_windows_delta_2_8
   01AD EC                 1110 	mov	a,r4
   01AE F2                 1111 	movx	@r0,a
   01AF 08                 1112 	inc	r0
   01B0 ED                 1113 	mov	a,r5
   01B1 F2                 1114 	movx	@r0,a
                           1115 ;	radio/tdm.c:266: if (old_state != tdm_state ||
   01B2 78r00              1116 	mov	r0,#_tdm_state
   01B4 E2                 1117 	movx	a,@r0
   01B5 B5*0A 6E           1118 	cjne	a,_sync_tx_windows_old_state_1_1,00113$
                           1119 ;	radio/tdm.c:267: delta > (int16_t)packet_latency/2 ||
   01B8 C0 07              1120 	push	ar7
   01BA 78r08              1121 	mov	r0,#_packet_latency
   01BC E2                 1122 	movx	a,@r0
   01BD FA                 1123 	mov	r2,a
   01BE 08                 1124 	inc	r0
   01BF E2                 1125 	movx	a,@r0
   01C0 FB                 1126 	mov	r3,a
   01C1 90s00r00           1127 	mov	dptr,#__divsint_PARM_2
   01C4 74 02              1128 	mov	a,#0x02
   01C6 F0                 1129 	movx	@dptr,a
   01C7 A3                 1130 	inc	dptr
   01C8 E4                 1131 	clr	a
   01C9 F0                 1132 	movx	@dptr,a
   01CA 8A 82              1133 	mov	dpl,r2
   01CC 8B 83              1134 	mov	dph,r3
   01CE C0 03              1135 	push	ar3
   01D0 C0 02              1136 	push	ar2
   01D2 12s00r00           1137 	lcall	__divsint
   01D5 AE 82              1138 	mov	r6,dpl
   01D7 AF 83              1139 	mov	r7,dph
   01D9 D0 02              1140 	pop	ar2
   01DB D0 03              1141 	pop	ar3
   01DD 78r30              1142 	mov	r0,#_sync_tx_windows_delta_2_8
   01DF C3                 1143 	clr	c
   01E0 E2                 1144 	movx	a,@r0
   01E1 F5 F0              1145 	mov	b,a
   01E3 EE                 1146 	mov	a,r6
   01E4 95 F0              1147 	subb	a,b
   01E6 08                 1148 	inc	r0
   01E7 E2                 1149 	movx	a,@r0
   01E8 F5 F0              1150 	mov	b,a
   01EA EF                 1151 	mov	a,r7
   01EB 64 80              1152 	xrl	a,#0x80
   01ED 63 F0 80           1153 	xrl	b,#0x80
   01F0 95 F0              1154 	subb	a,b
   01F2 D0 07              1155 	pop	ar7
                           1156 ;	radio/tdm.c:268: delta < -(int16_t)packet_latency/2) {
   01F4 40 30              1157 	jc	00113$
   01F6 E4                 1158 	clr	a
   01F7 9A                 1159 	subb	a,r2
   01F8 FA                 1160 	mov	r2,a
   01F9 E4                 1161 	clr	a
   01FA 9B                 1162 	subb	a,r3
   01FB FB                 1163 	mov	r3,a
   01FC 90s00r00           1164 	mov	dptr,#__divsint_PARM_2
   01FF 74 02              1165 	mov	a,#0x02
   0201 F0                 1166 	movx	@dptr,a
   0202 A3                 1167 	inc	dptr
   0203 E4                 1168 	clr	a
   0204 F0                 1169 	movx	@dptr,a
   0205 8A 82              1170 	mov	dpl,r2
   0207 8B 83              1171 	mov	dph,r3
   0209 C0 07              1172 	push	ar7
   020B 12s00r00           1173 	lcall	__divsint
   020E AB 82              1174 	mov	r3,dpl
   0210 AE 83              1175 	mov	r6,dph
   0212 D0 07              1176 	pop	ar7
   0214 78r30              1177 	mov	r0,#_sync_tx_windows_delta_2_8
   0216 C3                 1178 	clr	c
   0217 E2                 1179 	movx	a,@r0
   0218 9B                 1180 	subb	a,r3
   0219 08                 1181 	inc	r0
   021A E2                 1182 	movx	a,@r0
   021B 64 80              1183 	xrl	a,#0x80
   021D 8E F0              1184 	mov	b,r6
   021F 63 F0 80           1185 	xrl	b,#0x80
   0222 95 F0              1186 	subb	a,b
   0224 50 4B              1187 	jnc	00119$
   0226                    1188 00113$:
                           1189 ;	radio/tdm.c:269: printf("TDM: %u/%u len=%u ",
   0226 7E 00              1190 	mov	r6,#0x00
   0228 78r00              1191 	mov	r0,#_tdm_state
   022A E2                 1192 	movx	a,@r0
   022B FA                 1193 	mov	r2,a
   022C 7B 00              1194 	mov	r3,#0x00
   022E AC*0A              1195 	mov	r4,_sync_tx_windows_old_state_1_1
   0230 7D 00              1196 	mov	r5,#0x00
   0232 C0 07              1197 	push	ar7
   0234 C0 06              1198 	push	ar6
   0236 C0 02              1199 	push	ar2
   0238 C0 03              1200 	push	ar3
   023A C0 04              1201 	push	ar4
   023C C0 05              1202 	push	ar5
   023E 74r63              1203 	mov	a,#__str_2
   0240 C0 E0              1204 	push	acc
   0242 74s00              1205 	mov	a,#(__str_2 >> 8)
   0244 C0 E0              1206 	push	acc
   0246 74 80              1207 	mov	a,#0x80
   0248 C0 E0              1208 	push	acc
   024A 12s00r00           1209 	lcall	_printfl
   024D E5 81              1210 	mov	a,sp
   024F 24 F7              1211 	add	a,#0xf7
   0251 F5 81              1212 	mov	sp,a
                           1213 ;	radio/tdm.c:273: printf(" delta: %d\n",(int)delta);
   0253 78r30              1214 	mov	r0,#_sync_tx_windows_delta_2_8
   0255 E2                 1215 	movx	a,@r0
   0256 C0 E0              1216 	push	acc
   0258 08                 1217 	inc	r0
   0259 E2                 1218 	movx	a,@r0
   025A C0 E0              1219 	push	acc
   025C 74r76              1220 	mov	a,#__str_3
   025E C0 E0              1221 	push	acc
   0260 74s00              1222 	mov	a,#(__str_3 >> 8)
   0262 C0 E0              1223 	push	acc
   0264 74 80              1224 	mov	a,#0x80
   0266 C0 E0              1225 	push	acc
   0268 12s00r00           1226 	lcall	_printfl
   026B E5 81              1227 	mov	a,sp
   026D 24 FB              1228 	add	a,#0xfb
   026F F5 81              1229 	mov	sp,a
   0271                    1230 00119$:
   0271 22                 1231 	ret
                           1232 ;------------------------------------------------------------
                           1233 ;Allocation info for local variables in function 'tdm_state_update'
                           1234 ;------------------------------------------------------------
                           1235 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                           1236 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                           1237 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                           1238 ;------------------------------------------------------------
                           1239 ;	radio/tdm.c:281: tdm_state_update(__pdata uint16_t tdelta)
                           1240 ;	-----------------------------------------
                           1241 ;	 function tdm_state_update
                           1242 ;	-----------------------------------------
   0272                    1243 _tdm_state_update:
   0272 AE 82              1244 	mov	r6,dpl
   0274 AF 83              1245 	mov	r7,dph
                           1246 ;	radio/tdm.c:285: if (tdelta > transmit_wait) {
   0276 78r0C              1247 	mov	r0,#_transmit_wait
   0278 C3                 1248 	clr	c
   0279 E2                 1249 	movx	a,@r0
   027A 9E                 1250 	subb	a,r6
   027B 08                 1251 	inc	r0
   027C E2                 1252 	movx	a,@r0
   027D 9F                 1253 	subb	a,r7
   027E 50 08              1254 	jnc	00102$
                           1255 ;	radio/tdm.c:286: transmit_wait = 0;
   0280 78r0C              1256 	mov	r0,#_transmit_wait
   0282 E4                 1257 	clr	a
   0283 F2                 1258 	movx	@r0,a
   0284 08                 1259 	inc	r0
   0285 F2                 1260 	movx	@r0,a
   0286 80 0A              1261 	sjmp	00116$
   0288                    1262 00102$:
                           1263 ;	radio/tdm.c:288: transmit_wait -= tdelta;
   0288 78r0C              1264 	mov	r0,#_transmit_wait
   028A E2                 1265 	movx	a,@r0
   028B C3                 1266 	clr	c
   028C 9E                 1267 	subb	a,r6
   028D F2                 1268 	movx	@r0,a
   028E 08                 1269 	inc	r0
   028F E2                 1270 	movx	a,@r0
   0290 9F                 1271 	subb	a,r7
   0291 F2                 1272 	movx	@r0,a
                           1273 ;	radio/tdm.c:292: while (tdelta >= tdm_state_remaining) {
   0292                    1274 00116$:
   0292 78r01              1275 	mov	r0,#_tdm_state_remaining
   0294 C3                 1276 	clr	c
   0295 E2                 1277 	movx	a,@r0
   0296 F5 F0              1278 	mov	b,a
   0298 EE                 1279 	mov	a,r6
   0299 95 F0              1280 	subb	a,b
   029B 08                 1281 	inc	r0
   029C E2                 1282 	movx	a,@r0
   029D F5 F0              1283 	mov	b,a
   029F EF                 1284 	mov	a,r7
   02A0 95 F0              1285 	subb	a,b
   02A2 50 03              1286 	jnc	00130$
   02A4 02s04rDF           1287 	ljmp	00118$
   02A7                    1288 00130$:
                           1289 ;	radio/tdm.c:294: tdm_state = (tdm_state+1) % 4;
   02A7 78r00              1290 	mov	r0,#_tdm_state
   02A9 E2                 1291 	movx	a,@r0
   02AA FC                 1292 	mov	r4,a
   02AB 7D 00              1293 	mov	r5,#0x00
   02AD 0C                 1294 	inc	r4
   02AE BC 00 01           1295 	cjne	r4,#0x00,00131$
   02B1 0D                 1296 	inc	r5
   02B2                    1297 00131$:
   02B2 90s00r00           1298 	mov	dptr,#__modsint_PARM_2
   02B5 74 04              1299 	mov	a,#0x04
   02B7 F0                 1300 	movx	@dptr,a
   02B8 A3                 1301 	inc	dptr
   02B9 E4                 1302 	clr	a
   02BA F0                 1303 	movx	@dptr,a
   02BB 8C 82              1304 	mov	dpl,r4
   02BD 8D 83              1305 	mov	dph,r5
   02BF C0 07              1306 	push	ar7
   02C1 C0 06              1307 	push	ar6
   02C3 12s00r00           1308 	lcall	__modsint
   02C6 AC 82              1309 	mov	r4,dpl
   02C8 AD 83              1310 	mov	r5,dph
   02CA D0 06              1311 	pop	ar6
   02CC D0 07              1312 	pop	ar7
   02CE 78r00              1313 	mov	r0,#_tdm_state
   02D0 EC                 1314 	mov	a,r4
   02D1 F2                 1315 	movx	@r0,a
                           1316 ;	radio/tdm.c:297: tdelta -= tdm_state_remaining;
   02D2 78r01              1317 	mov	r0,#_tdm_state_remaining
   02D4 D3                 1318 	setb	c
   02D5 E2                 1319 	movx	a,@r0
   02D6 9E                 1320 	subb	a,r6
   02D7 F4                 1321 	cpl	a
   02D8 B3                 1322 	cpl	c
   02D9 FE                 1323 	mov	r6,a
   02DA B3                 1324 	cpl	c
   02DB 08                 1325 	inc	r0
   02DC E2                 1326 	movx	a,@r0
   02DD 9F                 1327 	subb	a,r7
   02DE F4                 1328 	cpl	a
   02DF FF                 1329 	mov	r7,a
                           1330 ;	radio/tdm.c:299: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_RECEIVE) {
   02E0 78r00              1331 	mov	r0,#_tdm_state
   02E2 E2                 1332 	movx	a,@r0
   02E3 60 06              1333 	jz	00104$
   02E5 78r00              1334 	mov	r0,#_tdm_state
   02E7 E2                 1335 	movx	a,@r0
   02E8 B4 02 10           1336 	cjne	a,#0x02,00105$
   02EB                    1337 00104$:
                           1338 ;	radio/tdm.c:300: tdm_state_remaining = tx_window_width;
   02EB 78r03              1339 	mov	r0,#_tx_window_width
   02ED E2                 1340 	movx	a,@r0
   02EE FC                 1341 	mov	r4,a
   02EF 08                 1342 	inc	r0
   02F0 E2                 1343 	movx	a,@r0
   02F1 FD                 1344 	mov	r5,a
   02F2 78r01              1345 	mov	r0,#_tdm_state_remaining
   02F4 EC                 1346 	mov	a,r4
   02F5 F2                 1347 	movx	@r0,a
   02F6 08                 1348 	inc	r0
   02F7 ED                 1349 	mov	a,r5
   02F8 F2                 1350 	movx	@r0,a
   02F9 80 0E              1351 	sjmp	00106$
   02FB                    1352 00105$:
                           1353 ;	radio/tdm.c:302: tdm_state_remaining = silence_period;
   02FB 78r06              1354 	mov	r0,#_silence_period
   02FD E2                 1355 	movx	a,@r0
   02FE FC                 1356 	mov	r4,a
   02FF 08                 1357 	inc	r0
   0300 E2                 1358 	movx	a,@r0
   0301 FD                 1359 	mov	r5,a
   0302 78r01              1360 	mov	r0,#_tdm_state_remaining
   0304 EC                 1361 	mov	a,r4
   0305 F2                 1362 	movx	@r0,a
   0306 08                 1363 	inc	r0
   0307 ED                 1364 	mov	a,r5
   0308 F2                 1365 	movx	@r0,a
   0309                    1366 00106$:
                           1367 ;	radio/tdm.c:308: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_SILENCE1) {
   0309 78r00              1368 	mov	r0,#_tdm_state
   030B E2                 1369 	movx	a,@r0
   030C 60 06              1370 	jz	00110$
   030E 78r00              1371 	mov	r0,#_tdm_state
   0310 E2                 1372 	movx	a,@r0
   0311 B4 01 26           1373 	cjne	a,#0x01,00111$
   0314                    1374 00110$:
                           1375 ;	radio/tdm.c:309: fhop_window_change();
   0314 C0 07              1376 	push	ar7
   0316 C0 06              1377 	push	ar6
   0318 12s00r00           1378 	lcall	_fhop_window_change
                           1379 ;	radio/tdm.c:310: radio_receiver_on();
   031B 12s00r00           1380 	lcall	_radio_receiver_on
   031E D0 06              1381 	pop	ar6
   0320 D0 07              1382 	pop	ar7
                           1383 ;	radio/tdm.c:312: if (num_fh_channels > 1) {
   0322 78r00              1384 	mov	r0,#_num_fh_channels
   0324 C3                 1385 	clr	c
   0325 E2                 1386 	movx	a,@r0
   0326 F5 F0              1387 	mov	b,a
   0328 74 01              1388 	mov	a,#0x01
   032A 95 F0              1389 	subb	a,b
   032C 50 0C              1390 	jnc	00111$
                           1391 ;	radio/tdm.c:314: lbt_listen_time = 0;
   032E 78r17              1392 	mov	r0,#_lbt_listen_time
   0330 E4                 1393 	clr	a
   0331 F2                 1394 	movx	@r0,a
   0332 08                 1395 	inc	r0
   0333 F2                 1396 	movx	@r0,a
                           1397 ;	radio/tdm.c:315: lbt_rand = 0;
   0334 78r1B              1398 	mov	r0,#_lbt_rand
   0336 E4                 1399 	clr	a
   0337 F2                 1400 	movx	@r0,a
   0338 08                 1401 	inc	r0
   0339 F2                 1402 	movx	@r0,a
   033A                    1403 00111$:
                           1404 ;	radio/tdm.c:319: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
   033A 78r00              1405 	mov	r0,#_tdm_state
   033C E2                 1406 	movx	a,@r0
   033D 60 03              1407 	jz	00139$
   033F 02s04rD2           1408 	ljmp	00114$
   0342                    1409 00139$:
   0342 C0 06              1410 	push	ar6
   0344 C0 07              1411 	push	ar7
   0346 78r0E              1412 	mov	r0,#_duty_cycle
   0348 E2                 1413 	movx	a,@r0
   0349 FC                 1414 	mov	r4,a
   034A 7D 00              1415 	mov	r5,#0x00
   034C 78r13              1416 	mov	r0,#_duty_cycle_offset
   034E E2                 1417 	movx	a,@r0
   034F F5*0B              1418 	mov	_tdm_state_update_sloc0_1_0,a
   0351 75*0C 00           1419 	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
   0354 EC                 1420 	mov	a,r4
   0355 C3                 1421 	clr	c
   0356 95*0B              1422 	subb	a,_tdm_state_update_sloc0_1_0
   0358 FE                 1423 	mov	r6,a
   0359 ED                 1424 	mov	a,r5
   035A 95*0C              1425 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
   035C FF                 1426 	mov	r7,a
   035D BE 64 0A           1427 	cjne	r6,#0x64,00140$
   0360 BF 00 07           1428 	cjne	r7,#0x00,00140$
   0363 D0 07              1429 	pop	ar7
   0365 D0 06              1430 	pop	ar6
   0367 02s04rD2           1431 	ljmp	00114$
   036A                    1432 00140$:
   036A D0 07              1433 	pop	ar7
   036C D0 06              1434 	pop	ar6
                           1435 ;	radio/tdm.c:321: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
   036E C0 06              1436 	push	ar6
   0370 C0 07              1437 	push	ar7
   0372 C0 07              1438 	push	ar7
   0374 C0 06              1439 	push	ar6
   0376 C0 05              1440 	push	ar5
   0378 C0 04              1441 	push	ar4
   037A 78r0F              1442 	mov	r0,#_average_duty_cycle
   037C E2                 1443 	movx	a,@r0
   037D C0 E0              1444 	push	acc
   037F 08                 1445 	inc	r0
   0380 E2                 1446 	movx	a,@r0
   0381 C0 E0              1447 	push	acc
   0383 08                 1448 	inc	r0
   0384 E2                 1449 	movx	a,@r0
   0385 C0 E0              1450 	push	acc
   0387 08                 1451 	inc	r0
   0388 E2                 1452 	movx	a,@r0
   0389 C0 E0              1453 	push	acc
   038B 90 33 33           1454 	mov	dptr,#0x3333
   038E 75 F0 73           1455 	mov	b,#0x73
   0391 74 3F              1456 	mov	a,#0x3F
   0393 12s00r00           1457 	lcall	___fsmul
   0396 85 82*0D           1458 	mov	_tdm_state_update_sloc1_1_0,dpl
   0399 85 83*0E           1459 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
   039C 85 F0*0F           1460 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
   039F F5*10              1461 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
   03A1 E5 81              1462 	mov	a,sp
   03A3 24 FC              1463 	add	a,#0xfc
   03A5 F5 81              1464 	mov	sp,a
   03A7 D0 04              1465 	pop	ar4
   03A9 D0 05              1466 	pop	ar5
   03AB D0 06              1467 	pop	ar6
   03AD D0 07              1468 	pop	ar7
   03AF 78r14              1469 	mov	r0,#_transmitted_ticks
   03B1 E2                 1470 	movx	a,@r0
   03B2 F5 82              1471 	mov	dpl,a
   03B4 08                 1472 	inc	r0
   03B5 E2                 1473 	movx	a,@r0
   03B6 F5 83              1474 	mov	dph,a
   03B8 C0 05              1475 	push	ar5
   03BA C0 04              1476 	push	ar4
   03BC 12s00r00           1477 	lcall	___uint2fs
   03BF AA 82              1478 	mov	r2,dpl
   03C1 AB 83              1479 	mov	r3,dph
   03C3 AE F0              1480 	mov	r6,b
   03C5 FF                 1481 	mov	r7,a
   03C6 D0 04              1482 	pop	ar4
   03C8 D0 05              1483 	pop	ar5
   03CA C0 07              1484 	push	ar7
   03CC C0 06              1485 	push	ar6
   03CE C0 05              1486 	push	ar5
   03D0 C0 04              1487 	push	ar4
   03D2 C0 02              1488 	push	ar2
   03D4 C0 03              1489 	push	ar3
   03D6 C0 06              1490 	push	ar6
   03D8 C0 07              1491 	push	ar7
   03DA 90 00 00           1492 	mov	dptr,#0x0000
   03DD 75 F0 A0           1493 	mov	b,#0xA0
   03E0 74 40              1494 	mov	a,#0x40
   03E2 12s00r00           1495 	lcall	___fsmul
   03E5 85 82*11           1496 	mov	_tdm_state_update_sloc2_1_0,dpl
   03E8 85 83*12           1497 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
   03EB 85 F0*13           1498 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
   03EE F5*14              1499 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
   03F0 E5 81              1500 	mov	a,sp
   03F2 24 FC              1501 	add	a,#0xfc
   03F4 F5 81              1502 	mov	sp,a
   03F6 D0 04              1503 	pop	ar4
   03F8 D0 05              1504 	pop	ar5
   03FA D0 06              1505 	pop	ar6
   03FC D0 07              1506 	pop	ar7
   03FE 78r06              1507 	mov	r0,#_silence_period
   0400 79r03              1508 	mov	r1,#_tx_window_width
   0402 E3                 1509 	movx	a,@r1
   0403 C5 F0              1510 	xch	a,b
   0405 E2                 1511 	movx	a,@r0
   0406 25 F0              1512 	add	a,b
   0408 FE                 1513 	mov	r6,a
   0409 09                 1514 	inc	r1
   040A E3                 1515 	movx	a,@r1
   040B C5 F0              1516 	xch	a,b
   040D 08                 1517 	inc	r0
   040E E2                 1518 	movx	a,@r0
   040F 35 F0              1519 	addc	a,b
   0411 CE                 1520 	xch	a,r6
   0412 25 E0              1521 	add	a,acc
   0414 CE                 1522 	xch	a,r6
   0415 33                 1523 	rlc	a
   0416 FF                 1524 	mov	r7,a
   0417 8E 82              1525 	mov	dpl,r6
   0419 8F 83              1526 	mov	dph,r7
   041B C0 05              1527 	push	ar5
   041D C0 04              1528 	push	ar4
   041F 12s00r00           1529 	lcall	___uint2fs
   0422 AA 82              1530 	mov	r2,dpl
   0424 AB 83              1531 	mov	r3,dph
   0426 AE F0              1532 	mov	r6,b
   0428 FF                 1533 	mov	r7,a
   0429 C0 02              1534 	push	ar2
   042B C0 03              1535 	push	ar3
   042D C0 06              1536 	push	ar6
   042F C0 07              1537 	push	ar7
   0431 85*11 82           1538 	mov	dpl,_tdm_state_update_sloc2_1_0
   0434 85*12 83           1539 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
   0437 85*13 F0           1540 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
   043A E5*14              1541 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
   043C 12s00r00           1542 	lcall	___fsdiv
   043F AA 82              1543 	mov	r2,dpl
   0441 AB 83              1544 	mov	r3,dph
   0443 AE F0              1545 	mov	r6,b
   0445 FF                 1546 	mov	r7,a
   0446 E5 81              1547 	mov	a,sp
   0448 24 FC              1548 	add	a,#0xfc
   044A F5 81              1549 	mov	sp,a
   044C C0 02              1550 	push	ar2
   044E C0 03              1551 	push	ar3
   0450 C0 06              1552 	push	ar6
   0452 C0 07              1553 	push	ar7
   0454 85*0D 82           1554 	mov	dpl,_tdm_state_update_sloc1_1_0
   0457 85*0E 83           1555 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
   045A 85*0F F0           1556 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
   045D E5*10              1557 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
   045F 12s00r00           1558 	lcall	___fsadd
   0462 AA 82              1559 	mov	r2,dpl
   0464 AB 83              1560 	mov	r3,dph
   0466 AE F0              1561 	mov	r6,b
   0468 FF                 1562 	mov	r7,a
   0469 E5 81              1563 	mov	a,sp
   046B 24 FC              1564 	add	a,#0xfc
   046D F5 81              1565 	mov	sp,a
   046F D0 04              1566 	pop	ar4
   0471 D0 05              1567 	pop	ar5
   0473 78r0F              1568 	mov	r0,#_average_duty_cycle
   0475 EA                 1569 	mov	a,r2
   0476 F2                 1570 	movx	@r0,a
   0477 08                 1571 	inc	r0
   0478 EB                 1572 	mov	a,r3
   0479 F2                 1573 	movx	@r0,a
   047A 08                 1574 	inc	r0
   047B EE                 1575 	mov	a,r6
   047C F2                 1576 	movx	@r0,a
   047D 08                 1577 	inc	r0
   047E EF                 1578 	mov	a,r7
   047F F2                 1579 	movx	@r0,a
                           1580 ;	radio/tdm.c:322: transmitted_ticks = 0;
   0480 78r14              1581 	mov	r0,#_transmitted_ticks
   0482 E4                 1582 	clr	a
   0483 F2                 1583 	movx	@r0,a
   0484 08                 1584 	inc	r0
   0485 F2                 1585 	movx	@r0,a
                           1586 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
   0486 EC                 1587 	mov	a,r4
   0487 C3                 1588 	clr	c
   0488 95*0B              1589 	subb	a,_tdm_state_update_sloc0_1_0
   048A FC                 1590 	mov	r4,a
   048B ED                 1591 	mov	a,r5
   048C 95*0C              1592 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
   048E FD                 1593 	mov	r5,a
   048F 8C 82              1594 	mov	dpl,r4
   0491 8D 83              1595 	mov	dph,r5
   0493 12s00r00           1596 	lcall	___sint2fs
   0496 AC 82              1597 	mov	r4,dpl
   0498 AD 83              1598 	mov	r5,dph
   049A AE F0              1599 	mov	r6,b
   049C FF                 1600 	mov	r7,a
   049D C0 07              1601 	push	ar7
   049F C0 06              1602 	push	ar6
   04A1 C0 04              1603 	push	ar4
   04A3 C0 05              1604 	push	ar5
   04A5 C0 06              1605 	push	ar6
   04A7 C0 07              1606 	push	ar7
   04A9 78r0F              1607 	mov	r0,#_average_duty_cycle
   04AB E2                 1608 	movx	a,@r0
   04AC F5 82              1609 	mov	dpl,a
   04AE 08                 1610 	inc	r0
   04AF E2                 1611 	movx	a,@r0
   04B0 F5 83              1612 	mov	dph,a
   04B2 08                 1613 	inc	r0
   04B3 E2                 1614 	movx	a,@r0
   04B4 F5 F0              1615 	mov	b,a
   04B6 08                 1616 	inc	r0
   04B7 E2                 1617 	movx	a,@r0
   04B8 12s00r00           1618 	lcall	___fslt
   04BB E5 81              1619 	mov	a,sp
   04BD 24 FC              1620 	add	a,#0xfc
   04BF F5 81              1621 	mov	sp,a
   04C1 D0 06              1622 	pop	ar6
   04C3 D0 07              1623 	pop	ar7
   04C5 E5 82              1624 	mov	a,dpl
   04C7 24 FF              1625 	add	a,#0xFF
   04C9 B3                 1626 	cpl	c
   04CA 92*08              1627 	mov	_tdm_state_update_sloc3_1_0,c
   04CC 92*04              1628 	mov	_duty_cycle_wait,c
                           1629 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
   04CE D0 07              1630 	pop	ar7
   04D0 D0 06              1631 	pop	ar6
                           1632 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
   04D2                    1633 00114$:
                           1634 ;	radio/tdm.c:327: bonus_transmit = 0;
   04D2 C2*00              1635 	clr	_bonus_transmit
                           1636 ;	radio/tdm.c:330: transmit_yield = 0;
   04D4 C2*01              1637 	clr	_transmit_yield
                           1638 ;	radio/tdm.c:333: transmit_wait = 0;
   04D6 78r0C              1639 	mov	r0,#_transmit_wait
   04D8 E4                 1640 	clr	a
   04D9 F2                 1641 	movx	@r0,a
   04DA 08                 1642 	inc	r0
   04DB F2                 1643 	movx	@r0,a
   04DC 02s02r92           1644 	ljmp	00116$
   04DF                    1645 00118$:
                           1646 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
   04DF 78r01              1647 	mov	r0,#_tdm_state_remaining
   04E1 E2                 1648 	movx	a,@r0
   04E2 C3                 1649 	clr	c
   04E3 9E                 1650 	subb	a,r6
   04E4 F2                 1651 	movx	@r0,a
   04E5 08                 1652 	inc	r0
   04E6 E2                 1653 	movx	a,@r0
   04E7 9F                 1654 	subb	a,r7
   04E8 F2                 1655 	movx	@r0,a
   04E9 22                 1656 	ret
                           1657 ;------------------------------------------------------------
                           1658 ;Allocation info for local variables in function 'tdm_change_phase'
                           1659 ;------------------------------------------------------------
                           1660 ;	radio/tdm.c:342: tdm_change_phase(void)
                           1661 ;	-----------------------------------------
                           1662 ;	 function tdm_change_phase
                           1663 ;	-----------------------------------------
   04EA                    1664 _tdm_change_phase:
                           1665 ;	radio/tdm.c:344: tdm_state = (tdm_state+2) % 4;
   04EA 78r00              1666 	mov	r0,#_tdm_state
   04EC E2                 1667 	movx	a,@r0
   04ED FE                 1668 	mov	r6,a
   04EE 7F 00              1669 	mov	r7,#0x00
   04F0 74 02              1670 	mov	a,#0x02
   04F2 2E                 1671 	add	a,r6
   04F3 FE                 1672 	mov	r6,a
   04F4 E4                 1673 	clr	a
   04F5 3F                 1674 	addc	a,r7
   04F6 FF                 1675 	mov	r7,a
   04F7 90s00r00           1676 	mov	dptr,#__modsint_PARM_2
   04FA 74 04              1677 	mov	a,#0x04
   04FC F0                 1678 	movx	@dptr,a
   04FD A3                 1679 	inc	dptr
   04FE E4                 1680 	clr	a
   04FF F0                 1681 	movx	@dptr,a
   0500 8E 82              1682 	mov	dpl,r6
   0502 8F 83              1683 	mov	dph,r7
   0504 12s00r00           1684 	lcall	__modsint
   0507 AE 82              1685 	mov	r6,dpl
   0509 78r00              1686 	mov	r0,#_tdm_state
   050B EE                 1687 	mov	a,r6
   050C F2                 1688 	movx	@r0,a
   050D 22                 1689 	ret
                           1690 ;------------------------------------------------------------
                           1691 ;Allocation info for local variables in function 'temperature_update'
                           1692 ;------------------------------------------------------------
                           1693 ;diff                      Allocated to registers r6 r7 
                           1694 ;------------------------------------------------------------
                           1695 ;	radio/tdm.c:349: static void temperature_update(void)
                           1696 ;	-----------------------------------------
                           1697 ;	 function temperature_update
                           1698 ;	-----------------------------------------
   050E                    1699 _temperature_update:
                           1700 ;	radio/tdm.c:352: if (radio_get_transmit_power() <= 20) {
   050E 12s00r00           1701 	lcall	_radio_get_transmit_power
   0511 E5 82              1702 	mov	a,dpl
   0513 FF                 1703 	mov	r7,a
   0514 24 EB              1704 	add	a,#0xff - 0x14
   0516 40 05              1705 	jc	00102$
                           1706 ;	radio/tdm.c:353: duty_cycle_offset = 0;
   0518 78r13              1707 	mov	r0,#_duty_cycle_offset
   051A E4                 1708 	clr	a
   051B F2                 1709 	movx	@r0,a
                           1710 ;	radio/tdm.c:354: return;
   051C 22                 1711 	ret
   051D                    1712 00102$:
                           1713 ;	radio/tdm.c:357: diff = radio_temperature() - MAX_PA_TEMPERATURE;
   051D 12s00r00           1714 	lcall	_radio_temperature
   0520 E5 82              1715 	mov	a,dpl
   0522 85 83 F0           1716 	mov	b,dph
   0525 24 9C              1717 	add	a,#0x9C
   0527 FE                 1718 	mov	r6,a
   0528 E5 F0              1719 	mov	a,b
   052A 34 FF              1720 	addc	a,#0xFF
   052C FF                 1721 	mov	r7,a
                           1722 ;	radio/tdm.c:358: if (diff <= 0 && duty_cycle_offset > 0) {
   052D C3                 1723 	clr	c
   052E E4                 1724 	clr	a
   052F 9E                 1725 	subb	a,r6
   0530 E4                 1726 	clr	a
   0531 64 80              1727 	xrl	a,#0x80
   0533 8F F0              1728 	mov	b,r7
   0535 63 F0 80           1729 	xrl	b,#0x80
   0538 95 F0              1730 	subb	a,b
   053A E4                 1731 	clr	a
   053B 33                 1732 	rlc	a
   053C FD                 1733 	mov	r5,a
   053D 70 0C              1734 	jnz	00112$
   053F 78r13              1735 	mov	r0,#_duty_cycle_offset
   0541 E2                 1736 	movx	a,@r0
   0542 60 07              1737 	jz	00112$
                           1738 ;	radio/tdm.c:360: duty_cycle_offset -= 1;
   0544 78r13              1739 	mov	r0,#_duty_cycle_offset
   0546 E2                 1740 	movx	a,@r0
   0547 14                 1741 	dec	a
   0548 F2                 1742 	movx	@r0,a
   0549 80 39              1743 	sjmp	00113$
   054B                    1744 00112$:
                           1745 ;	radio/tdm.c:361: } else if (diff > 10) {
   054B C3                 1746 	clr	c
   054C 74 0A              1747 	mov	a,#0x0A
   054E 9E                 1748 	subb	a,r6
   054F E4                 1749 	clr	a
   0550 64 80              1750 	xrl	a,#0x80
   0552 8F F0              1751 	mov	b,r7
   0554 63 F0 80           1752 	xrl	b,#0x80
   0557 95 F0              1753 	subb	a,b
   0559 50 08              1754 	jnc	00109$
                           1755 ;	radio/tdm.c:363: duty_cycle_offset += 10;
   055B 78r13              1756 	mov	r0,#_duty_cycle_offset
   055D E2                 1757 	movx	a,@r0
   055E 24 0A              1758 	add	a,#0x0A
   0560 F2                 1759 	movx	@r0,a
   0561 80 21              1760 	sjmp	00113$
   0563                    1761 00109$:
                           1762 ;	radio/tdm.c:364: } else if (diff > 5) {
   0563 C3                 1763 	clr	c
   0564 74 05              1764 	mov	a,#0x05
   0566 9E                 1765 	subb	a,r6
   0567 E4                 1766 	clr	a
   0568 64 80              1767 	xrl	a,#0x80
   056A 8F F0              1768 	mov	b,r7
   056C 63 F0 80           1769 	xrl	b,#0x80
   056F 95 F0              1770 	subb	a,b
   0571 50 08              1771 	jnc	00106$
                           1772 ;	radio/tdm.c:366: duty_cycle_offset += 5;
   0573 78r13              1773 	mov	r0,#_duty_cycle_offset
   0575 E2                 1774 	movx	a,@r0
   0576 24 05              1775 	add	a,#0x05
   0578 F2                 1776 	movx	@r0,a
   0579 80 09              1777 	sjmp	00113$
   057B                    1778 00106$:
                           1779 ;	radio/tdm.c:367: } else if (diff > 0) {
   057B ED                 1780 	mov	a,r5
   057C 60 06              1781 	jz	00113$
                           1782 ;	radio/tdm.c:369: duty_cycle_offset += 1;				
   057E 78r13              1783 	mov	r0,#_duty_cycle_offset
   0580 E2                 1784 	movx	a,@r0
   0581 24 01              1785 	add	a,#0x01
   0583 F2                 1786 	movx	@r0,a
   0584                    1787 00113$:
                           1788 ;	radio/tdm.c:372: if ((duty_cycle-duty_cycle_offset) < 20) {
   0584 78r0E              1789 	mov	r0,#_duty_cycle
   0586 E2                 1790 	movx	a,@r0
   0587 FE                 1791 	mov	r6,a
   0588 7F 00              1792 	mov	r7,#0x00
   058A 78r13              1793 	mov	r0,#_duty_cycle_offset
   058C E2                 1794 	movx	a,@r0
   058D FC                 1795 	mov	r4,a
   058E 7D 00              1796 	mov	r5,#0x00
   0590 EE                 1797 	mov	a,r6
   0591 C3                 1798 	clr	c
   0592 9C                 1799 	subb	a,r4
   0593 FE                 1800 	mov	r6,a
   0594 EF                 1801 	mov	a,r7
   0595 9D                 1802 	subb	a,r5
   0596 FF                 1803 	mov	r7,a
   0597 C3                 1804 	clr	c
   0598 EE                 1805 	mov	a,r6
   0599 94 14              1806 	subb	a,#0x14
   059B EF                 1807 	mov	a,r7
   059C 64 80              1808 	xrl	a,#0x80
   059E 94 80              1809 	subb	a,#0x80
   05A0 50 08              1810 	jnc	00117$
                           1811 ;	radio/tdm.c:373: duty_cycle_offset = duty_cycle - 20;
   05A2 78r0E              1812 	mov	r0,#_duty_cycle
   05A4 79r13              1813 	mov	r1,#_duty_cycle_offset
   05A6 E2                 1814 	movx	a,@r0
   05A7 24 EC              1815 	add	a,#0xEC
   05A9 F3                 1816 	movx	@r1,a
   05AA                    1817 00117$:
   05AA 22                 1818 	ret
                           1819 ;------------------------------------------------------------
                           1820 ;Allocation info for local variables in function 'link_update'
                           1821 ;------------------------------------------------------------
                           1822 ;old_remaining             Allocated to registers r6 r7 
                           1823 ;unlock_count              Allocated with name '_link_update_unlock_count_1_1'
                           1824 ;temperature_count         Allocated with name '_link_update_temperature_count_1_1'
                           1825 ;------------------------------------------------------------
                           1826 ;	radio/tdm.c:381: link_update(void)
                           1827 ;	-----------------------------------------
                           1828 ;	 function link_update
                           1829 ;	-----------------------------------------
   05AB                    1830 _link_update:
                           1831 ;	radio/tdm.c:384: if (received_packet) {
   05AB 30*03 09           1832 	jnb	_received_packet,00102$
                           1833 ;	radio/tdm.c:385: unlock_count = 0;
   05AE 90s00rFD           1834 	mov	dptr,#_link_update_unlock_count_1_1
   05B1 E4                 1835 	clr	a
   05B2 F0                 1836 	movx	@dptr,a
                           1837 ;	radio/tdm.c:386: received_packet = false;
   05B3 C2*03              1838 	clr	_received_packet
   05B5 80 07              1839 	sjmp	00103$
   05B7                    1840 00102$:
                           1841 ;	radio/tdm.c:391: unlock_count++;
   05B7 90s00rFD           1842 	mov	dptr,#_link_update_unlock_count_1_1
   05BA E0                 1843 	movx	a,@dptr
   05BB 24 01              1844 	add	a,#0x01
   05BD F0                 1845 	movx	@dptr,a
   05BE                    1846 00103$:
                           1847 ;	radio/tdm.c:394: if (unlock_count < 2) {
   05BE 90s00rFD           1848 	mov	dptr,#_link_update_unlock_count_1_1
   05C1 E0                 1849 	movx	a,@dptr
   05C2 FF                 1850 	mov	r7,a
   05C3 BF 02 00           1851 	cjne	r7,#0x02,00137$
   05C6                    1852 00137$:
   05C6 50 04              1853 	jnc	00105$
                           1854 ;	radio/tdm.c:395: LED_RADIO = LED_ON;
   05C8 D2 95              1855 	setb	_LED_GREEN
   05CA 80 06              1856 	sjmp	00106$
   05CC                    1857 00105$:
                           1858 ;	radio/tdm.c:401: LED_RADIO = blink_state;
   05CC A2*02              1859 	mov	c,_blink_state
   05CE 92 95              1860 	mov	_LED_GREEN,c
                           1861 ;	radio/tdm.c:402: blink_state = !blink_state;
   05D0 B2*02              1862 	cpl	_blink_state
   05D2                    1863 00106$:
                           1864 ;	radio/tdm.c:405: if (unlock_count > 40) {
   05D2 EF                 1865 	mov	a,r7
   05D3 24 D7              1866 	add	a,#0xff - 0x28
   05D5 40 03              1867 	jc	00139$
   05D7 02s06r62           1868 	ljmp	00117$
   05DA                    1869 00139$:
                           1870 ;	radio/tdm.c:409: unlock_count = 5;
   05DA 90s00rFD           1871 	mov	dptr,#_link_update_unlock_count_1_1
   05DD 74 05              1872 	mov	a,#0x05
   05DF F0                 1873 	movx	@dptr,a
                           1874 ;	radio/tdm.c:413: if (timer_entropy() & 1) {
   05E0 12s00r00           1875 	lcall	_timer_entropy
   05E3 E5 82              1876 	mov	a,dpl
   05E5 30 E0 59           1877 	jnb	acc.0,00113$
                           1878 ;	radio/tdm.c:414: register uint16_t old_remaining = tdm_state_remaining;
   05E8 78r01              1879 	mov	r0,#_tdm_state_remaining
   05EA E2                 1880 	movx	a,@r0
   05EB FE                 1881 	mov	r6,a
   05EC 08                 1882 	inc	r0
   05ED E2                 1883 	movx	a,@r0
   05EE FF                 1884 	mov	r7,a
                           1885 ;	radio/tdm.c:415: if (tdm_state_remaining > silence_period) {
   05EF 78r06              1886 	mov	r0,#_silence_period
   05F1 C3                 1887 	clr	c
   05F2 E2                 1888 	movx	a,@r0
   05F3 9E                 1889 	subb	a,r6
   05F4 08                 1890 	inc	r0
   05F5 E2                 1891 	movx	a,@r0
   05F6 9F                 1892 	subb	a,r7
   05F7 50 17              1893 	jnc	00108$
                           1894 ;	radio/tdm.c:416: tdm_state_remaining -= packet_latency;
   05F9 78r08              1895 	mov	r0,#_packet_latency
   05FB D3                 1896 	setb	c
   05FC E2                 1897 	movx	a,@r0
   05FD 9E                 1898 	subb	a,r6
   05FE F4                 1899 	cpl	a
   05FF B3                 1900 	cpl	c
   0600 FC                 1901 	mov	r4,a
   0601 B3                 1902 	cpl	c
   0602 08                 1903 	inc	r0
   0603 E2                 1904 	movx	a,@r0
   0604 9F                 1905 	subb	a,r7
   0605 F4                 1906 	cpl	a
   0606 FD                 1907 	mov	r5,a
   0607 78r01              1908 	mov	r0,#_tdm_state_remaining
   0609 EC                 1909 	mov	a,r4
   060A F2                 1910 	movx	@r0,a
   060B 08                 1911 	inc	r0
   060C ED                 1912 	mov	a,r5
   060D F2                 1913 	movx	@r0,a
   060E 80 08              1914 	sjmp	00109$
   0610                    1915 00108$:
                           1916 ;	radio/tdm.c:418: tdm_state_remaining = 1;
   0610 78r01              1917 	mov	r0,#_tdm_state_remaining
   0612 74 01              1918 	mov	a,#0x01
   0614 F2                 1919 	movx	@r0,a
   0615 08                 1920 	inc	r0
   0616 E4                 1921 	clr	a
   0617 F2                 1922 	movx	@r0,a
   0618                    1923 00109$:
                           1924 ;	radio/tdm.c:420: if (at_testmode & AT_TEST_TDM) {
   0618 78r00              1925 	mov	r0,#_at_testmode
   061A E2                 1926 	movx	a,@r0
   061B 54 02              1927 	anl	a,#0x02
   061D 60 22              1928 	jz	00113$
                           1929 ;	radio/tdm.c:421: printf("TDM: change timing %u/%u\n",
   061F 78r01              1930 	mov	r0,#_tdm_state_remaining
   0621 E2                 1931 	movx	a,@r0
   0622 C0 E0              1932 	push	acc
   0624 08                 1933 	inc	r0
   0625 E2                 1934 	movx	a,@r0
   0626 C0 E0              1935 	push	acc
   0628 C0 06              1936 	push	ar6
   062A C0 07              1937 	push	ar7
   062C 74r82              1938 	mov	a,#__str_4
   062E C0 E0              1939 	push	acc
   0630 74s00              1940 	mov	a,#(__str_4 >> 8)
   0632 C0 E0              1941 	push	acc
   0634 74 80              1942 	mov	a,#0x80
   0636 C0 E0              1943 	push	acc
   0638 12s00r00           1944 	lcall	_printfl
   063B E5 81              1945 	mov	a,sp
   063D 24 F9              1946 	add	a,#0xf9
   063F F5 81              1947 	mov	sp,a
   0641                    1948 00113$:
                           1949 ;	radio/tdm.c:427: if (at_testmode & AT_TEST_TDM) {
   0641 78r00              1950 	mov	r0,#_at_testmode
   0643 E2                 1951 	movx	a,@r0
   0644 54 02              1952 	anl	a,#0x02
   0646 60 15              1953 	jz	00115$
                           1954 ;	radio/tdm.c:428: printf("TDM: scanning\n");
   0648 74r9C              1955 	mov	a,#__str_5
   064A C0 E0              1956 	push	acc
   064C 74s00              1957 	mov	a,#(__str_5 >> 8)
   064E C0 E0              1958 	push	acc
   0650 74 80              1959 	mov	a,#0x80
   0652 C0 E0              1960 	push	acc
   0654 12s00r00           1961 	lcall	_printfl
   0657 15 81              1962 	dec	sp
   0659 15 81              1963 	dec	sp
   065B 15 81              1964 	dec	sp
   065D                    1965 00115$:
                           1966 ;	radio/tdm.c:430: fhop_set_locked(false);
   065D C2*00              1967 	clr	_fhop_set_locked_PARM_1
   065F 12s00r00           1968 	lcall	_fhop_set_locked
   0662                    1969 00117$:
                           1970 ;	radio/tdm.c:433: if (unlock_count != 0) {
   0662 90s00rFD           1971 	mov	dptr,#_link_update_unlock_count_1_1
   0665 E0                 1972 	movx	a,@dptr
   0666 FF                 1973 	mov	r7,a
   0667 60 39              1974 	jz	00119$
                           1975 ;	radio/tdm.c:434: statistics.average_rssi = (radio_last_rssi() + 3*(uint16_t)statistics.average_rssi)/4;
   0669 12s00r00           1976 	lcall	_radio_last_rssi
   066C AF 82              1977 	mov	r7,dpl
   066E 78r00              1978 	mov	r0,#_statistics
   0670 E2                 1979 	movx	a,@r0
   0671 90s00r00           1980 	mov	dptr,#__mulint_PARM_2
   0674 F0                 1981 	movx	@dptr,a
   0675 A3                 1982 	inc	dptr
   0676 E4                 1983 	clr	a
   0677 F0                 1984 	movx	@dptr,a
   0678 90 00 03           1985 	mov	dptr,#0x0003
   067B C0 07              1986 	push	ar7
   067D 12s00r00           1987 	lcall	__mulint
   0680 AD 82              1988 	mov	r5,dpl
   0682 AE 83              1989 	mov	r6,dph
   0684 D0 07              1990 	pop	ar7
   0686 7C 00              1991 	mov	r4,#0x00
   0688 ED                 1992 	mov	a,r5
   0689 2F                 1993 	add	a,r7
   068A FD                 1994 	mov	r5,a
   068B EE                 1995 	mov	a,r6
   068C 3C                 1996 	addc	a,r4
   068D C3                 1997 	clr	c
   068E 13                 1998 	rrc	a
   068F CD                 1999 	xch	a,r5
   0690 13                 2000 	rrc	a
   0691 CD                 2001 	xch	a,r5
   0692 C3                 2002 	clr	c
   0693 13                 2003 	rrc	a
   0694 CD                 2004 	xch	a,r5
   0695 13                 2005 	rrc	a
   0696 CD                 2006 	xch	a,r5
   0697 FE                 2007 	mov	r6,a
   0698 78r00              2008 	mov	r0,#_statistics
   069A ED                 2009 	mov	a,r5
   069B F2                 2010 	movx	@r0,a
                           2011 ;	radio/tdm.c:437: statistics.receive_count = 0;
   069C 78r02              2012 	mov	r0,#(_statistics + 0x0002)
   069E E4                 2013 	clr	a
   069F F2                 2014 	movx	@r0,a
   06A0 08                 2015 	inc	r0
   06A1 F2                 2016 	movx	@r0,a
   06A2                    2017 00119$:
                           2018 ;	radio/tdm.c:440: if (unlock_count > 5) {
   06A2 90s00rFD           2019 	mov	dptr,#_link_update_unlock_count_1_1
   06A5 E0                 2020 	movx	a,@dptr
   06A6 FF                 2021 	mov  r7,a
   06A7 24 FA              2022 	add	a,#0xff - 0x05
   06A9 50 17              2023 	jnc	00121$
                           2024 ;	radio/tdm.c:441: memset(&remote_statistics, 0, sizeof(remote_statistics));
   06AB 90s00r00           2025 	mov	dptr,#_memset_PARM_2
   06AE E4                 2026 	clr	a
   06AF F0                 2027 	movx	@dptr,a
   06B0 90s00r00           2028 	mov	dptr,#_memset_PARM_3
   06B3 74 04              2029 	mov	a,#0x04
   06B5 F0                 2030 	movx	@dptr,a
   06B6 A3                 2031 	inc	dptr
   06B7 E4                 2032 	clr	a
   06B8 F0                 2033 	movx	@dptr,a
   06B9 90s00r00           2034 	mov	dptr,#_remote_statistics
   06BC 75 F0 60           2035 	mov	b,#0x60
   06BF 12s00r00           2036 	lcall	_memset
   06C2                    2037 00121$:
                           2038 ;	radio/tdm.c:444: test_display = at_testmode;
   06C2 78r00              2039 	mov	r0,#_at_testmode
   06C4 90s00rFC           2040 	mov	dptr,#_test_display
   06C7 E2                 2041 	movx	a,@r0
   06C8 F0                 2042 	movx	@dptr,a
                           2043 ;	radio/tdm.c:445: send_statistics = 1;
   06C9 D2*05              2044 	setb	_send_statistics
                           2045 ;	radio/tdm.c:447: temperature_count++;
   06CB 90s00rFE           2046 	mov	dptr,#_link_update_temperature_count_1_1
   06CE E0                 2047 	movx	a,@dptr
   06CF 24 01              2048 	add	a,#0x01
   06D1 F0                 2049 	movx	@dptr,a
                           2050 ;	radio/tdm.c:448: if (temperature_count == 4) {
   06D2 90s00rFE           2051 	mov	dptr,#_link_update_temperature_count_1_1
   06D5 E0                 2052 	movx	a,@dptr
   06D6 FF                 2053 	mov	r7,a
   06D7 BF 04 08           2054 	cjne	r7,#0x04,00124$
                           2055 ;	radio/tdm.c:450: temperature_update();
   06DA 12s05r0E           2056 	lcall	_temperature_update
                           2057 ;	radio/tdm.c:451: temperature_count = 0;
   06DD 90s00rFE           2058 	mov	dptr,#_link_update_temperature_count_1_1
   06E0 E4                 2059 	clr	a
   06E1 F0                 2060 	movx	@dptr,a
   06E2                    2061 00124$:
   06E2 22                 2062 	ret
                           2063 ;------------------------------------------------------------
                           2064 ;Allocation info for local variables in function 'tdm_remote_at'
                           2065 ;------------------------------------------------------------
                           2066 ;	radio/tdm.c:457: tdm_remote_at(void)
                           2067 ;	-----------------------------------------
                           2068 ;	 function tdm_remote_at
                           2069 ;	-----------------------------------------
   06E3                    2070 _tdm_remote_at:
                           2071 ;	radio/tdm.c:459: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
   06E3 90s00r00           2072 	mov	dptr,#_at_cmd
   06E6 75 F0 00           2073 	mov	b,#0x00
   06E9 12s00r00           2074 	lcall	_strlen
   06EC E5 82              2075 	mov	a,dpl
   06EE 85 83 F0           2076 	mov	b,dph
   06F1 24 01              2077 	add	a,#0x01
   06F3 FE                 2078 	mov	r6,a
   06F4 E4                 2079 	clr	a
   06F5 35 F0              2080 	addc	a,b
   06F7 FF                 2081 	mov	r7,a
   06F8 90s00r00           2082 	mov	dptr,#_memcpy_PARM_2
   06FB 74r00              2083 	mov	a,#_at_cmd
   06FD F0                 2084 	movx	@dptr,a
   06FE A3                 2085 	inc	dptr
   06FF 74s00              2086 	mov	a,#(_at_cmd >> 8)
   0701 F0                 2087 	movx	@dptr,a
   0702 A3                 2088 	inc	dptr
   0703 E4                 2089 	clr	a
   0704 F0                 2090 	movx	@dptr,a
   0705 90s00r00           2091 	mov	dptr,#_memcpy_PARM_3
   0708 EE                 2092 	mov	a,r6
   0709 F0                 2093 	movx	@dptr,a
   070A A3                 2094 	inc	dptr
   070B EF                 2095 	mov	a,r7
   070C F0                 2096 	movx	@dptr,a
   070D 90s00r1F           2097 	mov	dptr,#_remote_at_cmd
   0710 75 F0 60           2098 	mov	b,#0x60
   0713 12s00r00           2099 	lcall	_memcpy
                           2100 ;	radio/tdm.c:460: send_at_command = true;
   0716 D2*06              2101 	setb	_send_at_command
   0718 22                 2102 	ret
                           2103 ;------------------------------------------------------------
                           2104 ;Allocation info for local variables in function 'handle_at_command'
                           2105 ;------------------------------------------------------------
                           2106 ;	radio/tdm.c:468: handle_at_command(__pdata uint8_t len)
                           2107 ;	-----------------------------------------
                           2108 ;	 function handle_at_command
                           2109 ;	-----------------------------------------
   0719                    2110 _handle_at_command:
   0719 AF 82              2111 	mov	r7,dpl
                           2112 ;	radio/tdm.c:470: if (len < 2 || len > AT_CMD_MAXLEN ||
   071B BF 02 00           2113 	cjne	r7,#0x02,00114$
   071E                    2114 00114$:
   071E 40 17              2115 	jc	00101$
   0720 EF                 2116 	mov	a,r7
   0721 24 EF              2117 	add	a,#0xff - 0x10
   0723 40 12              2118 	jc	00101$
                           2119 ;	radio/tdm.c:471: pbuf[0] != (uint8_t)'R' ||
   0725 90s00r00           2120 	mov	dptr,#_pbuf
   0728 E0                 2121 	movx	a,@dptr
   0729 FE                 2122 	mov	r6,a
   072A BE 52 0A           2123 	cjne	r6,#0x52,00101$
                           2124 ;	radio/tdm.c:472: pbuf[1] != (uint8_t)'T') {
   072D 90s00r01           2125 	mov	dptr,#(_pbuf + 0x0001)
   0730 E0                 2126 	movx	a,@dptr
   0731 FE                 2127 	mov	r6,a
   0732 BE 54 02           2128 	cjne	r6,#0x54,00119$
   0735 80 02              2129 	sjmp	00102$
   0737                    2130 00119$:
   0737                    2131 00101$:
                           2132 ;	radio/tdm.c:473: return true;
   0737 D3                 2133 	setb	c
   0738 22                 2134 	ret
   0739                    2135 00102$:
                           2136 ;	radio/tdm.c:477: memcpy(at_cmd, pbuf, len);
   0739 90s00r00           2137 	mov	dptr,#_memcpy_PARM_2
   073C 74r00              2138 	mov	a,#_pbuf
   073E F0                 2139 	movx	@dptr,a
   073F A3                 2140 	inc	dptr
   0740 74s00              2141 	mov	a,#(_pbuf >> 8)
   0742 F0                 2142 	movx	@dptr,a
   0743 A3                 2143 	inc	dptr
   0744 E4                 2144 	clr	a
   0745 F0                 2145 	movx	@dptr,a
   0746 90s00r00           2146 	mov	dptr,#_memcpy_PARM_3
   0749 EF                 2147 	mov	a,r7
   074A F0                 2148 	movx	@dptr,a
   074B A3                 2149 	inc	dptr
   074C E4                 2150 	clr	a
   074D F0                 2151 	movx	@dptr,a
   074E 90s00r00           2152 	mov	dptr,#_at_cmd
   0751 75 F0 00           2153 	mov	b,#0x00
   0754 C0 07              2154 	push	ar7
   0756 12s00r00           2155 	lcall	_memcpy
   0759 D0 07              2156 	pop	ar7
                           2157 ;	radio/tdm.c:478: at_cmd[len] = 0;
   075B EF                 2158 	mov	a,r7
   075C 24r00              2159 	add	a,#_at_cmd
   075E F5 82              2160 	mov	dpl,a
   0760 E4                 2161 	clr	a
   0761 34s00              2162 	addc	a,#(_at_cmd >> 8)
   0763 F5 83              2163 	mov	dph,a
   0765 E4                 2164 	clr	a
   0766 F0                 2165 	movx	@dptr,a
                           2166 ;	radio/tdm.c:479: at_cmd[0] = 'A'; // replace 'R'
   0767 90s00r00           2167 	mov	dptr,#_at_cmd
   076A 74 41              2168 	mov	a,#0x41
   076C F0                 2169 	movx	@dptr,a
                           2170 ;	radio/tdm.c:480: at_cmd_len = len;
   076D 78r00              2171 	mov	r0,#_at_cmd_len
   076F EF                 2172 	mov	a,r7
   0770 F2                 2173 	movx	@r0,a
                           2174 ;	radio/tdm.c:481: at_cmd_ready = true;
   0771 D2*00              2175 	setb	_at_cmd_ready
                           2176 ;	radio/tdm.c:486: printf_start_capture(pbuf, sizeof(pbuf));
   0773 90s00r00           2177 	mov	dptr,#_printf_start_capture_PARM_2
   0776 74 FC              2178 	mov	a,#0xFC
   0778 F0                 2179 	movx	@dptr,a
   0779 90s00r00           2180 	mov	dptr,#_pbuf
   077C 12s00r00           2181 	lcall	_printf_start_capture
                           2182 ;	radio/tdm.c:487: at_command();
   077F 12s00r00           2183 	lcall	_at_command
                           2184 ;	radio/tdm.c:488: len = printf_end_capture();
   0782 12s00r00           2185 	lcall	_printf_end_capture
                           2186 ;	radio/tdm.c:489: if (len > 0) {
   0785 E5 82              2187 	mov	a,dpl
   0787 FF                 2188 	mov	r7,a
   0788 60 0A              2189 	jz	00107$
                           2190 ;	radio/tdm.c:490: packet_inject(pbuf, len);
   078A 78r00              2191 	mov	r0,#_packet_inject_PARM_2
   078C EF                 2192 	mov	a,r7
   078D F2                 2193 	movx	@r0,a
   078E 90s00r00           2194 	mov	dptr,#_pbuf
   0791 12s00r00           2195 	lcall	_packet_inject
   0794                    2196 00107$:
                           2197 ;	radio/tdm.c:492: return false;
   0794 C3                 2198 	clr	c
   0795 22                 2199 	ret
                           2200 ;------------------------------------------------------------
                           2201 ;Allocation info for local variables in function 'tdm_serial_loop'
                           2202 ;------------------------------------------------------------
                           2203 ;	radio/tdm.c:501: tdm_serial_loop(void)
                           2204 ;	-----------------------------------------
                           2205 ;	 function tdm_serial_loop
                           2206 ;	-----------------------------------------
   0796                    2207 _tdm_serial_loop:
                           2208 ;	radio/tdm.c:516: __pdata uint16_t last_t = timer2_tick();
   0796 12s00r00           2209 	lcall	_timer2_tick
   0799 78r35              2210 	mov	r0,#_tdm_serial_loop_last_t_1_1
   079B E5 82              2211 	mov	a,dpl
   079D F2                 2212 	movx	@r0,a
   079E 08                 2213 	inc	r0
   079F E5 83              2214 	mov	a,dph
   07A1 F2                 2215 	movx	@r0,a
                           2216 ;	radio/tdm.c:517: __pdata uint16_t last_link_update = last_t;
   07A2 78r35              2217 	mov	r0,#_tdm_serial_loop_last_t_1_1
   07A4 79r37              2218 	mov	r1,#_tdm_serial_loop_last_link_update_1_1
   07A6 E2                 2219 	movx	a,@r0
   07A7 F3                 2220 	movx	@r1,a
   07A8 08                 2221 	inc	r0
   07A9 E2                 2222 	movx	a,@r0
   07AA 09                 2223 	inc	r1
   07AB F3                 2224 	movx	@r1,a
                           2225 ;	radio/tdm.c:520: _canary = 42;
   07AC 78 FF              2226 	mov	r0,#__canary
   07AE 76 2A              2227 	mov	@r0,#0x2A
   07B0                    2228 00194$:
                           2229 ;	radio/tdm.c:523: if (_canary != 42) {
   07B0 78 FF              2230 	mov	r0,#__canary
   07B2 B6 2A 02           2231 	cjne	@r0,#0x2A,00247$
   07B5 80 15              2232 	sjmp	00102$
   07B7                    2233 00247$:
                           2234 ;	radio/tdm.c:524: panic("stack blown\n");
   07B7 74rAB              2235 	mov	a,#__str_6
   07B9 C0 E0              2236 	push	acc
   07BB 74s00              2237 	mov	a,#(__str_6 >> 8)
   07BD C0 E0              2238 	push	acc
   07BF 74 80              2239 	mov	a,#0x80
   07C1 C0 E0              2240 	push	acc
   07C3 12s00r00           2241 	lcall	_panic
   07C6 15 81              2242 	dec	sp
   07C8 15 81              2243 	dec	sp
   07CA 15 81              2244 	dec	sp
   07CC                    2245 00102$:
                           2246 ;	radio/tdm.c:527: if (pdata_canary != 0x41) {
   07CC 78r00              2247 	mov	r0,#_pdata_canary
   07CE E2                 2248 	movx	a,@r0
   07CF B4 41 02           2249 	cjne	a,#0x41,00248$
   07D2 80 15              2250 	sjmp	00104$
   07D4                    2251 00248$:
                           2252 ;	radio/tdm.c:528: panic("pdata canary changed\n");
   07D4 74rB8              2253 	mov	a,#__str_7
   07D6 C0 E0              2254 	push	acc
   07D8 74s00              2255 	mov	a,#(__str_7 >> 8)
   07DA C0 E0              2256 	push	acc
   07DC 74 80              2257 	mov	a,#0x80
   07DE C0 E0              2258 	push	acc
   07E0 12s00r00           2259 	lcall	_panic
   07E3 15 81              2260 	dec	sp
   07E5 15 81              2261 	dec	sp
   07E7 15 81              2262 	dec	sp
   07E9                    2263 00104$:
                           2264 ;	radio/tdm.c:532: at_command();
   07E9 12s00r00           2265 	lcall	_at_command
                           2266 ;	radio/tdm.c:535: if (test_display) {
   07EC 90s00rFC           2267 	mov	dptr,#_test_display
   07EF E0                 2268 	movx	a,@dptr
   07F0 FB                 2269 	mov	r3,a
   07F1 60 08              2270 	jz	00106$
                           2271 ;	radio/tdm.c:536: display_test_output();
   07F3 12s00rD3           2272 	lcall	_display_test_output
                           2273 ;	radio/tdm.c:537: test_display = 0;
   07F6 90s00rFC           2274 	mov	dptr,#_test_display
   07F9 E4                 2275 	clr	a
   07FA F0                 2276 	movx	@dptr,a
   07FB                    2277 00106$:
                           2278 ;	radio/tdm.c:540: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
   07FB 30*00 0F           2279 	jnb	_seen_mavlink,00108$
   07FE 90s00r00           2280 	mov	dptr,#_feature_mavlink_framing
   0801 E0                 2281 	movx	a,@dptr
   0802 FB                 2282 	mov	r3,a
   0803 60 08              2283 	jz	00108$
   0805 20*00 05           2284 	jb	_at_mode_active,00108$
                           2285 ;	radio/tdm.c:541: seen_mavlink = false;
   0808 C2*00              2286 	clr	_seen_mavlink
                           2287 ;	radio/tdm.c:542: MAVLink_report();
   080A 12s00r00           2288 	lcall	_MAVLink_report
   080D                    2289 00108$:
                           2290 ;	radio/tdm.c:546: radio_set_channel(fhop_receive_channel());
   080D 12s00r00           2291 	lcall	_fhop_receive_channel
   0810 12s00r00           2292 	lcall	_radio_set_channel
                           2293 ;	radio/tdm.c:549: tnow = timer2_tick();
   0813 12s00r00           2294 	lcall	_timer2_tick
   0816 AA 82              2295 	mov	r2,dpl
   0818 AB 83              2296 	mov	r3,dph
                           2297 ;	radio/tdm.c:552: if (radio_receive_packet(&len, pbuf)) {
   081A 78r00              2298 	mov	r0,#_radio_receive_packet_PARM_2
   081C 74r00              2299 	mov	a,#_pbuf
   081E F2                 2300 	movx	@r0,a
   081F 08                 2301 	inc	r0
   0820 74s00              2302 	mov	a,#(_pbuf >> 8)
   0822 F2                 2303 	movx	@r0,a
   0823 90s00r32           2304 	mov	dptr,#_tdm_serial_loop_len_1_1
   0826 75 F0 60           2305 	mov	b,#0x60
   0829 C0 03              2306 	push	ar3
   082B C0 02              2307 	push	ar2
   082D 12s00r00           2308 	lcall	_radio_receive_packet
   0830 D0 02              2309 	pop	ar2
   0832 D0 03              2310 	pop	ar3
   0834 40 03              2311 	jc	00253$
   0836 02s09rB4           2312 	ljmp	00129$
   0839                    2313 00253$:
                           2314 ;	radio/tdm.c:555: received_packet = true;
   0839 D2*03              2315 	setb	_received_packet
                           2316 ;	radio/tdm.c:556: fhop_set_locked(true);
   083B D2*00              2317 	setb	_fhop_set_locked_PARM_1
   083D C0 03              2318 	push	ar3
   083F C0 02              2319 	push	ar2
   0841 12s00r00           2320 	lcall	_fhop_set_locked
                           2321 ;	radio/tdm.c:559: statistics.average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics.average_rssi)/8;
   0844 12s00r00           2322 	lcall	_radio_last_rssi
   0847 AD 82              2323 	mov	r5,dpl
   0849 D0 02              2324 	pop	ar2
   084B D0 03              2325 	pop	ar3
   084D 78r00              2326 	mov	r0,#_statistics
   084F E2                 2327 	movx	a,@r0
   0850 90s00r00           2328 	mov	dptr,#__mulint_PARM_2
   0853 F0                 2329 	movx	@dptr,a
   0854 A3                 2330 	inc	dptr
   0855 E4                 2331 	clr	a
   0856 F0                 2332 	movx	@dptr,a
   0857 90 00 07           2333 	mov	dptr,#0x0007
   085A C0 05              2334 	push	ar5
   085C C0 03              2335 	push	ar3
   085E C0 02              2336 	push	ar2
   0860 12s00r00           2337 	lcall	__mulint
   0863 AC 82              2338 	mov	r4,dpl
   0865 AF 83              2339 	mov	r7,dph
   0867 D0 02              2340 	pop	ar2
   0869 D0 03              2341 	pop	ar3
   086B D0 05              2342 	pop	ar5
   086D 7E 00              2343 	mov	r6,#0x00
   086F EC                 2344 	mov	a,r4
   0870 2D                 2345 	add	a,r5
   0871 FC                 2346 	mov	r4,a
   0872 EF                 2347 	mov	a,r7
   0873 3E                 2348 	addc	a,r6
   0874 C4                 2349 	swap	a
   0875 23                 2350 	rl	a
   0876 CC                 2351 	xch	a,r4
   0877 C4                 2352 	swap	a
   0878 23                 2353 	rl	a
   0879 54 1F              2354 	anl	a,#0x1F
   087B 6C                 2355 	xrl	a,r4
   087C CC                 2356 	xch	a,r4
   087D 54 1F              2357 	anl	a,#0x1F
   087F CC                 2358 	xch	a,r4
   0880 6C                 2359 	xrl	a,r4
   0881 CC                 2360 	xch	a,r4
   0882 78r00              2361 	mov	r0,#_statistics
   0884 EC                 2362 	mov	a,r4
   0885 F2                 2363 	movx	@r0,a
                           2364 ;	radio/tdm.c:560: statistics.receive_count++;
   0886 78r02              2365 	mov	r0,#(_statistics + 0x0002)
   0888 E2                 2366 	movx	a,@r0
   0889 FE                 2367 	mov	r6,a
   088A 08                 2368 	inc	r0
   088B E2                 2369 	movx	a,@r0
   088C FF                 2370 	mov	r7,a
   088D 0E                 2371 	inc	r6
   088E BE 00 01           2372 	cjne	r6,#0x00,00254$
   0891 0F                 2373 	inc	r7
   0892                    2374 00254$:
   0892 78r02              2375 	mov	r0,#(_statistics + 0x0002)
   0894 EE                 2376 	mov	a,r6
   0895 F2                 2377 	movx	@r0,a
   0896 08                 2378 	inc	r0
   0897 EF                 2379 	mov	a,r7
   0898 F2                 2380 	movx	@r0,a
                           2381 ;	radio/tdm.c:564: transmit_wait = 0;
   0899 78r0C              2382 	mov	r0,#_transmit_wait
   089B E4                 2383 	clr	a
   089C F2                 2384 	movx	@r0,a
   089D 08                 2385 	inc	r0
   089E F2                 2386 	movx	@r0,a
                           2387 ;	radio/tdm.c:566: if (len < 2) {
   089F 78r32              2388 	mov	r0,#_tdm_serial_loop_len_1_1
   08A1 E2                 2389 	movx	a,@r0
   08A2 B4 02 00           2390 	cjne	a,#0x02,00255$
   08A5                    2391 00255$:
   08A5 50 03              2392 	jnc	00256$
   08A7 02s07rB0           2393 	ljmp	00194$
   08AA                    2394 00256$:
                           2395 ;	radio/tdm.c:573: memcpy(&trailer, &pbuf[len-sizeof(trailer)], sizeof(trailer));
   08AA 78r32              2396 	mov	r0,#_tdm_serial_loop_len_1_1
   08AC E2                 2397 	movx	a,@r0
   08AD 24 FE              2398 	add	a,#0xFE
   08AF 24r00              2399 	add	a,#_pbuf
   08B1 FE                 2400 	mov	r6,a
   08B2 E4                 2401 	clr	a
   08B3 34s00              2402 	addc	a,#(_pbuf >> 8)
   08B5 FF                 2403 	mov	r7,a
   08B6 90s00r00           2404 	mov	dptr,#_memcpy_PARM_2
   08B9 EE                 2405 	mov	a,r6
   08BA F0                 2406 	movx	@dptr,a
   08BB A3                 2407 	inc	dptr
   08BC EF                 2408 	mov	a,r7
   08BD F0                 2409 	movx	@dptr,a
   08BE A3                 2410 	inc	dptr
   08BF E4                 2411 	clr	a
   08C0 F0                 2412 	movx	@dptr,a
   08C1 90s00r00           2413 	mov	dptr,#_memcpy_PARM_3
   08C4 74 02              2414 	mov	a,#0x02
   08C6 F0                 2415 	movx	@dptr,a
   08C7 A3                 2416 	inc	dptr
   08C8 E4                 2417 	clr	a
   08C9 F0                 2418 	movx	@dptr,a
   08CA 90s00r1D           2419 	mov	dptr,#_trailer
   08CD 75 F0 60           2420 	mov	b,#0x60
   08D0 C0 03              2421 	push	ar3
   08D2 C0 02              2422 	push	ar2
   08D4 12s00r00           2423 	lcall	_memcpy
   08D7 D0 02              2424 	pop	ar2
   08D9 D0 03              2425 	pop	ar3
                           2426 ;	radio/tdm.c:574: len -= sizeof(trailer);
   08DB 78r32              2427 	mov	r0,#_tdm_serial_loop_len_1_1
   08DD E2                 2428 	movx	a,@r0
   08DE 14                 2429 	dec	a
   08DF 14                 2430 	dec	a
   08E0 F2                 2431 	movx	@r0,a
                           2432 ;	radio/tdm.c:576: if (trailer.window == 0 && len != 0) {
   08E1 78r1D              2433 	mov	r0,#_trailer
   08E3 E2                 2434 	movx	a,@r0
   08E4 FE                 2435 	mov	r6,a
   08E5 08                 2436 	inc	r0
   08E6 E2                 2437 	movx	a,@r0
   08E7 54 1F              2438 	anl	a,#0x1F
   08E9 FF                 2439 	mov	r7,a
   08EA 4E                 2440 	orl	a,r6
   08EB 70 41              2441 	jnz	00125$
   08ED 78r32              2442 	mov	r0,#_tdm_serial_loop_len_1_1
   08EF E2                 2443 	movx	a,@r0
   08F0 60 3C              2444 	jz	00125$
                           2445 ;	radio/tdm.c:578: if (len == sizeof(struct statistics)) {
   08F2 78r32              2446 	mov	r0,#_tdm_serial_loop_len_1_1
   08F4 E2                 2447 	movx	a,@r0
   08F5 B4 04 20           2448 	cjne	a,#0x04,00114$
                           2449 ;	radio/tdm.c:579: memcpy(&remote_statistics, pbuf, len);
   08F8 90s00r00           2450 	mov	dptr,#_memcpy_PARM_2
   08FB 74r00              2451 	mov	a,#_pbuf
   08FD F0                 2452 	movx	@dptr,a
   08FE A3                 2453 	inc	dptr
   08FF 74s00              2454 	mov	a,#(_pbuf >> 8)
   0901 F0                 2455 	movx	@dptr,a
   0902 A3                 2456 	inc	dptr
   0903 E4                 2457 	clr	a
   0904 F0                 2458 	movx	@dptr,a
   0905 78r32              2459 	mov	r0,#_tdm_serial_loop_len_1_1
   0907 90s00r00           2460 	mov	dptr,#_memcpy_PARM_3
   090A E2                 2461 	movx	a,@r0
   090B F0                 2462 	movx	@dptr,a
   090C A3                 2463 	inc	dptr
   090D E4                 2464 	clr	a
   090E F0                 2465 	movx	@dptr,a
   090F 90s00r00           2466 	mov	dptr,#_remote_statistics
   0912 75 F0 60           2467 	mov	b,#0x60
   0915 12s00r00           2468 	lcall	_memcpy
   0918                    2469 00114$:
                           2470 ;	radio/tdm.c:583: statistics.receive_count--;
   0918 78r02              2471 	mov	r0,#(_statistics + 0x0002)
   091A E2                 2472 	movx	a,@r0
   091B FE                 2473 	mov	r6,a
   091C 08                 2474 	inc	r0
   091D E2                 2475 	movx	a,@r0
   091E FF                 2476 	mov	r7,a
   091F 1E                 2477 	dec	r6
   0920 BE FF 01           2478 	cjne	r6,#0xFF,00261$
   0923 1F                 2479 	dec	r7
   0924                    2480 00261$:
   0924 78r02              2481 	mov	r0,#(_statistics + 0x0002)
   0926 EE                 2482 	mov	a,r6
   0927 F2                 2483 	movx	@r0,a
   0928 08                 2484 	inc	r0
   0929 EF                 2485 	mov	a,r7
   092A F2                 2486 	movx	@r0,a
   092B 02s07rB0           2487 	ljmp	00194$
   092E                    2488 00125$:
                           2489 ;	radio/tdm.c:584: } else if (trailer.window != 0) {
   092E 78r1D              2490 	mov	r0,#_trailer
   0930 E2                 2491 	movx	a,@r0
   0931 FE                 2492 	mov	r6,a
   0932 08                 2493 	inc	r0
   0933 E2                 2494 	movx	a,@r0
   0934 54 1F              2495 	anl	a,#0x1F
   0936 FF                 2496 	mov	r7,a
   0937 4E                 2497 	orl	a,r6
   0938 70 03              2498 	jnz	00262$
   093A 02s07rB0           2499 	ljmp	00194$
   093D                    2500 00262$:
                           2501 ;	radio/tdm.c:587: sync_tx_windows(len);
   093D 78r32              2502 	mov	r0,#_tdm_serial_loop_len_1_1
   093F E2                 2503 	movx	a,@r0
   0940 F5 82              2504 	mov	dpl,a
   0942 C0 03              2505 	push	ar3
   0944 C0 02              2506 	push	ar2
   0946 12s01r06           2507 	lcall	_sync_tx_windows
   0949 D0 02              2508 	pop	ar2
   094B D0 03              2509 	pop	ar3
                           2510 ;	radio/tdm.c:588: last_t = tnow;
   094D 78r35              2511 	mov	r0,#_tdm_serial_loop_last_t_1_1
   094F EA                 2512 	mov	a,r2
   0950 F2                 2513 	movx	@r0,a
   0951 08                 2514 	inc	r0
   0952 EB                 2515 	mov	a,r3
   0953 F2                 2516 	movx	@r0,a
                           2517 ;	radio/tdm.c:597: if ((trailer.command == 1 && handle_at_command(len)) 
   0954 78r1E              2518 	mov	r0,#(_trailer + 0x0001)
   0956 E2                 2519 	movx	a,@r0
   0957 C4                 2520 	swap	a
   0958 03                 2521 	rr	a
   0959 54 01              2522 	anl	a,#0x01
   095B FF                 2523 	mov	r7,a
   095C BF 01 0A           2524 	cjne	r7,#0x01,00121$
   095F 78r32              2525 	mov	r0,#_tdm_serial_loop_len_1_1
   0961 E2                 2526 	movx	a,@r0
   0962 F5 82              2527 	mov	dpl,a
   0964 12s07r19           2528 	lcall	_handle_at_command
   0967 40 38              2529 	jc	00115$
   0969                    2530 00121$:
                           2531 ;	radio/tdm.c:599: (len != 0 && trailer.command == 0 &&
   0969 78r32              2532 	mov	r0,#_tdm_serial_loop_len_1_1
   096B E2                 2533 	movx	a,@r0
   096C 70 03              2534 	jnz	00266$
   096E 02s07rB0           2535 	ljmp	00194$
   0971                    2536 00266$:
   0971 78r1E              2537 	mov	r0,#(_trailer + 0x0001)
   0973 E2                 2538 	movx	a,@r0
   0974 30 E5 03           2539 	jnb	acc.5,00267$
   0977 02s07rB0           2540 	ljmp	00194$
   097A                    2541 00267$:
                           2542 ;	radio/tdm.c:600: !packet_is_duplicate(len, pbuf, trailer.resend) &&
   097A 78r1E              2543 	mov	r0,#(_trailer + 0x0001)
   097C E2                 2544 	movx	a,@r0
   097D 23                 2545 	rl	a
   097E 54 01              2546 	anl	a,#0x01
   0980 24 FF              2547 	add	a,#0xff
   0982 92*00              2548 	mov	_packet_is_duplicate_PARM_3,c
   0984 90s00r00           2549 	mov	dptr,#_packet_is_duplicate_PARM_2
   0987 74r00              2550 	mov	a,#_pbuf
   0989 F0                 2551 	movx	@dptr,a
   098A A3                 2552 	inc	dptr
   098B 74s00              2553 	mov	a,#(_pbuf >> 8)
   098D F0                 2554 	movx	@dptr,a
   098E 78r32              2555 	mov	r0,#_tdm_serial_loop_len_1_1
   0990 E2                 2556 	movx	a,@r0
   0991 F5 82              2557 	mov	dpl,a
   0993 12s00r00           2558 	lcall	_packet_is_duplicate
   0996 50 03              2559 	jnc	00268$
   0998 02s07rB0           2560 	ljmp	00194$
   099B                    2561 00268$:
                           2562 ;	radio/tdm.c:601: !at_mode_active
   099B 30*00 03           2563 	jnb	_at_mode_active,00269$
   099E 02s07rB0           2564 	ljmp	00194$
   09A1                    2565 00269$:
   09A1                    2566 00115$:
                           2567 ;	radio/tdm.c:620: LED_ACTIVITY = LED_ON;
   09A1 D2 96              2568 	setb	_LED_RED
                           2569 ;	radio/tdm.c:621: serial_write_buf(pbuf, len);
   09A3 78r32              2570 	mov	r0,#_tdm_serial_loop_len_1_1
   09A5 79r00              2571 	mov	r1,#_serial_write_buf_PARM_2
   09A7 E2                 2572 	movx	a,@r0
   09A8 F3                 2573 	movx	@r1,a
   09A9 90s00r00           2574 	mov	dptr,#_pbuf
   09AC 12s00r00           2575 	lcall	_serial_write_buf
                           2576 ;	radio/tdm.c:622: LED_ACTIVITY = LED_OFF;
   09AF C2 96              2577 	clr	_LED_RED
                           2578 ;	radio/tdm.c:627: continue;
   09B1 02s07rB0           2579 	ljmp	00194$
   09B4                    2580 00129$:
                           2581 ;	radio/tdm.c:633: tnow = timer2_tick();
   09B4 12s00r00           2582 	lcall	_timer2_tick
   09B7 AA 82              2583 	mov	r2,dpl
   09B9 AB 83              2584 	mov	r3,dph
                           2585 ;	radio/tdm.c:634: tdelta = tnow - last_t;
   09BB 78r35              2586 	mov	r0,#_tdm_serial_loop_last_t_1_1
   09BD 79r33              2587 	mov	r1,#_tdm_serial_loop_tdelta_1_1
   09BF D3                 2588 	setb	c
   09C0 E2                 2589 	movx	a,@r0
   09C1 9A                 2590 	subb	a,r2
   09C2 F4                 2591 	cpl	a
   09C3 B3                 2592 	cpl	c
   09C4 F3                 2593 	movx	@r1,a
   09C5 B3                 2594 	cpl	c
   09C6 08                 2595 	inc	r0
   09C7 E2                 2596 	movx	a,@r0
   09C8 9B                 2597 	subb	a,r3
   09C9 F4                 2598 	cpl	a
   09CA 09                 2599 	inc	r1
   09CB F3                 2600 	movx	@r1,a
                           2601 ;	radio/tdm.c:635: tdm_state_update(tdelta);
   09CC 78r33              2602 	mov	r0,#_tdm_serial_loop_tdelta_1_1
   09CE E2                 2603 	movx	a,@r0
   09CF F5 82              2604 	mov	dpl,a
   09D1 08                 2605 	inc	r0
   09D2 E2                 2606 	movx	a,@r0
   09D3 F5 83              2607 	mov	dph,a
   09D5 C0 03              2608 	push	ar3
   09D7 C0 02              2609 	push	ar2
   09D9 12s02r72           2610 	lcall	_tdm_state_update
   09DC D0 02              2611 	pop	ar2
   09DE D0 03              2612 	pop	ar3
                           2613 ;	radio/tdm.c:636: last_t = tnow;
   09E0 78r35              2614 	mov	r0,#_tdm_serial_loop_last_t_1_1
   09E2 EA                 2615 	mov	a,r2
   09E3 F2                 2616 	movx	@r0,a
   09E4 08                 2617 	inc	r0
   09E5 EB                 2618 	mov	a,r3
   09E6 F2                 2619 	movx	@r0,a
                           2620 ;	radio/tdm.c:639: if (tnow - last_link_update > 32768) {
   09E7 78r37              2621 	mov	r0,#_tdm_serial_loop_last_link_update_1_1
   09E9 D3                 2622 	setb	c
   09EA E2                 2623 	movx	a,@r0
   09EB 9A                 2624 	subb	a,r2
   09EC F4                 2625 	cpl	a
   09ED B3                 2626 	cpl	c
   09EE FC                 2627 	mov	r4,a
   09EF B3                 2628 	cpl	c
   09F0 08                 2629 	inc	r0
   09F1 E2                 2630 	movx	a,@r0
   09F2 9B                 2631 	subb	a,r3
   09F3 F4                 2632 	cpl	a
   09F4 FD                 2633 	mov	r5,a
   09F5 7E 00              2634 	mov	r6,#0x00
   09F7 7F 00              2635 	mov	r7,#0x00
   09F9 C3                 2636 	clr	c
   09FA E4                 2637 	clr	a
   09FB 9C                 2638 	subb	a,r4
   09FC 74 80              2639 	mov	a,#0x80
   09FE 9D                 2640 	subb	a,r5
   09FF E4                 2641 	clr	a
   0A00 9E                 2642 	subb	a,r6
   0A01 E4                 2643 	clr	a
   0A02 64 80              2644 	xrl	a,#0x80
   0A04 8F F0              2645 	mov	b,r7
   0A06 63 F0 80           2646 	xrl	b,#0x80
   0A09 95 F0              2647 	subb	a,b
   0A0B 50 12              2648 	jnc	00131$
                           2649 ;	radio/tdm.c:640: link_update();
   0A0D C0 03              2650 	push	ar3
   0A0F C0 02              2651 	push	ar2
   0A11 12s05rAB           2652 	lcall	_link_update
   0A14 D0 02              2653 	pop	ar2
   0A16 D0 03              2654 	pop	ar3
                           2655 ;	radio/tdm.c:641: last_link_update = tnow;
   0A18 78r37              2656 	mov	r0,#_tdm_serial_loop_last_link_update_1_1
   0A1A EA                 2657 	mov	a,r2
   0A1B F2                 2658 	movx	@r0,a
   0A1C 08                 2659 	inc	r0
   0A1D EB                 2660 	mov	a,r3
   0A1E F2                 2661 	movx	@r0,a
   0A1F                    2662 00131$:
                           2663 ;	radio/tdm.c:645: if (lbt_rssi != 0) {
   0A1F 78r16              2664 	mov	r0,#_lbt_rssi
   0A21 E2                 2665 	movx	a,@r0
   0A22 70 03              2666 	jnz	00271$
   0A24 02s0ArA4           2667 	ljmp	00140$
   0A27                    2668 00271$:
                           2669 ;	radio/tdm.c:647: if (radio_current_rssi() < lbt_rssi) {
   0A27 12s00r00           2670 	lcall	_radio_current_rssi
   0A2A AF 82              2671 	mov	r7,dpl
   0A2C 78r16              2672 	mov	r0,#_lbt_rssi
   0A2E C3                 2673 	clr	c
   0A2F E2                 2674 	movx	a,@r0
   0A30 F5 F0              2675 	mov	b,a
   0A32 EF                 2676 	mov	a,r7
   0A33 95 F0              2677 	subb	a,b
   0A35 50 16              2678 	jnc	00135$
                           2679 ;	radio/tdm.c:648: lbt_listen_time += tdelta;
   0A37 78r17              2680 	mov	r0,#_lbt_listen_time
   0A39 79r33              2681 	mov	r1,#_tdm_serial_loop_tdelta_1_1
   0A3B E3                 2682 	movx	a,@r1
   0A3C C5 F0              2683 	xch	a,b
   0A3E E2                 2684 	movx	a,@r0
   0A3F 25 F0              2685 	add	a,b
   0A41 F2                 2686 	movx	@r0,a
   0A42 09                 2687 	inc	r1
   0A43 E3                 2688 	movx	a,@r1
   0A44 C5 F0              2689 	xch	a,b
   0A46 08                 2690 	inc	r0
   0A47 E2                 2691 	movx	a,@r0
   0A48 35 F0              2692 	addc	a,b
   0A4A F2                 2693 	movx	@r0,a
   0A4B 80 36              2694 	sjmp	00136$
   0A4D                    2695 00135$:
                           2696 ;	radio/tdm.c:650: lbt_listen_time = 0;
   0A4D 78r17              2697 	mov	r0,#_lbt_listen_time
   0A4F E4                 2698 	clr	a
   0A50 F2                 2699 	movx	@r0,a
   0A51 08                 2700 	inc	r0
   0A52 F2                 2701 	movx	@r0,a
                           2702 ;	radio/tdm.c:651: if (lbt_rand == 0) {
   0A53 78r1B              2703 	mov	r0,#_lbt_rand
   0A55 E2                 2704 	movx	a,@r0
   0A56 F5 F0              2705 	mov	b,a
   0A58 08                 2706 	inc	r0
   0A59 E2                 2707 	movx	a,@r0
   0A5A 45 F0              2708 	orl	a,b
   0A5C 70 25              2709 	jnz	00136$
                           2710 ;	radio/tdm.c:652: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
   0A5E 12s00r00           2711 	lcall	_rand
   0A61 AE 82              2712 	mov	r6,dpl
   0A63 AF 83              2713 	mov	r7,dph
   0A65 78r19              2714 	mov	r0,#_lbt_min_time
   0A67 90s00r00           2715 	mov	dptr,#__moduint_PARM_2
   0A6A E2                 2716 	movx	a,@r0
   0A6B F0                 2717 	movx	@dptr,a
   0A6C 08                 2718 	inc	r0
   0A6D E2                 2719 	movx	a,@r0
   0A6E A3                 2720 	inc	dptr
   0A6F F0                 2721 	movx	@dptr,a
   0A70 8E 82              2722 	mov	dpl,r6
   0A72 8F 83              2723 	mov	dph,r7
   0A74 12s00r00           2724 	lcall	__moduint
   0A77 E5 82              2725 	mov	a,dpl
   0A79 85 83 F0           2726 	mov	b,dph
   0A7C 78r1B              2727 	mov	r0,#_lbt_rand
   0A7E F2                 2728 	movx	@r0,a
   0A7F 08                 2729 	inc	r0
   0A80 E5 F0              2730 	mov	a,b
   0A82 F2                 2731 	movx	@r0,a
   0A83                    2732 00136$:
                           2733 ;	radio/tdm.c:655: if (lbt_listen_time < lbt_min_time + lbt_rand) {
   0A83 78r19              2734 	mov	r0,#_lbt_min_time
   0A85 79r1B              2735 	mov	r1,#_lbt_rand
   0A87 E3                 2736 	movx	a,@r1
   0A88 C5 F0              2737 	xch	a,b
   0A8A E2                 2738 	movx	a,@r0
   0A8B 25 F0              2739 	add	a,b
   0A8D FE                 2740 	mov	r6,a
   0A8E 09                 2741 	inc	r1
   0A8F E3                 2742 	movx	a,@r1
   0A90 C5 F0              2743 	xch	a,b
   0A92 08                 2744 	inc	r0
   0A93 E2                 2745 	movx	a,@r0
   0A94 35 F0              2746 	addc	a,b
   0A96 FF                 2747 	mov	r7,a
   0A97 78r17              2748 	mov	r0,#_lbt_listen_time
   0A99 C3                 2749 	clr	c
   0A9A E2                 2750 	movx	a,@r0
   0A9B 9E                 2751 	subb	a,r6
   0A9C 08                 2752 	inc	r0
   0A9D E2                 2753 	movx	a,@r0
   0A9E 9F                 2754 	subb	a,r7
   0A9F 50 03              2755 	jnc	00274$
   0AA1 02s07rB0           2756 	ljmp	00194$
   0AA4                    2757 00274$:
                           2758 ;	radio/tdm.c:657: continue;
   0AA4                    2759 00140$:
                           2760 ;	radio/tdm.c:665: if (tdm_state != TDM_TRANSMIT &&
   0AA4 78r00              2761 	mov	r0,#_tdm_state
   0AA6 E2                 2762 	movx	a,@r0
   0AA7 60 11              2763 	jz	00142$
                           2764 ;	radio/tdm.c:666: !(bonus_transmit && tdm_state == TDM_RECEIVE)) {
   0AA9 20*00 03           2765 	jb	_bonus_transmit,00276$
   0AAC 02s07rB0           2766 	ljmp	00194$
   0AAF                    2767 00276$:
   0AAF 78r00              2768 	mov	r0,#_tdm_state
   0AB1 E2                 2769 	movx	a,@r0
   0AB2 B4 02 02           2770 	cjne	a,#0x02,00277$
   0AB5 80 03              2771 	sjmp	00278$
   0AB7                    2772 00277$:
   0AB7 02s07rB0           2773 	ljmp	00194$
   0ABA                    2774 00278$:
                           2775 ;	radio/tdm.c:668: continue;
   0ABA                    2776 00142$:
                           2777 ;	radio/tdm.c:676: if (transmit_yield != 0) {
   0ABA 30*01 03           2778 	jnb	_transmit_yield,00279$
   0ABD 02s07rB0           2779 	ljmp	00194$
   0AC0                    2780 00279$:
                           2781 ;	radio/tdm.c:681: if (transmit_wait != 0) {
   0AC0 78r0C              2782 	mov	r0,#_transmit_wait
   0AC2 E2                 2783 	movx	a,@r0
   0AC3 F5 F0              2784 	mov	b,a
   0AC5 08                 2785 	inc	r0
   0AC6 E2                 2786 	movx	a,@r0
   0AC7 45 F0              2787 	orl	a,b
   0AC9 60 03              2788 	jz	00280$
   0ACB 02s07rB0           2789 	ljmp	00194$
   0ACE                    2790 00280$:
                           2791 ;	radio/tdm.c:686: if (!received_packet &&
   0ACE 20*03 05           2792 	jb	_received_packet,00152$
                           2793 ;	radio/tdm.c:687: radio_preamble_detected() ||
   0AD1 12s00r00           2794 	lcall	_radio_preamble_detected
   0AD4 40 05              2795 	jc	00149$
   0AD6                    2796 00152$:
                           2797 ;	radio/tdm.c:688: radio_receive_in_progress()) {
   0AD6 12s00r00           2798 	lcall	_radio_receive_in_progress
   0AD9 50 11              2799 	jnc	00150$
   0ADB                    2800 00149$:
                           2801 ;	radio/tdm.c:691: transmit_wait = packet_latency;
   0ADB 78r08              2802 	mov	r0,#_packet_latency
   0ADD E2                 2803 	movx	a,@r0
   0ADE FE                 2804 	mov	r6,a
   0ADF 08                 2805 	inc	r0
   0AE0 E2                 2806 	movx	a,@r0
   0AE1 FF                 2807 	mov	r7,a
   0AE2 78r0C              2808 	mov	r0,#_transmit_wait
   0AE4 EE                 2809 	mov	a,r6
   0AE5 F2                 2810 	movx	@r0,a
   0AE6 08                 2811 	inc	r0
   0AE7 EF                 2812 	mov	a,r7
   0AE8 F2                 2813 	movx	@r0,a
                           2814 ;	radio/tdm.c:692: continue;
   0AE9 02s07rB0           2815 	ljmp	00194$
   0AEC                    2816 00150$:
                           2817 ;	radio/tdm.c:698: statistics.average_noise = (radio_current_rssi() + 3*(uint16_t)statistics.average_noise)/4;
   0AEC 12s00r00           2818 	lcall	_radio_current_rssi
   0AEF AF 82              2819 	mov	r7,dpl
   0AF1 78r01              2820 	mov	r0,#(_statistics + 0x0001)
   0AF3 E2                 2821 	movx	a,@r0
   0AF4 90s00r00           2822 	mov	dptr,#__mulint_PARM_2
   0AF7 F0                 2823 	movx	@dptr,a
   0AF8 A3                 2824 	inc	dptr
   0AF9 E4                 2825 	clr	a
   0AFA F0                 2826 	movx	@dptr,a
   0AFB 90 00 03           2827 	mov	dptr,#0x0003
   0AFE C0 07              2828 	push	ar7
   0B00 12s00r00           2829 	lcall	__mulint
   0B03 AD 82              2830 	mov	r5,dpl
   0B05 AE 83              2831 	mov	r6,dph
   0B07 D0 07              2832 	pop	ar7
   0B09 7C 00              2833 	mov	r4,#0x00
   0B0B ED                 2834 	mov	a,r5
   0B0C 2F                 2835 	add	a,r7
   0B0D FD                 2836 	mov	r5,a
   0B0E EE                 2837 	mov	a,r6
   0B0F 3C                 2838 	addc	a,r4
   0B10 C3                 2839 	clr	c
   0B11 13                 2840 	rrc	a
   0B12 CD                 2841 	xch	a,r5
   0B13 13                 2842 	rrc	a
   0B14 CD                 2843 	xch	a,r5
   0B15 C3                 2844 	clr	c
   0B16 13                 2845 	rrc	a
   0B17 CD                 2846 	xch	a,r5
   0B18 13                 2847 	rrc	a
   0B19 CD                 2848 	xch	a,r5
   0B1A FE                 2849 	mov	r6,a
   0B1B 78r01              2850 	mov	r0,#(_statistics + 0x0001)
   0B1D ED                 2851 	mov	a,r5
   0B1E F2                 2852 	movx	@r0,a
                           2853 ;	radio/tdm.c:700: if (duty_cycle_wait) {
   0B1F 30*04 03           2854 	jnb	_duty_cycle_wait,00284$
   0B22 02s07rB0           2855 	ljmp	00194$
   0B25                    2856 00284$:
                           2857 ;	radio/tdm.c:707: if (tdm_state_remaining < packet_latency) {
   0B25 78r01              2858 	mov	r0,#_tdm_state_remaining
   0B27 79r08              2859 	mov	r1,#_packet_latency
   0B29 C3                 2860 	clr	c
   0B2A E3                 2861 	movx	a,@r1
   0B2B F5 F0              2862 	mov	b,a
   0B2D E2                 2863 	movx	a,@r0
   0B2E 95 F0              2864 	subb	a,b
   0B30 09                 2865 	inc	r1
   0B31 E3                 2866 	movx	a,@r1
   0B32 F5 F0              2867 	mov	b,a
   0B34 08                 2868 	inc	r0
   0B35 E2                 2869 	movx	a,@r0
   0B36 95 F0              2870 	subb	a,b
   0B38 50 03              2871 	jnc	00285$
   0B3A 02s07rB0           2872 	ljmp	00194$
   0B3D                    2873 00285$:
                           2874 ;	radio/tdm.c:711: max_xmit = (tdm_state_remaining - packet_latency) / ticks_per_byte;
   0B3D 78r01              2875 	mov	r0,#_tdm_state_remaining
   0B3F 79r08              2876 	mov	r1,#_packet_latency
   0B41 E3                 2877 	movx	a,@r1
   0B42 F5 F0              2878 	mov	b,a
   0B44 C3                 2879 	clr	c
   0B45 E2                 2880 	movx	a,@r0
   0B46 95 F0              2881 	subb	a,b
   0B48 FE                 2882 	mov	r6,a
   0B49 09                 2883 	inc	r1
   0B4A E3                 2884 	movx	a,@r1
   0B4B F5 F0              2885 	mov	b,a
   0B4D 08                 2886 	inc	r0
   0B4E E2                 2887 	movx	a,@r0
   0B4F 95 F0              2888 	subb	a,b
   0B51 FF                 2889 	mov	r7,a
   0B52 78r0A              2890 	mov	r0,#_ticks_per_byte
   0B54 90s00r00           2891 	mov	dptr,#__divuint_PARM_2
   0B57 E2                 2892 	movx	a,@r0
   0B58 F0                 2893 	movx	@dptr,a
   0B59 08                 2894 	inc	r0
   0B5A E2                 2895 	movx	a,@r0
   0B5B A3                 2896 	inc	dptr
   0B5C F0                 2897 	movx	@dptr,a
   0B5D 8E 82              2898 	mov	dpl,r6
   0B5F 8F 83              2899 	mov	dph,r7
   0B61 12s00r00           2900 	lcall	__divuint
   0B64 AE 82              2901 	mov	r6,dpl
   0B66 AF 83              2902 	mov	r7,dph
                           2903 ;	radio/tdm.c:712: if (max_xmit < PACKET_OVERHEAD) {
   0B68 BE 12 00           2904 	cjne	r6,#0x12,00286$
   0B6B                    2905 00286$:
   0B6B 50 03              2906 	jnc	00287$
   0B6D 02s07rB0           2907 	ljmp	00194$
   0B70                    2908 00287$:
                           2909 ;	radio/tdm.c:717: max_xmit -= sizeof(trailer)+1;
   0B70 1E                 2910 	dec	r6
   0B71 1E                 2911 	dec	r6
   0B72 1E                 2912 	dec	r6
                           2913 ;	radio/tdm.c:731: if (max_xmit > max_data_packet_length) {
   0B73 78r05              2914 	mov	r0,#_max_data_packet_length
   0B75 C3                 2915 	clr	c
   0B76 E2                 2916 	movx	a,@r0
   0B77 9E                 2917 	subb	a,r6
   0B78 50 04              2918 	jnc	00160$
                           2919 ;	radio/tdm.c:732: max_xmit = max_data_packet_length;
   0B7A 78r05              2920 	mov	r0,#_max_data_packet_length
   0B7C E2                 2921 	movx	a,@r0
   0B7D FE                 2922 	mov	r6,a
   0B7E                    2923 00160$:
                           2924 ;	radio/tdm.c:737: pins_user_check();
   0B7E C0 06              2925 	push	ar6
   0B80 12s00r00           2926 	lcall	_pins_user_check
   0B83 D0 06              2927 	pop	ar6
                           2928 ;	radio/tdm.c:741: if (send_at_command && 
   0B85 30*06 57           2929 	jnb	_send_at_command,00165$
                           2930 ;	radio/tdm.c:742: max_xmit >= strlen(remote_at_cmd)) {
   0B88 90s00r1F           2931 	mov	dptr,#_remote_at_cmd
   0B8B 75 F0 60           2932 	mov	b,#0x60
   0B8E C0 06              2933 	push	ar6
   0B90 12s00r00           2934 	lcall	_strlen
   0B93 AD 82              2935 	mov	r5,dpl
   0B95 AF 83              2936 	mov	r7,dph
   0B97 D0 06              2937 	pop	ar6
   0B99 8E 03              2938 	mov	ar3,r6
   0B9B 7C 00              2939 	mov	r4,#0x00
   0B9D C3                 2940 	clr	c
   0B9E EB                 2941 	mov	a,r3
   0B9F 9D                 2942 	subb	a,r5
   0BA0 EC                 2943 	mov	a,r4
   0BA1 9F                 2944 	subb	a,r7
   0BA2 40 3B              2945 	jc	00165$
                           2946 ;	radio/tdm.c:744: len = strlen(remote_at_cmd);
   0BA4 90s00r1F           2947 	mov	dptr,#_remote_at_cmd
   0BA7 75 F0 60           2948 	mov	b,#0x60
   0BAA C0 06              2949 	push	ar6
   0BAC 12s00r00           2950 	lcall	_strlen
   0BAF AD 82              2951 	mov	r5,dpl
   0BB1 78r32              2952 	mov	r0,#_tdm_serial_loop_len_1_1
   0BB3 ED                 2953 	mov	a,r5
   0BB4 F2                 2954 	movx	@r0,a
                           2955 ;	radio/tdm.c:745: memcpy(pbuf, remote_at_cmd, len);
   0BB5 90s00r00           2956 	mov	dptr,#_memcpy_PARM_2
   0BB8 74r1F              2957 	mov	a,#_remote_at_cmd
   0BBA F0                 2958 	movx	@dptr,a
   0BBB A3                 2959 	inc	dptr
   0BBC E4                 2960 	clr	a
   0BBD F0                 2961 	movx	@dptr,a
   0BBE A3                 2962 	inc	dptr
   0BBF 74 60              2963 	mov	a,#0x60
   0BC1 F0                 2964 	movx	@dptr,a
   0BC2 90s00r00           2965 	mov	dptr,#_memcpy_PARM_3
   0BC5 ED                 2966 	mov	a,r5
   0BC6 F0                 2967 	movx	@dptr,a
   0BC7 A3                 2968 	inc	dptr
   0BC8 E4                 2969 	clr	a
   0BC9 F0                 2970 	movx	@dptr,a
   0BCA 90s00r00           2971 	mov	dptr,#_pbuf
   0BCD 75 F0 00           2972 	mov	b,#0x00
   0BD0 12s00r00           2973 	lcall	_memcpy
   0BD3 D0 06              2974 	pop	ar6
                           2975 ;	radio/tdm.c:746: trailer.command = 1;
   0BD5 78r1E              2976 	mov	r0,#(_trailer + 0x0001)
   0BD7 E2                 2977 	movx	a,@r0
   0BD8 44 20              2978 	orl	a,#0x20
   0BDA F2                 2979 	movx	@r0,a
                           2980 ;	radio/tdm.c:747: send_at_command = false;
   0BDB C2*06              2981 	clr	_send_at_command
   0BDD 80 37              2982 	sjmp	00166$
   0BDF                    2983 00165$:
                           2984 ;	radio/tdm.c:750: len = packet_get_next(max_xmit, pbuf);
   0BDF 90s00r00           2985 	mov	dptr,#_packet_get_next_PARM_2
   0BE2 74r00              2986 	mov	a,#_pbuf
   0BE4 F0                 2987 	movx	@dptr,a
   0BE5 A3                 2988 	inc	dptr
   0BE6 74s00              2989 	mov	a,#(_pbuf >> 8)
   0BE8 F0                 2990 	movx	@dptr,a
   0BE9 8E 82              2991 	mov	dpl,r6
   0BEB C0 06              2992 	push	ar6
   0BED 12s00r00           2993 	lcall	_packet_get_next
   0BF0 AF 82              2994 	mov	r7,dpl
   0BF2 D0 06              2995 	pop	ar6
   0BF4 78r32              2996 	mov	r0,#_tdm_serial_loop_len_1_1
   0BF6 EF                 2997 	mov	a,r7
   0BF7 F2                 2998 	movx	@r0,a
                           2999 ;	radio/tdm.c:752: if (len > 0) {
   0BF8 EF                 3000 	mov	a,r7
   0BF9 60 15              3001 	jz	00162$
                           3002 ;	radio/tdm.c:753: trailer.command = packet_is_injected();
   0BFB C0 06              3003 	push	ar6
   0BFD 12s00r00           3004 	lcall	_packet_is_injected
   0C00 D0 06              3005 	pop	ar6
   0C02 92*09              3006 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C04 E4                 3007 	clr	a
   0C05 33                 3008 	rlc	a
   0C06 FF                 3009 	mov	r7,a
   0C07 78r1E              3010 	mov	r0,#(_trailer + 0x0001)
   0C09 13                 3011 	rrc	a
   0C0A E2                 3012 	movx	a,@r0
   0C0B 92 E5              3013 	mov	acc.5,c
   0C0D F2                 3014 	movx	@r0,a
   0C0E 80 06              3015 	sjmp	00166$
   0C10                    3016 00162$:
                           3017 ;	radio/tdm.c:755: trailer.command = 0;
   0C10 78r1E              3018 	mov	r0,#(_trailer + 0x0001)
   0C12 E2                 3019 	movx	a,@r0
   0C13 54 DF              3020 	anl	a,#0xDF
   0C15 F2                 3021 	movx	@r0,a
   0C16                    3022 00166$:
                           3023 ;	radio/tdm.c:762: if (len > max_data_packet_length) {
   0C16 78r32              3024 	mov	r0,#_tdm_serial_loop_len_1_1
   0C18 79r05              3025 	mov	r1,#_max_data_packet_length
   0C1A C3                 3026 	clr	c
   0C1B E2                 3027 	movx	a,@r0
   0C1C F5 F0              3028 	mov	b,a
   0C1E E3                 3029 	movx	a,@r1
   0C1F 95 F0              3030 	subb	a,b
   0C21 50 19              3031 	jnc	00169$
                           3032 ;	radio/tdm.c:763: panic("oversized tdm packet");
   0C23 C0 06              3033 	push	ar6
   0C25 74rCE              3034 	mov	a,#__str_8
   0C27 C0 E0              3035 	push	acc
   0C29 74s00              3036 	mov	a,#(__str_8 >> 8)
   0C2B C0 E0              3037 	push	acc
   0C2D 74 80              3038 	mov	a,#0x80
   0C2F C0 E0              3039 	push	acc
   0C31 12s00r00           3040 	lcall	_panic
   0C34 15 81              3041 	dec	sp
   0C36 15 81              3042 	dec	sp
   0C38 15 81              3043 	dec	sp
   0C3A D0 06              3044 	pop	ar6
   0C3C                    3045 00169$:
                           3046 ;	radio/tdm.c:766: trailer.bonus = (tdm_state == TDM_RECEIVE);
   0C3C 78r00              3047 	mov	r0,#_tdm_state
   0C3E E2                 3048 	movx	a,@r0
   0C3F B4 02 03           3049 	cjne	a,#0x02,00293$
   0C42 D3                 3050 	setb	c
   0C43 80 01              3051 	sjmp	00294$
   0C45                    3052 00293$:
   0C45 C3                 3053 	clr	c
   0C46                    3054 00294$:
   0C46 92*09              3055 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C48 E4                 3056 	clr	a
   0C49 33                 3057 	rlc	a
   0C4A 78r1E              3058 	mov	r0,#(_trailer + 0x0001)
   0C4C 13                 3059 	rrc	a
   0C4D E2                 3060 	movx	a,@r0
   0C4E 92 E6              3061 	mov	acc.6,c
   0C50 F2                 3062 	movx	@r0,a
                           3063 ;	radio/tdm.c:767: trailer.resend = packet_is_resend();
   0C51 C0 06              3064 	push	ar6
   0C53 12s00r00           3065 	lcall	_packet_is_resend
   0C56 D0 06              3066 	pop	ar6
   0C58 92*09              3067 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C5A E4                 3068 	clr	a
   0C5B 33                 3069 	rlc	a
   0C5C FF                 3070 	mov	r7,a
   0C5D 78r1E              3071 	mov	r0,#(_trailer + 0x0001)
   0C5F 13                 3072 	rrc	a
   0C60 E2                 3073 	movx	a,@r0
   0C61 92 E7              3074 	mov	acc.7,c
   0C63 F2                 3075 	movx	@r0,a
                           3076 ;	radio/tdm.c:769: if (tdm_state == TDM_TRANSMIT &&
   0C64 78r00              3077 	mov	r0,#_tdm_state
   0C66 E2                 3078 	movx	a,@r0
   0C67 70 44              3079 	jnz	00171$
                           3080 ;	radio/tdm.c:770: len == 0 &&
   0C69 78r32              3081 	mov	r0,#_tdm_serial_loop_len_1_1
   0C6B E2                 3082 	movx	a,@r0
   0C6C 70 3F              3083 	jnz	00171$
                           3084 ;	radio/tdm.c:771: send_statistics &&
   0C6E 30*05 3C           3085 	jnb	_send_statistics,00171$
                           3086 ;	radio/tdm.c:772: max_xmit >= sizeof(statistics)) {
   0C71 BE 04 00           3087 	cjne	r6,#0x04,00298$
   0C74                    3088 00298$:
   0C74 40 37              3089 	jc	00171$
                           3090 ;	radio/tdm.c:774: send_statistics = 0;
   0C76 C2*05              3091 	clr	_send_statistics
                           3092 ;	radio/tdm.c:775: memcpy(pbuf, &statistics, sizeof(statistics));
   0C78 90s00r00           3093 	mov	dptr,#_memcpy_PARM_2
   0C7B 74r00              3094 	mov	a,#_statistics
   0C7D F0                 3095 	movx	@dptr,a
   0C7E A3                 3096 	inc	dptr
   0C7F E4                 3097 	clr	a
   0C80 F0                 3098 	movx	@dptr,a
   0C81 A3                 3099 	inc	dptr
   0C82 74 60              3100 	mov	a,#0x60
   0C84 F0                 3101 	movx	@dptr,a
   0C85 90s00r00           3102 	mov	dptr,#_memcpy_PARM_3
   0C88 74 04              3103 	mov	a,#0x04
   0C8A F0                 3104 	movx	@dptr,a
   0C8B A3                 3105 	inc	dptr
   0C8C E4                 3106 	clr	a
   0C8D F0                 3107 	movx	@dptr,a
   0C8E 90s00r00           3108 	mov	dptr,#_pbuf
   0C91 75 F0 00           3109 	mov	b,#0x00
   0C94 12s00r00           3110 	lcall	_memcpy
                           3111 ;	radio/tdm.c:776: len = sizeof(statistics);
   0C97 78r32              3112 	mov	r0,#_tdm_serial_loop_len_1_1
   0C99 74 04              3113 	mov	a,#0x04
   0C9B F2                 3114 	movx	@r0,a
                           3115 ;	radio/tdm.c:779: trailer.window = 0;
   0C9C 78r1D              3116 	mov	r0,#_trailer
   0C9E E4                 3117 	clr	a
   0C9F F2                 3118 	movx	@r0,a
   0CA0 08                 3119 	inc	r0
   0CA1 E2                 3120 	movx	a,@r0
   0CA2 54 E0              3121 	anl	a,#0xE0
   0CA4 F2                 3122 	movx	@r0,a
                           3123 ;	radio/tdm.c:780: trailer.resend = 0;
   0CA5 78r1E              3124 	mov	r0,#(_trailer + 0x0001)
   0CA7 E2                 3125 	movx	a,@r0
   0CA8 54 7F              3126 	anl	a,#0x7F
   0CAA F2                 3127 	movx	@r0,a
   0CAB 80 28              3128 	sjmp	00172$
   0CAD                    3129 00171$:
                           3130 ;	radio/tdm.c:794: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));
   0CAD 78r32              3131 	mov	r0,#_tdm_serial_loop_len_1_1
   0CAF E2                 3132 	movx	a,@r0
   0CB0 24 02              3133 	add	a,#0x02
   0CB2 F5 82              3134 	mov	dpl,a
   0CB4 12s00rDF           3135 	lcall	_flight_time_estimate
   0CB7 AE 82              3136 	mov	r6,dpl
   0CB9 AF 83              3137 	mov	r7,dph
   0CBB 78r01              3138 	mov	r0,#_tdm_state_remaining
   0CBD E2                 3139 	movx	a,@r0
   0CBE C3                 3140 	clr	c
   0CBF 9E                 3141 	subb	a,r6
   0CC0 FE                 3142 	mov	r6,a
   0CC1 08                 3143 	inc	r0
   0CC2 E2                 3144 	movx	a,@r0
   0CC3 9F                 3145 	subb	a,r7
   0CC4 FF                 3146 	mov	r7,a
   0CC5 78r1D              3147 	mov	r0,#_trailer
   0CC7 EE                 3148 	mov	a,r6
   0CC8 F2                 3149 	movx	@r0,a
   0CC9 08                 3150 	inc	r0
   0CCA EF                 3151 	mov	a,r7
   0CCB 54 1F              3152 	anl	a,#0x1F
   0CCD F5 F0              3153 	mov	b,a
   0CCF E2                 3154 	movx	a,@r0
   0CD0 54 E0              3155 	anl	a,#0xE0
   0CD2 45 F0              3156 	orl	a,b
   0CD4 F2                 3157 	movx	@r0,a
   0CD5                    3158 00172$:
                           3159 ;	radio/tdm.c:799: radio_set_channel(fhop_transmit_channel());
   0CD5 12s00r00           3160 	lcall	_fhop_transmit_channel
   0CD8 12s00r00           3161 	lcall	_radio_set_channel
                           3162 ;	radio/tdm.c:801: memcpy(&pbuf[len], &trailer, sizeof(trailer));
   0CDB 78r32              3163 	mov	r0,#_tdm_serial_loop_len_1_1
   0CDD E2                 3164 	movx	a,@r0
   0CDE 24r00              3165 	add	a,#_pbuf
   0CE0 FE                 3166 	mov	r6,a
   0CE1 E4                 3167 	clr	a
   0CE2 34s00              3168 	addc	a,#(_pbuf >> 8)
   0CE4 FF                 3169 	mov	r7,a
   0CE5 7D 00              3170 	mov	r5,#0x00
   0CE7 90s00r00           3171 	mov	dptr,#_memcpy_PARM_2
   0CEA 74r1D              3172 	mov	a,#_trailer
   0CEC F0                 3173 	movx	@dptr,a
   0CED A3                 3174 	inc	dptr
   0CEE E4                 3175 	clr	a
   0CEF F0                 3176 	movx	@dptr,a
   0CF0 A3                 3177 	inc	dptr
   0CF1 74 60              3178 	mov	a,#0x60
   0CF3 F0                 3179 	movx	@dptr,a
   0CF4 90s00r00           3180 	mov	dptr,#_memcpy_PARM_3
   0CF7 74 02              3181 	mov	a,#0x02
   0CF9 F0                 3182 	movx	@dptr,a
   0CFA A3                 3183 	inc	dptr
   0CFB E4                 3184 	clr	a
   0CFC F0                 3185 	movx	@dptr,a
   0CFD 8E 82              3186 	mov	dpl,r6
   0CFF 8F 83              3187 	mov	dph,r7
   0D01 8D F0              3188 	mov	b,r5
   0D03 12s00r00           3189 	lcall	_memcpy
                           3190 ;	radio/tdm.c:803: if (len != 0 && trailer.window != 0) {
   0D06 78r32              3191 	mov	r0,#_tdm_serial_loop_len_1_1
   0D08 E2                 3192 	movx	a,@r0
   0D09 60 0E              3193 	jz	00177$
   0D0B 78r1D              3194 	mov	r0,#_trailer
   0D0D E2                 3195 	movx	a,@r0
   0D0E FE                 3196 	mov	r6,a
   0D0F 08                 3197 	inc	r0
   0D10 E2                 3198 	movx	a,@r0
   0D11 54 1F              3199 	anl	a,#0x1F
   0D13 FF                 3200 	mov	r7,a
   0D14 4E                 3201 	orl	a,r6
   0D15 60 02              3202 	jz	00177$
                           3203 ;	radio/tdm.c:805: LED_ACTIVITY = LED_ON;
   0D17 D2 96              3204 	setb	_LED_RED
   0D19                    3205 00177$:
                           3206 ;	radio/tdm.c:808: if (len == 0) {
   0D19 78r32              3207 	mov	r0,#_tdm_serial_loop_len_1_1
   0D1B E2                 3208 	movx	a,@r0
   0D1C 70 02              3209 	jnz	00180$
                           3210 ;	radio/tdm.c:812: transmit_yield = 1;
   0D1E D2*01              3211 	setb	_transmit_yield
   0D20                    3212 00180$:
                           3213 ;	radio/tdm.c:818: transmit_wait = packet_latency;
   0D20 78r08              3214 	mov	r0,#_packet_latency
   0D22 E2                 3215 	movx	a,@r0
   0D23 FE                 3216 	mov	r6,a
   0D24 08                 3217 	inc	r0
   0D25 E2                 3218 	movx	a,@r0
   0D26 FF                 3219 	mov	r7,a
   0D27 78r0C              3220 	mov	r0,#_transmit_wait
   0D29 EE                 3221 	mov	a,r6
   0D2A F2                 3222 	movx	@r0,a
   0D2B 08                 3223 	inc	r0
   0D2C EF                 3224 	mov	a,r7
   0D2D F2                 3225 	movx	@r0,a
                           3226 ;	radio/tdm.c:822: if ((duty_cycle - duty_cycle_offset) != 100) {
   0D2E 78r0E              3227 	mov	r0,#_duty_cycle
   0D30 E2                 3228 	movx	a,@r0
   0D31 FE                 3229 	mov	r6,a
   0D32 7F 00              3230 	mov	r7,#0x00
   0D34 78r13              3231 	mov	r0,#_duty_cycle_offset
   0D36 E2                 3232 	movx	a,@r0
   0D37 FC                 3233 	mov	r4,a
   0D38 7D 00              3234 	mov	r5,#0x00
   0D3A EE                 3235 	mov	a,r6
   0D3B C3                 3236 	clr	c
   0D3C 9C                 3237 	subb	a,r4
   0D3D FE                 3238 	mov	r6,a
   0D3E EF                 3239 	mov	a,r7
   0D3F 9D                 3240 	subb	a,r5
   0D40 FF                 3241 	mov	r7,a
   0D41 BE 64 05           3242 	cjne	r6,#0x64,00303$
   0D44 BF 00 02           3243 	cjne	r7,#0x00,00303$
   0D47 80 17              3244 	sjmp	00182$
   0D49                    3245 00303$:
                           3246 ;	radio/tdm.c:823: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
   0D49 78r32              3247 	mov	r0,#_tdm_serial_loop_len_1_1
   0D4B E2                 3248 	movx	a,@r0
   0D4C 24 02              3249 	add	a,#0x02
   0D4E F5 82              3250 	mov	dpl,a
   0D50 12s00rDF           3251 	lcall	_flight_time_estimate
   0D53 AE 82              3252 	mov	r6,dpl
   0D55 AF 83              3253 	mov	r7,dph
   0D57 78r14              3254 	mov	r0,#_transmitted_ticks
   0D59 E2                 3255 	movx	a,@r0
   0D5A 2E                 3256 	add	a,r6
   0D5B F2                 3257 	movx	@r0,a
   0D5C 08                 3258 	inc	r0
   0D5D E2                 3259 	movx	a,@r0
   0D5E 3F                 3260 	addc	a,r7
   0D5F F2                 3261 	movx	@r0,a
   0D60                    3262 00182$:
                           3263 ;	radio/tdm.c:827: if (!radio_transmit(len + sizeof(trailer), pbuf, tdm_state_remaining + (silence_period/2)) &&
   0D60 78r32              3264 	mov	r0,#_tdm_serial_loop_len_1_1
   0D62 E2                 3265 	movx	a,@r0
   0D63 24 02              3266 	add	a,#0x02
   0D65 FF                 3267 	mov	r7,a
   0D66 78r06              3268 	mov	r0,#_silence_period
   0D68 E2                 3269 	movx	a,@r0
   0D69 FD                 3270 	mov	r5,a
   0D6A 08                 3271 	inc	r0
   0D6B E2                 3272 	movx	a,@r0
   0D6C C3                 3273 	clr	c
   0D6D 13                 3274 	rrc	a
   0D6E CD                 3275 	xch	a,r5
   0D6F 13                 3276 	rrc	a
   0D70 CD                 3277 	xch	a,r5
   0D71 FE                 3278 	mov	r6,a
   0D72 78r01              3279 	mov	r0,#_tdm_state_remaining
   0D74 E2                 3280 	movx	a,@r0
   0D75 2D                 3281 	add	a,r5
   0D76 FD                 3282 	mov	r5,a
   0D77 08                 3283 	inc	r0
   0D78 E2                 3284 	movx	a,@r0
   0D79 3E                 3285 	addc	a,r6
   0D7A FE                 3286 	mov	r6,a
   0D7B 78r00              3287 	mov	r0,#_radio_transmit_PARM_2
   0D7D 74r00              3288 	mov	a,#_pbuf
   0D7F F2                 3289 	movx	@r0,a
   0D80 08                 3290 	inc	r0
   0D81 74s00              3291 	mov	a,#(_pbuf >> 8)
   0D83 F2                 3292 	movx	@r0,a
   0D84 78r00              3293 	mov	r0,#_radio_transmit_PARM_3
   0D86 ED                 3294 	mov	a,r5
   0D87 F2                 3295 	movx	@r0,a
   0D88 08                 3296 	inc	r0
   0D89 EE                 3297 	mov	a,r6
   0D8A F2                 3298 	movx	@r0,a
   0D8B 8F 82              3299 	mov	dpl,r7
   0D8D 12s00r00           3300 	lcall	_radio_transmit
   0D90 40 1A              3301 	jc	00184$
                           3302 ;	radio/tdm.c:828: len != 0 && trailer.window != 0 && trailer.command == 0) {
   0D92 78r32              3303 	mov	r0,#_tdm_serial_loop_len_1_1
   0D94 E2                 3304 	movx	a,@r0
   0D95 60 15              3305 	jz	00184$
   0D97 78r1D              3306 	mov	r0,#_trailer
   0D99 E2                 3307 	movx	a,@r0
   0D9A FE                 3308 	mov	r6,a
   0D9B 08                 3309 	inc	r0
   0D9C E2                 3310 	movx	a,@r0
   0D9D 54 1F              3311 	anl	a,#0x1F
   0D9F FF                 3312 	mov	r7,a
   0DA0 4E                 3313 	orl	a,r6
   0DA1 60 09              3314 	jz	00184$
   0DA3 78r1E              3315 	mov	r0,#(_trailer + 0x0001)
   0DA5 E2                 3316 	movx	a,@r0
   0DA6 20 E5 03           3317 	jb	acc.5,00184$
                           3318 ;	radio/tdm.c:829: packet_force_resend();
   0DA9 12s00r00           3319 	lcall	_packet_force_resend
   0DAC                    3320 00184$:
                           3321 ;	radio/tdm.c:832: if (lbt_rssi != 0) {
   0DAC 78r16              3322 	mov	r0,#_lbt_rssi
   0DAE E2                 3323 	movx	a,@r0
   0DAF 60 0C              3324 	jz	00189$
                           3325 ;	radio/tdm.c:834: lbt_listen_time = 0;
   0DB1 78r17              3326 	mov	r0,#_lbt_listen_time
   0DB3 E4                 3327 	clr	a
   0DB4 F2                 3328 	movx	@r0,a
   0DB5 08                 3329 	inc	r0
   0DB6 F2                 3330 	movx	@r0,a
                           3331 ;	radio/tdm.c:835: lbt_rand = 0;
   0DB7 78r1B              3332 	mov	r0,#_lbt_rand
   0DB9 E4                 3333 	clr	a
   0DBA F2                 3334 	movx	@r0,a
   0DBB 08                 3335 	inc	r0
   0DBC F2                 3336 	movx	@r0,a
   0DBD                    3337 00189$:
                           3338 ;	radio/tdm.c:838: if (len != 0 && trailer.window != 0) {
   0DBD 78r32              3339 	mov	r0,#_tdm_serial_loop_len_1_1
   0DBF E2                 3340 	movx	a,@r0
   0DC0 60 0E              3341 	jz	00191$
   0DC2 78r1D              3342 	mov	r0,#_trailer
   0DC4 E2                 3343 	movx	a,@r0
   0DC5 FE                 3344 	mov	r6,a
   0DC6 08                 3345 	inc	r0
   0DC7 E2                 3346 	movx	a,@r0
   0DC8 54 1F              3347 	anl	a,#0x1F
   0DCA FF                 3348 	mov	r7,a
   0DCB 4E                 3349 	orl	a,r6
   0DCC 60 02              3350 	jz	00191$
                           3351 ;	radio/tdm.c:839: LED_ACTIVITY = LED_OFF;
   0DCE C2 96              3352 	clr	_LED_RED
   0DD0                    3353 00191$:
                           3354 ;	radio/tdm.c:860: radio_set_channel(fhop_receive_channel());
   0DD0 12s00r00           3355 	lcall	_fhop_receive_channel
   0DD3 12s00r00           3356 	lcall	_radio_set_channel
                           3357 ;	radio/tdm.c:863: radio_receiver_on();
   0DD6 12s00r00           3358 	lcall	_radio_receiver_on
   0DD9 02s07rB0           3359 	ljmp	00194$
                           3360 ;------------------------------------------------------------
                           3361 ;Allocation info for local variables in function 'tdm_init'
                           3362 ;------------------------------------------------------------
                           3363 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                           3364 ;i                         Allocated with name '_tdm_init_i_1_1'
                           3365 ;air_rate                  Allocated with name '_tdm_init_air_rate_1_1'
                           3366 ;window_width              Allocated with name '_tdm_init_window_width_1_1'
                           3367 ;------------------------------------------------------------
                           3368 ;	radio/tdm.c:982: tdm_init(void)
                           3369 ;	-----------------------------------------
                           3370 ;	 function tdm_init
                           3371 ;	-----------------------------------------
   0DDC                    3372 _tdm_init:
                           3373 ;	radio/tdm.c:985: __xdata uint8_t air_rate = radio_air_rate();
   0DDC 12s00r00           3374 	lcall	_radio_air_rate
   0DDF AF 82              3375 	mov	r7,dpl
                           3376 ;	radio/tdm.c:994: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
   0DE1 90s00r00           3377 	mov	dptr,#__mullong_PARM_2
   0DE4 EF                 3378 	mov	a,r7
   0DE5 F0                 3379 	movx	@dptr,a
   0DE6 A3                 3380 	inc	dptr
   0DE7 E4                 3381 	clr	a
   0DE8 F0                 3382 	movx	@dptr,a
   0DE9 A3                 3383 	inc	dptr
   0DEA F0                 3384 	movx	@dptr,a
   0DEB A3                 3385 	inc	dptr
   0DEC F0                 3386 	movx	@dptr,a
   0DED 90 03 E8           3387 	mov	dptr,#0x03E8
   0DF0 E4                 3388 	clr	a
   0DF1 F5 F0              3389 	mov	b,a
   0DF3 12s00r00           3390 	lcall	__mullong
   0DF6 AC 82              3391 	mov	r4,dpl
   0DF8 AD 83              3392 	mov	r5,dph
   0DFA AE F0              3393 	mov	r6,b
   0DFC FF                 3394 	mov	r7,a
   0DFD 90s00r00           3395 	mov	dptr,#__divulong_PARM_2
   0E00 EC                 3396 	mov	a,r4
   0E01 F0                 3397 	movx	@dptr,a
   0E02 A3                 3398 	inc	dptr
   0E03 ED                 3399 	mov	a,r5
   0E04 F0                 3400 	movx	@dptr,a
   0E05 A3                 3401 	inc	dptr
   0E06 EE                 3402 	mov	a,r6
   0E07 F0                 3403 	movx	@dptr,a
   0E08 A3                 3404 	inc	dptr
   0E09 EF                 3405 	mov	a,r7
   0E0A F0                 3406 	movx	@dptr,a
   0E0B 90 12 00           3407 	mov	dptr,#0x1200
   0E0E 75 F0 7A           3408 	mov	b,#0x7A
   0E11 E4                 3409 	clr	a
   0E12 12s00r00           3410 	lcall	__divulong
   0E15 AC 82              3411 	mov	r4,dpl
   0E17 AD 83              3412 	mov	r5,dph
   0E19 AE F0              3413 	mov	r6,b
   0E1B FF                 3414 	mov	r7,a
   0E1C 74 08              3415 	mov	a,#0x08
   0E1E 2C                 3416 	add	a,r4
   0E1F FC                 3417 	mov	r4,a
   0E20 E4                 3418 	clr	a
   0E21 3D                 3419 	addc	a,r5
   0E22 FD                 3420 	mov	r5,a
   0E23 E4                 3421 	clr	a
   0E24 3E                 3422 	addc	a,r6
   0E25 FE                 3423 	mov	r6,a
   0E26 E4                 3424 	clr	a
   0E27 3F                 3425 	addc	a,r7
   0E28 FF                 3426 	mov	r7,a
   0E29 ED                 3427 	mov	a,r5
   0E2A C4                 3428 	swap	a
   0E2B CC                 3429 	xch	a,r4
   0E2C C4                 3430 	swap	a
   0E2D 54 0F              3431 	anl	a,#0x0F
   0E2F 6C                 3432 	xrl	a,r4
   0E30 CC                 3433 	xch	a,r4
   0E31 54 0F              3434 	anl	a,#0x0F
   0E33 CC                 3435 	xch	a,r4
   0E34 6C                 3436 	xrl	a,r4
   0E35 CC                 3437 	xch	a,r4
   0E36 FD                 3438 	mov	r5,a
   0E37 EE                 3439 	mov	a,r6
   0E38 C4                 3440 	swap	a
   0E39 54 F0              3441 	anl	a,#0xF0
   0E3B 4D                 3442 	orl	a,r5
   0E3C FD                 3443 	mov	r5,a
   0E3D EF                 3444 	mov	a,r7
   0E3E C4                 3445 	swap	a
   0E3F CE                 3446 	xch	a,r6
   0E40 C4                 3447 	swap	a
   0E41 54 0F              3448 	anl	a,#0x0F
   0E43 6E                 3449 	xrl	a,r6
   0E44 CE                 3450 	xch	a,r6
   0E45 54 0F              3451 	anl	a,#0x0F
   0E47 CE                 3452 	xch	a,r6
   0E48 6E                 3453 	xrl	a,r6
   0E49 CE                 3454 	xch	a,r6
                           3455 ;	radio/tdm.c:995: ticks_per_byte++;
   0E4A 74 01              3456 	mov	a,#0x01
   0E4C 2C                 3457 	add	a,r4
   0E4D FE                 3458 	mov	r6,a
   0E4E E4                 3459 	clr	a
   0E4F 3D                 3460 	addc	a,r5
   0E50 FF                 3461 	mov	r7,a
   0E51 78r0A              3462 	mov	r0,#_ticks_per_byte
   0E53 EE                 3463 	mov	a,r6
   0E54 F2                 3464 	movx	@r0,a
   0E55 08                 3465 	inc	r0
   0E56 EF                 3466 	mov	a,r7
   0E57 F2                 3467 	movx	@r0,a
                           3468 ;	radio/tdm.c:1002: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
   0E58 90s00r00           3469 	mov	dptr,#__mulint_PARM_2
   0E5B EE                 3470 	mov	a,r6
   0E5C F0                 3471 	movx	@dptr,a
   0E5D A3                 3472 	inc	dptr
   0E5E EF                 3473 	mov	a,r7
   0E5F F0                 3474 	movx	@dptr,a
   0E60 90 00 0D           3475 	mov	dptr,#0x000D
   0E63 C0 07              3476 	push	ar7
   0E65 C0 06              3477 	push	ar6
   0E67 12s00r00           3478 	lcall	__mulint
   0E6A E5 82              3479 	mov	a,dpl
   0E6C 85 83 F0           3480 	mov	b,dph
   0E6F D0 06              3481 	pop	ar6
   0E71 D0 07              3482 	pop	ar7
   0E73 24 0D              3483 	add	a,#0x0D
   0E75 FC                 3484 	mov	r4,a
   0E76 E4                 3485 	clr	a
   0E77 35 F0              3486 	addc	a,b
   0E79 FD                 3487 	mov	r5,a
   0E7A 78r08              3488 	mov	r0,#_packet_latency
   0E7C EC                 3489 	mov	a,r4
   0E7D F2                 3490 	movx	@r0,a
   0E7E 08                 3491 	inc	r0
   0E7F ED                 3492 	mov	a,r5
   0E80 F2                 3493 	movx	@r0,a
                           3494 ;	radio/tdm.c:1004: if (feature_golay) {
   0E81 30*00 2E           3495 	jnb	_feature_golay,00102$
                           3496 ;	radio/tdm.c:1005: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
   0E84 78r05              3497 	mov	r0,#_max_data_packet_length
   0E86 74 76              3498 	mov	a,#0x76
   0E88 F2                 3499 	movx	@r0,a
                           3500 ;	radio/tdm.c:1008: ticks_per_byte *= 2;
   0E89 EF                 3501 	mov	a,r7
   0E8A CE                 3502 	xch	a,r6
   0E8B 25 E0              3503 	add	a,acc
   0E8D CE                 3504 	xch	a,r6
   0E8E 33                 3505 	rlc	a
   0E8F FF                 3506 	mov	r7,a
   0E90 78r0A              3507 	mov	r0,#_ticks_per_byte
   0E92 EE                 3508 	mov	a,r6
   0E93 F2                 3509 	movx	@r0,a
   0E94 08                 3510 	inc	r0
   0E95 EF                 3511 	mov	a,r7
   0E96 F2                 3512 	movx	@r0,a
                           3513 ;	radio/tdm.c:1011: packet_latency += 4*ticks_per_byte;
   0E97 EF                 3514 	mov	a,r7
   0E98 CE                 3515 	xch	a,r6
   0E99 25 E0              3516 	add	a,acc
   0E9B CE                 3517 	xch	a,r6
   0E9C 33                 3518 	rlc	a
   0E9D CE                 3519 	xch	a,r6
   0E9E 25 E0              3520 	add	a,acc
   0EA0 CE                 3521 	xch	a,r6
   0EA1 33                 3522 	rlc	a
   0EA2 FF                 3523 	mov	r7,a
   0EA3 EE                 3524 	mov	a,r6
   0EA4 2C                 3525 	add	a,r4
   0EA5 FC                 3526 	mov	r4,a
   0EA6 EF                 3527 	mov	a,r7
   0EA7 3D                 3528 	addc	a,r5
   0EA8 FD                 3529 	mov	r5,a
   0EA9 78r08              3530 	mov	r0,#_packet_latency
   0EAB EC                 3531 	mov	a,r4
   0EAC F2                 3532 	movx	@r0,a
   0EAD 08                 3533 	inc	r0
   0EAE ED                 3534 	mov	a,r5
   0EAF F2                 3535 	movx	@r0,a
   0EB0 80 05              3536 	sjmp	00103$
   0EB2                    3537 00102$:
                           3538 ;	radio/tdm.c:1013: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
   0EB2 78r05              3539 	mov	r0,#_max_data_packet_length
   0EB4 74 FA              3540 	mov	a,#0xFA
   0EB6 F2                 3541 	movx	@r0,a
   0EB7                    3542 00103$:
                           3543 ;	radio/tdm.c:1017: silence_period = 2*packet_latency;
   0EB7 78r08              3544 	mov	r0,#_packet_latency
   0EB9 79r06              3545 	mov	r1,#_silence_period
   0EBB E2                 3546 	movx	a,@r0
   0EBC F3                 3547 	movx	@r1,a
   0EBD 08                 3548 	inc	r0
   0EBE E2                 3549 	movx	a,@r0
   0EBF F5 F0              3550 	mov	b,a
   0EC1 E3                 3551 	movx	a,@r1
   0EC2 25 E0              3552 	add	a,acc
   0EC4 C5 F0              3553 	xch	a,b
   0EC6 33                 3554 	rlc	a
   0EC7 C5 F0              3555 	xch	a,b
   0EC9 F3                 3556 	movx	@r1,a
   0ECA 09                 3557 	inc	r1
   0ECB E5 F0              3558 	mov	a,b
   0ECD F3                 3559 	movx	@r1,a
                           3560 ;	radio/tdm.c:1020: window_width = 3*(packet_latency+(max_data_packet_length*(uint32_t)ticks_per_byte));
   0ECE 78r0A              3561 	mov	r0,#_ticks_per_byte
   0ED0 90s00r00           3562 	mov	dptr,#__mullong_PARM_2
   0ED3 E2                 3563 	movx	a,@r0
   0ED4 F0                 3564 	movx	@dptr,a
   0ED5 08                 3565 	inc	r0
   0ED6 E2                 3566 	movx	a,@r0
   0ED7 A3                 3567 	inc	dptr
   0ED8 F0                 3568 	movx	@dptr,a
   0ED9 A3                 3569 	inc	dptr
   0EDA E4                 3570 	clr	a
   0EDB F0                 3571 	movx	@dptr,a
   0EDC A3                 3572 	inc	dptr
   0EDD F0                 3573 	movx	@dptr,a
   0EDE 78r05              3574 	mov	r0,#_max_data_packet_length
   0EE0 E2                 3575 	movx	a,@r0
   0EE1 FC                 3576 	mov	r4,a
   0EE2 7D 00              3577 	mov	r5,#0x00
   0EE4 7E 00              3578 	mov	r6,#0x00
   0EE6 7F 00              3579 	mov	r7,#0x00
   0EE8 8C 82              3580 	mov	dpl,r4
   0EEA 8D 83              3581 	mov	dph,r5
   0EEC 8E F0              3582 	mov	b,r6
   0EEE EF                 3583 	mov	a,r7
   0EEF 12s00r00           3584 	lcall	__mullong
   0EF2 85 82*15           3585 	mov	_tdm_init_sloc0_1_0,dpl
   0EF5 85 83*16           3586 	mov	(_tdm_init_sloc0_1_0 + 1),dph
   0EF8 85 F0*17           3587 	mov	(_tdm_init_sloc0_1_0 + 2),b
   0EFB F5*18              3588 	mov	(_tdm_init_sloc0_1_0 + 3),a
   0EFD 78r08              3589 	mov	r0,#_packet_latency
   0EFF E2                 3590 	movx	a,@r0
   0F00 FA                 3591 	mov	r2,a
   0F01 08                 3592 	inc	r0
   0F02 E2                 3593 	movx	a,@r0
   0F03 FB                 3594 	mov	r3,a
   0F04 7E 00              3595 	mov	r6,#0x00
   0F06 7F 00              3596 	mov	r7,#0x00
   0F08 90s00r00           3597 	mov	dptr,#__mullong_PARM_2
   0F0B E5*15              3598 	mov	a,_tdm_init_sloc0_1_0
   0F0D 2A                 3599 	add	a,r2
   0F0E F0                 3600 	movx	@dptr,a
   0F0F E5*16              3601 	mov	a,(_tdm_init_sloc0_1_0 + 1)
   0F11 3B                 3602 	addc	a,r3
   0F12 A3                 3603 	inc	dptr
   0F13 F0                 3604 	movx	@dptr,a
   0F14 E5*17              3605 	mov	a,(_tdm_init_sloc0_1_0 + 2)
   0F16 3E                 3606 	addc	a,r6
   0F17 A3                 3607 	inc	dptr
   0F18 F0                 3608 	movx	@dptr,a
   0F19 E5*18              3609 	mov	a,(_tdm_init_sloc0_1_0 + 3)
   0F1B 3F                 3610 	addc	a,r7
   0F1C A3                 3611 	inc	dptr
   0F1D F0                 3612 	movx	@dptr,a
   0F1E 90 00 03           3613 	mov	dptr,#(0x03&0x00ff)
   0F21 E4                 3614 	clr	a
   0F22 F5 F0              3615 	mov	b,a
   0F24 12s00r00           3616 	lcall	__mullong
   0F27 AC 82              3617 	mov	r4,dpl
   0F29 AD 83              3618 	mov	r5,dph
   0F2B AE F0              3619 	mov	r6,b
   0F2D FF                 3620 	mov	r7,a
   0F2E 90s01r01           3621 	mov	dptr,#_tdm_init_window_width_1_1
   0F31 EC                 3622 	mov	a,r4
   0F32 F0                 3623 	movx	@dptr,a
   0F33 A3                 3624 	inc	dptr
   0F34 ED                 3625 	mov	a,r5
   0F35 F0                 3626 	movx	@dptr,a
   0F36 A3                 3627 	inc	dptr
   0F37 EE                 3628 	mov	a,r6
   0F38 F0                 3629 	movx	@dptr,a
   0F39 A3                 3630 	inc	dptr
   0F3A EF                 3631 	mov	a,r7
   0F3B F0                 3632 	movx	@dptr,a
                           3633 ;	radio/tdm.c:1023: lbt_min_time = LBT_MIN_TIME_USEC/16;
   0F3C 78r19              3634 	mov	r0,#_lbt_min_time
   0F3E 74 38              3635 	mov	a,#0x38
   0F40 F2                 3636 	movx	@r0,a
   0F41 08                 3637 	inc	r0
   0F42 74 01              3638 	mov	a,#0x01
   0F44 F2                 3639 	movx	@r0,a
                           3640 ;	radio/tdm.c:1026: if (lbt_rssi != 0) {
   0F45 78r16              3641 	mov	r0,#_lbt_rssi
   0F47 E2                 3642 	movx	a,@r0
   0F48 60 3A              3643 	jz	00105$
                           3644 ;	radio/tdm.c:1027: window_width = constrain(window_width, 3*lbt_min_time, window_width);
   0F4A 78r00              3645 	mov	r0,#_constrain_PARM_2
   0F4C 74 A8              3646 	mov	a,#0xA8
   0F4E F2                 3647 	movx	@r0,a
   0F4F 08                 3648 	inc	r0
   0F50 74 03              3649 	mov	a,#0x03
   0F52 F2                 3650 	movx	@r0,a
   0F53 08                 3651 	inc	r0
   0F54 E4                 3652 	clr	a
   0F55 F2                 3653 	movx	@r0,a
   0F56 08                 3654 	inc	r0
   0F57 F2                 3655 	movx	@r0,a
   0F58 78r00              3656 	mov	r0,#_constrain_PARM_3
   0F5A EC                 3657 	mov	a,r4
   0F5B F2                 3658 	movx	@r0,a
   0F5C 08                 3659 	inc	r0
   0F5D ED                 3660 	mov	a,r5
   0F5E F2                 3661 	movx	@r0,a
   0F5F 08                 3662 	inc	r0
   0F60 EE                 3663 	mov	a,r6
   0F61 F2                 3664 	movx	@r0,a
   0F62 08                 3665 	inc	r0
   0F63 EF                 3666 	mov	a,r7
   0F64 F2                 3667 	movx	@r0,a
   0F65 8C 82              3668 	mov	dpl,r4
   0F67 8D 83              3669 	mov	dph,r5
   0F69 8E F0              3670 	mov	b,r6
   0F6B EF                 3671 	mov	a,r7
   0F6C 12s00r00           3672 	lcall	_constrain
   0F6F AC 82              3673 	mov	r4,dpl
   0F71 AD 83              3674 	mov	r5,dph
   0F73 AE F0              3675 	mov	r6,b
   0F75 FF                 3676 	mov	r7,a
   0F76 90s01r01           3677 	mov	dptr,#_tdm_init_window_width_1_1
   0F79 EC                 3678 	mov	a,r4
   0F7A F0                 3679 	movx	@dptr,a
   0F7B A3                 3680 	inc	dptr
   0F7C ED                 3681 	mov	a,r5
   0F7D F0                 3682 	movx	@dptr,a
   0F7E A3                 3683 	inc	dptr
   0F7F EE                 3684 	mov	a,r6
   0F80 F0                 3685 	movx	@dptr,a
   0F81 A3                 3686 	inc	dptr
   0F82 EF                 3687 	mov	a,r7
   0F83 F0                 3688 	movx	@dptr,a
   0F84                    3689 00105$:
                           3690 ;	radio/tdm.c:1032: if (window_width >= REGULATORY_MAX_WINDOW && num_fh_channels > 1) {
   0F84 90s01r01           3691 	mov	dptr,#_tdm_init_window_width_1_1
   0F87 E0                 3692 	movx	a,@dptr
   0F88 FC                 3693 	mov	r4,a
   0F89 A3                 3694 	inc	dptr
   0F8A E0                 3695 	movx	a,@dptr
   0F8B FD                 3696 	mov	r5,a
   0F8C A3                 3697 	inc	dptr
   0F8D E0                 3698 	movx	a,@dptr
   0F8E FE                 3699 	mov	r6,a
   0F8F A3                 3700 	inc	dptr
   0F90 E0                 3701 	movx	a,@dptr
   0F91 FF                 3702 	mov	r7,a
   0F92 C3                 3703 	clr	c
   0F93 EC                 3704 	mov	a,r4
   0F94 94 A8              3705 	subb	a,#0xA8
   0F96 ED                 3706 	mov	a,r5
   0F97 94 61              3707 	subb	a,#0x61
   0F99 EE                 3708 	mov	a,r6
   0F9A 94 00              3709 	subb	a,#0x00
   0F9C EF                 3710 	mov	a,r7
   0F9D 94 00              3711 	subb	a,#0x00
   0F9F 40 1B              3712 	jc	00107$
   0FA1 78r00              3713 	mov	r0,#_num_fh_channels
   0FA3 C3                 3714 	clr	c
   0FA4 E2                 3715 	movx	a,@r0
   0FA5 F5 F0              3716 	mov	b,a
   0FA7 74 01              3717 	mov	a,#0x01
   0FA9 95 F0              3718 	subb	a,b
   0FAB 50 0F              3719 	jnc	00107$
                           3720 ;	radio/tdm.c:1033: window_width = REGULATORY_MAX_WINDOW;
   0FAD 90s01r01           3721 	mov	dptr,#_tdm_init_window_width_1_1
   0FB0 74 A8              3722 	mov	a,#0xA8
   0FB2 F0                 3723 	movx	@dptr,a
   0FB3 A3                 3724 	inc	dptr
   0FB4 74 61              3725 	mov	a,#0x61
   0FB6 F0                 3726 	movx	@dptr,a
   0FB7 A3                 3727 	inc	dptr
   0FB8 E4                 3728 	clr	a
   0FB9 F0                 3729 	movx	@dptr,a
   0FBA A3                 3730 	inc	dptr
   0FBB F0                 3731 	movx	@dptr,a
   0FBC                    3732 00107$:
                           3733 ;	radio/tdm.c:1037: if (window_width > param_get(PARAM_MAX_WINDOW)*(1000/16)) {
   0FBC 75 82 0F           3734 	mov	dpl,#0x0F
   0FBF 12s00r00           3735 	lcall	_param_get
   0FC2 AC 82              3736 	mov	r4,dpl
   0FC4 AD 83              3737 	mov	r5,dph
   0FC6 AE F0              3738 	mov	r6,b
   0FC8 FF                 3739 	mov	r7,a
   0FC9 90s00r00           3740 	mov	dptr,#__mullong_PARM_2
   0FCC EC                 3741 	mov	a,r4
   0FCD F0                 3742 	movx	@dptr,a
   0FCE A3                 3743 	inc	dptr
   0FCF ED                 3744 	mov	a,r5
   0FD0 F0                 3745 	movx	@dptr,a
   0FD1 A3                 3746 	inc	dptr
   0FD2 EE                 3747 	mov	a,r6
   0FD3 F0                 3748 	movx	@dptr,a
   0FD4 A3                 3749 	inc	dptr
   0FD5 EF                 3750 	mov	a,r7
   0FD6 F0                 3751 	movx	@dptr,a
   0FD7 90 00 3E           3752 	mov	dptr,#(0x3E&0x00ff)
   0FDA E4                 3753 	clr	a
   0FDB F5 F0              3754 	mov	b,a
   0FDD 12s00r00           3755 	lcall	__mullong
   0FE0 85 82*15           3756 	mov	_tdm_init_sloc0_1_0,dpl
   0FE3 85 83*16           3757 	mov	(_tdm_init_sloc0_1_0 + 1),dph
   0FE6 85 F0*17           3758 	mov	(_tdm_init_sloc0_1_0 + 2),b
   0FE9 F5*18              3759 	mov	(_tdm_init_sloc0_1_0 + 3),a
   0FEB 90s01r01           3760 	mov	dptr,#_tdm_init_window_width_1_1
   0FEE E0                 3761 	movx	a,@dptr
   0FEF FA                 3762 	mov	r2,a
   0FF0 A3                 3763 	inc	dptr
   0FF1 E0                 3764 	movx	a,@dptr
   0FF2 FB                 3765 	mov	r3,a
   0FF3 A3                 3766 	inc	dptr
   0FF4 E0                 3767 	movx	a,@dptr
   0FF5 FE                 3768 	mov	r6,a
   0FF6 A3                 3769 	inc	dptr
   0FF7 E0                 3770 	movx	a,@dptr
   0FF8 FF                 3771 	mov	r7,a
   0FF9 C3                 3772 	clr	c
   0FFA E5*15              3773 	mov	a,_tdm_init_sloc0_1_0
   0FFC 9A                 3774 	subb	a,r2
   0FFD E5*16              3775 	mov	a,(_tdm_init_sloc0_1_0 + 1)
   0FFF 9B                 3776 	subb	a,r3
   1000 E5*17              3777 	mov	a,(_tdm_init_sloc0_1_0 + 2)
   1002 9E                 3778 	subb	a,r6
   1003 E5*18              3779 	mov	a,(_tdm_init_sloc0_1_0 + 3)
   1005 9F                 3780 	subb	a,r7
   1006 50 39              3781 	jnc	00110$
                           3782 ;	radio/tdm.c:1038: window_width = param_get(PARAM_MAX_WINDOW)*(1000/16);
   1008 75 82 0F           3783 	mov	dpl,#0x0F
   100B 12s00r00           3784 	lcall	_param_get
   100E AC 82              3785 	mov	r4,dpl
   1010 AD 83              3786 	mov	r5,dph
   1012 AE F0              3787 	mov	r6,b
   1014 FF                 3788 	mov	r7,a
   1015 90s00r00           3789 	mov	dptr,#__mullong_PARM_2
   1018 EC                 3790 	mov	a,r4
   1019 F0                 3791 	movx	@dptr,a
   101A A3                 3792 	inc	dptr
   101B ED                 3793 	mov	a,r5
   101C F0                 3794 	movx	@dptr,a
   101D A3                 3795 	inc	dptr
   101E EE                 3796 	mov	a,r6
   101F F0                 3797 	movx	@dptr,a
   1020 A3                 3798 	inc	dptr
   1021 EF                 3799 	mov	a,r7
   1022 F0                 3800 	movx	@dptr,a
   1023 90 00 3E           3801 	mov	dptr,#(0x3E&0x00ff)
   1026 E4                 3802 	clr	a
   1027 F5 F0              3803 	mov	b,a
   1029 12s00r00           3804 	lcall	__mullong
   102C AC 82              3805 	mov	r4,dpl
   102E AD 83              3806 	mov	r5,dph
   1030 AE F0              3807 	mov	r6,b
   1032 FF                 3808 	mov	r7,a
   1033 90s01r01           3809 	mov	dptr,#_tdm_init_window_width_1_1
   1036 EC                 3810 	mov	a,r4
   1037 F0                 3811 	movx	@dptr,a
   1038 A3                 3812 	inc	dptr
   1039 ED                 3813 	mov	a,r5
   103A F0                 3814 	movx	@dptr,a
   103B A3                 3815 	inc	dptr
   103C EE                 3816 	mov	a,r6
   103D F0                 3817 	movx	@dptr,a
   103E A3                 3818 	inc	dptr
   103F EF                 3819 	mov	a,r7
   1040 F0                 3820 	movx	@dptr,a
   1041                    3821 00110$:
                           3822 ;	radio/tdm.c:1042: if (window_width > 0x1fff) {
   1041 90s01r01           3823 	mov	dptr,#_tdm_init_window_width_1_1
   1044 E0                 3824 	movx	a,@dptr
   1045 FC                 3825 	mov	r4,a
   1046 A3                 3826 	inc	dptr
   1047 E0                 3827 	movx	a,@dptr
   1048 FD                 3828 	mov	r5,a
   1049 A3                 3829 	inc	dptr
   104A E0                 3830 	movx	a,@dptr
   104B FE                 3831 	mov	r6,a
   104C A3                 3832 	inc	dptr
   104D E0                 3833 	movx	a,@dptr
   104E FF                 3834 	mov	r7,a
   104F ED                 3835 	mov	a,r5
   1050 54 E0              3836 	anl	a,#0xE0
   1052 70 06              3837 	jnz	00129$
   1054 EE                 3838 	mov	a,r6
   1055 70 03              3839 	jnz	00129$
   1057 EF                 3840 	mov	a,r7
   1058 60 0F              3841 	jz	00112$
   105A                    3842 00129$:
                           3843 ;	radio/tdm.c:1043: window_width = 0x1fff;
   105A 90s01r01           3844 	mov	dptr,#_tdm_init_window_width_1_1
   105D 74 FF              3845 	mov	a,#0xFF
   105F F0                 3846 	movx	@dptr,a
   1060 A3                 3847 	inc	dptr
   1061 74 1F              3848 	mov	a,#0x1F
   1063 F0                 3849 	movx	@dptr,a
   1064 A3                 3850 	inc	dptr
   1065 E4                 3851 	clr	a
   1066 F0                 3852 	movx	@dptr,a
   1067 A3                 3853 	inc	dptr
   1068 F0                 3854 	movx	@dptr,a
   1069                    3855 00112$:
                           3856 ;	radio/tdm.c:1046: tx_window_width = window_width;
   1069 90s01r01           3857 	mov	dptr,#_tdm_init_window_width_1_1
   106C E0                 3858 	movx	a,@dptr
   106D FC                 3859 	mov	r4,a
   106E A3                 3860 	inc	dptr
   106F E0                 3861 	movx	a,@dptr
   1070 FD                 3862 	mov	r5,a
   1071 A3                 3863 	inc	dptr
   1072 E0                 3864 	movx	a,@dptr
   1073 A3                 3865 	inc	dptr
   1074 E0                 3866 	movx	a,@dptr
   1075 78r03              3867 	mov	r0,#_tx_window_width
   1077 EC                 3868 	mov	a,r4
   1078 F2                 3869 	movx	@r0,a
   1079 08                 3870 	inc	r0
   107A ED                 3871 	mov	a,r5
   107B F2                 3872 	movx	@r0,a
                           3873 ;	radio/tdm.c:1051: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
   107C 78r0B              3874 	mov	r0,#(_settings + 0x000b)
   107E E2                 3875 	movx	a,@r0
   107F 7E 00              3876 	mov	r6,#0x00
   1081 24 F6              3877 	add	a,#0xF6
   1083 FF                 3878 	mov	r7,a
   1084 EE                 3879 	mov	a,r6
   1085 34 FF              3880 	addc	a,#0xFF
   1087 FE                 3881 	mov	r6,a
   1088 90s00r00           3882 	mov	dptr,#__divsint_PARM_2
   108B 74 02              3883 	mov	a,#0x02
   108D F0                 3884 	movx	@dptr,a
   108E A3                 3885 	inc	dptr
   108F E4                 3886 	clr	a
   1090 F0                 3887 	movx	@dptr,a
   1091 8F 82              3888 	mov	dpl,r7
   1093 8E 83              3889 	mov	dph,r6
   1095 C0 05              3890 	push	ar5
   1097 C0 04              3891 	push	ar4
   1099 12s00r00           3892 	lcall	__divsint
   109C AE 82              3893 	mov	r6,dpl
   109E AF 83              3894 	mov	r7,dph
   10A0 78r0A              3895 	mov	r0,#_ticks_per_byte
   10A2 90s00r00           3896 	mov	dptr,#__mulint_PARM_2
   10A5 E2                 3897 	movx	a,@r0
   10A6 F0                 3898 	movx	@dptr,a
   10A7 08                 3899 	inc	r0
   10A8 E2                 3900 	movx	a,@r0
   10A9 A3                 3901 	inc	dptr
   10AA F0                 3902 	movx	@dptr,a
   10AB 8E 82              3903 	mov	dpl,r6
   10AD 8F 83              3904 	mov	dph,r7
   10AF 12s00r00           3905 	lcall	__mulint
   10B2 AE 82              3906 	mov	r6,dpl
   10B4 AF 83              3907 	mov	r7,dph
   10B6 D0 04              3908 	pop	ar4
   10B8 D0 05              3909 	pop	ar5
   10BA 78r08              3910 	mov	r0,#_packet_latency
   10BC E2                 3911 	movx	a,@r0
   10BD 2E                 3912 	add	a,r6
   10BE F2                 3913 	movx	@r0,a
   10BF 08                 3914 	inc	r0
   10C0 E2                 3915 	movx	a,@r0
   10C1 3F                 3916 	addc	a,r7
   10C2 F2                 3917 	movx	@r0,a
                           3918 ;	radio/tdm.c:1055: i = (tx_window_width - packet_latency) / ticks_per_byte;
   10C3 78r08              3919 	mov	r0,#_packet_latency
   10C5 D3                 3920 	setb	c
   10C6 E2                 3921 	movx	a,@r0
   10C7 9C                 3922 	subb	a,r4
   10C8 F4                 3923 	cpl	a
   10C9 B3                 3924 	cpl	c
   10CA FC                 3925 	mov	r4,a
   10CB B3                 3926 	cpl	c
   10CC 08                 3927 	inc	r0
   10CD E2                 3928 	movx	a,@r0
   10CE 9D                 3929 	subb	a,r5
   10CF F4                 3930 	cpl	a
   10D0 FD                 3931 	mov	r5,a
   10D1 78r0A              3932 	mov	r0,#_ticks_per_byte
   10D3 90s00r00           3933 	mov	dptr,#__divuint_PARM_2
   10D6 E2                 3934 	movx	a,@r0
   10D7 F0                 3935 	movx	@dptr,a
   10D8 08                 3936 	inc	r0
   10D9 E2                 3937 	movx	a,@r0
   10DA A3                 3938 	inc	dptr
   10DB F0                 3939 	movx	@dptr,a
   10DC 8C 82              3940 	mov	dpl,r4
   10DE 8D 83              3941 	mov	dph,r5
   10E0 12s00r00           3942 	lcall	__divuint
   10E3 AE 82              3943 	mov	r6,dpl
   10E5 AF 83              3944 	mov	r7,dph
   10E7 90s00rFF           3945 	mov	dptr,#_tdm_init_i_1_1
   10EA EE                 3946 	mov	a,r6
   10EB F0                 3947 	movx	@dptr,a
   10EC A3                 3948 	inc	dptr
   10ED EF                 3949 	mov	a,r7
   10EE F0                 3950 	movx	@dptr,a
                           3951 ;	radio/tdm.c:1056: if (i > max_data_packet_length) {
   10EF 78r05              3952 	mov	r0,#_max_data_packet_length
   10F1 E2                 3953 	movx	a,@r0
   10F2 FC                 3954 	mov	r4,a
   10F3 7D 00              3955 	mov	r5,#0x00
   10F5 C3                 3956 	clr	c
   10F6 EC                 3957 	mov	a,r4
   10F7 9E                 3958 	subb	a,r6
   10F8 ED                 3959 	mov	a,r5
   10F9 9F                 3960 	subb	a,r7
   10FA 50 08              3961 	jnc	00114$
                           3962 ;	radio/tdm.c:1057: i = max_data_packet_length;
   10FC 90s00rFF           3963 	mov	dptr,#_tdm_init_i_1_1
   10FF EC                 3964 	mov	a,r4
   1100 F0                 3965 	movx	@dptr,a
   1101 A3                 3966 	inc	dptr
   1102 ED                 3967 	mov	a,r5
   1103 F0                 3968 	movx	@dptr,a
   1104                    3969 00114$:
                           3970 ;	radio/tdm.c:1059: packet_set_max_xmit(i);
   1104 90s00rFF           3971 	mov	dptr,#_tdm_init_i_1_1
   1107 E0                 3972 	movx	a,@dptr
   1108 FE                 3973 	mov	r6,a
   1109 A3                 3974 	inc	dptr
   110A E0                 3975 	movx	a,@dptr
   110B 8E 82              3976 	mov	dpl,r6
   110D 02s00r00           3977 	ljmp	_packet_set_max_xmit
                           3978 ;------------------------------------------------------------
                           3979 ;Allocation info for local variables in function 'tdm_report_timing'
                           3980 ;------------------------------------------------------------
                           3981 ;	radio/tdm.c:1075: tdm_report_timing(void)
                           3982 ;	-----------------------------------------
                           3983 ;	 function tdm_report_timing
                           3984 ;	-----------------------------------------
   1110                    3985 _tdm_report_timing:
                           3986 ;	radio/tdm.c:1077: printf("silence_period: %u\n", (unsigned)silence_period); delay_msec(1);
   1110 78r06              3987 	mov	r0,#_silence_period
   1112 E2                 3988 	movx	a,@r0
   1113 C0 E0              3989 	push	acc
   1115 08                 3990 	inc	r0
   1116 E2                 3991 	movx	a,@r0
   1117 C0 E0              3992 	push	acc
   1119 74rE3              3993 	mov	a,#__str_9
   111B C0 E0              3994 	push	acc
   111D 74s00              3995 	mov	a,#(__str_9 >> 8)
   111F C0 E0              3996 	push	acc
   1121 74 80              3997 	mov	a,#0x80
   1123 C0 E0              3998 	push	acc
   1125 12s00r00           3999 	lcall	_printfl
   1128 E5 81              4000 	mov	a,sp
   112A 24 FB              4001 	add	a,#0xfb
   112C F5 81              4002 	mov	sp,a
   112E 90 00 01           4003 	mov	dptr,#0x0001
   1131 12s00r00           4004 	lcall	_delay_msec
                           4005 ;	radio/tdm.c:1078: printf("tx_window_width: %u\n", (unsigned)tx_window_width); delay_msec(1);
   1134 78r03              4006 	mov	r0,#_tx_window_width
   1136 E2                 4007 	movx	a,@r0
   1137 C0 E0              4008 	push	acc
   1139 08                 4009 	inc	r0
   113A E2                 4010 	movx	a,@r0
   113B C0 E0              4011 	push	acc
   113D 74rF7              4012 	mov	a,#__str_10
   113F C0 E0              4013 	push	acc
   1141 74s00              4014 	mov	a,#(__str_10 >> 8)
   1143 C0 E0              4015 	push	acc
   1145 74 80              4016 	mov	a,#0x80
   1147 C0 E0              4017 	push	acc
   1149 12s00r00           4018 	lcall	_printfl
   114C E5 81              4019 	mov	a,sp
   114E 24 FB              4020 	add	a,#0xfb
   1150 F5 81              4021 	mov	sp,a
   1152 90 00 01           4022 	mov	dptr,#0x0001
   1155 12s00r00           4023 	lcall	_delay_msec
                           4024 ;	radio/tdm.c:1079: printf("max_data_packet_length: %u\n", (unsigned)max_data_packet_length); delay_msec(1);
   1158 78r05              4025 	mov	r0,#_max_data_packet_length
   115A E2                 4026 	movx	a,@r0
   115B FE                 4027 	mov	r6,a
   115C 7F 00              4028 	mov	r7,#0x00
   115E C0 06              4029 	push	ar6
   1160 C0 07              4030 	push	ar7
   1162 74r0C              4031 	mov	a,#__str_11
   1164 C0 E0              4032 	push	acc
   1166 74s01              4033 	mov	a,#(__str_11 >> 8)
   1168 C0 E0              4034 	push	acc
   116A 74 80              4035 	mov	a,#0x80
   116C C0 E0              4036 	push	acc
   116E 12s00r00           4037 	lcall	_printfl
   1171 E5 81              4038 	mov	a,sp
   1173 24 FB              4039 	add	a,#0xfb
   1175 F5 81              4040 	mov	sp,a
   1177 90 00 01           4041 	mov	dptr,#0x0001
   117A 02s00r00           4042 	ljmp	_delay_msec
                           4043 	.area CSEG    (CODE)
                           4044 	.area CONST   (CODE)
   0000                    4045 __str_0:
   0000 4C 2F 52 20 52 53  4046 	.ascii "L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u "
        53 49 3A 20 25 75
        2F 25 75 20 20 4C
        2F 52 20 6E 6F 69
        73 65 3A 20 25 75
        2F 25 75 20 70 6B
        74 73 3A 20 25 75
        20
   002B 00                 4047 	.db 0x00
   002C                    4048 __str_1:
   002C 20 74 78 65 3D 25  4049 	.ascii " txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u"
        75 20 72 78 65 3D
        25 75 20 73 74 78
        3D 25 75 20 73 72
        78 3D 25 75 20 65
        63 63 3D 25 75 2F
        25 75 20 74 65 6D
        70 3D 25 64 20 64
        63 6F 3D 25 75
   0061 0A                 4050 	.db 0x0A
   0062 00                 4051 	.db 0x00
   0063                    4052 __str_2:
   0063 54 44 4D 3A 20 25  4053 	.ascii "TDM: %u/%u len=%u "
        75 2F 25 75 20 6C
        65 6E 3D 25 75 20
   0075 00                 4054 	.db 0x00
   0076                    4055 __str_3:
   0076 20 64 65 6C 74 61  4056 	.ascii " delta: %d"
        3A 20 25 64
   0080 0A                 4057 	.db 0x0A
   0081 00                 4058 	.db 0x00
   0082                    4059 __str_4:
   0082 54 44 4D 3A 20 63  4060 	.ascii "TDM: change timing %u/%u"
        68 61 6E 67 65 20
        74 69 6D 69 6E 67
        20 25 75 2F 25 75
   009A 0A                 4061 	.db 0x0A
   009B 00                 4062 	.db 0x00
   009C                    4063 __str_5:
   009C 54 44 4D 3A 20 73  4064 	.ascii "TDM: scanning"
        63 61 6E 6E 69 6E
        67
   00A9 0A                 4065 	.db 0x0A
   00AA 00                 4066 	.db 0x00
   00AB                    4067 __str_6:
   00AB 73 74 61 63 6B 20  4068 	.ascii "stack blown"
        62 6C 6F 77 6E
   00B6 0A                 4069 	.db 0x0A
   00B7 00                 4070 	.db 0x00
   00B8                    4071 __str_7:
   00B8 70 64 61 74 61 20  4072 	.ascii "pdata canary changed"
        63 61 6E 61 72 79
        20 63 68 61 6E 67
        65 64
   00CC 0A                 4073 	.db 0x0A
   00CD 00                 4074 	.db 0x00
   00CE                    4075 __str_8:
   00CE 6F 76 65 72 73 69  4076 	.ascii "oversized tdm packet"
        7A 65 64 20 74 64
        6D 20 70 61 63 6B
        65 74
   00E2 00                 4077 	.db 0x00
   00E3                    4078 __str_9:
   00E3 73 69 6C 65 6E 63  4079 	.ascii "silence_period: %u"
        65 5F 70 65 72 69
        6F 64 3A 20 25 75
   00F5 0A                 4080 	.db 0x0A
   00F6 00                 4081 	.db 0x00
   00F7                    4082 __str_10:
   00F7 74 78 5F 77 69 6E  4083 	.ascii "tx_window_width: %u"
        64 6F 77 5F 77 69
        64 74 68 3A 20 25
        75
   010A 0A                 4084 	.db 0x0A
   010B 00                 4085 	.db 0x00
   010C                    4086 __str_11:
   010C 6D 61 78 5F 64 61  4087 	.ascii "max_data_packet_length: %u"
        74 61 5F 70 61 63
        6B 65 74 5F 6C 65
        6E 67 74 68 3A 20
        25 75
   0126 0A                 4088 	.db 0x0A
   0127 00                 4089 	.db 0x00
                           4090 	.area XINIT   (CODE)
                           4091 	.area CABS    (ABS,CODE)
