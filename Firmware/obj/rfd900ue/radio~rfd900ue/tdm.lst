                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Sep  7 2022) (Linux)
                                      4 ; This file was generated Wed Sep  7 10:05:06 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module tdm
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _aes_get_encryption_level
                                     13 	.globl _crc16
                                     14 	.globl _fhop_set_locked
                                     15 	.globl _fhop_window_change
                                     16 	.globl _fhop_receive_channel
                                     17 	.globl _fhop_transmit_channel
                                     18 	.globl _packet_inject
                                     19 	.globl _packet_set_max_xmit
                                     20 	.globl _packet_force_resend
                                     21 	.globl _packet_is_duplicate
                                     22 	.globl _packet_is_injected
                                     23 	.globl _packet_is_resend
                                     24 	.globl _packet_get_next
                                     25 	.globl _timer_entropy
                                     26 	.globl _delay_msec
                                     27 	.globl _timer2_tick
                                     28 	.globl _radio_temperature
                                     29 	.globl _MAVLink_report
                                     30 	.globl _radio_receive_in_progress
                                     31 	.globl _radio_get_transmit_power
                                     32 	.globl _radio_air_rate
                                     33 	.globl _radio_current_rssi
                                     34 	.globl _radio_last_rssi
                                     35 	.globl _radio_set_channel
                                     36 	.globl _radio_receiver_on
                                     37 	.globl _radio_transmit
                                     38 	.globl _radio_preamble_detected
                                     39 	.globl _radio_receive_packet
                                     40 	.globl _printf_end_capture
                                     41 	.globl _printf_start_capture
                                     42 	.globl _printfl
                                     43 	.globl _panic
                                     44 	.globl _at_command
                                     45 	.globl _constrain
                                     46 	.globl _param_get
                                     47 	.globl _decryptPackets
                                     48 	.globl _encrypt_buffer_getting_empty
                                     49 	.globl _encrypt_buffer_getting_full
                                     50 	.globl _serial_decrypt_buf
                                     51 	.globl _strlen
                                     52 	.globl _memset
                                     53 	.globl _memcpy
                                     54 	.globl _rand
                                     55 	.globl _NSS1
                                     56 	.globl _IRQ
                                     57 	.globl _PIN_ENABLE
                                     58 	.globl _PIN_CONFIG
                                     59 	.globl _LED_GREEN
                                     60 	.globl _LED_RED
                                     61 	.globl _SPI1EN
                                     62 	.globl _TXBMT1
                                     63 	.globl _NSS1MD0
                                     64 	.globl _NSS1MD1
                                     65 	.globl _RXOVRN1
                                     66 	.globl _MODF1
                                     67 	.globl _WCOL1
                                     68 	.globl _SPIF1
                                     69 	.globl _SPI0EN
                                     70 	.globl _TXBMT0
                                     71 	.globl _NSS0MD0
                                     72 	.globl _NSS0MD1
                                     73 	.globl _RXOVRN0
                                     74 	.globl _MODF0
                                     75 	.globl _WCOL0
                                     76 	.globl _SPIF0
                                     77 	.globl _AD0CM0
                                     78 	.globl _AD0CM1
                                     79 	.globl _AD0CM2
                                     80 	.globl _AD0WINT
                                     81 	.globl _AD0BUSY
                                     82 	.globl _AD0INT
                                     83 	.globl _BURSTEN
                                     84 	.globl _AD0EN
                                     85 	.globl _CCF0
                                     86 	.globl _CCF1
                                     87 	.globl _CCF2
                                     88 	.globl _CCF3
                                     89 	.globl _CCF4
                                     90 	.globl _CCF5
                                     91 	.globl _CR
                                     92 	.globl _CF
                                     93 	.globl _P
                                     94 	.globl _F1
                                     95 	.globl _OV
                                     96 	.globl _RS0
                                     97 	.globl _RS1
                                     98 	.globl _F0
                                     99 	.globl _AC
                                    100 	.globl _CY
                                    101 	.globl _T2XCLK
                                    102 	.globl _T2RCLK
                                    103 	.globl _TR2
                                    104 	.globl _T2SPLIT
                                    105 	.globl _TF2CEN
                                    106 	.globl _TF2LEN
                                    107 	.globl _TF2L
                                    108 	.globl _TF2H
                                    109 	.globl _SI
                                    110 	.globl _ACK
                                    111 	.globl _ARBLOST
                                    112 	.globl _ACKRQ
                                    113 	.globl _STO
                                    114 	.globl _STA
                                    115 	.globl _TXMODE
                                    116 	.globl _MASTER
                                    117 	.globl _PX0
                                    118 	.globl _PT0
                                    119 	.globl _PX1
                                    120 	.globl _PT1
                                    121 	.globl _PS0
                                    122 	.globl _PT2
                                    123 	.globl _PSPI0
                                    124 	.globl _EX0
                                    125 	.globl _ET0
                                    126 	.globl _EX1
                                    127 	.globl _ET1
                                    128 	.globl _ES0
                                    129 	.globl _ET2
                                    130 	.globl _ESPI0
                                    131 	.globl _EA
                                    132 	.globl _RI0
                                    133 	.globl _TI0
                                    134 	.globl _RB80
                                    135 	.globl _TB80
                                    136 	.globl _REN0
                                    137 	.globl _MCE0
                                    138 	.globl _S0MODE
                                    139 	.globl _IT0
                                    140 	.globl _IE0
                                    141 	.globl _IT1
                                    142 	.globl _IE1
                                    143 	.globl _TR0
                                    144 	.globl _TF0
                                    145 	.globl _TR1
                                    146 	.globl _TF1
                                    147 	.globl __XPAGE
                                    148 	.globl _PCA0CP4
                                    149 	.globl _PCA0CP0
                                    150 	.globl _PCA0
                                    151 	.globl _PCA0CP3
                                    152 	.globl _PCA0CP2
                                    153 	.globl _PCA0CP1
                                    154 	.globl _PCA0CP5
                                    155 	.globl _TMR2
                                    156 	.globl _TMR2RL
                                    157 	.globl _ADC0LT
                                    158 	.globl _ADC0GT
                                    159 	.globl _ADC0
                                    160 	.globl _TMR3
                                    161 	.globl _TMR3RL
                                    162 	.globl _TOFF
                                    163 	.globl _DP
                                    164 	.globl _PCLKEN
                                    165 	.globl _CLKMODE
                                    166 	.globl _P7MDOUT
                                    167 	.globl _P6MDOUT
                                    168 	.globl _P5MDOUT
                                    169 	.globl _P4MDOUT
                                    170 	.globl _PCLKACT
                                    171 	.globl _P6MDIN
                                    172 	.globl _P5MDIN
                                    173 	.globl _P4MDIN
                                    174 	.globl _P3MDIN
                                    175 	.globl _DEVICEID
                                    176 	.globl _REVID
                                    177 	.globl _HWID
                                    178 	.globl _P7
                                    179 	.globl _P6
                                    180 	.globl _P5
                                    181 	.globl _P4
                                    182 	.globl _TOFFH
                                    183 	.globl _TOFFL
                                    184 	.globl _ADC0TK
                                    185 	.globl _ADC0PWR
                                    186 	.globl _IREF0CF
                                    187 	.globl _FLSCL
                                    188 	.globl _OSCICL
                                    189 	.globl _OSCIFL
                                    190 	.globl _P3MDOUT
                                    191 	.globl _LCD0BUFCF
                                    192 	.globl _P7DRV
                                    193 	.globl _P6DRV
                                    194 	.globl _P2DRV
                                    195 	.globl _P1DRV
                                    196 	.globl _P0DRV
                                    197 	.globl _P5DRV
                                    198 	.globl _P4DRV
                                    199 	.globl _P3DRV
                                    200 	.globl _LCD0BUFCN
                                    201 	.globl _CRC0CNT
                                    202 	.globl _CRC0AUTO
                                    203 	.globl _CRC0FLIP
                                    204 	.globl _CRC0IN
                                    205 	.globl _CRC0CN
                                    206 	.globl _CRC0DAT
                                    207 	.globl _SFRPGCN
                                    208 	.globl _DC0RDY
                                    209 	.globl _PC0INT1
                                    210 	.globl _PC0INT0
                                    211 	.globl _PC0DCH
                                    212 	.globl _PC0DCL
                                    213 	.globl _SPI1CN
                                    214 	.globl _AES0YOUT
                                    215 	.globl _PC0HIST
                                    216 	.globl _PC0CMP1H
                                    217 	.globl _PC0CMP1M
                                    218 	.globl _PC0CMP1L
                                    219 	.globl _AES0KBA
                                    220 	.globl _AES0DBA
                                    221 	.globl _AES0KIN
                                    222 	.globl _AES0XIN
                                    223 	.globl _AES0BIN
                                    224 	.globl _AES0DCFG
                                    225 	.globl _AES0BCFG
                                    226 	.globl _PC0TH
                                    227 	.globl _PC0CMP0H
                                    228 	.globl _PC0CMP0M
                                    229 	.globl _PC0CMP0L
                                    230 	.globl _PC0CTR1H
                                    231 	.globl _PC0CTR1M
                                    232 	.globl _PC0CTR1L
                                    233 	.globl _PC0CTR0H
                                    234 	.globl _PC0CTR0M
                                    235 	.globl _PC0CTR0L
                                    236 	.globl _PC0MD
                                    237 	.globl _PC0PCF
                                    238 	.globl _DMA0NMD
                                    239 	.globl _DMA0BUSY
                                    240 	.globl _DMA0MINT
                                    241 	.globl _DMA0INT
                                    242 	.globl _DMA0EN
                                    243 	.globl _DMA0SEL
                                    244 	.globl _DMA0NSZH
                                    245 	.globl _DMA0NSZL
                                    246 	.globl _DMA0NAOH
                                    247 	.globl _DMA0NAOL
                                    248 	.globl _DMA0NBAH
                                    249 	.globl _DMA0NBAL
                                    250 	.globl _DMA0NCF
                                    251 	.globl _VREGINSDH
                                    252 	.globl _VREGINSDL
                                    253 	.globl _ENC0CN
                                    254 	.globl _ENC0H
                                    255 	.globl _ENC0M
                                    256 	.globl _ENC0L
                                    257 	.globl _PC0STAT
                                    258 	.globl _CRC1CN
                                    259 	.globl _CRC1POLH
                                    260 	.globl _CRC1POLL
                                    261 	.globl _CRC1OUTH
                                    262 	.globl _CRC1OUTL
                                    263 	.globl _CRC1IN
                                    264 	.globl _LCD0BUFMD
                                    265 	.globl _LCD0CHPCN
                                    266 	.globl _DC0MD
                                    267 	.globl _DC0CF
                                    268 	.globl _DC0CN
                                    269 	.globl _LCD0VBMCF
                                    270 	.globl _LCD0CHPMD
                                    271 	.globl _LCD0CHPCF
                                    272 	.globl _LCD0MSCF
                                    273 	.globl _LCD0MSCN
                                    274 	.globl _LCD0CLKDIVH
                                    275 	.globl _LCD0CLKDIVL
                                    276 	.globl _LCD0VBMCN
                                    277 	.globl _LCD0CF
                                    278 	.globl _LCD0PWR
                                    279 	.globl _SPI1DAT
                                    280 	.globl _SPI1CKR
                                    281 	.globl _SPI1CFG
                                    282 	.globl _LCD0TOGR
                                    283 	.globl _LCD0BLINK
                                    284 	.globl _LCD0CN
                                    285 	.globl _LCD0CNTRST
                                    286 	.globl _LCD0DF
                                    287 	.globl _LCD0DE
                                    288 	.globl _LCD0DD
                                    289 	.globl _LCD0DC
                                    290 	.globl _LCD0DB
                                    291 	.globl _LCD0DA
                                    292 	.globl _LCD0D9
                                    293 	.globl _LCD0D8
                                    294 	.globl _LCD0D7
                                    295 	.globl _LCD0D6
                                    296 	.globl _LCD0D5
                                    297 	.globl _LCD0D4
                                    298 	.globl _LCD0D3
                                    299 	.globl _LCD0D2
                                    300 	.globl _LCD0D1
                                    301 	.globl _LCD0D0
                                    302 	.globl _VDM0CN
                                    303 	.globl _PCA0CPH4
                                    304 	.globl _PCA0CPL4
                                    305 	.globl _PCA0CPH0
                                    306 	.globl _PCA0CPL0
                                    307 	.globl _PCA0H
                                    308 	.globl _PCA0L
                                    309 	.globl _SPI0CN
                                    310 	.globl _EIP2
                                    311 	.globl _EIP1
                                    312 	.globl _SMB0ADM
                                    313 	.globl _SMB0ADR
                                    314 	.globl _P2MDIN
                                    315 	.globl _P1MDIN
                                    316 	.globl _P0MDIN
                                    317 	.globl _B
                                    318 	.globl _RSTSRC
                                    319 	.globl _PCA0CPH3
                                    320 	.globl _PCA0CPL3
                                    321 	.globl _PCA0CPH2
                                    322 	.globl _PCA0CPL2
                                    323 	.globl _PCA0CPH1
                                    324 	.globl _PCA0CPL1
                                    325 	.globl _ADC0CN
                                    326 	.globl _EIE2
                                    327 	.globl _EIE1
                                    328 	.globl _FLWR
                                    329 	.globl _IT01CF
                                    330 	.globl _XBR2
                                    331 	.globl _XBR1
                                    332 	.globl _XBR0
                                    333 	.globl _ACC
                                    334 	.globl _PCA0PWM
                                    335 	.globl _PCA0CPM4
                                    336 	.globl _PCA0CPM3
                                    337 	.globl _PCA0CPM2
                                    338 	.globl _PCA0CPM1
                                    339 	.globl _PCA0CPM0
                                    340 	.globl _PCA0MD
                                    341 	.globl _PCA0CN
                                    342 	.globl _P0MAT
                                    343 	.globl _P2SKIP
                                    344 	.globl _P1SKIP
                                    345 	.globl _P0SKIP
                                    346 	.globl _PCA0CPH5
                                    347 	.globl _PCA0CPL5
                                    348 	.globl _REF0CN
                                    349 	.globl _PSW
                                    350 	.globl _P1MAT
                                    351 	.globl _PCA0CPM5
                                    352 	.globl _TMR2H
                                    353 	.globl _TMR2L
                                    354 	.globl _TMR2RLH
                                    355 	.globl _TMR2RLL
                                    356 	.globl _REG0CN
                                    357 	.globl _TMR2CN
                                    358 	.globl _P0MASK
                                    359 	.globl _ADC0LTH
                                    360 	.globl _ADC0LTL
                                    361 	.globl _ADC0GTH
                                    362 	.globl _ADC0GTL
                                    363 	.globl _SMB0DAT
                                    364 	.globl _SMB0CF
                                    365 	.globl _SMB0CN
                                    366 	.globl _P1MASK
                                    367 	.globl _ADC0H
                                    368 	.globl _ADC0L
                                    369 	.globl _ADC0CF
                                    370 	.globl _ADC0MX
                                    371 	.globl _ADC0AC
                                    372 	.globl _IREF0CN
                                    373 	.globl _IP
                                    374 	.globl _FLKEY
                                    375 	.globl _PMU0FL
                                    376 	.globl _PMU0CF
                                    377 	.globl _PMU0MD
                                    378 	.globl _OSCICN
                                    379 	.globl _OSCXCN
                                    380 	.globl _P3
                                    381 	.globl _EMI0TC
                                    382 	.globl _RTC0KEY
                                    383 	.globl _RTC0DAT
                                    384 	.globl _RTC0ADR
                                    385 	.globl _EMI0CF
                                    386 	.globl _EMI0CN
                                    387 	.globl _CLKSEL
                                    388 	.globl _IE
                                    389 	.globl _SFRPAGE
                                    390 	.globl _P2MDOUT
                                    391 	.globl _P1MDOUT
                                    392 	.globl _P0MDOUT
                                    393 	.globl _SPI0DAT
                                    394 	.globl _SPI0CKR
                                    395 	.globl _SPI0CFG
                                    396 	.globl _P2
                                    397 	.globl _CPT0MX
                                    398 	.globl _CPT1MX
                                    399 	.globl _CPT0MD
                                    400 	.globl _CPT1MD
                                    401 	.globl _CPT0CN
                                    402 	.globl _CPT1CN
                                    403 	.globl _SBUF0
                                    404 	.globl _SCON0
                                    405 	.globl _TMR3H
                                    406 	.globl _TMR3L
                                    407 	.globl _TMR3RLH
                                    408 	.globl _TMR3RLL
                                    409 	.globl _TMR3CN
                                    410 	.globl _P1
                                    411 	.globl _PSCTL
                                    412 	.globl _CKCON
                                    413 	.globl _TH1
                                    414 	.globl _TH0
                                    415 	.globl _TL1
                                    416 	.globl _TL0
                                    417 	.globl _TMOD
                                    418 	.globl _TCON
                                    419 	.globl _PCON
                                    420 	.globl _SFRLAST
                                    421 	.globl _SFRNEXT
                                    422 	.globl _PSBANK
                                    423 	.globl _DPH
                                    424 	.globl _DPL
                                    425 	.globl _SP
                                    426 	.globl _P0
                                    427 	.globl _test_display
                                    428 	.globl _pbuf
                                    429 	.globl _trailer
                                    430 	.globl _lbt_rssi
                                    431 	.globl _duty_cycle_offset
                                    432 	.globl _duty_cycle
                                    433 	.globl _transmit_wait
                                    434 	.globl __canary
                                    435 	.globl _tdm_show_rssi
                                    436 	.globl _tdm_change_phase
                                    437 	.globl _tdm_remote_at
                                    438 	.globl _tdm_serial_loop
                                    439 	.globl _tdm_init
                                    440 	.globl _tdm_report_timing
                                    441 ;--------------------------------------------------------
                                    442 ; special function registers
                                    443 ;--------------------------------------------------------
                                    444 	.area RSEG    (ABS,DATA)
      000000                        445 	.org 0x0000
                           000080   446 _P0	=	0x0080
                           000081   447 _SP	=	0x0081
                           000082   448 _DPL	=	0x0082
                           000083   449 _DPH	=	0x0083
                           000084   450 _PSBANK	=	0x0084
                           000085   451 _SFRNEXT	=	0x0085
                           000086   452 _SFRLAST	=	0x0086
                           000087   453 _PCON	=	0x0087
                           000088   454 _TCON	=	0x0088
                           000089   455 _TMOD	=	0x0089
                           00008A   456 _TL0	=	0x008a
                           00008B   457 _TL1	=	0x008b
                           00008C   458 _TH0	=	0x008c
                           00008D   459 _TH1	=	0x008d
                           00008E   460 _CKCON	=	0x008e
                           00008F   461 _PSCTL	=	0x008f
                           000090   462 _P1	=	0x0090
                           000091   463 _TMR3CN	=	0x0091
                           000092   464 _TMR3RLL	=	0x0092
                           000093   465 _TMR3RLH	=	0x0093
                           000094   466 _TMR3L	=	0x0094
                           000095   467 _TMR3H	=	0x0095
                           000098   468 _SCON0	=	0x0098
                           000099   469 _SBUF0	=	0x0099
                           00009A   470 _CPT1CN	=	0x009a
                           00009B   471 _CPT0CN	=	0x009b
                           00009C   472 _CPT1MD	=	0x009c
                           00009D   473 _CPT0MD	=	0x009d
                           00009E   474 _CPT1MX	=	0x009e
                           00009F   475 _CPT0MX	=	0x009f
                           0000A0   476 _P2	=	0x00a0
                           0000A1   477 _SPI0CFG	=	0x00a1
                           0000A2   478 _SPI0CKR	=	0x00a2
                           0000A3   479 _SPI0DAT	=	0x00a3
                           0000A4   480 _P0MDOUT	=	0x00a4
                           0000A5   481 _P1MDOUT	=	0x00a5
                           0000A6   482 _P2MDOUT	=	0x00a6
                           0000A7   483 _SFRPAGE	=	0x00a7
                           0000A8   484 _IE	=	0x00a8
                           0000A9   485 _CLKSEL	=	0x00a9
                           0000AA   486 _EMI0CN	=	0x00aa
                           0000AB   487 _EMI0CF	=	0x00ab
                           0000AC   488 _RTC0ADR	=	0x00ac
                           0000AD   489 _RTC0DAT	=	0x00ad
                           0000AE   490 _RTC0KEY	=	0x00ae
                           0000AF   491 _EMI0TC	=	0x00af
                           0000B0   492 _P3	=	0x00b0
                           0000B1   493 _OSCXCN	=	0x00b1
                           0000B2   494 _OSCICN	=	0x00b2
                           0000B3   495 _PMU0MD	=	0x00b3
                           0000B5   496 _PMU0CF	=	0x00b5
                           0000B6   497 _PMU0FL	=	0x00b6
                           0000B7   498 _FLKEY	=	0x00b7
                           0000B8   499 _IP	=	0x00b8
                           0000B9   500 _IREF0CN	=	0x00b9
                           0000BA   501 _ADC0AC	=	0x00ba
                           0000BB   502 _ADC0MX	=	0x00bb
                           0000BC   503 _ADC0CF	=	0x00bc
                           0000BD   504 _ADC0L	=	0x00bd
                           0000BE   505 _ADC0H	=	0x00be
                           0000BF   506 _P1MASK	=	0x00bf
                           0000C0   507 _SMB0CN	=	0x00c0
                           0000C1   508 _SMB0CF	=	0x00c1
                           0000C2   509 _SMB0DAT	=	0x00c2
                           0000C3   510 _ADC0GTL	=	0x00c3
                           0000C4   511 _ADC0GTH	=	0x00c4
                           0000C5   512 _ADC0LTL	=	0x00c5
                           0000C6   513 _ADC0LTH	=	0x00c6
                           0000C7   514 _P0MASK	=	0x00c7
                           0000C8   515 _TMR2CN	=	0x00c8
                           0000C9   516 _REG0CN	=	0x00c9
                           0000CA   517 _TMR2RLL	=	0x00ca
                           0000CB   518 _TMR2RLH	=	0x00cb
                           0000CC   519 _TMR2L	=	0x00cc
                           0000CD   520 _TMR2H	=	0x00cd
                           0000CE   521 _PCA0CPM5	=	0x00ce
                           0000CF   522 _P1MAT	=	0x00cf
                           0000D0   523 _PSW	=	0x00d0
                           0000D1   524 _REF0CN	=	0x00d1
                           0000D2   525 _PCA0CPL5	=	0x00d2
                           0000D3   526 _PCA0CPH5	=	0x00d3
                           0000D4   527 _P0SKIP	=	0x00d4
                           0000D5   528 _P1SKIP	=	0x00d5
                           0000D6   529 _P2SKIP	=	0x00d6
                           0000D7   530 _P0MAT	=	0x00d7
                           0000D8   531 _PCA0CN	=	0x00d8
                           0000D9   532 _PCA0MD	=	0x00d9
                           0000DA   533 _PCA0CPM0	=	0x00da
                           0000DB   534 _PCA0CPM1	=	0x00db
                           0000DC   535 _PCA0CPM2	=	0x00dc
                           0000DD   536 _PCA0CPM3	=	0x00dd
                           0000DE   537 _PCA0CPM4	=	0x00de
                           0000DF   538 _PCA0PWM	=	0x00df
                           0000E0   539 _ACC	=	0x00e0
                           0000E1   540 _XBR0	=	0x00e1
                           0000E2   541 _XBR1	=	0x00e2
                           0000E3   542 _XBR2	=	0x00e3
                           0000E4   543 _IT01CF	=	0x00e4
                           0000E5   544 _FLWR	=	0x00e5
                           0000E6   545 _EIE1	=	0x00e6
                           0000E7   546 _EIE2	=	0x00e7
                           0000E8   547 _ADC0CN	=	0x00e8
                           0000E9   548 _PCA0CPL1	=	0x00e9
                           0000EA   549 _PCA0CPH1	=	0x00ea
                           0000EB   550 _PCA0CPL2	=	0x00eb
                           0000EC   551 _PCA0CPH2	=	0x00ec
                           0000ED   552 _PCA0CPL3	=	0x00ed
                           0000EE   553 _PCA0CPH3	=	0x00ee
                           0000EF   554 _RSTSRC	=	0x00ef
                           0000F0   555 _B	=	0x00f0
                           0000F1   556 _P0MDIN	=	0x00f1
                           0000F2   557 _P1MDIN	=	0x00f2
                           0000F3   558 _P2MDIN	=	0x00f3
                           0000F4   559 _SMB0ADR	=	0x00f4
                           0000F5   560 _SMB0ADM	=	0x00f5
                           0000F6   561 _EIP1	=	0x00f6
                           0000F7   562 _EIP2	=	0x00f7
                           0000F8   563 _SPI0CN	=	0x00f8
                           0000F9   564 _PCA0L	=	0x00f9
                           0000FA   565 _PCA0H	=	0x00fa
                           0000FB   566 _PCA0CPL0	=	0x00fb
                           0000FC   567 _PCA0CPH0	=	0x00fc
                           0000FD   568 _PCA0CPL4	=	0x00fd
                           0000FE   569 _PCA0CPH4	=	0x00fe
                           0000FF   570 _VDM0CN	=	0x00ff
                           000089   571 _LCD0D0	=	0x0089
                           00008A   572 _LCD0D1	=	0x008a
                           00008B   573 _LCD0D2	=	0x008b
                           00008C   574 _LCD0D3	=	0x008c
                           00008D   575 _LCD0D4	=	0x008d
                           00008E   576 _LCD0D5	=	0x008e
                           000091   577 _LCD0D6	=	0x0091
                           000092   578 _LCD0D7	=	0x0092
                           000093   579 _LCD0D8	=	0x0093
                           000094   580 _LCD0D9	=	0x0094
                           000095   581 _LCD0DA	=	0x0095
                           000096   582 _LCD0DB	=	0x0096
                           000097   583 _LCD0DC	=	0x0097
                           000099   584 _LCD0DD	=	0x0099
                           00009A   585 _LCD0DE	=	0x009a
                           00009B   586 _LCD0DF	=	0x009b
                           00009C   587 _LCD0CNTRST	=	0x009c
                           00009D   588 _LCD0CN	=	0x009d
                           00009E   589 _LCD0BLINK	=	0x009e
                           00009F   590 _LCD0TOGR	=	0x009f
                           0000A1   591 _SPI1CFG	=	0x00a1
                           0000A2   592 _SPI1CKR	=	0x00a2
                           0000A3   593 _SPI1DAT	=	0x00a3
                           0000A4   594 _LCD0PWR	=	0x00a4
                           0000A5   595 _LCD0CF	=	0x00a5
                           0000A6   596 _LCD0VBMCN	=	0x00a6
                           0000A9   597 _LCD0CLKDIVL	=	0x00a9
                           0000AA   598 _LCD0CLKDIVH	=	0x00aa
                           0000AB   599 _LCD0MSCN	=	0x00ab
                           0000AC   600 _LCD0MSCF	=	0x00ac
                           0000AD   601 _LCD0CHPCF	=	0x00ad
                           0000AE   602 _LCD0CHPMD	=	0x00ae
                           0000AF   603 _LCD0VBMCF	=	0x00af
                           0000B1   604 _DC0CN	=	0x00b1
                           0000B2   605 _DC0CF	=	0x00b2
                           0000B3   606 _DC0MD	=	0x00b3
                           0000B5   607 _LCD0CHPCN	=	0x00b5
                           0000B6   608 _LCD0BUFMD	=	0x00b6
                           0000B9   609 _CRC1IN	=	0x00b9
                           0000BA   610 _CRC1OUTL	=	0x00ba
                           0000BB   611 _CRC1OUTH	=	0x00bb
                           0000BC   612 _CRC1POLL	=	0x00bc
                           0000BD   613 _CRC1POLH	=	0x00bd
                           0000BE   614 _CRC1CN	=	0x00be
                           0000C1   615 _PC0STAT	=	0x00c1
                           0000C2   616 _ENC0L	=	0x00c2
                           0000C3   617 _ENC0M	=	0x00c3
                           0000C4   618 _ENC0H	=	0x00c4
                           0000C5   619 _ENC0CN	=	0x00c5
                           0000C6   620 _VREGINSDL	=	0x00c6
                           0000C7   621 _VREGINSDH	=	0x00c7
                           0000C9   622 _DMA0NCF	=	0x00c9
                           0000CA   623 _DMA0NBAL	=	0x00ca
                           0000CB   624 _DMA0NBAH	=	0x00cb
                           0000CC   625 _DMA0NAOL	=	0x00cc
                           0000CD   626 _DMA0NAOH	=	0x00cd
                           0000CE   627 _DMA0NSZL	=	0x00ce
                           0000CF   628 _DMA0NSZH	=	0x00cf
                           0000D1   629 _DMA0SEL	=	0x00d1
                           0000D2   630 _DMA0EN	=	0x00d2
                           0000D3   631 _DMA0INT	=	0x00d3
                           0000D4   632 _DMA0MINT	=	0x00d4
                           0000D5   633 _DMA0BUSY	=	0x00d5
                           0000D6   634 _DMA0NMD	=	0x00d6
                           0000D7   635 _PC0PCF	=	0x00d7
                           0000D9   636 _PC0MD	=	0x00d9
                           0000DA   637 _PC0CTR0L	=	0x00da
                           0000DB   638 _PC0CTR0M	=	0x00db
                           0000DC   639 _PC0CTR0H	=	0x00dc
                           0000DD   640 _PC0CTR1L	=	0x00dd
                           0000DE   641 _PC0CTR1M	=	0x00de
                           0000DF   642 _PC0CTR1H	=	0x00df
                           0000E1   643 _PC0CMP0L	=	0x00e1
                           0000E2   644 _PC0CMP0M	=	0x00e2
                           0000E3   645 _PC0CMP0H	=	0x00e3
                           0000E4   646 _PC0TH	=	0x00e4
                           0000E9   647 _AES0BCFG	=	0x00e9
                           0000EA   648 _AES0DCFG	=	0x00ea
                           0000EB   649 _AES0BIN	=	0x00eb
                           0000EC   650 _AES0XIN	=	0x00ec
                           0000ED   651 _AES0KIN	=	0x00ed
                           0000EE   652 _AES0DBA	=	0x00ee
                           0000EF   653 _AES0KBA	=	0x00ef
                           0000F1   654 _PC0CMP1L	=	0x00f1
                           0000F2   655 _PC0CMP1M	=	0x00f2
                           0000F3   656 _PC0CMP1H	=	0x00f3
                           0000F4   657 _PC0HIST	=	0x00f4
                           0000F5   658 _AES0YOUT	=	0x00f5
                           0000F8   659 _SPI1CN	=	0x00f8
                           0000F9   660 _PC0DCL	=	0x00f9
                           0000FA   661 _PC0DCH	=	0x00fa
                           0000FB   662 _PC0INT0	=	0x00fb
                           0000FC   663 _PC0INT1	=	0x00fc
                           0000FD   664 _DC0RDY	=	0x00fd
                           00008E   665 _SFRPGCN	=	0x008e
                           000091   666 _CRC0DAT	=	0x0091
                           000092   667 _CRC0CN	=	0x0092
                           000093   668 _CRC0IN	=	0x0093
                           000094   669 _CRC0FLIP	=	0x0094
                           000096   670 _CRC0AUTO	=	0x0096
                           000097   671 _CRC0CNT	=	0x0097
                           00009C   672 _LCD0BUFCN	=	0x009c
                           0000A1   673 _P3DRV	=	0x00a1
                           0000A2   674 _P4DRV	=	0x00a2
                           0000A3   675 _P5DRV	=	0x00a3
                           0000A4   676 _P0DRV	=	0x00a4
                           0000A5   677 _P1DRV	=	0x00a5
                           0000A6   678 _P2DRV	=	0x00a6
                           0000AA   679 _P6DRV	=	0x00aa
                           0000AB   680 _P7DRV	=	0x00ab
                           0000AC   681 _LCD0BUFCF	=	0x00ac
                           0000B1   682 _P3MDOUT	=	0x00b1
                           0000B2   683 _OSCIFL	=	0x00b2
                           0000B3   684 _OSCICL	=	0x00b3
                           0000B6   685 _FLSCL	=	0x00b6
                           0000B9   686 _IREF0CF	=	0x00b9
                           0000BB   687 _ADC0PWR	=	0x00bb
                           0000BC   688 _ADC0TK	=	0x00bc
                           0000BD   689 _TOFFL	=	0x00bd
                           0000BE   690 _TOFFH	=	0x00be
                           0000D9   691 _P4	=	0x00d9
                           0000DA   692 _P5	=	0x00da
                           0000DB   693 _P6	=	0x00db
                           0000DC   694 _P7	=	0x00dc
                           0000E9   695 _HWID	=	0x00e9
                           0000EA   696 _REVID	=	0x00ea
                           0000EB   697 _DEVICEID	=	0x00eb
                           0000F1   698 _P3MDIN	=	0x00f1
                           0000F2   699 _P4MDIN	=	0x00f2
                           0000F3   700 _P5MDIN	=	0x00f3
                           0000F4   701 _P6MDIN	=	0x00f4
                           0000F5   702 _PCLKACT	=	0x00f5
                           0000F9   703 _P4MDOUT	=	0x00f9
                           0000FA   704 _P5MDOUT	=	0x00fa
                           0000FB   705 _P6MDOUT	=	0x00fb
                           0000FC   706 _P7MDOUT	=	0x00fc
                           0000FD   707 _CLKMODE	=	0x00fd
                           0000FE   708 _PCLKEN	=	0x00fe
                           008382   709 _DP	=	0x8382
                           008685   710 _TOFF	=	0x8685
                           009392   711 _TMR3RL	=	0x9392
                           009594   712 _TMR3	=	0x9594
                           00BEBD   713 _ADC0	=	0xbebd
                           00C4C3   714 _ADC0GT	=	0xc4c3
                           00C6C5   715 _ADC0LT	=	0xc6c5
                           00CBCA   716 _TMR2RL	=	0xcbca
                           00CDCC   717 _TMR2	=	0xcdcc
                           00D3D2   718 _PCA0CP5	=	0xd3d2
                           00EAE9   719 _PCA0CP1	=	0xeae9
                           00ECEB   720 _PCA0CP2	=	0xeceb
                           00EEED   721 _PCA0CP3	=	0xeeed
                           00FAF9   722 _PCA0	=	0xfaf9
                           00FCFB   723 _PCA0CP0	=	0xfcfb
                           00FEFD   724 _PCA0CP4	=	0xfefd
                           0000AA   725 __XPAGE	=	0x00aa
                                    726 ;--------------------------------------------------------
                                    727 ; special function bits
                                    728 ;--------------------------------------------------------
                                    729 	.area RSEG    (ABS,DATA)
      000000                        730 	.org 0x0000
                           00008F   731 _TF1	=	0x008f
                           00008E   732 _TR1	=	0x008e
                           00008D   733 _TF0	=	0x008d
                           00008C   734 _TR0	=	0x008c
                           00008B   735 _IE1	=	0x008b
                           00008A   736 _IT1	=	0x008a
                           000089   737 _IE0	=	0x0089
                           000088   738 _IT0	=	0x0088
                           00009F   739 _S0MODE	=	0x009f
                           00009D   740 _MCE0	=	0x009d
                           00009C   741 _REN0	=	0x009c
                           00009B   742 _TB80	=	0x009b
                           00009A   743 _RB80	=	0x009a
                           000099   744 _TI0	=	0x0099
                           000098   745 _RI0	=	0x0098
                           0000AF   746 _EA	=	0x00af
                           0000AE   747 _ESPI0	=	0x00ae
                           0000AD   748 _ET2	=	0x00ad
                           0000AC   749 _ES0	=	0x00ac
                           0000AB   750 _ET1	=	0x00ab
                           0000AA   751 _EX1	=	0x00aa
                           0000A9   752 _ET0	=	0x00a9
                           0000A8   753 _EX0	=	0x00a8
                           0000BE   754 _PSPI0	=	0x00be
                           0000BD   755 _PT2	=	0x00bd
                           0000BC   756 _PS0	=	0x00bc
                           0000BB   757 _PT1	=	0x00bb
                           0000BA   758 _PX1	=	0x00ba
                           0000B9   759 _PT0	=	0x00b9
                           0000B8   760 _PX0	=	0x00b8
                           0000C7   761 _MASTER	=	0x00c7
                           0000C6   762 _TXMODE	=	0x00c6
                           0000C5   763 _STA	=	0x00c5
                           0000C4   764 _STO	=	0x00c4
                           0000C3   765 _ACKRQ	=	0x00c3
                           0000C2   766 _ARBLOST	=	0x00c2
                           0000C1   767 _ACK	=	0x00c1
                           0000C0   768 _SI	=	0x00c0
                           0000CF   769 _TF2H	=	0x00cf
                           0000CE   770 _TF2L	=	0x00ce
                           0000CD   771 _TF2LEN	=	0x00cd
                           0000CC   772 _TF2CEN	=	0x00cc
                           0000CB   773 _T2SPLIT	=	0x00cb
                           0000CA   774 _TR2	=	0x00ca
                           0000C9   775 _T2RCLK	=	0x00c9
                           0000C8   776 _T2XCLK	=	0x00c8
                           0000D7   777 _CY	=	0x00d7
                           0000D6   778 _AC	=	0x00d6
                           0000D5   779 _F0	=	0x00d5
                           0000D4   780 _RS1	=	0x00d4
                           0000D3   781 _RS0	=	0x00d3
                           0000D2   782 _OV	=	0x00d2
                           0000D1   783 _F1	=	0x00d1
                           0000D0   784 _P	=	0x00d0
                           0000DF   785 _CF	=	0x00df
                           0000DE   786 _CR	=	0x00de
                           0000DD   787 _CCF5	=	0x00dd
                           0000DC   788 _CCF4	=	0x00dc
                           0000DB   789 _CCF3	=	0x00db
                           0000DA   790 _CCF2	=	0x00da
                           0000D9   791 _CCF1	=	0x00d9
                           0000D8   792 _CCF0	=	0x00d8
                           0000EF   793 _AD0EN	=	0x00ef
                           0000EE   794 _BURSTEN	=	0x00ee
                           0000ED   795 _AD0INT	=	0x00ed
                           0000EC   796 _AD0BUSY	=	0x00ec
                           0000EB   797 _AD0WINT	=	0x00eb
                           0000EA   798 _AD0CM2	=	0x00ea
                           0000E9   799 _AD0CM1	=	0x00e9
                           0000E8   800 _AD0CM0	=	0x00e8
                           0000FF   801 _SPIF0	=	0x00ff
                           0000FE   802 _WCOL0	=	0x00fe
                           0000FD   803 _MODF0	=	0x00fd
                           0000FC   804 _RXOVRN0	=	0x00fc
                           0000FB   805 _NSS0MD1	=	0x00fb
                           0000FA   806 _NSS0MD0	=	0x00fa
                           0000F9   807 _TXBMT0	=	0x00f9
                           0000F8   808 _SPI0EN	=	0x00f8
                           0000FF   809 _SPIF1	=	0x00ff
                           0000FE   810 _WCOL1	=	0x00fe
                           0000FD   811 _MODF1	=	0x00fd
                           0000FC   812 _RXOVRN1	=	0x00fc
                           0000FB   813 _NSS1MD1	=	0x00fb
                           0000FA   814 _NSS1MD0	=	0x00fa
                           0000F9   815 _TXBMT1	=	0x00f9
                           0000F8   816 _SPI1EN	=	0x00f8
                           0000B6   817 _LED_RED	=	0x00b6
                           0000B7   818 _LED_GREEN	=	0x00b7
                           000082   819 _PIN_CONFIG	=	0x0082
                           000083   820 _PIN_ENABLE	=	0x0083
                           000081   821 _IRQ	=	0x0081
                           0000A3   822 _NSS1	=	0x00a3
                                    823 ;--------------------------------------------------------
                                    824 ; overlayable register banks
                                    825 ;--------------------------------------------------------
                                    826 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        827 	.ds 8
                                    828 ;--------------------------------------------------------
                                    829 ; internal ram data
                                    830 ;--------------------------------------------------------
                                    831 	.area DSEG    (DATA)
      000000                        832 _tdm_show_rssi_sloc0_1_0:
      000000                        833 	.ds 2
      000002                        834 _tdm_show_rssi_sloc1_1_0:
      000002                        835 	.ds 2
      000004                        836 _tdm_show_rssi_sloc2_1_0:
      000004                        837 	.ds 2
      000006                        838 _tdm_show_rssi_sloc3_1_0:
      000006                        839 	.ds 2
      000008                        840 _tdm_show_rssi_sloc4_1_0:
      000008                        841 	.ds 2
      00000A                        842 _tdm_show_rssi_sloc5_1_0:
      00000A                        843 	.ds 2
      00000C                        844 _sync_tx_windows_old_state_1_168:
      00000C                        845 	.ds 1
      00000D                        846 _tdm_state_update_sloc0_1_0:
      00000D                        847 	.ds 2
      00000F                        848 _tdm_state_update_sloc1_1_0:
      00000F                        849 	.ds 4
      000013                        850 _tdm_state_update_sloc2_1_0:
      000013                        851 	.ds 4
      000017                        852 _tdm_init_sloc0_1_0:
      000017                        853 	.ds 4
                                    854 ;--------------------------------------------------------
                                    855 ; overlayable items in internal ram 
                                    856 ;--------------------------------------------------------
                                    857 ;--------------------------------------------------------
                                    858 ; indirectly addressable internal ram data
                                    859 ;--------------------------------------------------------
                                    860 	.area ISEG    (DATA)
                           0000FF   861 __canary	=	0x00ff
                                    862 ;--------------------------------------------------------
                                    863 ; absolute internal ram data
                                    864 ;--------------------------------------------------------
                                    865 	.area IABS    (ABS,DATA)
                                    866 	.area IABS    (ABS,DATA)
                                    867 ;--------------------------------------------------------
                                    868 ; bit data
                                    869 ;--------------------------------------------------------
                                    870 	.area BSEG    (BIT)
      000000                        871 _bonus_transmit:
      000000                        872 	.ds 1
      000001                        873 _transmit_yield:
      000001                        874 	.ds 1
      000002                        875 _blink_state:
      000002                        876 	.ds 1
      000003                        877 _received_packet:
      000003                        878 	.ds 1
      000004                        879 _duty_cycle_wait:
      000004                        880 	.ds 1
      000005                        881 _send_statistics:
      000005                        882 	.ds 1
      000006                        883 _send_at_command:
      000006                        884 	.ds 1
      000007                        885 _sync_tx_windows_sloc0_1_0:
      000007                        886 	.ds 1
      000008                        887 _tdm_state_update_sloc3_1_0:
      000008                        888 	.ds 1
      000009                        889 _tdm_serial_loop_sloc0_1_0:
      000009                        890 	.ds 1
                                    891 ;--------------------------------------------------------
                                    892 ; paged external ram data
                                    893 ;--------------------------------------------------------
                                    894 	.area PSEG    (PAG,XDATA)
      000000                        895 _tdm_state:
      000000                        896 	.ds 1
      000001                        897 _tdm_state_remaining:
      000001                        898 	.ds 2
      000003                        899 _tx_window_width:
      000003                        900 	.ds 2
      000005                        901 _max_data_packet_length:
      000005                        902 	.ds 1
      000006                        903 _silence_period:
      000006                        904 	.ds 2
      000008                        905 _packet_latency:
      000008                        906 	.ds 2
      00000A                        907 _ticks_per_byte:
      00000A                        908 	.ds 2
      00000C                        909 _transmit_wait::
      00000C                        910 	.ds 2
      00000E                        911 _duty_cycle::
      00000E                        912 	.ds 1
      00000F                        913 _average_duty_cycle:
      00000F                        914 	.ds 4
      000013                        915 _duty_cycle_offset::
      000013                        916 	.ds 1
      000014                        917 _transmitted_ticks:
      000014                        918 	.ds 2
      000016                        919 _lbt_rssi::
      000016                        920 	.ds 1
      000017                        921 _lbt_listen_time:
      000017                        922 	.ds 2
      000019                        923 _lbt_min_time:
      000019                        924 	.ds 2
      00001B                        925 _lbt_rand:
      00001B                        926 	.ds 2
      00001D                        927 _trailer::
      00001D                        928 	.ds 4
      000021                        929 _remote_at_cmd:
      000021                        930 	.ds 70
      000067                        931 _sync_tx_windows_delta_2_175:
      000067                        932 	.ds 2
      000069                        933 _tdm_serial_loop_len_1_219:
      000069                        934 	.ds 1
      00006A                        935 _tdm_serial_loop_tdelta_1_219:
      00006A                        936 	.ds 2
      00006C                        937 _tdm_serial_loop_last_t_1_219:
      00006C                        938 	.ds 2
      00006E                        939 _tdm_serial_loop_last_link_update_1_219:
      00006E                        940 	.ds 2
                                    941 ;--------------------------------------------------------
                                    942 ; external ram data
                                    943 ;--------------------------------------------------------
                                    944 	.area XSEG    (XDATA)
      000000                        945 _pbuf::
      000000                        946 	.ds 252
      0000FC                        947 _test_display::
      0000FC                        948 	.ds 1
      0000FD                        949 _link_update_unlock_count_1_198:
      0000FD                        950 	.ds 1
      0000FE                        951 _link_update_temperature_count_1_198:
      0000FE                        952 	.ds 1
      0000FF                        953 _tdm_init_i_1_270:
      0000FF                        954 	.ds 2
      000101                        955 _tdm_init_window_width_1_270:
      000101                        956 	.ds 4
                                    957 ;--------------------------------------------------------
                                    958 ; absolute external ram data
                                    959 ;--------------------------------------------------------
                                    960 	.area XABS    (ABS,XDATA)
                                    961 ;--------------------------------------------------------
                                    962 ; external initialized ram data
                                    963 ;--------------------------------------------------------
                                    964 	.area XISEG   (XDATA)
                                    965 	.area HOME    (CODE)
                                    966 	.area GSINIT0 (CODE)
                                    967 	.area GSINIT1 (CODE)
                                    968 	.area GSINIT2 (CODE)
                                    969 	.area GSINIT3 (CODE)
                                    970 	.area GSINIT4 (CODE)
                                    971 	.area GSINIT5 (CODE)
                                    972 	.area GSINIT  (CODE)
                                    973 	.area GSFINAL (CODE)
                                    974 	.area CSEG    (CODE)
                                    975 ;--------------------------------------------------------
                                    976 ; global & static initialisations
                                    977 ;--------------------------------------------------------
                                    978 	.area HOME    (CODE)
                                    979 	.area GSINIT  (CODE)
                                    980 	.area GSFINAL (CODE)
                                    981 	.area GSINIT  (CODE)
                                    982 ;------------------------------------------------------------
                                    983 ;Allocation info for local variables in function 'link_update'
                                    984 ;------------------------------------------------------------
                                    985 ;old_remaining             Allocated to registers r6 r7 
                                    986 ;unlock_count              Allocated with name '_link_update_unlock_count_1_198'
                                    987 ;temperature_count         Allocated with name '_link_update_temperature_count_1_198'
                                    988 ;------------------------------------------------------------
                                    989 ;	radio/tdm.c:383: static uint8_t unlock_count = 10, temperature_count;
      000000 90r00rFD         [24]  990 	mov	dptr,#_link_update_unlock_count_1_198
      000003 74 0A            [12]  991 	mov	a,#0x0A
      000005 F0               [24]  992 	movx	@dptr,a
                                    993 ;--------------------------------------------------------
                                    994 ; Home
                                    995 ;--------------------------------------------------------
                                    996 	.area HOME    (CODE)
                                    997 	.area HOME    (CODE)
                                    998 ;--------------------------------------------------------
                                    999 ; code
                                   1000 ;--------------------------------------------------------
                                   1001 	.area CSEG    (CODE)
                                   1002 ;------------------------------------------------------------
                                   1003 ;Allocation info for local variables in function 'tdm_show_rssi'
                                   1004 ;------------------------------------------------------------
                                   1005 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                                   1006 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                                   1007 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                                   1008 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                                   1009 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                                   1010 ;sloc5                     Allocated with name '_tdm_show_rssi_sloc5_1_0'
                                   1011 ;------------------------------------------------------------
                                   1012 ;	radio/tdm.c:162: tdm_show_rssi(void)
                                   1013 ;	-----------------------------------------
                                   1014 ;	 function tdm_show_rssi
                                   1015 ;	-----------------------------------------
      000000                       1016 _tdm_show_rssi:
                           000007  1017 	ar7 = 0x07
                           000006  1018 	ar6 = 0x06
                           000005  1019 	ar5 = 0x05
                           000004  1020 	ar4 = 0x04
                           000003  1021 	ar3 = 0x03
                           000002  1022 	ar2 = 0x02
                           000001  1023 	ar1 = 0x01
                           000000  1024 	ar0 = 0x00
                                   1025 ;	radio/tdm.c:164: printf("L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u ",
      000000 78r02            [12] 1026 	mov	r0,#(_statistics + 0x0002)
      000002 E2               [24] 1027 	movx	a,@r0
      000003 FE               [12] 1028 	mov	r6,a
      000004 08               [12] 1029 	inc	r0
      000005 E2               [24] 1030 	movx	a,@r0
      000006 FF               [12] 1031 	mov	r7,a
      000007 78r01            [12] 1032 	mov	r0,#(_remote_statistics + 0x0001)
      000009 E2               [24] 1033 	movx	a,@r0
      00000A FD               [12] 1034 	mov	r5,a
      00000B 7C 00            [12] 1035 	mov	r4,#0x00
      00000D 78r01            [12] 1036 	mov	r0,#(_statistics + 0x0001)
      00000F E2               [24] 1037 	movx	a,@r0
      000010 FB               [12] 1038 	mov	r3,a
      000011 8B*00            [24] 1039 	mov	_tdm_show_rssi_sloc0_1_0,r3
                                   1040 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc0_1_0 + 1),#0x00
      000013 8C*01            [24] 1041 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),r4
      000015 78r00            [12] 1042 	mov	r0,#_remote_statistics
      000017 E2               [24] 1043 	movx	a,@r0
      000018 FB               [12] 1044 	mov	r3,a
      000019 8B*02            [24] 1045 	mov	_tdm_show_rssi_sloc1_1_0,r3
                                   1046 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
      00001B 8C*03            [24] 1047 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),r4
      00001D 78r00            [12] 1048 	mov	r0,#_statistics
      00001F E2               [24] 1049 	movx	a,@r0
      000020 FB               [12] 1050 	mov	r3,a
      000021 7A 00            [12] 1051 	mov	r2,#0x00
      000023 C0 06            [24] 1052 	push	ar6
      000025 C0 07            [24] 1053 	push	ar7
      000027 C0 05            [24] 1054 	push	ar5
      000029 C0 04            [24] 1055 	push	ar4
      00002B C0*00            [24] 1056 	push	_tdm_show_rssi_sloc0_1_0
      00002D C0*01            [24] 1057 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      00002F C0*02            [24] 1058 	push	_tdm_show_rssi_sloc1_1_0
      000031 C0*03            [24] 1059 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      000033 C0 03            [24] 1060 	push	ar3
      000035 C0 02            [24] 1061 	push	ar2
      000037 74r00            [12] 1062 	mov	a,#___str_0
      000039 C0 E0            [24] 1063 	push	acc
      00003B 74s00            [12] 1064 	mov	a,#(___str_0 >> 8)
      00003D C0 E0            [24] 1065 	push	acc
      00003F 74 80            [12] 1066 	mov	a,#0x80
      000041 C0 E0            [24] 1067 	push	acc
      000043 12r00r00         [24] 1068 	lcall	_printfl
      000046 E5 81            [12] 1069 	mov	a,sp
      000048 24 F3            [12] 1070 	add	a,#0xf3
      00004A F5 81            [12] 1071 	mov	sp,a
                                   1072 ;	radio/tdm.c:171: printf(" txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u crce=%u temp=%d dco=%u\n",
      00004C 78r13            [12] 1073 	mov	r0,#_duty_cycle_offset
      00004E E2               [24] 1074 	movx	a,@r0
      00004F FE               [12] 1075 	mov	r6,a
      000050 7F 00            [12] 1076 	mov	r7,#0x00
      000052 C0 07            [24] 1077 	push	ar7
      000054 C0 06            [24] 1078 	push	ar6
      000056 12r00r00         [24] 1079 	lcall	_radio_temperature
      000059 AC 82            [24] 1080 	mov	r4,dpl
      00005B AD 83            [24] 1081 	mov	r5,dph
      00005D D0 06            [24] 1082 	pop	ar6
      00005F D0 07            [24] 1083 	pop	ar7
      000061 78r0C            [12] 1084 	mov	r0,#(_errors + 0x000c)
      000063 E2               [24] 1085 	movx	a,@r0
      000064 F5*02            [12] 1086 	mov	_tdm_show_rssi_sloc1_1_0,a
      000066 08               [12] 1087 	inc	r0
      000067 E2               [24] 1088 	movx	a,@r0
      000068 F5*03            [12] 1089 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
      00006A 78r0A            [12] 1090 	mov	r0,#(_errors + 0x000a)
      00006C E2               [24] 1091 	movx	a,@r0
      00006D F5*00            [12] 1092 	mov	_tdm_show_rssi_sloc0_1_0,a
      00006F 08               [12] 1093 	inc	r0
      000070 E2               [24] 1094 	movx	a,@r0
      000071 F5*01            [12] 1095 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
      000073 78r08            [12] 1096 	mov	r0,#(_errors + 0x0008)
      000075 E2               [24] 1097 	movx	a,@r0
      000076 F5*04            [12] 1098 	mov	_tdm_show_rssi_sloc2_1_0,a
      000078 08               [12] 1099 	inc	r0
      000079 E2               [24] 1100 	movx	a,@r0
      00007A F5*05            [12] 1101 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
      00007C 78r06            [12] 1102 	mov	r0,#(_errors + 0x0006)
      00007E E2               [24] 1103 	movx	a,@r0
      00007F F5*06            [12] 1104 	mov	_tdm_show_rssi_sloc3_1_0,a
      000081 08               [12] 1105 	inc	r0
      000082 E2               [24] 1106 	movx	a,@r0
      000083 F5*07            [12] 1107 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
      000085 78r04            [12] 1108 	mov	r0,#(_errors + 0x0004)
      000087 E2               [24] 1109 	movx	a,@r0
      000088 F5*08            [12] 1110 	mov	_tdm_show_rssi_sloc4_1_0,a
      00008A 08               [12] 1111 	inc	r0
      00008B E2               [24] 1112 	movx	a,@r0
      00008C F5*09            [12] 1113 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
      00008E 78r00            [12] 1114 	mov	r0,#_errors
      000090 E2               [24] 1115 	movx	a,@r0
      000091 F5*0A            [12] 1116 	mov	_tdm_show_rssi_sloc5_1_0,a
      000093 08               [12] 1117 	inc	r0
      000094 E2               [24] 1118 	movx	a,@r0
      000095 F5*0B            [12] 1119 	mov	(_tdm_show_rssi_sloc5_1_0 + 1),a
      000097 78r02            [12] 1120 	mov	r0,#(_errors + 0x0002)
      000099 E2               [24] 1121 	movx	a,@r0
      00009A FA               [12] 1122 	mov	r2,a
      00009B 08               [12] 1123 	inc	r0
      00009C E2               [24] 1124 	movx	a,@r0
      00009D FB               [12] 1125 	mov	r3,a
      00009E C0 06            [24] 1126 	push	ar6
      0000A0 C0 07            [24] 1127 	push	ar7
      0000A2 C0 04            [24] 1128 	push	ar4
      0000A4 C0 05            [24] 1129 	push	ar5
      0000A6 C0*02            [24] 1130 	push	_tdm_show_rssi_sloc1_1_0
      0000A8 C0*03            [24] 1131 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      0000AA C0*00            [24] 1132 	push	_tdm_show_rssi_sloc0_1_0
      0000AC C0*01            [24] 1133 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      0000AE C0*04            [24] 1134 	push	_tdm_show_rssi_sloc2_1_0
      0000B0 C0*05            [24] 1135 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
      0000B2 C0*06            [24] 1136 	push	_tdm_show_rssi_sloc3_1_0
      0000B4 C0*07            [24] 1137 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
      0000B6 C0*08            [24] 1138 	push	_tdm_show_rssi_sloc4_1_0
      0000B8 C0*09            [24] 1139 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
      0000BA C0*0A            [24] 1140 	push	_tdm_show_rssi_sloc5_1_0
      0000BC C0*0B            [24] 1141 	push	(_tdm_show_rssi_sloc5_1_0 + 1)
      0000BE C0 02            [24] 1142 	push	ar2
      0000C0 C0 03            [24] 1143 	push	ar3
      0000C2 74r2C            [12] 1144 	mov	a,#___str_1
      0000C4 C0 E0            [24] 1145 	push	acc
      0000C6 74s00            [12] 1146 	mov	a,#(___str_1 >> 8)
      0000C8 C0 E0            [24] 1147 	push	acc
      0000CA 74 80            [12] 1148 	mov	a,#0x80
      0000CC C0 E0            [24] 1149 	push	acc
      0000CE 12r00r00         [24] 1150 	lcall	_printfl
      0000D1 E5 81            [12] 1151 	mov	a,sp
      0000D3 24 EB            [12] 1152 	add	a,#0xeb
      0000D5 F5 81            [12] 1153 	mov	sp,a
                                   1154 ;	radio/tdm.c:186: statistics.receive_count = 0;
      0000D7 78r02            [12] 1155 	mov	r0,#(_statistics + 0x0002)
      0000D9 E4               [12] 1156 	clr	a
      0000DA F2               [24] 1157 	movx	@r0,a
      0000DB 08               [12] 1158 	inc	r0
      0000DC F2               [24] 1159 	movx	@r0,a
      0000DD 22               [24] 1160 	ret
                                   1161 ;------------------------------------------------------------
                                   1162 ;Allocation info for local variables in function 'display_test_output'
                                   1163 ;------------------------------------------------------------
                                   1164 ;	radio/tdm.c:192: display_test_output(void)
                                   1165 ;	-----------------------------------------
                                   1166 ;	 function display_test_output
                                   1167 ;	-----------------------------------------
      0000DE                       1168 _display_test_output:
                                   1169 ;	radio/tdm.c:194: if (test_display & AT_TEST_RSSI) {
      0000DE 90r00rFC         [24] 1170 	mov	dptr,#_test_display
      0000E1 E0               [24] 1171 	movx	a,@dptr
      0000E2 FF               [12] 1172 	mov	r7,a
      0000E3 30 E0 03         [24] 1173 	jnb	acc.0,00103$
                                   1174 ;	radio/tdm.c:195: tdm_show_rssi();
      0000E6 02r00r00         [24] 1175 	ljmp	_tdm_show_rssi
      0000E9                       1176 00103$:
      0000E9 22               [24] 1177 	ret
                                   1178 ;------------------------------------------------------------
                                   1179 ;Allocation info for local variables in function 'flight_time_estimate'
                                   1180 ;------------------------------------------------------------
                                   1181 ;	radio/tdm.c:205: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                                   1182 ;	-----------------------------------------
                                   1183 ;	 function flight_time_estimate
                                   1184 ;	-----------------------------------------
      0000EA                       1185 _flight_time_estimate:
      0000EA AF 82            [24] 1186 	mov	r7,dpl
                                   1187 ;	radio/tdm.c:207: return packet_latency + (packet_len * ticks_per_byte);
      0000EC 7E 00            [12] 1188 	mov	r6,#0x00
      0000EE 78r0A            [12] 1189 	mov	r0,#_ticks_per_byte
      0000F0 90r00r00         [24] 1190 	mov	dptr,#__mulint_PARM_2
      0000F3 E2               [24] 1191 	movx	a,@r0
      0000F4 F0               [24] 1192 	movx	@dptr,a
      0000F5 08               [12] 1193 	inc	r0
      0000F6 E2               [24] 1194 	movx	a,@r0
      0000F7 A3               [24] 1195 	inc	dptr
      0000F8 F0               [24] 1196 	movx	@dptr,a
      0000F9 8F 82            [24] 1197 	mov	dpl,r7
      0000FB 8E 83            [24] 1198 	mov	dph,r6
      0000FD 12r00r00         [24] 1199 	lcall	__mulint
      000100 AE 82            [24] 1200 	mov	r6,dpl
      000102 AF 83            [24] 1201 	mov	r7,dph
      000104 78r08            [12] 1202 	mov	r0,#_packet_latency
      000106 E2               [24] 1203 	movx	a,@r0
      000107 2E               [12] 1204 	add	a,r6
      000108 FE               [12] 1205 	mov	r6,a
      000109 08               [12] 1206 	inc	r0
      00010A E2               [24] 1207 	movx	a,@r0
      00010B 3F               [12] 1208 	addc	a,r7
      00010C 8E 82            [24] 1209 	mov	dpl,r6
      00010E F5 83            [12] 1210 	mov	dph,a
      000110 22               [24] 1211 	ret
                                   1212 ;------------------------------------------------------------
                                   1213 ;Allocation info for local variables in function 'sync_tx_windows'
                                   1214 ;------------------------------------------------------------
                                   1215 ;old_state                 Allocated with name '_sync_tx_windows_old_state_1_168'
                                   1216 ;------------------------------------------------------------
                                   1217 ;	radio/tdm.c:221: sync_tx_windows(__pdata uint8_t packet_length)
                                   1218 ;	-----------------------------------------
                                   1219 ;	 function sync_tx_windows
                                   1220 ;	-----------------------------------------
      000111                       1221 _sync_tx_windows:
      000111 AF 82            [24] 1222 	mov	r7,dpl
                                   1223 ;	radio/tdm.c:223: __data enum tdm_state old_state = tdm_state;
      000113 78r00            [12] 1224 	mov	r0,#_tdm_state
      000115 E2               [24] 1225 	movx	a,@r0
      000116 F5*0C            [12] 1226 	mov	_sync_tx_windows_old_state_1_168,a
                                   1227 ;	radio/tdm.c:224: __pdata uint16_t old_remaining = tdm_state_remaining;
      000118 78r01            [12] 1228 	mov	r0,#_tdm_state_remaining
      00011A E2               [24] 1229 	movx	a,@r0
      00011B FC               [12] 1230 	mov	r4,a
      00011C 08               [12] 1231 	inc	r0
      00011D E2               [24] 1232 	movx	a,@r0
      00011E FD               [12] 1233 	mov	r5,a
                                   1234 ;	radio/tdm.c:226: if (trailer.bonus) {
      00011F 78r1E            [12] 1235 	mov	r0,#(_trailer + 0x0001)
      000121 E2               [24] 1236 	movx	a,@r0
      000122 30 E6 46         [24] 1237 	jnb	acc.6,00109$
                                   1238 ;	radio/tdm.c:229: if (old_state == TDM_SILENCE1) {
      000125 74 01            [12] 1239 	mov	a,#0x01
      000127 B5*0C 10         [24] 1240 	cjne	a,_sync_tx_windows_old_state_1_168,00106$
                                   1241 ;	radio/tdm.c:235: tdm_state_remaining = silence_period;
      00012A 78r06            [12] 1242 	mov	r0,#_silence_period
      00012C E2               [24] 1243 	movx	a,@r0
      00012D FA               [12] 1244 	mov	r2,a
      00012E 08               [12] 1245 	inc	r0
      00012F E2               [24] 1246 	movx	a,@r0
      000130 FB               [12] 1247 	mov	r3,a
      000131 78r01            [12] 1248 	mov	r0,#_tdm_state_remaining
      000133 EA               [12] 1249 	mov	a,r2
      000134 F2               [24] 1250 	movx	@r0,a
      000135 08               [12] 1251 	inc	r0
      000136 EB               [12] 1252 	mov	a,r3
      000137 F2               [24] 1253 	movx	@r0,a
      000138 80 46            [24] 1254 	sjmp	00110$
      00013A                       1255 00106$:
                                   1256 ;	radio/tdm.c:236: } else if (old_state == TDM_RECEIVE || old_state == TDM_SILENCE2) {
      00013A 74 02            [12] 1257 	mov	a,#0x02
      00013C B5*0C 02         [24] 1258 	cjne	a,_sync_tx_windows_old_state_1_168,00151$
      00013F 80 05            [24] 1259 	sjmp	00101$
      000141                       1260 00151$:
      000141 74 03            [12] 1261 	mov	a,#0x03
      000143 B5*0C 0F         [24] 1262 	cjne	a,_sync_tx_windows_old_state_1_168,00102$
      000146                       1263 00101$:
                                   1264 ;	radio/tdm.c:241: tdm_state = TDM_SILENCE2;
      000146 78r00            [12] 1265 	mov	r0,#_tdm_state
      000148 74 03            [12] 1266 	mov	a,#0x03
      00014A F2               [24] 1267 	movx	@r0,a
                                   1268 ;	radio/tdm.c:242: tdm_state_remaining = 1;
      00014B 78r01            [12] 1269 	mov	r0,#_tdm_state_remaining
      00014D 74 01            [12] 1270 	mov	a,#0x01
      00014F F2               [24] 1271 	movx	@r0,a
      000150 08               [12] 1272 	inc	r0
      000151 E4               [12] 1273 	clr	a
      000152 F2               [24] 1274 	movx	@r0,a
      000153 80 2B            [24] 1275 	sjmp	00110$
      000155                       1276 00102$:
                                   1277 ;	radio/tdm.c:244: tdm_state = TDM_TRANSMIT;
      000155 78r00            [12] 1278 	mov	r0,#_tdm_state
      000157 E4               [12] 1279 	clr	a
      000158 F2               [24] 1280 	movx	@r0,a
                                   1281 ;	radio/tdm.c:245: tdm_state_remaining = trailer.window;
      000159 78r1D            [12] 1282 	mov	r0,#_trailer
      00015B E2               [24] 1283 	movx	a,@r0
      00015C FA               [12] 1284 	mov	r2,a
      00015D 08               [12] 1285 	inc	r0
      00015E E2               [24] 1286 	movx	a,@r0
      00015F 54 1F            [12] 1287 	anl	a,#0x1F
      000161 FB               [12] 1288 	mov	r3,a
      000162 78r01            [12] 1289 	mov	r0,#_tdm_state_remaining
      000164 EA               [12] 1290 	mov	a,r2
      000165 F2               [24] 1291 	movx	@r0,a
      000166 08               [12] 1292 	inc	r0
      000167 EB               [12] 1293 	mov	a,r3
      000168 F2               [24] 1294 	movx	@r0,a
      000169 80 15            [24] 1295 	sjmp	00110$
      00016B                       1296 00109$:
                                   1297 ;	radio/tdm.c:250: tdm_state = TDM_RECEIVE;
      00016B 78r00            [12] 1298 	mov	r0,#_tdm_state
      00016D 74 02            [12] 1299 	mov	a,#0x02
      00016F F2               [24] 1300 	movx	@r0,a
                                   1301 ;	radio/tdm.c:251: tdm_state_remaining = trailer.window;
      000170 78r1D            [12] 1302 	mov	r0,#_trailer
      000172 E2               [24] 1303 	movx	a,@r0
      000173 FA               [12] 1304 	mov	r2,a
      000174 08               [12] 1305 	inc	r0
      000175 E2               [24] 1306 	movx	a,@r0
      000176 54 1F            [12] 1307 	anl	a,#0x1F
      000178 FB               [12] 1308 	mov	r3,a
      000179 78r01            [12] 1309 	mov	r0,#_tdm_state_remaining
      00017B EA               [12] 1310 	mov	a,r2
      00017C F2               [24] 1311 	movx	@r0,a
      00017D 08               [12] 1312 	inc	r0
      00017E EB               [12] 1313 	mov	a,r3
      00017F F2               [24] 1314 	movx	@r0,a
      000180                       1315 00110$:
                                   1316 ;	radio/tdm.c:256: bonus_transmit = (tdm_state == TDM_RECEIVE && packet_length==0);
      000180 78r00            [12] 1317 	mov	r0,#_tdm_state
      000182 E2               [24] 1318 	movx	a,@r0
      000183 B4 02 03         [24] 1319 	cjne	a,#0x02,00121$
      000186 EF               [12] 1320 	mov	a,r7
      000187 60 04            [24] 1321 	jz	00122$
      000189                       1322 00121$:
      000189 C2*07            [12] 1323 	clr	_sync_tx_windows_sloc0_1_0
      00018B 80 02            [24] 1324 	sjmp	00123$
      00018D                       1325 00122$:
      00018D D2*07            [12] 1326 	setb	_sync_tx_windows_sloc0_1_0
      00018F                       1327 00123$:
      00018F A2*07            [12] 1328 	mov	c,_sync_tx_windows_sloc0_1_0
      000191 92*00            [24] 1329 	mov	_bonus_transmit,c
                                   1330 ;	radio/tdm.c:259: if (tdm_state != TDM_TRANSMIT) {
      000193 78r00            [12] 1331 	mov	r0,#_tdm_state
      000195 E2               [24] 1332 	movx	a,@r0
      000196 60 02            [24] 1333 	jz	00112$
                                   1334 ;	radio/tdm.c:260: transmit_yield = 0;
      000198 C2*01            [12] 1335 	clr	_transmit_yield
      00019A                       1336 00112$:
                                   1337 ;	radio/tdm.c:263: if (at_testmode & AT_TEST_TDM) {
      00019A 78r00            [12] 1338 	mov	r0,#_at_testmode
      00019C E2               [24] 1339 	movx	a,@r0
      00019D 54 02            [12] 1340 	anl	a,#0x02
      00019F 70 01            [24] 1341 	jnz	00158$
      0001A1 22               [24] 1342 	ret
      0001A2                       1343 00158$:
                                   1344 ;	radio/tdm.c:265: delta = old_remaining - tdm_state_remaining;
      0001A2 78r01            [12] 1345 	mov	r0,#_tdm_state_remaining
      0001A4 79r67            [12] 1346 	mov	r1,#_sync_tx_windows_delta_2_175
      0001A6 D3               [12] 1347 	setb	c
      0001A7 E2               [24] 1348 	movx	a,@r0
      0001A8 9C               [12] 1349 	subb	a,r4
      0001A9 F4               [12] 1350 	cpl	a
      0001AA B3               [12] 1351 	cpl	c
      0001AB F3               [24] 1352 	movx	@r1,a
      0001AC B3               [12] 1353 	cpl	c
      0001AD 08               [12] 1354 	inc	r0
      0001AE E2               [24] 1355 	movx	a,@r0
      0001AF 9D               [12] 1356 	subb	a,r5
      0001B0 F4               [12] 1357 	cpl	a
      0001B1 09               [12] 1358 	inc	r1
      0001B2 F3               [24] 1359 	movx	@r1,a
                                   1360 ;	radio/tdm.c:266: if (old_state != tdm_state ||
      0001B3 78r00            [12] 1361 	mov	r0,#_tdm_state
      0001B5 E2               [24] 1362 	movx	a,@r0
      0001B6 B5*0C 6E         [24] 1363 	cjne	a,_sync_tx_windows_old_state_1_168,00113$
                                   1364 ;	radio/tdm.c:267: delta > (int16_t)packet_latency/2 ||
      0001B9 C0 07            [24] 1365 	push	ar7
      0001BB 78r08            [12] 1366 	mov	r0,#_packet_latency
      0001BD E2               [24] 1367 	movx	a,@r0
      0001BE FA               [12] 1368 	mov	r2,a
      0001BF 08               [12] 1369 	inc	r0
      0001C0 E2               [24] 1370 	movx	a,@r0
      0001C1 FB               [12] 1371 	mov	r3,a
      0001C2 90r00r00         [24] 1372 	mov	dptr,#__divsint_PARM_2
      0001C5 74 02            [12] 1373 	mov	a,#0x02
      0001C7 F0               [24] 1374 	movx	@dptr,a
      0001C8 E4               [12] 1375 	clr	a
      0001C9 A3               [24] 1376 	inc	dptr
      0001CA F0               [24] 1377 	movx	@dptr,a
      0001CB 8A 82            [24] 1378 	mov	dpl,r2
      0001CD 8B 83            [24] 1379 	mov	dph,r3
      0001CF C0 03            [24] 1380 	push	ar3
      0001D1 C0 02            [24] 1381 	push	ar2
      0001D3 12r00r00         [24] 1382 	lcall	__divsint
      0001D6 AE 82            [24] 1383 	mov	r6,dpl
      0001D8 AF 83            [24] 1384 	mov	r7,dph
      0001DA D0 02            [24] 1385 	pop	ar2
      0001DC D0 03            [24] 1386 	pop	ar3
      0001DE 78r67            [12] 1387 	mov	r0,#_sync_tx_windows_delta_2_175
      0001E0 C3               [12] 1388 	clr	c
      0001E1 E2               [24] 1389 	movx	a,@r0
      0001E2 F5 F0            [12] 1390 	mov	b,a
      0001E4 EE               [12] 1391 	mov	a,r6
      0001E5 95 F0            [12] 1392 	subb	a,b
      0001E7 08               [12] 1393 	inc	r0
      0001E8 E2               [24] 1394 	movx	a,@r0
      0001E9 F5 F0            [12] 1395 	mov	b,a
      0001EB EF               [12] 1396 	mov	a,r7
      0001EC 64 80            [12] 1397 	xrl	a,#0x80
      0001EE 63 F0 80         [24] 1398 	xrl	b,#0x80
      0001F1 95 F0            [12] 1399 	subb	a,b
      0001F3 D0 07            [24] 1400 	pop	ar7
                                   1401 ;	radio/tdm.c:268: delta < -(int16_t)packet_latency/2) {
      0001F5 40 30            [24] 1402 	jc	00113$
      0001F7 E4               [12] 1403 	clr	a
      0001F8 9A               [12] 1404 	subb	a,r2
      0001F9 FA               [12] 1405 	mov	r2,a
      0001FA E4               [12] 1406 	clr	a
      0001FB 9B               [12] 1407 	subb	a,r3
      0001FC FB               [12] 1408 	mov	r3,a
      0001FD 90r00r00         [24] 1409 	mov	dptr,#__divsint_PARM_2
      000200 74 02            [12] 1410 	mov	a,#0x02
      000202 F0               [24] 1411 	movx	@dptr,a
      000203 E4               [12] 1412 	clr	a
      000204 A3               [24] 1413 	inc	dptr
      000205 F0               [24] 1414 	movx	@dptr,a
      000206 8A 82            [24] 1415 	mov	dpl,r2
      000208 8B 83            [24] 1416 	mov	dph,r3
      00020A C0 07            [24] 1417 	push	ar7
      00020C 12r00r00         [24] 1418 	lcall	__divsint
      00020F AB 82            [24] 1419 	mov	r3,dpl
      000211 AE 83            [24] 1420 	mov	r6,dph
      000213 D0 07            [24] 1421 	pop	ar7
      000215 78r67            [12] 1422 	mov	r0,#_sync_tx_windows_delta_2_175
      000217 C3               [12] 1423 	clr	c
      000218 E2               [24] 1424 	movx	a,@r0
      000219 9B               [12] 1425 	subb	a,r3
      00021A 08               [12] 1426 	inc	r0
      00021B E2               [24] 1427 	movx	a,@r0
      00021C 64 80            [12] 1428 	xrl	a,#0x80
      00021E 8E F0            [24] 1429 	mov	b,r6
      000220 63 F0 80         [24] 1430 	xrl	b,#0x80
      000223 95 F0            [12] 1431 	subb	a,b
      000225 50 4B            [24] 1432 	jnc	00119$
      000227                       1433 00113$:
                                   1434 ;	radio/tdm.c:269: printf("TDM: %u/%u len=%u ",
      000227 7E 00            [12] 1435 	mov	r6,#0x00
      000229 78r00            [12] 1436 	mov	r0,#_tdm_state
      00022B E2               [24] 1437 	movx	a,@r0
      00022C FA               [12] 1438 	mov	r2,a
      00022D 7B 00            [12] 1439 	mov	r3,#0x00
      00022F AC*0C            [24] 1440 	mov	r4,_sync_tx_windows_old_state_1_168
      000231 7D 00            [12] 1441 	mov	r5,#0x00
      000233 C0 07            [24] 1442 	push	ar7
      000235 C0 06            [24] 1443 	push	ar6
      000237 C0 02            [24] 1444 	push	ar2
      000239 C0 03            [24] 1445 	push	ar3
      00023B C0 04            [24] 1446 	push	ar4
      00023D C0 05            [24] 1447 	push	ar5
      00023F 74r6B            [12] 1448 	mov	a,#___str_2
      000241 C0 E0            [24] 1449 	push	acc
      000243 74s00            [12] 1450 	mov	a,#(___str_2 >> 8)
      000245 C0 E0            [24] 1451 	push	acc
      000247 74 80            [12] 1452 	mov	a,#0x80
      000249 C0 E0            [24] 1453 	push	acc
      00024B 12r00r00         [24] 1454 	lcall	_printfl
      00024E E5 81            [12] 1455 	mov	a,sp
      000250 24 F7            [12] 1456 	add	a,#0xf7
      000252 F5 81            [12] 1457 	mov	sp,a
                                   1458 ;	radio/tdm.c:273: printf(" delta: %d\n",(int)delta);
      000254 78r67            [12] 1459 	mov	r0,#_sync_tx_windows_delta_2_175
      000256 E2               [24] 1460 	movx	a,@r0
      000257 C0 E0            [24] 1461 	push	acc
      000259 08               [12] 1462 	inc	r0
      00025A E2               [24] 1463 	movx	a,@r0
      00025B C0 E0            [24] 1464 	push	acc
      00025D 74r7E            [12] 1465 	mov	a,#___str_3
      00025F C0 E0            [24] 1466 	push	acc
      000261 74s00            [12] 1467 	mov	a,#(___str_3 >> 8)
      000263 C0 E0            [24] 1468 	push	acc
      000265 74 80            [12] 1469 	mov	a,#0x80
      000267 C0 E0            [24] 1470 	push	acc
      000269 12r00r00         [24] 1471 	lcall	_printfl
      00026C E5 81            [12] 1472 	mov	a,sp
      00026E 24 FB            [12] 1473 	add	a,#0xfb
      000270 F5 81            [12] 1474 	mov	sp,a
      000272                       1475 00119$:
      000272 22               [24] 1476 	ret
                                   1477 ;------------------------------------------------------------
                                   1478 ;Allocation info for local variables in function 'tdm_state_update'
                                   1479 ;------------------------------------------------------------
                                   1480 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                                   1481 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                                   1482 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                                   1483 ;------------------------------------------------------------
                                   1484 ;	radio/tdm.c:281: tdm_state_update(__pdata uint16_t tdelta)
                                   1485 ;	-----------------------------------------
                                   1486 ;	 function tdm_state_update
                                   1487 ;	-----------------------------------------
      000273                       1488 _tdm_state_update:
      000273 AE 82            [24] 1489 	mov	r6,dpl
      000275 AF 83            [24] 1490 	mov	r7,dph
                                   1491 ;	radio/tdm.c:285: if (tdelta > transmit_wait) {
      000277 78r0C            [12] 1492 	mov	r0,#_transmit_wait
      000279 C3               [12] 1493 	clr	c
      00027A E2               [24] 1494 	movx	a,@r0
      00027B 9E               [12] 1495 	subb	a,r6
      00027C 08               [12] 1496 	inc	r0
      00027D E2               [24] 1497 	movx	a,@r0
      00027E 9F               [12] 1498 	subb	a,r7
      00027F 50 08            [24] 1499 	jnc	00102$
                                   1500 ;	radio/tdm.c:286: transmit_wait = 0;
      000281 78r0C            [12] 1501 	mov	r0,#_transmit_wait
      000283 E4               [12] 1502 	clr	a
      000284 F2               [24] 1503 	movx	@r0,a
      000285 08               [12] 1504 	inc	r0
      000286 F2               [24] 1505 	movx	@r0,a
      000287 80 0A            [24] 1506 	sjmp	00116$
      000289                       1507 00102$:
                                   1508 ;	radio/tdm.c:288: transmit_wait -= tdelta;
      000289 78r0C            [12] 1509 	mov	r0,#_transmit_wait
      00028B E2               [24] 1510 	movx	a,@r0
      00028C C3               [12] 1511 	clr	c
      00028D 9E               [12] 1512 	subb	a,r6
      00028E F2               [24] 1513 	movx	@r0,a
      00028F 08               [12] 1514 	inc	r0
      000290 E2               [24] 1515 	movx	a,@r0
      000291 9F               [12] 1516 	subb	a,r7
      000292 F2               [24] 1517 	movx	@r0,a
                                   1518 ;	radio/tdm.c:292: while (tdelta >= tdm_state_remaining) {
      000293                       1519 00116$:
      000293 78r01            [12] 1520 	mov	r0,#_tdm_state_remaining
      000295 C3               [12] 1521 	clr	c
      000296 E2               [24] 1522 	movx	a,@r0
      000297 F5 F0            [12] 1523 	mov	b,a
      000299 EE               [12] 1524 	mov	a,r6
      00029A 95 F0            [12] 1525 	subb	a,b
      00029C 08               [12] 1526 	inc	r0
      00029D E2               [24] 1527 	movx	a,@r0
      00029E F5 F0            [12] 1528 	mov	b,a
      0002A0 EF               [12] 1529 	mov	a,r7
      0002A1 95 F0            [12] 1530 	subb	a,b
      0002A3 50 03            [24] 1531 	jnc	00146$
      0002A5 02r04rDE         [24] 1532 	ljmp	00118$
      0002A8                       1533 00146$:
                                   1534 ;	radio/tdm.c:294: tdm_state = (tdm_state+1) % 4;
      0002A8 78r00            [12] 1535 	mov	r0,#_tdm_state
      0002AA E2               [24] 1536 	movx	a,@r0
      0002AB FC               [12] 1537 	mov	r4,a
      0002AC 7D 00            [12] 1538 	mov	r5,#0x00
      0002AE 0C               [12] 1539 	inc	r4
      0002AF BC 00 01         [24] 1540 	cjne	r4,#0x00,00147$
      0002B2 0D               [12] 1541 	inc	r5
      0002B3                       1542 00147$:
      0002B3 90r00r00         [24] 1543 	mov	dptr,#__modsint_PARM_2
      0002B6 74 04            [12] 1544 	mov	a,#0x04
      0002B8 F0               [24] 1545 	movx	@dptr,a
      0002B9 E4               [12] 1546 	clr	a
      0002BA A3               [24] 1547 	inc	dptr
      0002BB F0               [24] 1548 	movx	@dptr,a
      0002BC 8C 82            [24] 1549 	mov	dpl,r4
      0002BE 8D 83            [24] 1550 	mov	dph,r5
      0002C0 C0 07            [24] 1551 	push	ar7
      0002C2 C0 06            [24] 1552 	push	ar6
      0002C4 12r00r00         [24] 1553 	lcall	__modsint
      0002C7 AC 82            [24] 1554 	mov	r4,dpl
      0002C9 AD 83            [24] 1555 	mov	r5,dph
      0002CB D0 06            [24] 1556 	pop	ar6
      0002CD D0 07            [24] 1557 	pop	ar7
      0002CF 78r00            [12] 1558 	mov	r0,#_tdm_state
      0002D1 EC               [12] 1559 	mov	a,r4
      0002D2 F2               [24] 1560 	movx	@r0,a
                                   1561 ;	radio/tdm.c:297: tdelta -= tdm_state_remaining;
      0002D3 78r01            [12] 1562 	mov	r0,#_tdm_state_remaining
      0002D5 D3               [12] 1563 	setb	c
      0002D6 E2               [24] 1564 	movx	a,@r0
      0002D7 9E               [12] 1565 	subb	a,r6
      0002D8 F4               [12] 1566 	cpl	a
      0002D9 B3               [12] 1567 	cpl	c
      0002DA FE               [12] 1568 	mov	r6,a
      0002DB B3               [12] 1569 	cpl	c
      0002DC 08               [12] 1570 	inc	r0
      0002DD E2               [24] 1571 	movx	a,@r0
      0002DE 9F               [12] 1572 	subb	a,r7
      0002DF F4               [12] 1573 	cpl	a
      0002E0 FF               [12] 1574 	mov	r7,a
                                   1575 ;	radio/tdm.c:299: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_RECEIVE) {
      0002E1 78r00            [12] 1576 	mov	r0,#_tdm_state
      0002E3 E2               [24] 1577 	movx	a,@r0
      0002E4 60 06            [24] 1578 	jz	00104$
      0002E6 78r00            [12] 1579 	mov	r0,#_tdm_state
      0002E8 E2               [24] 1580 	movx	a,@r0
      0002E9 B4 02 10         [24] 1581 	cjne	a,#0x02,00105$
      0002EC                       1582 00104$:
                                   1583 ;	radio/tdm.c:300: tdm_state_remaining = tx_window_width;
      0002EC 78r03            [12] 1584 	mov	r0,#_tx_window_width
      0002EE E2               [24] 1585 	movx	a,@r0
      0002EF FC               [12] 1586 	mov	r4,a
      0002F0 08               [12] 1587 	inc	r0
      0002F1 E2               [24] 1588 	movx	a,@r0
      0002F2 FD               [12] 1589 	mov	r5,a
      0002F3 78r01            [12] 1590 	mov	r0,#_tdm_state_remaining
      0002F5 EC               [12] 1591 	mov	a,r4
      0002F6 F2               [24] 1592 	movx	@r0,a
      0002F7 08               [12] 1593 	inc	r0
      0002F8 ED               [12] 1594 	mov	a,r5
      0002F9 F2               [24] 1595 	movx	@r0,a
      0002FA 80 0E            [24] 1596 	sjmp	00106$
      0002FC                       1597 00105$:
                                   1598 ;	radio/tdm.c:302: tdm_state_remaining = silence_period;
      0002FC 78r06            [12] 1599 	mov	r0,#_silence_period
      0002FE E2               [24] 1600 	movx	a,@r0
      0002FF FC               [12] 1601 	mov	r4,a
      000300 08               [12] 1602 	inc	r0
      000301 E2               [24] 1603 	movx	a,@r0
      000302 FD               [12] 1604 	mov	r5,a
      000303 78r01            [12] 1605 	mov	r0,#_tdm_state_remaining
      000305 EC               [12] 1606 	mov	a,r4
      000306 F2               [24] 1607 	movx	@r0,a
      000307 08               [12] 1608 	inc	r0
      000308 ED               [12] 1609 	mov	a,r5
      000309 F2               [24] 1610 	movx	@r0,a
      00030A                       1611 00106$:
                                   1612 ;	radio/tdm.c:308: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_SILENCE1) {
      00030A 78r00            [12] 1613 	mov	r0,#_tdm_state
      00030C E2               [24] 1614 	movx	a,@r0
      00030D 60 06            [24] 1615 	jz	00110$
      00030F 78r00            [12] 1616 	mov	r0,#_tdm_state
      000311 E2               [24] 1617 	movx	a,@r0
      000312 B4 01 25         [24] 1618 	cjne	a,#0x01,00111$
      000315                       1619 00110$:
                                   1620 ;	radio/tdm.c:309: fhop_window_change();
      000315 C0 07            [24] 1621 	push	ar7
      000317 C0 06            [24] 1622 	push	ar6
      000319 12r00r00         [24] 1623 	lcall	_fhop_window_change
                                   1624 ;	radio/tdm.c:310: radio_receiver_on();
      00031C 12r00r00         [24] 1625 	lcall	_radio_receiver_on
      00031F D0 06            [24] 1626 	pop	ar6
      000321 D0 07            [24] 1627 	pop	ar7
                                   1628 ;	radio/tdm.c:312: if (num_fh_channels > 1) {
      000323 78r00            [12] 1629 	mov	r0,#_num_fh_channels
      000325 C3               [12] 1630 	clr	c
      000326 E2               [24] 1631 	movx	a,@r0
      000327 F5 F0            [12] 1632 	mov	b,a
      000329 74 01            [12] 1633 	mov	a,#0x01
      00032B 95 F0            [12] 1634 	subb	a,b
      00032D 50 0B            [24] 1635 	jnc	00111$
                                   1636 ;	radio/tdm.c:314: lbt_listen_time = 0;
      00032F 78r17            [12] 1637 	mov	r0,#_lbt_listen_time
      000331 E4               [12] 1638 	clr	a
      000332 F2               [24] 1639 	movx	@r0,a
      000333 08               [12] 1640 	inc	r0
      000334 F2               [24] 1641 	movx	@r0,a
                                   1642 ;	radio/tdm.c:315: lbt_rand = 0;
      000335 78r1B            [12] 1643 	mov	r0,#_lbt_rand
      000337 F2               [24] 1644 	movx	@r0,a
      000338 08               [12] 1645 	inc	r0
      000339 F2               [24] 1646 	movx	@r0,a
      00033A                       1647 00111$:
                                   1648 ;	radio/tdm.c:319: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
      00033A 78r00            [12] 1649 	mov	r0,#_tdm_state
      00033C E2               [24] 1650 	movx	a,@r0
      00033D 60 03            [24] 1651 	jz	00155$
      00033F 02r04rD1         [24] 1652 	ljmp	00114$
      000342                       1653 00155$:
      000342 C0 06            [24] 1654 	push	ar6
      000344 C0 07            [24] 1655 	push	ar7
      000346 78r0E            [12] 1656 	mov	r0,#_duty_cycle
      000348 E2               [24] 1657 	movx	a,@r0
      000349 FC               [12] 1658 	mov	r4,a
      00034A 7D 00            [12] 1659 	mov	r5,#0x00
      00034C 78r13            [12] 1660 	mov	r0,#_duty_cycle_offset
      00034E E2               [24] 1661 	movx	a,@r0
      00034F F5*0D            [12] 1662 	mov	_tdm_state_update_sloc0_1_0,a
                                   1663 ;	1-genFromRTrack replaced	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
      000351 8D*0E            [24] 1664 	mov	(_tdm_state_update_sloc0_1_0 + 1),r5
      000353 EC               [12] 1665 	mov	a,r4
      000354 C3               [12] 1666 	clr	c
      000355 95*0D            [12] 1667 	subb	a,_tdm_state_update_sloc0_1_0
      000357 FE               [12] 1668 	mov	r6,a
      000358 ED               [12] 1669 	mov	a,r5
      000359 95*0E            [12] 1670 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      00035B FF               [12] 1671 	mov	r7,a
      00035C BE 64 0A         [24] 1672 	cjne	r6,#0x64,00156$
      00035F BF 00 07         [24] 1673 	cjne	r7,#0x00,00156$
      000362 D0 07            [24] 1674 	pop	ar7
      000364 D0 06            [24] 1675 	pop	ar6
      000366 02r04rD1         [24] 1676 	ljmp	00114$
      000369                       1677 00156$:
      000369 D0 07            [24] 1678 	pop	ar7
      00036B D0 06            [24] 1679 	pop	ar6
                                   1680 ;	radio/tdm.c:321: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
      00036D C0 06            [24] 1681 	push	ar6
      00036F C0 07            [24] 1682 	push	ar7
      000371 C0 07            [24] 1683 	push	ar7
      000373 C0 06            [24] 1684 	push	ar6
      000375 C0 05            [24] 1685 	push	ar5
      000377 C0 04            [24] 1686 	push	ar4
      000379 78r0F            [12] 1687 	mov	r0,#_average_duty_cycle
      00037B E2               [24] 1688 	movx	a,@r0
      00037C C0 E0            [24] 1689 	push	acc
      00037E 08               [12] 1690 	inc	r0
      00037F E2               [24] 1691 	movx	a,@r0
      000380 C0 E0            [24] 1692 	push	acc
      000382 08               [12] 1693 	inc	r0
      000383 E2               [24] 1694 	movx	a,@r0
      000384 C0 E0            [24] 1695 	push	acc
      000386 08               [12] 1696 	inc	r0
      000387 E2               [24] 1697 	movx	a,@r0
      000388 C0 E0            [24] 1698 	push	acc
      00038A 90 33 33         [24] 1699 	mov	dptr,#0x3333
      00038D 75 F0 73         [24] 1700 	mov	b,#0x73
      000390 74 3F            [12] 1701 	mov	a,#0x3F
      000392 12r00r00         [24] 1702 	lcall	___fsmul
      000395 85 82*0F         [24] 1703 	mov	_tdm_state_update_sloc1_1_0,dpl
      000398 85 83*10         [24] 1704 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
      00039B 85 F0*11         [24] 1705 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
      00039E F5*12            [12] 1706 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
      0003A0 E5 81            [12] 1707 	mov	a,sp
      0003A2 24 FC            [12] 1708 	add	a,#0xfc
      0003A4 F5 81            [12] 1709 	mov	sp,a
      0003A6 D0 04            [24] 1710 	pop	ar4
      0003A8 D0 05            [24] 1711 	pop	ar5
      0003AA D0 06            [24] 1712 	pop	ar6
      0003AC D0 07            [24] 1713 	pop	ar7
      0003AE 78r14            [12] 1714 	mov	r0,#_transmitted_ticks
      0003B0 E2               [24] 1715 	movx	a,@r0
      0003B1 F5 82            [12] 1716 	mov	dpl,a
      0003B3 08               [12] 1717 	inc	r0
      0003B4 E2               [24] 1718 	movx	a,@r0
      0003B5 F5 83            [12] 1719 	mov	dph,a
      0003B7 C0 05            [24] 1720 	push	ar5
      0003B9 C0 04            [24] 1721 	push	ar4
      0003BB 12r00r00         [24] 1722 	lcall	___uint2fs
      0003BE AA 82            [24] 1723 	mov	r2,dpl
      0003C0 AB 83            [24] 1724 	mov	r3,dph
      0003C2 AE F0            [24] 1725 	mov	r6,b
      0003C4 FF               [12] 1726 	mov	r7,a
      0003C5 D0 04            [24] 1727 	pop	ar4
      0003C7 D0 05            [24] 1728 	pop	ar5
      0003C9 C0 07            [24] 1729 	push	ar7
      0003CB C0 06            [24] 1730 	push	ar6
      0003CD C0 05            [24] 1731 	push	ar5
      0003CF C0 04            [24] 1732 	push	ar4
      0003D1 C0 02            [24] 1733 	push	ar2
      0003D3 C0 03            [24] 1734 	push	ar3
      0003D5 C0 06            [24] 1735 	push	ar6
      0003D7 C0 07            [24] 1736 	push	ar7
      0003D9 90 00 00         [24] 1737 	mov	dptr,#0x0000
      0003DC 75 F0 A0         [24] 1738 	mov	b,#0xA0
      0003DF 74 40            [12] 1739 	mov	a,#0x40
      0003E1 12r00r00         [24] 1740 	lcall	___fsmul
      0003E4 85 82*13         [24] 1741 	mov	_tdm_state_update_sloc2_1_0,dpl
      0003E7 85 83*14         [24] 1742 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
      0003EA 85 F0*15         [24] 1743 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
      0003ED F5*16            [12] 1744 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
      0003EF E5 81            [12] 1745 	mov	a,sp
      0003F1 24 FC            [12] 1746 	add	a,#0xfc
      0003F3 F5 81            [12] 1747 	mov	sp,a
      0003F5 D0 04            [24] 1748 	pop	ar4
      0003F7 D0 05            [24] 1749 	pop	ar5
      0003F9 D0 06            [24] 1750 	pop	ar6
      0003FB D0 07            [24] 1751 	pop	ar7
      0003FD 78r06            [12] 1752 	mov	r0,#_silence_period
      0003FF 79r03            [12] 1753 	mov	r1,#_tx_window_width
      000401 E3               [24] 1754 	movx	a,@r1
      000402 C5 F0            [12] 1755 	xch	a,b
      000404 E2               [24] 1756 	movx	a,@r0
      000405 25 F0            [12] 1757 	add	a,b
      000407 FE               [12] 1758 	mov	r6,a
      000408 09               [12] 1759 	inc	r1
      000409 E3               [24] 1760 	movx	a,@r1
      00040A C5 F0            [12] 1761 	xch	a,b
      00040C 08               [12] 1762 	inc	r0
      00040D E2               [24] 1763 	movx	a,@r0
      00040E 35 F0            [12] 1764 	addc	a,b
      000410 CE               [12] 1765 	xch	a,r6
      000411 25 E0            [12] 1766 	add	a,acc
      000413 CE               [12] 1767 	xch	a,r6
      000414 33               [12] 1768 	rlc	a
      000415 FF               [12] 1769 	mov	r7,a
      000416 8E 82            [24] 1770 	mov	dpl,r6
      000418 8F 83            [24] 1771 	mov	dph,r7
      00041A C0 05            [24] 1772 	push	ar5
      00041C C0 04            [24] 1773 	push	ar4
      00041E 12r00r00         [24] 1774 	lcall	___uint2fs
      000421 AA 82            [24] 1775 	mov	r2,dpl
      000423 AB 83            [24] 1776 	mov	r3,dph
      000425 AE F0            [24] 1777 	mov	r6,b
      000427 FF               [12] 1778 	mov	r7,a
      000428 C0 02            [24] 1779 	push	ar2
      00042A C0 03            [24] 1780 	push	ar3
      00042C C0 06            [24] 1781 	push	ar6
      00042E C0 07            [24] 1782 	push	ar7
      000430 85*13 82         [24] 1783 	mov	dpl,_tdm_state_update_sloc2_1_0
      000433 85*14 83         [24] 1784 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
      000436 85*15 F0         [24] 1785 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
      000439 E5*16            [12] 1786 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
      00043B 12r00r00         [24] 1787 	lcall	___fsdiv
      00043E AA 82            [24] 1788 	mov	r2,dpl
      000440 AB 83            [24] 1789 	mov	r3,dph
      000442 AE F0            [24] 1790 	mov	r6,b
      000444 FF               [12] 1791 	mov	r7,a
      000445 E5 81            [12] 1792 	mov	a,sp
      000447 24 FC            [12] 1793 	add	a,#0xfc
      000449 F5 81            [12] 1794 	mov	sp,a
      00044B C0 02            [24] 1795 	push	ar2
      00044D C0 03            [24] 1796 	push	ar3
      00044F C0 06            [24] 1797 	push	ar6
      000451 C0 07            [24] 1798 	push	ar7
      000453 85*0F 82         [24] 1799 	mov	dpl,_tdm_state_update_sloc1_1_0
      000456 85*10 83         [24] 1800 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
      000459 85*11 F0         [24] 1801 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
      00045C E5*12            [12] 1802 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
      00045E 12r00r00         [24] 1803 	lcall	___fsadd
      000461 AA 82            [24] 1804 	mov	r2,dpl
      000463 AB 83            [24] 1805 	mov	r3,dph
      000465 AE F0            [24] 1806 	mov	r6,b
      000467 FF               [12] 1807 	mov	r7,a
      000468 E5 81            [12] 1808 	mov	a,sp
      00046A 24 FC            [12] 1809 	add	a,#0xfc
      00046C F5 81            [12] 1810 	mov	sp,a
      00046E D0 04            [24] 1811 	pop	ar4
      000470 D0 05            [24] 1812 	pop	ar5
      000472 78r0F            [12] 1813 	mov	r0,#_average_duty_cycle
      000474 EA               [12] 1814 	mov	a,r2
      000475 F2               [24] 1815 	movx	@r0,a
      000476 08               [12] 1816 	inc	r0
      000477 EB               [12] 1817 	mov	a,r3
      000478 F2               [24] 1818 	movx	@r0,a
      000479 08               [12] 1819 	inc	r0
      00047A EE               [12] 1820 	mov	a,r6
      00047B F2               [24] 1821 	movx	@r0,a
      00047C 08               [12] 1822 	inc	r0
      00047D EF               [12] 1823 	mov	a,r7
      00047E F2               [24] 1824 	movx	@r0,a
                                   1825 ;	radio/tdm.c:322: transmitted_ticks = 0;
      00047F 78r14            [12] 1826 	mov	r0,#_transmitted_ticks
      000481 E4               [12] 1827 	clr	a
      000482 F2               [24] 1828 	movx	@r0,a
      000483 08               [12] 1829 	inc	r0
      000484 F2               [24] 1830 	movx	@r0,a
                                   1831 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      000485 EC               [12] 1832 	mov	a,r4
      000486 C3               [12] 1833 	clr	c
      000487 95*0D            [12] 1834 	subb	a,_tdm_state_update_sloc0_1_0
      000489 FC               [12] 1835 	mov	r4,a
      00048A ED               [12] 1836 	mov	a,r5
      00048B 95*0E            [12] 1837 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      00048D FD               [12] 1838 	mov	r5,a
      00048E 8C 82            [24] 1839 	mov	dpl,r4
      000490 8D 83            [24] 1840 	mov	dph,r5
      000492 12r00r00         [24] 1841 	lcall	___sint2fs
      000495 AC 82            [24] 1842 	mov	r4,dpl
      000497 AD 83            [24] 1843 	mov	r5,dph
      000499 AE F0            [24] 1844 	mov	r6,b
      00049B FF               [12] 1845 	mov	r7,a
      00049C C0 07            [24] 1846 	push	ar7
      00049E C0 06            [24] 1847 	push	ar6
      0004A0 C0 04            [24] 1848 	push	ar4
      0004A2 C0 05            [24] 1849 	push	ar5
      0004A4 C0 06            [24] 1850 	push	ar6
      0004A6 C0 07            [24] 1851 	push	ar7
      0004A8 78r0F            [12] 1852 	mov	r0,#_average_duty_cycle
      0004AA E2               [24] 1853 	movx	a,@r0
      0004AB F5 82            [12] 1854 	mov	dpl,a
      0004AD 08               [12] 1855 	inc	r0
      0004AE E2               [24] 1856 	movx	a,@r0
      0004AF F5 83            [12] 1857 	mov	dph,a
      0004B1 08               [12] 1858 	inc	r0
      0004B2 E2               [24] 1859 	movx	a,@r0
      0004B3 F5 F0            [12] 1860 	mov	b,a
      0004B5 08               [12] 1861 	inc	r0
      0004B6 E2               [24] 1862 	movx	a,@r0
      0004B7 12r00r00         [24] 1863 	lcall	___fslt
      0004BA E5 81            [12] 1864 	mov	a,sp
      0004BC 24 FC            [12] 1865 	add	a,#0xfc
      0004BE F5 81            [12] 1866 	mov	sp,a
      0004C0 D0 06            [24] 1867 	pop	ar6
      0004C2 D0 07            [24] 1868 	pop	ar7
      0004C4 E5 82            [12] 1869 	mov	a,dpl
      0004C6 24 FF            [12] 1870 	add	a,#0xFF
      0004C8 92*08            [24] 1871 	mov  _tdm_state_update_sloc3_1_0,c
      0004CA B3               [12] 1872 	cpl	c
      0004CB 92*04            [24] 1873 	mov	_duty_cycle_wait,c
                                   1874 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004CD D0 07            [24] 1875 	pop	ar7
      0004CF D0 06            [24] 1876 	pop	ar6
                                   1877 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      0004D1                       1878 00114$:
                                   1879 ;	radio/tdm.c:327: bonus_transmit = 0;
      0004D1 C2*00            [12] 1880 	clr	_bonus_transmit
                                   1881 ;	radio/tdm.c:330: transmit_yield = 0;
      0004D3 C2*01            [12] 1882 	clr	_transmit_yield
                                   1883 ;	radio/tdm.c:333: transmit_wait = 0;
      0004D5 78r0C            [12] 1884 	mov	r0,#_transmit_wait
      0004D7 E4               [12] 1885 	clr	a
      0004D8 F2               [24] 1886 	movx	@r0,a
      0004D9 08               [12] 1887 	inc	r0
      0004DA F2               [24] 1888 	movx	@r0,a
      0004DB 02r02r93         [24] 1889 	ljmp	00116$
      0004DE                       1890 00118$:
                                   1891 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004DE 78r01            [12] 1892 	mov	r0,#_tdm_state_remaining
      0004E0 E2               [24] 1893 	movx	a,@r0
      0004E1 C3               [12] 1894 	clr	c
      0004E2 9E               [12] 1895 	subb	a,r6
      0004E3 F2               [24] 1896 	movx	@r0,a
      0004E4 08               [12] 1897 	inc	r0
      0004E5 E2               [24] 1898 	movx	a,@r0
      0004E6 9F               [12] 1899 	subb	a,r7
      0004E7 F2               [24] 1900 	movx	@r0,a
      0004E8 22               [24] 1901 	ret
                                   1902 ;------------------------------------------------------------
                                   1903 ;Allocation info for local variables in function 'tdm_change_phase'
                                   1904 ;------------------------------------------------------------
                                   1905 ;	radio/tdm.c:342: tdm_change_phase(void)
                                   1906 ;	-----------------------------------------
                                   1907 ;	 function tdm_change_phase
                                   1908 ;	-----------------------------------------
      0004E9                       1909 _tdm_change_phase:
                                   1910 ;	radio/tdm.c:344: tdm_state = (tdm_state+2) % 4;
      0004E9 78r00            [12] 1911 	mov	r0,#_tdm_state
      0004EB E2               [24] 1912 	movx	a,@r0
      0004EC FE               [12] 1913 	mov	r6,a
      0004ED 7F 00            [12] 1914 	mov	r7,#0x00
      0004EF 74 02            [12] 1915 	mov	a,#0x02
      0004F1 2E               [12] 1916 	add	a,r6
      0004F2 FE               [12] 1917 	mov	r6,a
      0004F3 E4               [12] 1918 	clr	a
      0004F4 3F               [12] 1919 	addc	a,r7
      0004F5 FF               [12] 1920 	mov	r7,a
      0004F6 90r00r00         [24] 1921 	mov	dptr,#__modsint_PARM_2
      0004F9 74 04            [12] 1922 	mov	a,#0x04
      0004FB F0               [24] 1923 	movx	@dptr,a
      0004FC E4               [12] 1924 	clr	a
      0004FD A3               [24] 1925 	inc	dptr
      0004FE F0               [24] 1926 	movx	@dptr,a
      0004FF 8E 82            [24] 1927 	mov	dpl,r6
      000501 8F 83            [24] 1928 	mov	dph,r7
      000503 12r00r00         [24] 1929 	lcall	__modsint
      000506 AE 82            [24] 1930 	mov	r6,dpl
      000508 78r00            [12] 1931 	mov	r0,#_tdm_state
      00050A EE               [12] 1932 	mov	a,r6
      00050B F2               [24] 1933 	movx	@r0,a
      00050C 22               [24] 1934 	ret
                                   1935 ;------------------------------------------------------------
                                   1936 ;Allocation info for local variables in function 'temperature_update'
                                   1937 ;------------------------------------------------------------
                                   1938 ;diff                      Allocated to registers r6 r7 
                                   1939 ;------------------------------------------------------------
                                   1940 ;	radio/tdm.c:349: static void temperature_update(void)
                                   1941 ;	-----------------------------------------
                                   1942 ;	 function temperature_update
                                   1943 ;	-----------------------------------------
      00050D                       1944 _temperature_update:
                                   1945 ;	radio/tdm.c:352: if (radio_get_transmit_power() <= 20) {
      00050D 12r00r00         [24] 1946 	lcall	_radio_get_transmit_power
      000510 E5 82            [12] 1947 	mov	a,dpl
      000512 FF               [12] 1948 	mov	r7,a
      000513 24 EB            [12] 1949 	add	a,#0xff - 0x14
      000515 40 05            [24] 1950 	jc	00102$
                                   1951 ;	radio/tdm.c:353: duty_cycle_offset = 0;
      000517 78r13            [12] 1952 	mov	r0,#_duty_cycle_offset
      000519 E4               [12] 1953 	clr	a
      00051A F2               [24] 1954 	movx	@r0,a
                                   1955 ;	radio/tdm.c:354: return;
      00051B 22               [24] 1956 	ret
      00051C                       1957 00102$:
                                   1958 ;	radio/tdm.c:357: diff = radio_temperature() - MAX_PA_TEMPERATURE;
      00051C 12r00r00         [24] 1959 	lcall	_radio_temperature
      00051F E5 82            [12] 1960 	mov	a,dpl
      000521 85 83 F0         [24] 1961 	mov	b,dph
      000524 24 9C            [12] 1962 	add	a,#0x9C
      000526 FE               [12] 1963 	mov	r6,a
      000527 E5 F0            [12] 1964 	mov	a,b
      000529 34 FF            [12] 1965 	addc	a,#0xFF
      00052B FF               [12] 1966 	mov	r7,a
                                   1967 ;	radio/tdm.c:358: if (diff <= 0 && duty_cycle_offset > 0) {
      00052C C3               [12] 1968 	clr	c
      00052D E4               [12] 1969 	clr	a
      00052E 9E               [12] 1970 	subb	a,r6
      00052F 74 80            [12] 1971 	mov	a,#(0x00 ^ 0x80)
      000531 8F F0            [24] 1972 	mov	b,r7
      000533 63 F0 80         [24] 1973 	xrl	b,#0x80
      000536 95 F0            [12] 1974 	subb	a,b
      000538 E4               [12] 1975 	clr	a
      000539 33               [12] 1976 	rlc	a
      00053A FD               [12] 1977 	mov	r5,a
      00053B 70 0C            [24] 1978 	jnz	00112$
      00053D 78r13            [12] 1979 	mov	r0,#_duty_cycle_offset
      00053F E2               [24] 1980 	movx	a,@r0
      000540 60 07            [24] 1981 	jz	00112$
                                   1982 ;	radio/tdm.c:360: duty_cycle_offset -= 1;
      000542 78r13            [12] 1983 	mov	r0,#_duty_cycle_offset
      000544 E2               [24] 1984 	movx	a,@r0
      000545 14               [12] 1985 	dec	a
      000546 F2               [24] 1986 	movx	@r0,a
      000547 80 37            [24] 1987 	sjmp	00113$
      000549                       1988 00112$:
                                   1989 ;	radio/tdm.c:361: } else if (diff > 10) {
      000549 C3               [12] 1990 	clr	c
      00054A 74 0A            [12] 1991 	mov	a,#0x0A
      00054C 9E               [12] 1992 	subb	a,r6
      00054D 74 80            [12] 1993 	mov	a,#(0x00 ^ 0x80)
      00054F 8F F0            [24] 1994 	mov	b,r7
      000551 63 F0 80         [24] 1995 	xrl	b,#0x80
      000554 95 F0            [12] 1996 	subb	a,b
      000556 50 08            [24] 1997 	jnc	00109$
                                   1998 ;	radio/tdm.c:363: duty_cycle_offset += 10;
      000558 78r13            [12] 1999 	mov	r0,#_duty_cycle_offset
      00055A E2               [24] 2000 	movx	a,@r0
      00055B 24 0A            [12] 2001 	add	a,#0x0A
      00055D F2               [24] 2002 	movx	@r0,a
      00055E 80 20            [24] 2003 	sjmp	00113$
      000560                       2004 00109$:
                                   2005 ;	radio/tdm.c:364: } else if (diff > 5) {
      000560 C3               [12] 2006 	clr	c
      000561 74 05            [12] 2007 	mov	a,#0x05
      000563 9E               [12] 2008 	subb	a,r6
      000564 74 80            [12] 2009 	mov	a,#(0x00 ^ 0x80)
      000566 8F F0            [24] 2010 	mov	b,r7
      000568 63 F0 80         [24] 2011 	xrl	b,#0x80
      00056B 95 F0            [12] 2012 	subb	a,b
      00056D 50 08            [24] 2013 	jnc	00106$
                                   2014 ;	radio/tdm.c:366: duty_cycle_offset += 5;
      00056F 78r13            [12] 2015 	mov	r0,#_duty_cycle_offset
      000571 E2               [24] 2016 	movx	a,@r0
      000572 24 05            [12] 2017 	add	a,#0x05
      000574 F2               [24] 2018 	movx	@r0,a
      000575 80 09            [24] 2019 	sjmp	00113$
      000577                       2020 00106$:
                                   2021 ;	radio/tdm.c:367: } else if (diff > 0) {
      000577 ED               [12] 2022 	mov	a,r5
      000578 60 06            [24] 2023 	jz	00113$
                                   2024 ;	radio/tdm.c:369: duty_cycle_offset += 1;				
      00057A 78r13            [12] 2025 	mov	r0,#_duty_cycle_offset
      00057C E2               [24] 2026 	movx	a,@r0
      00057D 24 01            [12] 2027 	add	a,#0x01
      00057F F2               [24] 2028 	movx	@r0,a
      000580                       2029 00113$:
                                   2030 ;	radio/tdm.c:372: if ((duty_cycle-duty_cycle_offset) < 20) {
      000580 78r0E            [12] 2031 	mov	r0,#_duty_cycle
      000582 E2               [24] 2032 	movx	a,@r0
      000583 FE               [12] 2033 	mov	r6,a
      000584 7F 00            [12] 2034 	mov	r7,#0x00
      000586 78r13            [12] 2035 	mov	r0,#_duty_cycle_offset
      000588 E2               [24] 2036 	movx	a,@r0
      000589 FC               [12] 2037 	mov	r4,a
      00058A 7D 00            [12] 2038 	mov	r5,#0x00
      00058C EE               [12] 2039 	mov	a,r6
      00058D C3               [12] 2040 	clr	c
      00058E 9C               [12] 2041 	subb	a,r4
      00058F FE               [12] 2042 	mov	r6,a
      000590 EF               [12] 2043 	mov	a,r7
      000591 9D               [12] 2044 	subb	a,r5
      000592 FF               [12] 2045 	mov	r7,a
      000593 C3               [12] 2046 	clr	c
      000594 EE               [12] 2047 	mov	a,r6
      000595 94 14            [12] 2048 	subb	a,#0x14
      000597 EF               [12] 2049 	mov	a,r7
      000598 64 80            [12] 2050 	xrl	a,#0x80
      00059A 94 80            [12] 2051 	subb	a,#0x80
      00059C 50 08            [24] 2052 	jnc	00117$
                                   2053 ;	radio/tdm.c:373: duty_cycle_offset = duty_cycle - 20;
      00059E 78r0E            [12] 2054 	mov	r0,#_duty_cycle
      0005A0 79r13            [12] 2055 	mov	r1,#_duty_cycle_offset
      0005A2 E2               [24] 2056 	movx	a,@r0
      0005A3 24 EC            [12] 2057 	add	a,#0xEC
      0005A5 F3               [24] 2058 	movx	@r1,a
      0005A6                       2059 00117$:
      0005A6 22               [24] 2060 	ret
                                   2061 ;------------------------------------------------------------
                                   2062 ;Allocation info for local variables in function 'link_update'
                                   2063 ;------------------------------------------------------------
                                   2064 ;old_remaining             Allocated to registers r6 r7 
                                   2065 ;unlock_count              Allocated with name '_link_update_unlock_count_1_198'
                                   2066 ;temperature_count         Allocated with name '_link_update_temperature_count_1_198'
                                   2067 ;------------------------------------------------------------
                                   2068 ;	radio/tdm.c:381: link_update(void)
                                   2069 ;	-----------------------------------------
                                   2070 ;	 function link_update
                                   2071 ;	-----------------------------------------
      0005A7                       2072 _link_update:
                                   2073 ;	radio/tdm.c:384: if (received_packet) {
      0005A7 30*03 09         [24] 2074 	jnb	_received_packet,00102$
                                   2075 ;	radio/tdm.c:385: unlock_count = 0;
      0005AA 90r00rFD         [24] 2076 	mov	dptr,#_link_update_unlock_count_1_198
      0005AD E4               [12] 2077 	clr	a
      0005AE F0               [24] 2078 	movx	@dptr,a
                                   2079 ;	radio/tdm.c:386: received_packet = false;
      0005AF C2*03            [12] 2080 	clr	_received_packet
      0005B1 80 07            [24] 2081 	sjmp	00103$
      0005B3                       2082 00102$:
                                   2083 ;	radio/tdm.c:391: unlock_count++;
      0005B3 90r00rFD         [24] 2084 	mov	dptr,#_link_update_unlock_count_1_198
      0005B6 E0               [24] 2085 	movx	a,@dptr
      0005B7 24 01            [12] 2086 	add	a,#0x01
      0005B9 F0               [24] 2087 	movx	@dptr,a
      0005BA                       2088 00103$:
                                   2089 ;	radio/tdm.c:394: if (unlock_count < 2) {
      0005BA 90r00rFD         [24] 2090 	mov	dptr,#_link_update_unlock_count_1_198
      0005BD E0               [24] 2091 	movx	a,@dptr
      0005BE FF               [12] 2092 	mov	r7,a
      0005BF BF 02 00         [24] 2093 	cjne	r7,#0x02,00157$
      0005C2                       2094 00157$:
      0005C2 50 04            [24] 2095 	jnc	00105$
                                   2096 ;	radio/tdm.c:395: LED_RADIO = LED_ON;
      0005C4 D2 B7            [12] 2097 	setb	_LED_GREEN
      0005C6 80 06            [24] 2098 	sjmp	00106$
      0005C8                       2099 00105$:
                                   2100 ;	radio/tdm.c:401: LED_RADIO = blink_state;
      0005C8 A2*02            [12] 2101 	mov	c,_blink_state
      0005CA 92 B7            [24] 2102 	mov	_LED_GREEN,c
                                   2103 ;	radio/tdm.c:402: blink_state = !blink_state;
      0005CC B2*02            [12] 2104 	cpl	_blink_state
      0005CE                       2105 00106$:
                                   2106 ;	radio/tdm.c:405: if (unlock_count > 40) {
      0005CE EF               [12] 2107 	mov	a,r7
      0005CF 24 D7            [12] 2108 	add	a,#0xff - 0x28
      0005D1 40 03            [24] 2109 	jc	00159$
      0005D3 02r06r5E         [24] 2110 	ljmp	00117$
      0005D6                       2111 00159$:
                                   2112 ;	radio/tdm.c:409: unlock_count = 5;
      0005D6 90r00rFD         [24] 2113 	mov	dptr,#_link_update_unlock_count_1_198
      0005D9 74 05            [12] 2114 	mov	a,#0x05
      0005DB F0               [24] 2115 	movx	@dptr,a
                                   2116 ;	radio/tdm.c:413: if (timer_entropy() & 1) {
      0005DC 12r00r00         [24] 2117 	lcall	_timer_entropy
      0005DF E5 82            [12] 2118 	mov	a,dpl
      0005E1 30 E0 59         [24] 2119 	jnb	acc.0,00113$
                                   2120 ;	radio/tdm.c:414: register uint16_t old_remaining = tdm_state_remaining;
      0005E4 78r01            [12] 2121 	mov	r0,#_tdm_state_remaining
      0005E6 E2               [24] 2122 	movx	a,@r0
      0005E7 FE               [12] 2123 	mov	r6,a
      0005E8 08               [12] 2124 	inc	r0
      0005E9 E2               [24] 2125 	movx	a,@r0
      0005EA FF               [12] 2126 	mov	r7,a
                                   2127 ;	radio/tdm.c:415: if (tdm_state_remaining > silence_period) {
      0005EB 78r06            [12] 2128 	mov	r0,#_silence_period
      0005ED C3               [12] 2129 	clr	c
      0005EE E2               [24] 2130 	movx	a,@r0
      0005EF 9E               [12] 2131 	subb	a,r6
      0005F0 08               [12] 2132 	inc	r0
      0005F1 E2               [24] 2133 	movx	a,@r0
      0005F2 9F               [12] 2134 	subb	a,r7
      0005F3 50 17            [24] 2135 	jnc	00108$
                                   2136 ;	radio/tdm.c:416: tdm_state_remaining -= packet_latency;
      0005F5 78r08            [12] 2137 	mov	r0,#_packet_latency
      0005F7 D3               [12] 2138 	setb	c
      0005F8 E2               [24] 2139 	movx	a,@r0
      0005F9 9E               [12] 2140 	subb	a,r6
      0005FA F4               [12] 2141 	cpl	a
      0005FB B3               [12] 2142 	cpl	c
      0005FC FC               [12] 2143 	mov	r4,a
      0005FD B3               [12] 2144 	cpl	c
      0005FE 08               [12] 2145 	inc	r0
      0005FF E2               [24] 2146 	movx	a,@r0
      000600 9F               [12] 2147 	subb	a,r7
      000601 F4               [12] 2148 	cpl	a
      000602 FD               [12] 2149 	mov	r5,a
      000603 78r01            [12] 2150 	mov	r0,#_tdm_state_remaining
      000605 EC               [12] 2151 	mov	a,r4
      000606 F2               [24] 2152 	movx	@r0,a
      000607 08               [12] 2153 	inc	r0
      000608 ED               [12] 2154 	mov	a,r5
      000609 F2               [24] 2155 	movx	@r0,a
      00060A 80 08            [24] 2156 	sjmp	00109$
      00060C                       2157 00108$:
                                   2158 ;	radio/tdm.c:418: tdm_state_remaining = 1;
      00060C 78r01            [12] 2159 	mov	r0,#_tdm_state_remaining
      00060E 74 01            [12] 2160 	mov	a,#0x01
      000610 F2               [24] 2161 	movx	@r0,a
      000611 08               [12] 2162 	inc	r0
      000612 E4               [12] 2163 	clr	a
      000613 F2               [24] 2164 	movx	@r0,a
      000614                       2165 00109$:
                                   2166 ;	radio/tdm.c:420: if (at_testmode & AT_TEST_TDM) {
      000614 78r00            [12] 2167 	mov	r0,#_at_testmode
      000616 E2               [24] 2168 	movx	a,@r0
      000617 54 02            [12] 2169 	anl	a,#0x02
      000619 60 22            [24] 2170 	jz	00113$
                                   2171 ;	radio/tdm.c:421: printf("TDM: change timing %u/%u\n",
      00061B 78r01            [12] 2172 	mov	r0,#_tdm_state_remaining
      00061D E2               [24] 2173 	movx	a,@r0
      00061E C0 E0            [24] 2174 	push	acc
      000620 08               [12] 2175 	inc	r0
      000621 E2               [24] 2176 	movx	a,@r0
      000622 C0 E0            [24] 2177 	push	acc
      000624 C0 06            [24] 2178 	push	ar6
      000626 C0 07            [24] 2179 	push	ar7
      000628 74r8A            [12] 2180 	mov	a,#___str_4
      00062A C0 E0            [24] 2181 	push	acc
      00062C 74s00            [12] 2182 	mov	a,#(___str_4 >> 8)
      00062E C0 E0            [24] 2183 	push	acc
      000630 74 80            [12] 2184 	mov	a,#0x80
      000632 C0 E0            [24] 2185 	push	acc
      000634 12r00r00         [24] 2186 	lcall	_printfl
      000637 E5 81            [12] 2187 	mov	a,sp
      000639 24 F9            [12] 2188 	add	a,#0xf9
      00063B F5 81            [12] 2189 	mov	sp,a
      00063D                       2190 00113$:
                                   2191 ;	radio/tdm.c:427: if (at_testmode & AT_TEST_TDM) {
      00063D 78r00            [12] 2192 	mov	r0,#_at_testmode
      00063F E2               [24] 2193 	movx	a,@r0
      000640 54 02            [12] 2194 	anl	a,#0x02
      000642 60 15            [24] 2195 	jz	00115$
                                   2196 ;	radio/tdm.c:428: printf("TDM: scanning\n");
      000644 74rA4            [12] 2197 	mov	a,#___str_5
      000646 C0 E0            [24] 2198 	push	acc
      000648 74s00            [12] 2199 	mov	a,#(___str_5 >> 8)
      00064A C0 E0            [24] 2200 	push	acc
      00064C 74 80            [12] 2201 	mov	a,#0x80
      00064E C0 E0            [24] 2202 	push	acc
      000650 12r00r00         [24] 2203 	lcall	_printfl
      000653 15 81            [12] 2204 	dec	sp
      000655 15 81            [12] 2205 	dec	sp
      000657 15 81            [12] 2206 	dec	sp
      000659                       2207 00115$:
                                   2208 ;	radio/tdm.c:430: fhop_set_locked(false);
      000659 C2*00            [12] 2209 	clr	_fhop_set_locked_PARM_1
      00065B 12r00r00         [24] 2210 	lcall	_fhop_set_locked
      00065E                       2211 00117$:
                                   2212 ;	radio/tdm.c:433: if (unlock_count != 0) {
      00065E 90r00rFD         [24] 2213 	mov	dptr,#_link_update_unlock_count_1_198
      000661 E0               [24] 2214 	movx	a,@dptr
      000662 60 3D            [24] 2215 	jz	00119$
                                   2216 ;	radio/tdm.c:434: statistics.average_rssi = (radio_last_rssi() + 3*(uint16_t)statistics.average_rssi)/4;
      000664 12r00r00         [24] 2217 	lcall	_radio_last_rssi
      000667 AF 82            [24] 2218 	mov	r7,dpl
      000669 7E 00            [12] 2219 	mov	r6,#0x00
      00066B 78r00            [12] 2220 	mov	r0,#_statistics
      00066D E2               [24] 2221 	movx	a,@r0
      00066E 90r00r00         [24] 2222 	mov	dptr,#__mulint_PARM_2
      000671 F0               [24] 2223 	movx	@dptr,a
      000672 E4               [12] 2224 	clr	a
      000673 A3               [24] 2225 	inc	dptr
      000674 F0               [24] 2226 	movx	@dptr,a
      000675 90 00 03         [24] 2227 	mov	dptr,#0x0003
      000678 C0 07            [24] 2228 	push	ar7
      00067A C0 06            [24] 2229 	push	ar6
      00067C 12r00r00         [24] 2230 	lcall	__mulint
      00067F AC 82            [24] 2231 	mov	r4,dpl
      000681 AD 83            [24] 2232 	mov	r5,dph
      000683 D0 06            [24] 2233 	pop	ar6
      000685 D0 07            [24] 2234 	pop	ar7
      000687 EC               [12] 2235 	mov	a,r4
      000688 2F               [12] 2236 	add	a,r7
      000689 FC               [12] 2237 	mov	r4,a
      00068A ED               [12] 2238 	mov	a,r5
      00068B 3E               [12] 2239 	addc	a,r6
      00068C C3               [12] 2240 	clr	c
      00068D 13               [12] 2241 	rrc	a
      00068E CC               [12] 2242 	xch	a,r4
      00068F 13               [12] 2243 	rrc	a
      000690 CC               [12] 2244 	xch	a,r4
      000691 C3               [12] 2245 	clr	c
      000692 13               [12] 2246 	rrc	a
      000693 CC               [12] 2247 	xch	a,r4
      000694 13               [12] 2248 	rrc	a
      000695 CC               [12] 2249 	xch	a,r4
      000696 FD               [12] 2250 	mov	r5,a
      000697 78r00            [12] 2251 	mov	r0,#_statistics
      000699 EC               [12] 2252 	mov	a,r4
      00069A F2               [24] 2253 	movx	@r0,a
                                   2254 ;	radio/tdm.c:437: statistics.receive_count = 0;
      00069B 78r02            [12] 2255 	mov	r0,#(_statistics + 0x0002)
      00069D E4               [12] 2256 	clr	a
      00069E F2               [24] 2257 	movx	@r0,a
      00069F 08               [12] 2258 	inc	r0
      0006A0 F2               [24] 2259 	movx	@r0,a
      0006A1                       2260 00119$:
                                   2261 ;	radio/tdm.c:440: if (unlock_count > 5) {
      0006A1 90r00rFD         [24] 2262 	mov	dptr,#_link_update_unlock_count_1_198
      0006A4 E0               [24] 2263 	movx	a,@dptr
      0006A5 FF               [12] 2264 	mov  r7,a
      0006A6 24 FA            [12] 2265 	add	a,#0xff - 0x05
      0006A8 50 17            [24] 2266 	jnc	00121$
                                   2267 ;	radio/tdm.c:441: memset(&remote_statistics, 0, sizeof(remote_statistics));
      0006AA 90r00r00         [24] 2268 	mov	dptr,#_memset_PARM_2
      0006AD E4               [12] 2269 	clr	a
      0006AE F0               [24] 2270 	movx	@dptr,a
      0006AF 90r00r00         [24] 2271 	mov	dptr,#_memset_PARM_3
      0006B2 74 04            [12] 2272 	mov	a,#0x04
      0006B4 F0               [24] 2273 	movx	@dptr,a
      0006B5 E4               [12] 2274 	clr	a
      0006B6 A3               [24] 2275 	inc	dptr
      0006B7 F0               [24] 2276 	movx	@dptr,a
      0006B8 90r00r00         [24] 2277 	mov	dptr,#_remote_statistics
      0006BB 75 F0 60         [24] 2278 	mov	b,#0x60
      0006BE 12r00r00         [24] 2279 	lcall	_memset
      0006C1                       2280 00121$:
                                   2281 ;	radio/tdm.c:444: test_display = at_testmode;
      0006C1 78r00            [12] 2282 	mov	r0,#_at_testmode
      0006C3 90r00rFC         [24] 2283 	mov	dptr,#_test_display
      0006C6 E2               [24] 2284 	movx	a,@r0
      0006C7 F0               [24] 2285 	movx	@dptr,a
                                   2286 ;	radio/tdm.c:445: send_statistics = 1;
      0006C8 D2*05            [12] 2287 	setb	_send_statistics
                                   2288 ;	radio/tdm.c:447: temperature_count++;
      0006CA 90r00rFE         [24] 2289 	mov	dptr,#_link_update_temperature_count_1_198
      0006CD E0               [24] 2290 	movx	a,@dptr
      0006CE 24 01            [12] 2291 	add	a,#0x01
      0006D0 F0               [24] 2292 	movx	@dptr,a
                                   2293 ;	radio/tdm.c:448: if (temperature_count == 4) {
      0006D1 E0               [24] 2294 	movx	a,@dptr
      0006D2 FF               [12] 2295 	mov	r7,a
      0006D3 BF 04 08         [24] 2296 	cjne	r7,#0x04,00124$
                                   2297 ;	radio/tdm.c:450: temperature_update();
      0006D6 12r05r0D         [24] 2298 	lcall	_temperature_update
                                   2299 ;	radio/tdm.c:451: temperature_count = 0;
      0006D9 90r00rFE         [24] 2300 	mov	dptr,#_link_update_temperature_count_1_198
      0006DC E4               [12] 2301 	clr	a
      0006DD F0               [24] 2302 	movx	@dptr,a
      0006DE                       2303 00124$:
      0006DE 22               [24] 2304 	ret
                                   2305 ;------------------------------------------------------------
                                   2306 ;Allocation info for local variables in function 'tdm_remote_at'
                                   2307 ;------------------------------------------------------------
                                   2308 ;	radio/tdm.c:457: tdm_remote_at(void)
                                   2309 ;	-----------------------------------------
                                   2310 ;	 function tdm_remote_at
                                   2311 ;	-----------------------------------------
      0006DF                       2312 _tdm_remote_at:
                                   2313 ;	radio/tdm.c:459: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
      0006DF 90r00r00         [24] 2314 	mov	dptr,#_at_cmd
      0006E2 75 F0 00         [24] 2315 	mov	b,#0x00
      0006E5 12r00r00         [24] 2316 	lcall	_strlen
      0006E8 E5 82            [12] 2317 	mov	a,dpl
      0006EA 85 83 F0         [24] 2318 	mov	b,dph
      0006ED 24 01            [12] 2319 	add	a,#0x01
      0006EF FE               [12] 2320 	mov	r6,a
      0006F0 E4               [12] 2321 	clr	a
      0006F1 35 F0            [12] 2322 	addc	a,b
      0006F3 FF               [12] 2323 	mov	r7,a
      0006F4 90r00r00         [24] 2324 	mov	dptr,#_memcpy_PARM_2
      0006F7 74r00            [12] 2325 	mov	a,#_at_cmd
      0006F9 F0               [24] 2326 	movx	@dptr,a
      0006FA 74s00            [12] 2327 	mov	a,#(_at_cmd >> 8)
      0006FC A3               [24] 2328 	inc	dptr
      0006FD F0               [24] 2329 	movx	@dptr,a
      0006FE E4               [12] 2330 	clr	a
      0006FF A3               [24] 2331 	inc	dptr
      000700 F0               [24] 2332 	movx	@dptr,a
      000701 90r00r00         [24] 2333 	mov	dptr,#_memcpy_PARM_3
      000704 EE               [12] 2334 	mov	a,r6
      000705 F0               [24] 2335 	movx	@dptr,a
      000706 EF               [12] 2336 	mov	a,r7
      000707 A3               [24] 2337 	inc	dptr
      000708 F0               [24] 2338 	movx	@dptr,a
      000709 90r00r21         [24] 2339 	mov	dptr,#_remote_at_cmd
      00070C 75 F0 60         [24] 2340 	mov	b,#0x60
      00070F 12r00r00         [24] 2341 	lcall	_memcpy
                                   2342 ;	radio/tdm.c:460: send_at_command = true;
      000712 D2*06            [12] 2343 	setb	_send_at_command
      000714 22               [24] 2344 	ret
                                   2345 ;------------------------------------------------------------
                                   2346 ;Allocation info for local variables in function 'handle_at_command'
                                   2347 ;------------------------------------------------------------
                                   2348 ;	radio/tdm.c:468: handle_at_command(__pdata uint8_t len)
                                   2349 ;	-----------------------------------------
                                   2350 ;	 function handle_at_command
                                   2351 ;	-----------------------------------------
      000715                       2352 _handle_at_command:
      000715 AF 82            [24] 2353 	mov	r7,dpl
                                   2354 ;	radio/tdm.c:470: if (len < 2 || len > AT_CMD_MAXLEN ||
      000717 BF 02 00         [24] 2355 	cjne	r7,#0x02,00122$
      00071A                       2356 00122$:
      00071A 40 17            [24] 2357 	jc	00101$
      00071C EF               [12] 2358 	mov	a,r7
      00071D 24 BA            [12] 2359 	add	a,#0xff - 0x45
      00071F 40 12            [24] 2360 	jc	00101$
                                   2361 ;	radio/tdm.c:471: pbuf[0] != (uint8_t)'R' ||
      000721 90r00r00         [24] 2362 	mov	dptr,#_pbuf
      000724 E0               [24] 2363 	movx	a,@dptr
      000725 FE               [12] 2364 	mov	r6,a
      000726 BE 52 0A         [24] 2365 	cjne	r6,#0x52,00101$
                                   2366 ;	radio/tdm.c:472: pbuf[1] != (uint8_t)'T') {
      000729 90r00r01         [24] 2367 	mov	dptr,#(_pbuf + 0x0001)
      00072C E0               [24] 2368 	movx	a,@dptr
      00072D FE               [12] 2369 	mov	r6,a
      00072E BE 54 02         [24] 2370 	cjne	r6,#0x54,00127$
      000731 80 02            [24] 2371 	sjmp	00102$
      000733                       2372 00127$:
      000733                       2373 00101$:
                                   2374 ;	radio/tdm.c:473: return true;
      000733 D3               [12] 2375 	setb	c
      000734 22               [24] 2376 	ret
      000735                       2377 00102$:
                                   2378 ;	radio/tdm.c:477: memcpy(at_cmd, pbuf, len);
      000735 90r00r00         [24] 2379 	mov	dptr,#_memcpy_PARM_2
      000738 74r00            [12] 2380 	mov	a,#_pbuf
      00073A F0               [24] 2381 	movx	@dptr,a
      00073B 74s00            [12] 2382 	mov	a,#(_pbuf >> 8)
      00073D A3               [24] 2383 	inc	dptr
      00073E F0               [24] 2384 	movx	@dptr,a
      00073F E4               [12] 2385 	clr	a
      000740 A3               [24] 2386 	inc	dptr
      000741 F0               [24] 2387 	movx	@dptr,a
      000742 90r00r00         [24] 2388 	mov	dptr,#_memcpy_PARM_3
      000745 EF               [12] 2389 	mov	a,r7
      000746 F0               [24] 2390 	movx	@dptr,a
      000747 E4               [12] 2391 	clr	a
      000748 A3               [24] 2392 	inc	dptr
      000749 F0               [24] 2393 	movx	@dptr,a
      00074A 90r00r00         [24] 2394 	mov	dptr,#_at_cmd
      00074D 75 F0 00         [24] 2395 	mov	b,#0x00
      000750 C0 07            [24] 2396 	push	ar7
      000752 12r00r00         [24] 2397 	lcall	_memcpy
      000755 D0 07            [24] 2398 	pop	ar7
                                   2399 ;	radio/tdm.c:478: at_cmd[len] = 0;
      000757 EF               [12] 2400 	mov	a,r7
      000758 24r00            [12] 2401 	add	a,#_at_cmd
      00075A F5 82            [12] 2402 	mov	dpl,a
      00075C E4               [12] 2403 	clr	a
      00075D 34s00            [12] 2404 	addc	a,#(_at_cmd >> 8)
      00075F F5 83            [12] 2405 	mov	dph,a
      000761 E4               [12] 2406 	clr	a
      000762 F0               [24] 2407 	movx	@dptr,a
                                   2408 ;	radio/tdm.c:479: at_cmd[0] = 'A'; // replace 'R'
      000763 90r00r00         [24] 2409 	mov	dptr,#_at_cmd
      000766 74 41            [12] 2410 	mov	a,#0x41
      000768 F0               [24] 2411 	movx	@dptr,a
                                   2412 ;	radio/tdm.c:480: at_cmd_len = len;
      000769 78r00            [12] 2413 	mov	r0,#_at_cmd_len
      00076B EF               [12] 2414 	mov	a,r7
      00076C F2               [24] 2415 	movx	@r0,a
                                   2416 ;	radio/tdm.c:481: at_cmd_ready = true;
      00076D D2*00            [12] 2417 	setb	_at_cmd_ready
                                   2418 ;	radio/tdm.c:486: printf_start_capture(pbuf, sizeof(pbuf));
      00076F 90r00r00         [24] 2419 	mov	dptr,#_printf_start_capture_PARM_2
      000772 74 FC            [12] 2420 	mov	a,#0xFC
      000774 F0               [24] 2421 	movx	@dptr,a
      000775 90r00r00         [24] 2422 	mov	dptr,#_pbuf
      000778 12r00r00         [24] 2423 	lcall	_printf_start_capture
                                   2424 ;	radio/tdm.c:487: at_command();
      00077B 12r00r00         [24] 2425 	lcall	_at_command
                                   2426 ;	radio/tdm.c:488: len = printf_end_capture();
      00077E 12r00r00         [24] 2427 	lcall	_printf_end_capture
                                   2428 ;	radio/tdm.c:489: if (len > 0) {
      000781 E5 82            [12] 2429 	mov	a,dpl
      000783 FF               [12] 2430 	mov	r7,a
      000784 60 0A            [24] 2431 	jz	00107$
                                   2432 ;	radio/tdm.c:490: packet_inject(pbuf, len);
      000786 78r00            [12] 2433 	mov	r0,#_packet_inject_PARM_2
      000788 EF               [12] 2434 	mov	a,r7
      000789 F2               [24] 2435 	movx	@r0,a
      00078A 90r00r00         [24] 2436 	mov	dptr,#_pbuf
      00078D 12r00r00         [24] 2437 	lcall	_packet_inject
      000790                       2438 00107$:
                                   2439 ;	radio/tdm.c:492: return false;
      000790 C3               [12] 2440 	clr	c
      000791 22               [24] 2441 	ret
                                   2442 ;------------------------------------------------------------
                                   2443 ;Allocation info for local variables in function 'tdm_serial_loop'
                                   2444 ;------------------------------------------------------------
                                   2445 ;	radio/tdm.c:501: tdm_serial_loop(void)
                                   2446 ;	-----------------------------------------
                                   2447 ;	 function tdm_serial_loop
                                   2448 ;	-----------------------------------------
      000792                       2449 _tdm_serial_loop:
                                   2450 ;	radio/tdm.c:516: __pdata uint16_t last_t = timer2_tick();
      000792 12r00r00         [24] 2451 	lcall	_timer2_tick
      000795 78r6C            [12] 2452 	mov	r0,#_tdm_serial_loop_last_t_1_219
      000797 E5 82            [12] 2453 	mov	a,dpl
      000799 F2               [24] 2454 	movx	@r0,a
      00079A 08               [12] 2455 	inc	r0
      00079B E5 83            [12] 2456 	mov	a,dph
      00079D F2               [24] 2457 	movx	@r0,a
                                   2458 ;	radio/tdm.c:517: __pdata uint16_t last_link_update = last_t;
      00079E 78r6C            [12] 2459 	mov	r0,#_tdm_serial_loop_last_t_1_219
      0007A0 79r6E            [12] 2460 	mov	r1,#_tdm_serial_loop_last_link_update_1_219
      0007A2 E2               [24] 2461 	movx	a,@r0
      0007A3 F3               [24] 2462 	movx	@r1,a
      0007A4 08               [12] 2463 	inc	r0
      0007A5 E2               [24] 2464 	movx	a,@r0
      0007A6 09               [12] 2465 	inc	r1
      0007A7 F3               [24] 2466 	movx	@r1,a
                                   2467 ;	radio/tdm.c:520: _canary = 42;
      0007A8 78 FF            [12] 2468 	mov	r0,#__canary
      0007AA 76 2A            [12] 2469 	mov	@r0,#0x2A
      0007AC                       2470 00215$:
                                   2471 ;	radio/tdm.c:523: if (_canary != 42) {
      0007AC 78 FF            [12] 2472 	mov	r0,#__canary
      0007AE B6 2A 02         [24] 2473 	cjne	@r0,#0x2A,00389$
      0007B1 80 15            [24] 2474 	sjmp	00102$
      0007B3                       2475 00389$:
                                   2476 ;	radio/tdm.c:524: panic("stack blown\n");
      0007B3 74rB3            [12] 2477 	mov	a,#___str_6
      0007B5 C0 E0            [24] 2478 	push	acc
      0007B7 74s00            [12] 2479 	mov	a,#(___str_6 >> 8)
      0007B9 C0 E0            [24] 2480 	push	acc
      0007BB 74 80            [12] 2481 	mov	a,#0x80
      0007BD C0 E0            [24] 2482 	push	acc
      0007BF 12r00r00         [24] 2483 	lcall	_panic
      0007C2 15 81            [12] 2484 	dec	sp
      0007C4 15 81            [12] 2485 	dec	sp
      0007C6 15 81            [12] 2486 	dec	sp
      0007C8                       2487 00102$:
                                   2488 ;	radio/tdm.c:527: if (pdata_canary != 0x41) {
      0007C8 78r00            [12] 2489 	mov	r0,#_pdata_canary
      0007CA E2               [24] 2490 	movx	a,@r0
      0007CB B4 41 02         [24] 2491 	cjne	a,#0x41,00390$
      0007CE 80 15            [24] 2492 	sjmp	00104$
      0007D0                       2493 00390$:
                                   2494 ;	radio/tdm.c:528: panic("pdata canary changed\n");
      0007D0 74rC0            [12] 2495 	mov	a,#___str_7
      0007D2 C0 E0            [24] 2496 	push	acc
      0007D4 74s00            [12] 2497 	mov	a,#(___str_7 >> 8)
      0007D6 C0 E0            [24] 2498 	push	acc
      0007D8 74 80            [12] 2499 	mov	a,#0x80
      0007DA C0 E0            [24] 2500 	push	acc
      0007DC 12r00r00         [24] 2501 	lcall	_panic
      0007DF 15 81            [12] 2502 	dec	sp
      0007E1 15 81            [12] 2503 	dec	sp
      0007E3 15 81            [12] 2504 	dec	sp
      0007E5                       2505 00104$:
                                   2506 ;	radio/tdm.c:532: at_command();
      0007E5 12r00r00         [24] 2507 	lcall	_at_command
                                   2508 ;	radio/tdm.c:535: if (test_display) {
      0007E8 90r00rFC         [24] 2509 	mov	dptr,#_test_display
      0007EB E0               [24] 2510 	movx	a,@dptr
      0007EC 60 08            [24] 2511 	jz	00106$
                                   2512 ;	radio/tdm.c:536: display_test_output();
      0007EE 12r00rDE         [24] 2513 	lcall	_display_test_output
                                   2514 ;	radio/tdm.c:537: test_display = 0;
      0007F1 90r00rFC         [24] 2515 	mov	dptr,#_test_display
      0007F4 E4               [12] 2516 	clr	a
      0007F5 F0               [24] 2517 	movx	@dptr,a
      0007F6                       2518 00106$:
                                   2519 ;	radio/tdm.c:540: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
      0007F6 30*00 0E         [24] 2520 	jnb	_seen_mavlink,00108$
      0007F9 90r00r00         [24] 2521 	mov	dptr,#_feature_mavlink_framing
      0007FC E0               [24] 2522 	movx	a,@dptr
      0007FD 60 08            [24] 2523 	jz	00108$
      0007FF 20*00 05         [24] 2524 	jb	_at_mode_active,00108$
                                   2525 ;	radio/tdm.c:541: seen_mavlink = false;
      000802 C2*00            [12] 2526 	clr	_seen_mavlink
                                   2527 ;	radio/tdm.c:542: MAVLink_report();
      000804 12r00r00         [24] 2528 	lcall	_MAVLink_report
      000807                       2529 00108$:
                                   2530 ;	radio/tdm.c:546: radio_set_channel(fhop_receive_channel());
      000807 12r00r00         [24] 2531 	lcall	_fhop_receive_channel
      00080A 12r00r00         [24] 2532 	lcall	_radio_set_channel
                                   2533 ;	radio/tdm.c:549: tnow = timer2_tick();
      00080D 12r00r00         [24] 2534 	lcall	_timer2_tick
      000810 AA 82            [24] 2535 	mov	r2,dpl
      000812 AB 83            [24] 2536 	mov	r3,dph
                                   2537 ;	radio/tdm.c:552: if (radio_receive_packet(&len, pbuf)) {
      000814 78r00            [12] 2538 	mov	r0,#_radio_receive_packet_PARM_2
      000816 74r00            [12] 2539 	mov	a,#_pbuf
      000818 F2               [24] 2540 	movx	@r0,a
      000819 08               [12] 2541 	inc	r0
      00081A 74s00            [12] 2542 	mov	a,#(_pbuf >> 8)
      00081C F2               [24] 2543 	movx	@r0,a
      00081D 90r00r69         [24] 2544 	mov	dptr,#_tdm_serial_loop_len_1_219
      000820 75 F0 60         [24] 2545 	mov	b,#0x60
      000823 C0 03            [24] 2546 	push	ar3
      000825 C0 02            [24] 2547 	push	ar2
      000827 12r00r00         [24] 2548 	lcall	_radio_receive_packet
      00082A D0 02            [24] 2549 	pop	ar2
      00082C D0 03            [24] 2550 	pop	ar3
      00082E 40 03            [24] 2551 	jc	00395$
      000830 02r09rFB         [24] 2552 	ljmp	00134$
      000833                       2553 00395$:
                                   2554 ;	radio/tdm.c:555: received_packet = true;
      000833 D2*03            [12] 2555 	setb	_received_packet
                                   2556 ;	radio/tdm.c:556: fhop_set_locked(true);
      000835 D2*00            [12] 2557 	setb	_fhop_set_locked_PARM_1
      000837 C0 03            [24] 2558 	push	ar3
      000839 C0 02            [24] 2559 	push	ar2
      00083B 12r00r00         [24] 2560 	lcall	_fhop_set_locked
                                   2561 ;	radio/tdm.c:559: statistics.average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics.average_rssi)/8;
      00083E 12r00r00         [24] 2562 	lcall	_radio_last_rssi
      000841 AD 82            [24] 2563 	mov	r5,dpl
      000843 D0 02            [24] 2564 	pop	ar2
      000845 D0 03            [24] 2565 	pop	ar3
      000847 7C 00            [12] 2566 	mov	r4,#0x00
      000849 78r00            [12] 2567 	mov	r0,#_statistics
      00084B E2               [24] 2568 	movx	a,@r0
      00084C 90r00r00         [24] 2569 	mov	dptr,#__mulint_PARM_2
      00084F F0               [24] 2570 	movx	@dptr,a
      000850 E4               [12] 2571 	clr	a
      000851 A3               [24] 2572 	inc	dptr
      000852 F0               [24] 2573 	movx	@dptr,a
      000853 90 00 07         [24] 2574 	mov	dptr,#0x0007
      000856 C0 05            [24] 2575 	push	ar5
      000858 C0 04            [24] 2576 	push	ar4
      00085A C0 03            [24] 2577 	push	ar3
      00085C C0 02            [24] 2578 	push	ar2
      00085E 12r00r00         [24] 2579 	lcall	__mulint
      000861 AE 82            [24] 2580 	mov	r6,dpl
      000863 AF 83            [24] 2581 	mov	r7,dph
      000865 D0 02            [24] 2582 	pop	ar2
      000867 D0 03            [24] 2583 	pop	ar3
      000869 D0 04            [24] 2584 	pop	ar4
      00086B D0 05            [24] 2585 	pop	ar5
      00086D EE               [12] 2586 	mov	a,r6
      00086E 2D               [12] 2587 	add	a,r5
      00086F FE               [12] 2588 	mov	r6,a
      000870 EF               [12] 2589 	mov	a,r7
      000871 3C               [12] 2590 	addc	a,r4
      000872 C4               [12] 2591 	swap	a
      000873 23               [12] 2592 	rl	a
      000874 CE               [12] 2593 	xch	a,r6
      000875 C4               [12] 2594 	swap	a
      000876 23               [12] 2595 	rl	a
      000877 54 1F            [12] 2596 	anl	a,#0x1F
      000879 6E               [12] 2597 	xrl	a,r6
      00087A CE               [12] 2598 	xch	a,r6
      00087B 54 1F            [12] 2599 	anl	a,#0x1F
      00087D CE               [12] 2600 	xch	a,r6
      00087E 6E               [12] 2601 	xrl	a,r6
      00087F CE               [12] 2602 	xch	a,r6
      000880 78r00            [12] 2603 	mov	r0,#_statistics
      000882 EE               [12] 2604 	mov	a,r6
      000883 F2               [24] 2605 	movx	@r0,a
                                   2606 ;	radio/tdm.c:560: statistics.receive_count++;
      000884 78r02            [12] 2607 	mov	r0,#(_statistics + 0x0002)
      000886 E2               [24] 2608 	movx	a,@r0
      000887 FE               [12] 2609 	mov	r6,a
      000888 08               [12] 2610 	inc	r0
      000889 E2               [24] 2611 	movx	a,@r0
      00088A FF               [12] 2612 	mov	r7,a
      00088B 0E               [12] 2613 	inc	r6
      00088C BE 00 01         [24] 2614 	cjne	r6,#0x00,00396$
      00088F 0F               [12] 2615 	inc	r7
      000890                       2616 00396$:
      000890 78r02            [12] 2617 	mov	r0,#(_statistics + 0x0002)
      000892 EE               [12] 2618 	mov	a,r6
      000893 F2               [24] 2619 	movx	@r0,a
      000894 08               [12] 2620 	inc	r0
      000895 EF               [12] 2621 	mov	a,r7
      000896 F2               [24] 2622 	movx	@r0,a
                                   2623 ;	radio/tdm.c:564: transmit_wait = 0;
      000897 78r0C            [12] 2624 	mov	r0,#_transmit_wait
      000899 E4               [12] 2625 	clr	a
      00089A F2               [24] 2626 	movx	@r0,a
      00089B 08               [12] 2627 	inc	r0
      00089C F2               [24] 2628 	movx	@r0,a
                                   2629 ;	radio/tdm.c:566: if (len < 2) {
      00089D 78r69            [12] 2630 	mov	r0,#_tdm_serial_loop_len_1_219
      00089F E2               [24] 2631 	movx	a,@r0
      0008A0 B4 02 00         [24] 2632 	cjne	a,#0x02,00397$
      0008A3                       2633 00397$:
      0008A3 50 03            [24] 2634 	jnc	00398$
      0008A5 02r07rAC         [24] 2635 	ljmp	00215$
      0008A8                       2636 00398$:
                                   2637 ;	radio/tdm.c:573: memcpy(&trailer, &pbuf[len-sizeof(trailer)], sizeof(trailer));
      0008A8 78r69            [12] 2638 	mov	r0,#_tdm_serial_loop_len_1_219
      0008AA E2               [24] 2639 	movx	a,@r0
      0008AB 24 FC            [12] 2640 	add	a,#0xFC
      0008AD 24r00            [12] 2641 	add	a,#_pbuf
      0008AF FE               [12] 2642 	mov	r6,a
      0008B0 E4               [12] 2643 	clr	a
      0008B1 34s00            [12] 2644 	addc	a,#(_pbuf >> 8)
      0008B3 FF               [12] 2645 	mov	r7,a
      0008B4 90r00r00         [24] 2646 	mov	dptr,#_memcpy_PARM_2
      0008B7 EE               [12] 2647 	mov	a,r6
      0008B8 F0               [24] 2648 	movx	@dptr,a
      0008B9 EF               [12] 2649 	mov	a,r7
      0008BA A3               [24] 2650 	inc	dptr
      0008BB F0               [24] 2651 	movx	@dptr,a
      0008BC E4               [12] 2652 	clr	a
      0008BD A3               [24] 2653 	inc	dptr
      0008BE F0               [24] 2654 	movx	@dptr,a
      0008BF 90r00r00         [24] 2655 	mov	dptr,#_memcpy_PARM_3
      0008C2 74 04            [12] 2656 	mov	a,#0x04
      0008C4 F0               [24] 2657 	movx	@dptr,a
      0008C5 E4               [12] 2658 	clr	a
      0008C6 A3               [24] 2659 	inc	dptr
      0008C7 F0               [24] 2660 	movx	@dptr,a
      0008C8 90r00r1D         [24] 2661 	mov	dptr,#_trailer
      0008CB 75 F0 60         [24] 2662 	mov	b,#0x60
      0008CE C0 03            [24] 2663 	push	ar3
      0008D0 C0 02            [24] 2664 	push	ar2
      0008D2 12r00r00         [24] 2665 	lcall	_memcpy
      0008D5 D0 02            [24] 2666 	pop	ar2
      0008D7 D0 03            [24] 2667 	pop	ar3
                                   2668 ;	radio/tdm.c:574: len -= sizeof(trailer);
      0008D9 78r69            [12] 2669 	mov	r0,#_tdm_serial_loop_len_1_219
      0008DB E2               [24] 2670 	movx	a,@r0
      0008DC 14               [12] 2671 	dec	a
      0008DD 14               [12] 2672 	dec	a
      0008DE 14               [12] 2673 	dec	a
      0008DF 14               [12] 2674 	dec	a
      0008E0 F2               [24] 2675 	movx	@r0,a
                                   2676 ;	radio/tdm.c:576: if (trailer.window == 0 && len != 0) {
      0008E1 78r1D            [12] 2677 	mov	r0,#_trailer
      0008E3 E2               [24] 2678 	movx	a,@r0
      0008E4 FE               [12] 2679 	mov	r6,a
      0008E5 08               [12] 2680 	inc	r0
      0008E6 E2               [24] 2681 	movx	a,@r0
      0008E7 54 1F            [12] 2682 	anl	a,#0x1F
      0008E9 FF               [12] 2683 	mov	r7,a
      0008EA 4E               [12] 2684 	orl	a,r6
      0008EB 70 41            [24] 2685 	jnz	00130$
      0008ED 78r69            [12] 2686 	mov	r0,#_tdm_serial_loop_len_1_219
      0008EF E2               [24] 2687 	movx	a,@r0
      0008F0 60 3C            [24] 2688 	jz	00130$
                                   2689 ;	radio/tdm.c:578: if (len == sizeof(struct statistics)) {
      0008F2 78r69            [12] 2690 	mov	r0,#_tdm_serial_loop_len_1_219
      0008F4 E2               [24] 2691 	movx	a,@r0
      0008F5 B4 04 20         [24] 2692 	cjne	a,#0x04,00114$
                                   2693 ;	radio/tdm.c:579: memcpy(&remote_statistics, pbuf, len);
      0008F8 90r00r00         [24] 2694 	mov	dptr,#_memcpy_PARM_2
      0008FB 74r00            [12] 2695 	mov	a,#_pbuf
      0008FD F0               [24] 2696 	movx	@dptr,a
      0008FE 74s00            [12] 2697 	mov	a,#(_pbuf >> 8)
      000900 A3               [24] 2698 	inc	dptr
      000901 F0               [24] 2699 	movx	@dptr,a
      000902 E4               [12] 2700 	clr	a
      000903 A3               [24] 2701 	inc	dptr
      000904 F0               [24] 2702 	movx	@dptr,a
      000905 78r69            [12] 2703 	mov	r0,#_tdm_serial_loop_len_1_219
      000907 90r00r00         [24] 2704 	mov	dptr,#_memcpy_PARM_3
      00090A E2               [24] 2705 	movx	a,@r0
      00090B F0               [24] 2706 	movx	@dptr,a
      00090C E4               [12] 2707 	clr	a
      00090D A3               [24] 2708 	inc	dptr
      00090E F0               [24] 2709 	movx	@dptr,a
      00090F 90r00r00         [24] 2710 	mov	dptr,#_remote_statistics
      000912 75 F0 60         [24] 2711 	mov	b,#0x60
      000915 12r00r00         [24] 2712 	lcall	_memcpy
      000918                       2713 00114$:
                                   2714 ;	radio/tdm.c:583: statistics.receive_count--;
      000918 78r02            [12] 2715 	mov	r0,#(_statistics + 0x0002)
      00091A E2               [24] 2716 	movx	a,@r0
      00091B FE               [12] 2717 	mov	r6,a
      00091C 08               [12] 2718 	inc	r0
      00091D E2               [24] 2719 	movx	a,@r0
      00091E FF               [12] 2720 	mov	r7,a
      00091F 1E               [12] 2721 	dec	r6
      000920 BE FF 01         [24] 2722 	cjne	r6,#0xFF,00403$
      000923 1F               [12] 2723 	dec	r7
      000924                       2724 00403$:
      000924 78r02            [12] 2725 	mov	r0,#(_statistics + 0x0002)
      000926 EE               [12] 2726 	mov	a,r6
      000927 F2               [24] 2727 	movx	@r0,a
      000928 08               [12] 2728 	inc	r0
      000929 EF               [12] 2729 	mov	a,r7
      00092A F2               [24] 2730 	movx	@r0,a
      00092B 02r07rAC         [24] 2731 	ljmp	00215$
      00092E                       2732 00130$:
                                   2733 ;	radio/tdm.c:584: } else if (trailer.window != 0) {
      00092E 78r1D            [12] 2734 	mov	r0,#_trailer
      000930 E2               [24] 2735 	movx	a,@r0
      000931 FE               [12] 2736 	mov	r6,a
      000932 08               [12] 2737 	inc	r0
      000933 E2               [24] 2738 	movx	a,@r0
      000934 54 1F            [12] 2739 	anl	a,#0x1F
      000936 FF               [12] 2740 	mov	r7,a
      000937 4E               [12] 2741 	orl	a,r6
      000938 70 03            [24] 2742 	jnz	00404$
      00093A 02r07rAC         [24] 2743 	ljmp	00215$
      00093D                       2744 00404$:
                                   2745 ;	radio/tdm.c:587: sync_tx_windows(len);
      00093D 78r69            [12] 2746 	mov	r0,#_tdm_serial_loop_len_1_219
      00093F E2               [24] 2747 	movx	a,@r0
      000940 F5 82            [12] 2748 	mov	dpl,a
      000942 C0 03            [24] 2749 	push	ar3
      000944 C0 02            [24] 2750 	push	ar2
      000946 12r01r11         [24] 2751 	lcall	_sync_tx_windows
      000949 D0 02            [24] 2752 	pop	ar2
      00094B D0 03            [24] 2753 	pop	ar3
                                   2754 ;	radio/tdm.c:588: last_t = tnow;
      00094D 78r6C            [12] 2755 	mov	r0,#_tdm_serial_loop_last_t_1_219
      00094F EA               [12] 2756 	mov	a,r2
      000950 F2               [24] 2757 	movx	@r0,a
      000951 08               [12] 2758 	inc	r0
      000952 EB               [12] 2759 	mov	a,r3
      000953 F2               [24] 2760 	movx	@r0,a
                                   2761 ;	radio/tdm.c:597: if ((trailer.command == 1 && handle_at_command(len)) 
      000954 78r1E            [12] 2762 	mov	r0,#(_trailer + 0x0001)
      000956 E2               [24] 2763 	movx	a,@r0
      000957 C4               [12] 2764 	swap	a
      000958 03               [12] 2765 	rr	a
      000959 54 01            [12] 2766 	anl	a,#0x01
      00095B FF               [12] 2767 	mov	r7,a
      00095C BF 01 0A         [24] 2768 	cjne	r7,#0x01,00126$
      00095F 78r69            [12] 2769 	mov	r0,#_tdm_serial_loop_len_1_219
      000961 E2               [24] 2770 	movx	a,@r0
      000962 F5 82            [12] 2771 	mov	dpl,a
      000964 12r07r15         [24] 2772 	lcall	_handle_at_command
      000967 40 38            [24] 2773 	jc	00120$
      000969                       2774 00126$:
                                   2775 ;	radio/tdm.c:599: (len != 0 && trailer.command == 0 &&
      000969 78r69            [12] 2776 	mov	r0,#_tdm_serial_loop_len_1_219
      00096B E2               [24] 2777 	movx	a,@r0
      00096C 70 03            [24] 2778 	jnz	00408$
      00096E 02r07rAC         [24] 2779 	ljmp	00215$
      000971                       2780 00408$:
      000971 78r1E            [12] 2781 	mov	r0,#(_trailer + 0x0001)
      000973 E2               [24] 2782 	movx	a,@r0
      000974 30 E5 03         [24] 2783 	jnb	acc.5,00409$
      000977 02r07rAC         [24] 2784 	ljmp	00215$
      00097A                       2785 00409$:
                                   2786 ;	radio/tdm.c:600: !packet_is_duplicate(len, pbuf, trailer.resend) &&
      00097A 78r1E            [12] 2787 	mov	r0,#(_trailer + 0x0001)
      00097C E2               [24] 2788 	movx	a,@r0
      00097D 23               [12] 2789 	rl	a
      00097E 54 01            [12] 2790 	anl	a,#0x01
      000980 24 FF            [12] 2791 	add	a,#0xff
      000982 92*00            [24] 2792 	mov	_packet_is_duplicate_PARM_3,c
      000984 90r00r00         [24] 2793 	mov	dptr,#_packet_is_duplicate_PARM_2
      000987 74r00            [12] 2794 	mov	a,#_pbuf
      000989 F0               [24] 2795 	movx	@dptr,a
      00098A 74s00            [12] 2796 	mov	a,#(_pbuf >> 8)
      00098C A3               [24] 2797 	inc	dptr
      00098D F0               [24] 2798 	movx	@dptr,a
      00098E 78r69            [12] 2799 	mov	r0,#_tdm_serial_loop_len_1_219
      000990 E2               [24] 2800 	movx	a,@r0
      000991 F5 82            [12] 2801 	mov	dpl,a
      000993 12r00r00         [24] 2802 	lcall	_packet_is_duplicate
      000996 50 03            [24] 2803 	jnc	00410$
      000998 02r07rAC         [24] 2804 	ljmp	00215$
      00099B                       2805 00410$:
                                   2806 ;	radio/tdm.c:601: !at_mode_active
      00099B 30*00 03         [24] 2807 	jnb	_at_mode_active,00411$
      00099E 02r07rAC         [24] 2808 	ljmp	00215$
      0009A1                       2809 00411$:
      0009A1                       2810 00120$:
                                   2811 ;	radio/tdm.c:607: crc = crc16(len, pbuf);
      0009A1 75*00r00         [24] 2812 	mov	_crc16_PARM_2,#_pbuf
      0009A4 75*01s00         [24] 2813 	mov	(_crc16_PARM_2 + 1),#(_pbuf >> 8)
      0009A7 78r69            [12] 2814 	mov	r0,#_tdm_serial_loop_len_1_219
      0009A9 E2               [24] 2815 	movx	a,@r0
      0009AA F5 82            [12] 2816 	mov	dpl,a
      0009AC 12r00r00         [24] 2817 	lcall	_crc16
      0009AF AE 82            [24] 2818 	mov	r6,dpl
      0009B1 AF 83            [24] 2819 	mov	r7,dph
                                   2820 ;	radio/tdm.c:610: if (crc == trailer.crc) {
      0009B3 78r1F            [12] 2821 	mov	r0,#(_trailer + 0x0002)
      0009B5 E2               [24] 2822 	movx	a,@r0
      0009B6 FC               [12] 2823 	mov	r4,a
      0009B7 08               [12] 2824 	inc	r0
      0009B8 E2               [24] 2825 	movx	a,@r0
      0009B9 FD               [12] 2826 	mov	r5,a
      0009BA EE               [12] 2827 	mov	a,r6
      0009BB B5 04 17         [24] 2828 	cjne	a,ar4,00118$
      0009BE EF               [12] 2829 	mov	a,r7
      0009BF B5 05 13         [24] 2830 	cjne	a,ar5,00118$
                                   2831 ;	radio/tdm.c:611: LED_ACTIVITY = LED_ON;
      0009C2 D2 B6            [12] 2832 	setb	_LED_RED
                                   2833 ;	radio/tdm.c:612: serial_decrypt_buf(pbuf, len);
      0009C4 78r69            [12] 2834 	mov	r0,#_tdm_serial_loop_len_1_219
      0009C6 79r00            [12] 2835 	mov	r1,#_serial_decrypt_buf_PARM_2
      0009C8 E2               [24] 2836 	movx	a,@r0
      0009C9 F3               [24] 2837 	movx	@r1,a
      0009CA 90r00r00         [24] 2838 	mov	dptr,#_pbuf
      0009CD 12r00r00         [24] 2839 	lcall	_serial_decrypt_buf
                                   2840 ;	radio/tdm.c:613: LED_ACTIVITY = LED_OFF;
      0009D0 C2 B6            [12] 2841 	clr	_LED_RED
      0009D2 02r07rAC         [24] 2842 	ljmp	00215$
      0009D5                       2843 00118$:
                                   2844 ;	radio/tdm.c:615: if (errors.crc_errors != 0xFFFF) {
      0009D5 78r0C            [12] 2845 	mov	r0,#(_errors + 0x000c)
      0009D7 E2               [24] 2846 	movx	a,@r0
      0009D8 FE               [12] 2847 	mov	r6,a
      0009D9 08               [12] 2848 	inc	r0
      0009DA E2               [24] 2849 	movx	a,@r0
      0009DB FF               [12] 2850 	mov	r7,a
      0009DC BE FF 06         [24] 2851 	cjne	r6,#0xFF,00414$
      0009DF BF FF 03         [24] 2852 	cjne	r7,#0xFF,00414$
      0009E2 02r07rAC         [24] 2853 	ljmp	00215$
      0009E5                       2854 00414$:
                                   2855 ;	radio/tdm.c:616: errors.crc_errors++; 
      0009E5 78r0C            [12] 2856 	mov	r0,#(_errors + 0x000c)
      0009E7 E2               [24] 2857 	movx	a,@r0
      0009E8 FE               [12] 2858 	mov	r6,a
      0009E9 08               [12] 2859 	inc	r0
      0009EA E2               [24] 2860 	movx	a,@r0
      0009EB FF               [12] 2861 	mov	r7,a
      0009EC 0E               [12] 2862 	inc	r6
      0009ED BE 00 01         [24] 2863 	cjne	r6,#0x00,00415$
      0009F0 0F               [12] 2864 	inc	r7
      0009F1                       2865 00415$:
      0009F1 78r0C            [12] 2866 	mov	r0,#(_errors + 0x000c)
      0009F3 EE               [12] 2867 	mov	a,r6
      0009F4 F2               [24] 2868 	movx	@r0,a
      0009F5 08               [12] 2869 	inc	r0
      0009F6 EF               [12] 2870 	mov	a,r7
      0009F7 F2               [24] 2871 	movx	@r0,a
                                   2872 ;	radio/tdm.c:627: continue;
      0009F8 02r07rAC         [24] 2873 	ljmp	00215$
      0009FB                       2874 00134$:
                                   2875 ;	radio/tdm.c:633: tnow = timer2_tick();
      0009FB 12r00r00         [24] 2876 	lcall	_timer2_tick
      0009FE AA 82            [24] 2877 	mov	r2,dpl
      000A00 AB 83            [24] 2878 	mov	r3,dph
                                   2879 ;	radio/tdm.c:634: tdelta = tnow - last_t;
      000A02 78r6C            [12] 2880 	mov	r0,#_tdm_serial_loop_last_t_1_219
      000A04 79r6A            [12] 2881 	mov	r1,#_tdm_serial_loop_tdelta_1_219
      000A06 D3               [12] 2882 	setb	c
      000A07 E2               [24] 2883 	movx	a,@r0
      000A08 9A               [12] 2884 	subb	a,r2
      000A09 F4               [12] 2885 	cpl	a
      000A0A B3               [12] 2886 	cpl	c
      000A0B F3               [24] 2887 	movx	@r1,a
      000A0C B3               [12] 2888 	cpl	c
      000A0D 08               [12] 2889 	inc	r0
      000A0E E2               [24] 2890 	movx	a,@r0
      000A0F 9B               [12] 2891 	subb	a,r3
      000A10 F4               [12] 2892 	cpl	a
      000A11 09               [12] 2893 	inc	r1
      000A12 F3               [24] 2894 	movx	@r1,a
                                   2895 ;	radio/tdm.c:635: tdm_state_update(tdelta);
      000A13 78r6A            [12] 2896 	mov	r0,#_tdm_serial_loop_tdelta_1_219
      000A15 E2               [24] 2897 	movx	a,@r0
      000A16 F5 82            [12] 2898 	mov	dpl,a
      000A18 08               [12] 2899 	inc	r0
      000A19 E2               [24] 2900 	movx	a,@r0
      000A1A F5 83            [12] 2901 	mov	dph,a
      000A1C C0 03            [24] 2902 	push	ar3
      000A1E C0 02            [24] 2903 	push	ar2
      000A20 12r02r73         [24] 2904 	lcall	_tdm_state_update
      000A23 D0 02            [24] 2905 	pop	ar2
      000A25 D0 03            [24] 2906 	pop	ar3
                                   2907 ;	radio/tdm.c:636: last_t = tnow;
      000A27 78r6C            [12] 2908 	mov	r0,#_tdm_serial_loop_last_t_1_219
      000A29 EA               [12] 2909 	mov	a,r2
      000A2A F2               [24] 2910 	movx	@r0,a
      000A2B 08               [12] 2911 	inc	r0
      000A2C EB               [12] 2912 	mov	a,r3
      000A2D F2               [24] 2913 	movx	@r0,a
                                   2914 ;	radio/tdm.c:639: if (tnow - last_link_update > 32768) {
      000A2E 78r6E            [12] 2915 	mov	r0,#_tdm_serial_loop_last_link_update_1_219
      000A30 D3               [12] 2916 	setb	c
      000A31 E2               [24] 2917 	movx	a,@r0
      000A32 9A               [12] 2918 	subb	a,r2
      000A33 F4               [12] 2919 	cpl	a
      000A34 B3               [12] 2920 	cpl	c
      000A35 FC               [12] 2921 	mov	r4,a
      000A36 B3               [12] 2922 	cpl	c
      000A37 08               [12] 2923 	inc	r0
      000A38 E2               [24] 2924 	movx	a,@r0
      000A39 9B               [12] 2925 	subb	a,r3
      000A3A F4               [12] 2926 	cpl	a
      000A3B FD               [12] 2927 	mov	r5,a
      000A3C 7E 00            [12] 2928 	mov	r6,#0x00
      000A3E 7F 00            [12] 2929 	mov	r7,#0x00
      000A40 C3               [12] 2930 	clr	c
      000A41 E4               [12] 2931 	clr	a
      000A42 9C               [12] 2932 	subb	a,r4
      000A43 74 80            [12] 2933 	mov	a,#0x80
      000A45 9D               [12] 2934 	subb	a,r5
      000A46 E4               [12] 2935 	clr	a
      000A47 9E               [12] 2936 	subb	a,r6
      000A48 74 80            [12] 2937 	mov	a,#(0x00 ^ 0x80)
      000A4A 8F F0            [24] 2938 	mov	b,r7
      000A4C 63 F0 80         [24] 2939 	xrl	b,#0x80
      000A4F 95 F0            [12] 2940 	subb	a,b
      000A51 50 12            [24] 2941 	jnc	00136$
                                   2942 ;	radio/tdm.c:640: link_update();
      000A53 C0 03            [24] 2943 	push	ar3
      000A55 C0 02            [24] 2944 	push	ar2
      000A57 12r05rA7         [24] 2945 	lcall	_link_update
      000A5A D0 02            [24] 2946 	pop	ar2
      000A5C D0 03            [24] 2947 	pop	ar3
                                   2948 ;	radio/tdm.c:641: last_link_update = tnow;
      000A5E 78r6E            [12] 2949 	mov	r0,#_tdm_serial_loop_last_link_update_1_219
      000A60 EA               [12] 2950 	mov	a,r2
      000A61 F2               [24] 2951 	movx	@r0,a
      000A62 08               [12] 2952 	inc	r0
      000A63 EB               [12] 2953 	mov	a,r3
      000A64 F2               [24] 2954 	movx	@r0,a
      000A65                       2955 00136$:
                                   2956 ;	radio/tdm.c:645: if (lbt_rssi != 0) {
      000A65 78r16            [12] 2957 	mov	r0,#_lbt_rssi
      000A67 E2               [24] 2958 	movx	a,@r0
      000A68 70 03            [24] 2959 	jnz	00417$
      000A6A 02r0ArEA         [24] 2960 	ljmp	00145$
      000A6D                       2961 00417$:
                                   2962 ;	radio/tdm.c:647: if (radio_current_rssi() < lbt_rssi) {
      000A6D 12r00r00         [24] 2963 	lcall	_radio_current_rssi
      000A70 AF 82            [24] 2964 	mov	r7,dpl
      000A72 78r16            [12] 2965 	mov	r0,#_lbt_rssi
      000A74 C3               [12] 2966 	clr	c
      000A75 E2               [24] 2967 	movx	a,@r0
      000A76 F5 F0            [12] 2968 	mov	b,a
      000A78 EF               [12] 2969 	mov	a,r7
      000A79 95 F0            [12] 2970 	subb	a,b
      000A7B 50 16            [24] 2971 	jnc	00140$
                                   2972 ;	radio/tdm.c:648: lbt_listen_time += tdelta;
      000A7D 78r17            [12] 2973 	mov	r0,#_lbt_listen_time
      000A7F 79r6A            [12] 2974 	mov	r1,#_tdm_serial_loop_tdelta_1_219
      000A81 E3               [24] 2975 	movx	a,@r1
      000A82 C5 F0            [12] 2976 	xch	a,b
      000A84 E2               [24] 2977 	movx	a,@r0
      000A85 25 F0            [12] 2978 	add	a,b
      000A87 F2               [24] 2979 	movx	@r0,a
      000A88 09               [12] 2980 	inc	r1
      000A89 E3               [24] 2981 	movx	a,@r1
      000A8A C5 F0            [12] 2982 	xch	a,b
      000A8C 08               [12] 2983 	inc	r0
      000A8D E2               [24] 2984 	movx	a,@r0
      000A8E 35 F0            [12] 2985 	addc	a,b
      000A90 F2               [24] 2986 	movx	@r0,a
      000A91 80 36            [24] 2987 	sjmp	00141$
      000A93                       2988 00140$:
                                   2989 ;	radio/tdm.c:650: lbt_listen_time = 0;
      000A93 78r17            [12] 2990 	mov	r0,#_lbt_listen_time
      000A95 E4               [12] 2991 	clr	a
      000A96 F2               [24] 2992 	movx	@r0,a
      000A97 08               [12] 2993 	inc	r0
      000A98 F2               [24] 2994 	movx	@r0,a
                                   2995 ;	radio/tdm.c:651: if (lbt_rand == 0) {
      000A99 78r1B            [12] 2996 	mov	r0,#_lbt_rand
      000A9B E2               [24] 2997 	movx	a,@r0
      000A9C F5 F0            [12] 2998 	mov	b,a
      000A9E 08               [12] 2999 	inc	r0
      000A9F E2               [24] 3000 	movx	a,@r0
      000AA0 45 F0            [12] 3001 	orl	a,b
      000AA2 70 25            [24] 3002 	jnz	00141$
                                   3003 ;	radio/tdm.c:652: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
      000AA4 12r00r00         [24] 3004 	lcall	_rand
      000AA7 AE 82            [24] 3005 	mov	r6,dpl
      000AA9 AF 83            [24] 3006 	mov	r7,dph
      000AAB 78r19            [12] 3007 	mov	r0,#_lbt_min_time
      000AAD 90r00r00         [24] 3008 	mov	dptr,#__moduint_PARM_2
      000AB0 E2               [24] 3009 	movx	a,@r0
      000AB1 F0               [24] 3010 	movx	@dptr,a
      000AB2 08               [12] 3011 	inc	r0
      000AB3 E2               [24] 3012 	movx	a,@r0
      000AB4 A3               [24] 3013 	inc	dptr
      000AB5 F0               [24] 3014 	movx	@dptr,a
      000AB6 8E 82            [24] 3015 	mov	dpl,r6
      000AB8 8F 83            [24] 3016 	mov	dph,r7
      000ABA 12r00r00         [24] 3017 	lcall	__moduint
      000ABD E5 82            [12] 3018 	mov	a,dpl
      000ABF 85 83 F0         [24] 3019 	mov	b,dph
      000AC2 78r1B            [12] 3020 	mov	r0,#_lbt_rand
      000AC4 F2               [24] 3021 	movx	@r0,a
      000AC5 08               [12] 3022 	inc	r0
      000AC6 E5 F0            [12] 3023 	mov	a,b
      000AC8 F2               [24] 3024 	movx	@r0,a
      000AC9                       3025 00141$:
                                   3026 ;	radio/tdm.c:655: if (lbt_listen_time < lbt_min_time + lbt_rand) {
      000AC9 78r19            [12] 3027 	mov	r0,#_lbt_min_time
      000ACB 79r1B            [12] 3028 	mov	r1,#_lbt_rand
      000ACD E3               [24] 3029 	movx	a,@r1
      000ACE C5 F0            [12] 3030 	xch	a,b
      000AD0 E2               [24] 3031 	movx	a,@r0
      000AD1 25 F0            [12] 3032 	add	a,b
      000AD3 FE               [12] 3033 	mov	r6,a
      000AD4 09               [12] 3034 	inc	r1
      000AD5 E3               [24] 3035 	movx	a,@r1
      000AD6 C5 F0            [12] 3036 	xch	a,b
      000AD8 08               [12] 3037 	inc	r0
      000AD9 E2               [24] 3038 	movx	a,@r0
      000ADA 35 F0            [12] 3039 	addc	a,b
      000ADC FF               [12] 3040 	mov	r7,a
      000ADD 78r17            [12] 3041 	mov	r0,#_lbt_listen_time
      000ADF C3               [12] 3042 	clr	c
      000AE0 E2               [24] 3043 	movx	a,@r0
      000AE1 9E               [12] 3044 	subb	a,r6
      000AE2 08               [12] 3045 	inc	r0
      000AE3 E2               [24] 3046 	movx	a,@r0
      000AE4 9F               [12] 3047 	subb	a,r7
      000AE5 50 03            [24] 3048 	jnc	00420$
      000AE7 02r07rAC         [24] 3049 	ljmp	00215$
      000AEA                       3050 00420$:
                                   3051 ;	radio/tdm.c:657: continue;
      000AEA                       3052 00145$:
                                   3053 ;	radio/tdm.c:665: if (tdm_state != TDM_TRANSMIT &&
      000AEA 78r00            [12] 3054 	mov	r0,#_tdm_state
      000AEC E2               [24] 3055 	movx	a,@r0
      000AED 60 11            [24] 3056 	jz	00147$
                                   3057 ;	radio/tdm.c:666: !(bonus_transmit && tdm_state == TDM_RECEIVE)) {
      000AEF 20*00 03         [24] 3058 	jb	_bonus_transmit,00422$
      000AF2 02r07rAC         [24] 3059 	ljmp	00215$
      000AF5                       3060 00422$:
      000AF5 78r00            [12] 3061 	mov	r0,#_tdm_state
      000AF7 E2               [24] 3062 	movx	a,@r0
      000AF8 B4 02 02         [24] 3063 	cjne	a,#0x02,00423$
      000AFB 80 03            [24] 3064 	sjmp	00424$
      000AFD                       3065 00423$:
      000AFD 02r07rAC         [24] 3066 	ljmp	00215$
      000B00                       3067 00424$:
                                   3068 ;	radio/tdm.c:668: continue;
      000B00                       3069 00147$:
                                   3070 ;	radio/tdm.c:676: if (transmit_yield != 0) {
      000B00 30*01 03         [24] 3071 	jnb	_transmit_yield,00425$
      000B03 02r07rAC         [24] 3072 	ljmp	00215$
      000B06                       3073 00425$:
                                   3074 ;	radio/tdm.c:681: if (transmit_wait != 0) {
      000B06 78r0C            [12] 3075 	mov	r0,#_transmit_wait
      000B08 E2               [24] 3076 	movx	a,@r0
      000B09 F5 F0            [12] 3077 	mov	b,a
      000B0B 08               [12] 3078 	inc	r0
      000B0C E2               [24] 3079 	movx	a,@r0
      000B0D 45 F0            [12] 3080 	orl	a,b
      000B0F 60 03            [24] 3081 	jz	00426$
      000B11 02r07rAC         [24] 3082 	ljmp	00215$
      000B14                       3083 00426$:
                                   3084 ;	radio/tdm.c:686: if (!received_packet &&
      000B14 20*03 05         [24] 3085 	jb	_received_packet,00157$
                                   3086 ;	radio/tdm.c:687: radio_preamble_detected() ||
      000B17 12r00r00         [24] 3087 	lcall	_radio_preamble_detected
      000B1A 40 05            [24] 3088 	jc	00154$
      000B1C                       3089 00157$:
                                   3090 ;	radio/tdm.c:688: radio_receive_in_progress()) {
      000B1C 12r00r00         [24] 3091 	lcall	_radio_receive_in_progress
      000B1F 50 11            [24] 3092 	jnc	00155$
      000B21                       3093 00154$:
                                   3094 ;	radio/tdm.c:691: transmit_wait = packet_latency;
      000B21 78r08            [12] 3095 	mov	r0,#_packet_latency
      000B23 E2               [24] 3096 	movx	a,@r0
      000B24 FE               [12] 3097 	mov	r6,a
      000B25 08               [12] 3098 	inc	r0
      000B26 E2               [24] 3099 	movx	a,@r0
      000B27 FF               [12] 3100 	mov	r7,a
      000B28 78r0C            [12] 3101 	mov	r0,#_transmit_wait
      000B2A EE               [12] 3102 	mov	a,r6
      000B2B F2               [24] 3103 	movx	@r0,a
      000B2C 08               [12] 3104 	inc	r0
      000B2D EF               [12] 3105 	mov	a,r7
      000B2E F2               [24] 3106 	movx	@r0,a
                                   3107 ;	radio/tdm.c:692: continue;
      000B2F 02r07rAC         [24] 3108 	ljmp	00215$
      000B32                       3109 00155$:
                                   3110 ;	radio/tdm.c:698: statistics.average_noise = (radio_current_rssi() + 3*(uint16_t)statistics.average_noise)/4;
      000B32 12r00r00         [24] 3111 	lcall	_radio_current_rssi
      000B35 AF 82            [24] 3112 	mov	r7,dpl
      000B37 7E 00            [12] 3113 	mov	r6,#0x00
      000B39 78r01            [12] 3114 	mov	r0,#(_statistics + 0x0001)
      000B3B E2               [24] 3115 	movx	a,@r0
      000B3C 90r00r00         [24] 3116 	mov	dptr,#__mulint_PARM_2
      000B3F F0               [24] 3117 	movx	@dptr,a
      000B40 E4               [12] 3118 	clr	a
      000B41 A3               [24] 3119 	inc	dptr
      000B42 F0               [24] 3120 	movx	@dptr,a
      000B43 90 00 03         [24] 3121 	mov	dptr,#0x0003
      000B46 C0 07            [24] 3122 	push	ar7
      000B48 C0 06            [24] 3123 	push	ar6
      000B4A 12r00r00         [24] 3124 	lcall	__mulint
      000B4D AC 82            [24] 3125 	mov	r4,dpl
      000B4F AD 83            [24] 3126 	mov	r5,dph
      000B51 D0 06            [24] 3127 	pop	ar6
      000B53 D0 07            [24] 3128 	pop	ar7
      000B55 EC               [12] 3129 	mov	a,r4
      000B56 2F               [12] 3130 	add	a,r7
      000B57 FC               [12] 3131 	mov	r4,a
      000B58 ED               [12] 3132 	mov	a,r5
      000B59 3E               [12] 3133 	addc	a,r6
      000B5A C3               [12] 3134 	clr	c
      000B5B 13               [12] 3135 	rrc	a
      000B5C CC               [12] 3136 	xch	a,r4
      000B5D 13               [12] 3137 	rrc	a
      000B5E CC               [12] 3138 	xch	a,r4
      000B5F C3               [12] 3139 	clr	c
      000B60 13               [12] 3140 	rrc	a
      000B61 CC               [12] 3141 	xch	a,r4
      000B62 13               [12] 3142 	rrc	a
      000B63 CC               [12] 3143 	xch	a,r4
      000B64 FD               [12] 3144 	mov	r5,a
      000B65 78r01            [12] 3145 	mov	r0,#(_statistics + 0x0001)
      000B67 EC               [12] 3146 	mov	a,r4
      000B68 F2               [24] 3147 	movx	@r0,a
                                   3148 ;	radio/tdm.c:700: if (duty_cycle_wait) {
      000B69 30*04 03         [24] 3149 	jnb	_duty_cycle_wait,00430$
      000B6C 02r07rAC         [24] 3150 	ljmp	00215$
      000B6F                       3151 00430$:
                                   3152 ;	radio/tdm.c:707: if (tdm_state_remaining < packet_latency) {
      000B6F 78r01            [12] 3153 	mov	r0,#_tdm_state_remaining
      000B71 79r08            [12] 3154 	mov	r1,#_packet_latency
      000B73 C3               [12] 3155 	clr	c
      000B74 E3               [24] 3156 	movx	a,@r1
      000B75 F5 F0            [12] 3157 	mov	b,a
      000B77 E2               [24] 3158 	movx	a,@r0
      000B78 95 F0            [12] 3159 	subb	a,b
      000B7A 09               [12] 3160 	inc	r1
      000B7B E3               [24] 3161 	movx	a,@r1
      000B7C F5 F0            [12] 3162 	mov	b,a
      000B7E 08               [12] 3163 	inc	r0
      000B7F E2               [24] 3164 	movx	a,@r0
      000B80 95 F0            [12] 3165 	subb	a,b
      000B82 50 03            [24] 3166 	jnc	00431$
      000B84 02r07rAC         [24] 3167 	ljmp	00215$
      000B87                       3168 00431$:
                                   3169 ;	radio/tdm.c:711: max_xmit = (tdm_state_remaining - packet_latency) / ticks_per_byte;
      000B87 78r01            [12] 3170 	mov	r0,#_tdm_state_remaining
      000B89 79r08            [12] 3171 	mov	r1,#_packet_latency
      000B8B E3               [24] 3172 	movx	a,@r1
      000B8C F5 F0            [12] 3173 	mov	b,a
      000B8E C3               [12] 3174 	clr	c
      000B8F E2               [24] 3175 	movx	a,@r0
      000B90 95 F0            [12] 3176 	subb	a,b
      000B92 FE               [12] 3177 	mov	r6,a
      000B93 09               [12] 3178 	inc	r1
      000B94 E3               [24] 3179 	movx	a,@r1
      000B95 F5 F0            [12] 3180 	mov	b,a
      000B97 08               [12] 3181 	inc	r0
      000B98 E2               [24] 3182 	movx	a,@r0
      000B99 95 F0            [12] 3183 	subb	a,b
      000B9B FF               [12] 3184 	mov	r7,a
      000B9C 78r0A            [12] 3185 	mov	r0,#_ticks_per_byte
      000B9E 90r00r00         [24] 3186 	mov	dptr,#__divuint_PARM_2
      000BA1 E2               [24] 3187 	movx	a,@r0
      000BA2 F0               [24] 3188 	movx	@dptr,a
      000BA3 08               [12] 3189 	inc	r0
      000BA4 E2               [24] 3190 	movx	a,@r0
      000BA5 A3               [24] 3191 	inc	dptr
      000BA6 F0               [24] 3192 	movx	@dptr,a
      000BA7 8E 82            [24] 3193 	mov	dpl,r6
      000BA9 8F 83            [24] 3194 	mov	dph,r7
      000BAB 12r00r00         [24] 3195 	lcall	__divuint
      000BAE AE 82            [24] 3196 	mov	r6,dpl
      000BB0 AF 83            [24] 3197 	mov	r7,dph
                                   3198 ;	radio/tdm.c:712: if (max_xmit < PACKET_OVERHEAD) {
      000BB2 BE 14 00         [24] 3199 	cjne	r6,#0x14,00432$
      000BB5                       3200 00432$:
      000BB5 50 03            [24] 3201 	jnc	00433$
      000BB7 02r07rAC         [24] 3202 	ljmp	00215$
      000BBA                       3203 00433$:
                                   3204 ;	radio/tdm.c:717: max_xmit -= sizeof(trailer)+1;
      000BBA EE               [12] 3205 	mov	a,r6
      000BBB 24 FB            [12] 3206 	add	a,#0xFB
      000BBD FE               [12] 3207 	mov	r6,a
                                   3208 ;	radio/tdm.c:720: if (aes_get_encryption_level() > 0) {
      000BBE C0 06            [24] 3209 	push	ar6
      000BC0 12r00r00         [24] 3210 	lcall	_aes_get_encryption_level
      000BC3 E5 82            [12] 3211 	mov	a,dpl
      000BC5 D0 06            [24] 3212 	pop	ar6
      000BC7 60 0C            [24] 3213 	jz	00167$
                                   3214 ;	radio/tdm.c:721: if (max_xmit < 16) {
      000BC9 BE 10 00         [24] 3215 	cjne	r6,#0x10,00435$
      000BCC                       3216 00435$:
      000BCC 50 03            [24] 3217 	jnc	00436$
      000BCE 02r07rAC         [24] 3218 	ljmp	00215$
      000BD1                       3219 00436$:
                                   3220 ;	radio/tdm.c:727: max_xmit -= 16;
      000BD1 EE               [12] 3221 	mov	a,r6
      000BD2 24 F0            [12] 3222 	add	a,#0xF0
      000BD4 FE               [12] 3223 	mov	r6,a
      000BD5                       3224 00167$:
                                   3225 ;	radio/tdm.c:731: if (max_xmit > max_data_packet_length) {
      000BD5 78r05            [12] 3226 	mov	r0,#_max_data_packet_length
      000BD7 C3               [12] 3227 	clr	c
      000BD8 E2               [24] 3228 	movx	a,@r0
      000BD9 9E               [12] 3229 	subb	a,r6
      000BDA 50 04            [24] 3230 	jnc	00169$
                                   3231 ;	radio/tdm.c:732: max_xmit = max_data_packet_length;
      000BDC 78r05            [12] 3232 	mov	r0,#_max_data_packet_length
      000BDE E2               [24] 3233 	movx	a,@r0
      000BDF FE               [12] 3234 	mov	r6,a
      000BE0                       3235 00169$:
                                   3236 ;	radio/tdm.c:741: if (send_at_command && 
      000BE0 30*06 57         [24] 3237 	jnb	_send_at_command,00174$
                                   3238 ;	radio/tdm.c:742: max_xmit >= strlen(remote_at_cmd)) {
      000BE3 90r00r21         [24] 3239 	mov	dptr,#_remote_at_cmd
      000BE6 75 F0 60         [24] 3240 	mov	b,#0x60
      000BE9 C0 06            [24] 3241 	push	ar6
      000BEB 12r00r00         [24] 3242 	lcall	_strlen
      000BEE AD 82            [24] 3243 	mov	r5,dpl
      000BF0 AF 83            [24] 3244 	mov	r7,dph
      000BF2 D0 06            [24] 3245 	pop	ar6
      000BF4 8E 03            [24] 3246 	mov	ar3,r6
      000BF6 7C 00            [12] 3247 	mov	r4,#0x00
      000BF8 C3               [12] 3248 	clr	c
      000BF9 EB               [12] 3249 	mov	a,r3
      000BFA 9D               [12] 3250 	subb	a,r5
      000BFB EC               [12] 3251 	mov	a,r4
      000BFC 9F               [12] 3252 	subb	a,r7
      000BFD 40 3B            [24] 3253 	jc	00174$
                                   3254 ;	radio/tdm.c:744: len = strlen(remote_at_cmd);
      000BFF 90r00r21         [24] 3255 	mov	dptr,#_remote_at_cmd
      000C02 75 F0 60         [24] 3256 	mov	b,#0x60
      000C05 C0 06            [24] 3257 	push	ar6
      000C07 12r00r00         [24] 3258 	lcall	_strlen
      000C0A AD 82            [24] 3259 	mov	r5,dpl
      000C0C 78r69            [12] 3260 	mov	r0,#_tdm_serial_loop_len_1_219
      000C0E ED               [12] 3261 	mov	a,r5
      000C0F F2               [24] 3262 	movx	@r0,a
                                   3263 ;	radio/tdm.c:745: memcpy(pbuf, remote_at_cmd, len);
      000C10 90r00r00         [24] 3264 	mov	dptr,#_memcpy_PARM_2
      000C13 74r21            [12] 3265 	mov	a,#_remote_at_cmd
      000C15 F0               [24] 3266 	movx	@dptr,a
      000C16 E4               [12] 3267 	clr	a
      000C17 A3               [24] 3268 	inc	dptr
      000C18 F0               [24] 3269 	movx	@dptr,a
      000C19 74 60            [12] 3270 	mov	a,#0x60
      000C1B A3               [24] 3271 	inc	dptr
      000C1C F0               [24] 3272 	movx	@dptr,a
      000C1D 90r00r00         [24] 3273 	mov	dptr,#_memcpy_PARM_3
      000C20 ED               [12] 3274 	mov	a,r5
      000C21 F0               [24] 3275 	movx	@dptr,a
      000C22 E4               [12] 3276 	clr	a
      000C23 A3               [24] 3277 	inc	dptr
      000C24 F0               [24] 3278 	movx	@dptr,a
      000C25 90r00r00         [24] 3279 	mov	dptr,#_pbuf
      000C28 75 F0 00         [24] 3280 	mov	b,#0x00
      000C2B 12r00r00         [24] 3281 	lcall	_memcpy
      000C2E D0 06            [24] 3282 	pop	ar6
                                   3283 ;	radio/tdm.c:746: trailer.command = 1;
      000C30 78r1E            [12] 3284 	mov	r0,#(_trailer + 0x0001)
      000C32 E2               [24] 3285 	movx	a,@r0
      000C33 44 20            [12] 3286 	orl	a,#0x20
      000C35 F2               [24] 3287 	movx	@r0,a
                                   3288 ;	radio/tdm.c:747: send_at_command = false;
      000C36 C2*06            [12] 3289 	clr	_send_at_command
      000C38 80 55            [24] 3290 	sjmp	00175$
      000C3A                       3291 00174$:
                                   3292 ;	radio/tdm.c:750: len = packet_get_next(max_xmit, pbuf);
      000C3A 90r00r00         [24] 3293 	mov	dptr,#_packet_get_next_PARM_2
      000C3D 74r00            [12] 3294 	mov	a,#_pbuf
      000C3F F0               [24] 3295 	movx	@dptr,a
      000C40 74s00            [12] 3296 	mov	a,#(_pbuf >> 8)
      000C42 A3               [24] 3297 	inc	dptr
      000C43 F0               [24] 3298 	movx	@dptr,a
      000C44 8E 82            [24] 3299 	mov	dpl,r6
      000C46 C0 06            [24] 3300 	push	ar6
      000C48 12r00r00         [24] 3301 	lcall	_packet_get_next
      000C4B AF 82            [24] 3302 	mov	r7,dpl
      000C4D D0 06            [24] 3303 	pop	ar6
      000C4F 78r69            [12] 3304 	mov	r0,#_tdm_serial_loop_len_1_219
      000C51 EF               [12] 3305 	mov	a,r7
      000C52 F2               [24] 3306 	movx	@r0,a
                                   3307 ;	radio/tdm.c:752: if (len > 0) {
      000C53 EF               [12] 3308 	mov	a,r7
      000C54 60 19            [24] 3309 	jz	00171$
                                   3310 ;	radio/tdm.c:753: trailer.command = packet_is_injected();
      000C56 C0 07            [24] 3311 	push	ar7
      000C58 C0 06            [24] 3312 	push	ar6
      000C5A 12r00r00         [24] 3313 	lcall	_packet_is_injected
      000C5D D0 06            [24] 3314 	pop	ar6
      000C5F D0 07            [24] 3315 	pop	ar7
      000C61 92*09            [24] 3316 	mov  _tdm_serial_loop_sloc0_1_0,c
      000C63 E4               [12] 3317 	clr	a
      000C64 33               [12] 3318 	rlc	a
      000C65 FD               [12] 3319 	mov	r5,a
      000C66 78r1E            [12] 3320 	mov	r0,#(_trailer + 0x0001)
      000C68 13               [12] 3321 	rrc	a
      000C69 E2               [24] 3322 	movx	a,@r0
      000C6A 92 E5            [24] 3323 	mov	acc.5,c
      000C6C F2               [24] 3324 	movx	@r0,a
      000C6D 80 06            [24] 3325 	sjmp	00172$
      000C6F                       3326 00171$:
                                   3327 ;	radio/tdm.c:755: trailer.command = 0;
      000C6F 78r1E            [12] 3328 	mov	r0,#(_trailer + 0x0001)
      000C71 E2               [24] 3329 	movx	a,@r0
      000C72 54 DF            [12] 3330 	anl	a,#0xDF
      000C74 F2               [24] 3331 	movx	@r0,a
      000C75                       3332 00172$:
                                   3333 ;	radio/tdm.c:758: trailer.crc = crc16(len, pbuf);
      000C75 75*00r00         [24] 3334 	mov	_crc16_PARM_2,#_pbuf
      000C78 75*01s00         [24] 3335 	mov	(_crc16_PARM_2 + 1),#(_pbuf >> 8)
      000C7B 8F 82            [24] 3336 	mov	dpl,r7
      000C7D C0 06            [24] 3337 	push	ar6
      000C7F 12r00r00         [24] 3338 	lcall	_crc16
      000C82 AD 82            [24] 3339 	mov	r5,dpl
      000C84 AF 83            [24] 3340 	mov	r7,dph
      000C86 D0 06            [24] 3341 	pop	ar6
      000C88 78r1F            [12] 3342 	mov	r0,#(_trailer + 0x0002)
      000C8A ED               [12] 3343 	mov	a,r5
      000C8B F2               [24] 3344 	movx	@r0,a
      000C8C 08               [12] 3345 	inc	r0
      000C8D EF               [12] 3346 	mov	a,r7
      000C8E F2               [24] 3347 	movx	@r0,a
      000C8F                       3348 00175$:
                                   3349 ;	radio/tdm.c:762: if (len > max_data_packet_length) {
      000C8F 78r69            [12] 3350 	mov	r0,#_tdm_serial_loop_len_1_219
      000C91 79r05            [12] 3351 	mov	r1,#_max_data_packet_length
      000C93 C3               [12] 3352 	clr	c
      000C94 E2               [24] 3353 	movx	a,@r0
      000C95 F5 F0            [12] 3354 	mov	b,a
      000C97 E3               [24] 3355 	movx	a,@r1
      000C98 95 F0            [12] 3356 	subb	a,b
      000C9A 50 19            [24] 3357 	jnc	00178$
                                   3358 ;	radio/tdm.c:763: panic("oversized tdm packet");
      000C9C C0 06            [24] 3359 	push	ar6
      000C9E 74rD6            [12] 3360 	mov	a,#___str_8
      000CA0 C0 E0            [24] 3361 	push	acc
      000CA2 74s00            [12] 3362 	mov	a,#(___str_8 >> 8)
      000CA4 C0 E0            [24] 3363 	push	acc
      000CA6 74 80            [12] 3364 	mov	a,#0x80
      000CA8 C0 E0            [24] 3365 	push	acc
      000CAA 12r00r00         [24] 3366 	lcall	_panic
      000CAD 15 81            [12] 3367 	dec	sp
      000CAF 15 81            [12] 3368 	dec	sp
      000CB1 15 81            [12] 3369 	dec	sp
      000CB3 D0 06            [24] 3370 	pop	ar6
      000CB5                       3371 00178$:
                                   3372 ;	radio/tdm.c:766: trailer.bonus = (tdm_state == TDM_RECEIVE);
      000CB5 78r00            [12] 3373 	mov	r0,#_tdm_state
      000CB7 E2               [24] 3374 	movx	a,@r0
      000CB8 B4 02 03         [24] 3375 	cjne	a,#0x02,00442$
      000CBB D3               [12] 3376 	setb	c
      000CBC 80 01            [24] 3377 	sjmp	00443$
      000CBE                       3378 00442$:
      000CBE C3               [12] 3379 	clr	c
      000CBF                       3380 00443$:
      000CBF 92*09            [24] 3381 	mov  _tdm_serial_loop_sloc0_1_0,c
      000CC1 E4               [12] 3382 	clr	a
      000CC2 33               [12] 3383 	rlc	a
      000CC3 78r1E            [12] 3384 	mov	r0,#(_trailer + 0x0001)
      000CC5 13               [12] 3385 	rrc	a
      000CC6 E2               [24] 3386 	movx	a,@r0
      000CC7 92 E6            [24] 3387 	mov	acc.6,c
      000CC9 F2               [24] 3388 	movx	@r0,a
                                   3389 ;	radio/tdm.c:767: trailer.resend = packet_is_resend();
      000CCA C0 06            [24] 3390 	push	ar6
      000CCC 12r00r00         [24] 3391 	lcall	_packet_is_resend
      000CCF D0 06            [24] 3392 	pop	ar6
      000CD1 92*09            [24] 3393 	mov  _tdm_serial_loop_sloc0_1_0,c
      000CD3 E4               [12] 3394 	clr	a
      000CD4 33               [12] 3395 	rlc	a
      000CD5 FF               [12] 3396 	mov	r7,a
      000CD6 78r1E            [12] 3397 	mov	r0,#(_trailer + 0x0001)
      000CD8 13               [12] 3398 	rrc	a
      000CD9 E2               [24] 3399 	movx	a,@r0
      000CDA 92 E7            [24] 3400 	mov	acc.7,c
      000CDC F2               [24] 3401 	movx	@r0,a
                                   3402 ;	radio/tdm.c:769: if (tdm_state == TDM_TRANSMIT &&
      000CDD 78r00            [12] 3403 	mov	r0,#_tdm_state
      000CDF E2               [24] 3404 	movx	a,@r0
      000CE0 70 44            [24] 3405 	jnz	00183$
                                   3406 ;	radio/tdm.c:770: len == 0 &&
      000CE2 78r69            [12] 3407 	mov	r0,#_tdm_serial_loop_len_1_219
      000CE4 E2               [24] 3408 	movx	a,@r0
      000CE5 70 3F            [24] 3409 	jnz	00183$
                                   3410 ;	radio/tdm.c:771: send_statistics &&
      000CE7 30*05 3C         [24] 3411 	jnb	_send_statistics,00183$
                                   3412 ;	radio/tdm.c:772: max_xmit >= sizeof(statistics)) {
      000CEA BE 04 00         [24] 3413 	cjne	r6,#0x04,00447$
      000CED                       3414 00447$:
      000CED 40 37            [24] 3415 	jc	00183$
                                   3416 ;	radio/tdm.c:774: send_statistics = 0;
      000CEF C2*05            [12] 3417 	clr	_send_statistics
                                   3418 ;	radio/tdm.c:775: memcpy(pbuf, &statistics, sizeof(statistics));
      000CF1 90r00r00         [24] 3419 	mov	dptr,#_memcpy_PARM_2
      000CF4 74r00            [12] 3420 	mov	a,#_statistics
      000CF6 F0               [24] 3421 	movx	@dptr,a
      000CF7 E4               [12] 3422 	clr	a
      000CF8 A3               [24] 3423 	inc	dptr
      000CF9 F0               [24] 3424 	movx	@dptr,a
      000CFA 74 60            [12] 3425 	mov	a,#0x60
      000CFC A3               [24] 3426 	inc	dptr
      000CFD F0               [24] 3427 	movx	@dptr,a
      000CFE 90r00r00         [24] 3428 	mov	dptr,#_memcpy_PARM_3
      000D01 74 04            [12] 3429 	mov	a,#0x04
      000D03 F0               [24] 3430 	movx	@dptr,a
      000D04 E4               [12] 3431 	clr	a
      000D05 A3               [24] 3432 	inc	dptr
      000D06 F0               [24] 3433 	movx	@dptr,a
      000D07 90r00r00         [24] 3434 	mov	dptr,#_pbuf
      000D0A 75 F0 00         [24] 3435 	mov	b,#0x00
      000D0D 12r00r00         [24] 3436 	lcall	_memcpy
                                   3437 ;	radio/tdm.c:776: len = sizeof(statistics);
      000D10 78r69            [12] 3438 	mov	r0,#_tdm_serial_loop_len_1_219
      000D12 74 04            [12] 3439 	mov	a,#0x04
      000D14 F2               [24] 3440 	movx	@r0,a
                                   3441 ;	radio/tdm.c:779: trailer.window = 0;
      000D15 78r1D            [12] 3442 	mov	r0,#_trailer
      000D17 E4               [12] 3443 	clr	a
      000D18 F2               [24] 3444 	movx	@r0,a
      000D19 08               [12] 3445 	inc	r0
      000D1A E2               [24] 3446 	movx	a,@r0
      000D1B 54 E0            [12] 3447 	anl	a,#0xE0
      000D1D F2               [24] 3448 	movx	@r0,a
                                   3449 ;	radio/tdm.c:780: trailer.resend = 0;
      000D1E 78r1E            [12] 3450 	mov	r0,#(_trailer + 0x0001)
      000D20 E2               [24] 3451 	movx	a,@r0
      000D21 54 7F            [12] 3452 	anl	a,#0x7F
      000D23 F2               [24] 3453 	movx	@r0,a
      000D24 80 77            [24] 3454 	sjmp	00184$
      000D26                       3455 00183$:
                                   3456 ;	radio/tdm.c:787: if (aes_get_encryption_level() > 0) {
      000D26 12r00r00         [24] 3457 	lcall	_aes_get_encryption_level
      000D29 E5 82            [12] 3458 	mov	a,dpl
      000D2B 60 48            [24] 3459 	jz	00180$
                                   3460 ;	radio/tdm.c:789: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(16 * (1 + (len+sizeof(trailer)>>4))));
      000D2D 78r69            [12] 3461 	mov	r0,#_tdm_serial_loop_len_1_219
      000D2F E2               [24] 3462 	movx	a,@r0
      000D30 FE               [12] 3463 	mov	r6,a
      000D31 7F 00            [12] 3464 	mov	r7,#0x00
      000D33 74 04            [12] 3465 	mov	a,#0x04
      000D35 2E               [12] 3466 	add	a,r6
      000D36 FE               [12] 3467 	mov	r6,a
      000D37 E4               [12] 3468 	clr	a
      000D38 3F               [12] 3469 	addc	a,r7
      000D39 FF               [12] 3470 	mov	r7,a
      000D3A C4               [12] 3471 	swap	a
      000D3B CE               [12] 3472 	xch	a,r6
      000D3C C4               [12] 3473 	swap	a
      000D3D 54 0F            [12] 3474 	anl	a,#0x0F
      000D3F 6E               [12] 3475 	xrl	a,r6
      000D40 CE               [12] 3476 	xch	a,r6
      000D41 54 0F            [12] 3477 	anl	a,#0x0F
      000D43 CE               [12] 3478 	xch	a,r6
      000D44 6E               [12] 3479 	xrl	a,r6
      000D45 CE               [12] 3480 	xch	a,r6
      000D46 30 E3 02         [24] 3481 	jnb	acc.3,00450$
      000D49 44 F0            [12] 3482 	orl	a,#0xF0
      000D4B                       3483 00450$:
      000D4B 0E               [12] 3484 	inc	r6
      000D4C EE               [12] 3485 	mov	a,r6
      000D4D C4               [12] 3486 	swap	a
      000D4E 54 F0            [12] 3487 	anl	a,#0xF0
      000D50 F5 82            [12] 3488 	mov	dpl,a
      000D52 12r00rEA         [24] 3489 	lcall	_flight_time_estimate
      000D55 AE 82            [24] 3490 	mov	r6,dpl
      000D57 AF 83            [24] 3491 	mov	r7,dph
      000D59 78r01            [12] 3492 	mov	r0,#_tdm_state_remaining
      000D5B E2               [24] 3493 	movx	a,@r0
      000D5C C3               [12] 3494 	clr	c
      000D5D 9E               [12] 3495 	subb	a,r6
      000D5E FE               [12] 3496 	mov	r6,a
      000D5F 08               [12] 3497 	inc	r0
      000D60 E2               [24] 3498 	movx	a,@r0
      000D61 9F               [12] 3499 	subb	a,r7
      000D62 FF               [12] 3500 	mov	r7,a
      000D63 78r1D            [12] 3501 	mov	r0,#_trailer
      000D65 EE               [12] 3502 	mov	a,r6
      000D66 F2               [24] 3503 	movx	@r0,a
      000D67 08               [12] 3504 	inc	r0
      000D68 EF               [12] 3505 	mov	a,r7
      000D69 54 1F            [12] 3506 	anl	a,#0x1F
      000D6B F5 F0            [12] 3507 	mov	b,a
      000D6D E2               [24] 3508 	movx	a,@r0
      000D6E 54 E0            [12] 3509 	anl	a,#0xE0
      000D70 45 F0            [12] 3510 	orl	a,b
      000D72 F2               [24] 3511 	movx	@r0,a
      000D73 80 28            [24] 3512 	sjmp	00184$
      000D75                       3513 00180$:
                                   3514 ;	radio/tdm.c:791: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));		
      000D75 78r69            [12] 3515 	mov	r0,#_tdm_serial_loop_len_1_219
      000D77 E2               [24] 3516 	movx	a,@r0
      000D78 24 04            [12] 3517 	add	a,#0x04
      000D7A F5 82            [12] 3518 	mov	dpl,a
      000D7C 12r00rEA         [24] 3519 	lcall	_flight_time_estimate
      000D7F AE 82            [24] 3520 	mov	r6,dpl
      000D81 AF 83            [24] 3521 	mov	r7,dph
      000D83 78r01            [12] 3522 	mov	r0,#_tdm_state_remaining
      000D85 E2               [24] 3523 	movx	a,@r0
      000D86 C3               [12] 3524 	clr	c
      000D87 9E               [12] 3525 	subb	a,r6
      000D88 FE               [12] 3526 	mov	r6,a
      000D89 08               [12] 3527 	inc	r0
      000D8A E2               [24] 3528 	movx	a,@r0
      000D8B 9F               [12] 3529 	subb	a,r7
      000D8C FF               [12] 3530 	mov	r7,a
      000D8D 78r1D            [12] 3531 	mov	r0,#_trailer
      000D8F EE               [12] 3532 	mov	a,r6
      000D90 F2               [24] 3533 	movx	@r0,a
      000D91 08               [12] 3534 	inc	r0
      000D92 EF               [12] 3535 	mov	a,r7
      000D93 54 1F            [12] 3536 	anl	a,#0x1F
      000D95 F5 F0            [12] 3537 	mov	b,a
      000D97 E2               [24] 3538 	movx	a,@r0
      000D98 54 E0            [12] 3539 	anl	a,#0xE0
      000D9A 45 F0            [12] 3540 	orl	a,b
      000D9C F2               [24] 3541 	movx	@r0,a
      000D9D                       3542 00184$:
                                   3543 ;	radio/tdm.c:799: radio_set_channel(fhop_transmit_channel());
      000D9D 12r00r00         [24] 3544 	lcall	_fhop_transmit_channel
      000DA0 12r00r00         [24] 3545 	lcall	_radio_set_channel
                                   3546 ;	radio/tdm.c:801: memcpy(&pbuf[len], &trailer, sizeof(trailer));
      000DA3 78r69            [12] 3547 	mov	r0,#_tdm_serial_loop_len_1_219
      000DA5 E2               [24] 3548 	movx	a,@r0
      000DA6 24r00            [12] 3549 	add	a,#_pbuf
      000DA8 FE               [12] 3550 	mov	r6,a
      000DA9 E4               [12] 3551 	clr	a
      000DAA 34s00            [12] 3552 	addc	a,#(_pbuf >> 8)
      000DAC FF               [12] 3553 	mov	r7,a
      000DAD 7D 00            [12] 3554 	mov	r5,#0x00
      000DAF 90r00r00         [24] 3555 	mov	dptr,#_memcpy_PARM_2
      000DB2 74r1D            [12] 3556 	mov	a,#_trailer
      000DB4 F0               [24] 3557 	movx	@dptr,a
      000DB5 E4               [12] 3558 	clr	a
      000DB6 A3               [24] 3559 	inc	dptr
      000DB7 F0               [24] 3560 	movx	@dptr,a
      000DB8 74 60            [12] 3561 	mov	a,#0x60
      000DBA A3               [24] 3562 	inc	dptr
      000DBB F0               [24] 3563 	movx	@dptr,a
      000DBC 90r00r00         [24] 3564 	mov	dptr,#_memcpy_PARM_3
      000DBF 74 04            [12] 3565 	mov	a,#0x04
      000DC1 F0               [24] 3566 	movx	@dptr,a
      000DC2 E4               [12] 3567 	clr	a
      000DC3 A3               [24] 3568 	inc	dptr
      000DC4 F0               [24] 3569 	movx	@dptr,a
      000DC5 8E 82            [24] 3570 	mov	dpl,r6
      000DC7 8F 83            [24] 3571 	mov	dph,r7
      000DC9 8D F0            [24] 3572 	mov	b,r5
      000DCB 12r00r00         [24] 3573 	lcall	_memcpy
                                   3574 ;	radio/tdm.c:803: if (len != 0 && trailer.window != 0) {
      000DCE 78r69            [12] 3575 	mov	r0,#_tdm_serial_loop_len_1_219
      000DD0 E2               [24] 3576 	movx	a,@r0
      000DD1 60 0E            [24] 3577 	jz	00189$
      000DD3 78r1D            [12] 3578 	mov	r0,#_trailer
      000DD5 E2               [24] 3579 	movx	a,@r0
      000DD6 FE               [12] 3580 	mov	r6,a
      000DD7 08               [12] 3581 	inc	r0
      000DD8 E2               [24] 3582 	movx	a,@r0
      000DD9 54 1F            [12] 3583 	anl	a,#0x1F
      000DDB FF               [12] 3584 	mov	r7,a
      000DDC 4E               [12] 3585 	orl	a,r6
      000DDD 60 02            [24] 3586 	jz	00189$
                                   3587 ;	radio/tdm.c:805: LED_ACTIVITY = LED_ON;
      000DDF D2 B6            [12] 3588 	setb	_LED_RED
      000DE1                       3589 00189$:
                                   3590 ;	radio/tdm.c:808: if (len == 0) {
      000DE1 78r69            [12] 3591 	mov	r0,#_tdm_serial_loop_len_1_219
      000DE3 E2               [24] 3592 	movx	a,@r0
      000DE4 70 02            [24] 3593 	jnz	00192$
                                   3594 ;	radio/tdm.c:812: transmit_yield = 1;
      000DE6 D2*01            [12] 3595 	setb	_transmit_yield
      000DE8                       3596 00192$:
                                   3597 ;	radio/tdm.c:818: transmit_wait = packet_latency;
      000DE8 78r08            [12] 3598 	mov	r0,#_packet_latency
      000DEA E2               [24] 3599 	movx	a,@r0
      000DEB FE               [12] 3600 	mov	r6,a
      000DEC 08               [12] 3601 	inc	r0
      000DED E2               [24] 3602 	movx	a,@r0
      000DEE FF               [12] 3603 	mov	r7,a
      000DEF 78r0C            [12] 3604 	mov	r0,#_transmit_wait
      000DF1 EE               [12] 3605 	mov	a,r6
      000DF2 F2               [24] 3606 	movx	@r0,a
      000DF3 08               [12] 3607 	inc	r0
      000DF4 EF               [12] 3608 	mov	a,r7
      000DF5 F2               [24] 3609 	movx	@r0,a
                                   3610 ;	radio/tdm.c:822: if ((duty_cycle - duty_cycle_offset) != 100) {
      000DF6 78r0E            [12] 3611 	mov	r0,#_duty_cycle
      000DF8 E2               [24] 3612 	movx	a,@r0
      000DF9 FE               [12] 3613 	mov	r6,a
      000DFA 7F 00            [12] 3614 	mov	r7,#0x00
      000DFC 78r13            [12] 3615 	mov	r0,#_duty_cycle_offset
      000DFE E2               [24] 3616 	movx	a,@r0
      000DFF FC               [12] 3617 	mov	r4,a
      000E00 7D 00            [12] 3618 	mov	r5,#0x00
      000E02 EE               [12] 3619 	mov	a,r6
      000E03 C3               [12] 3620 	clr	c
      000E04 9C               [12] 3621 	subb	a,r4
      000E05 FE               [12] 3622 	mov	r6,a
      000E06 EF               [12] 3623 	mov	a,r7
      000E07 9D               [12] 3624 	subb	a,r5
      000E08 FF               [12] 3625 	mov	r7,a
      000E09 BE 64 05         [24] 3626 	cjne	r6,#0x64,00454$
      000E0C BF 00 02         [24] 3627 	cjne	r7,#0x00,00454$
      000E0F 80 17            [24] 3628 	sjmp	00194$
      000E11                       3629 00454$:
                                   3630 ;	radio/tdm.c:823: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
      000E11 78r69            [12] 3631 	mov	r0,#_tdm_serial_loop_len_1_219
      000E13 E2               [24] 3632 	movx	a,@r0
      000E14 24 04            [12] 3633 	add	a,#0x04
      000E16 F5 82            [12] 3634 	mov	dpl,a
      000E18 12r00rEA         [24] 3635 	lcall	_flight_time_estimate
      000E1B AE 82            [24] 3636 	mov	r6,dpl
      000E1D AF 83            [24] 3637 	mov	r7,dph
      000E1F 78r14            [12] 3638 	mov	r0,#_transmitted_ticks
      000E21 E2               [24] 3639 	movx	a,@r0
      000E22 2E               [12] 3640 	add	a,r6
      000E23 F2               [24] 3641 	movx	@r0,a
      000E24 08               [12] 3642 	inc	r0
      000E25 E2               [24] 3643 	movx	a,@r0
      000E26 3F               [12] 3644 	addc	a,r7
      000E27 F2               [24] 3645 	movx	@r0,a
      000E28                       3646 00194$:
                                   3647 ;	radio/tdm.c:827: if (!radio_transmit(len + sizeof(trailer), pbuf, tdm_state_remaining + (silence_period/2)) &&
      000E28 78r69            [12] 3648 	mov	r0,#_tdm_serial_loop_len_1_219
      000E2A E2               [24] 3649 	movx	a,@r0
      000E2B 24 04            [12] 3650 	add	a,#0x04
      000E2D FF               [12] 3651 	mov	r7,a
      000E2E 78r06            [12] 3652 	mov	r0,#_silence_period
      000E30 E2               [24] 3653 	movx	a,@r0
      000E31 FD               [12] 3654 	mov	r5,a
      000E32 08               [12] 3655 	inc	r0
      000E33 E2               [24] 3656 	movx	a,@r0
      000E34 C3               [12] 3657 	clr	c
      000E35 13               [12] 3658 	rrc	a
      000E36 CD               [12] 3659 	xch	a,r5
      000E37 13               [12] 3660 	rrc	a
      000E38 CD               [12] 3661 	xch	a,r5
      000E39 FE               [12] 3662 	mov	r6,a
      000E3A 78r01            [12] 3663 	mov	r0,#_tdm_state_remaining
      000E3C E2               [24] 3664 	movx	a,@r0
      000E3D 2D               [12] 3665 	add	a,r5
      000E3E FD               [12] 3666 	mov	r5,a
      000E3F 08               [12] 3667 	inc	r0
      000E40 E2               [24] 3668 	movx	a,@r0
      000E41 3E               [12] 3669 	addc	a,r6
      000E42 FE               [12] 3670 	mov	r6,a
      000E43 78r00            [12] 3671 	mov	r0,#_radio_transmit_PARM_2
      000E45 74r00            [12] 3672 	mov	a,#_pbuf
      000E47 F2               [24] 3673 	movx	@r0,a
      000E48 08               [12] 3674 	inc	r0
      000E49 74s00            [12] 3675 	mov	a,#(_pbuf >> 8)
      000E4B F2               [24] 3676 	movx	@r0,a
      000E4C 78r00            [12] 3677 	mov	r0,#_radio_transmit_PARM_3
      000E4E ED               [12] 3678 	mov	a,r5
      000E4F F2               [24] 3679 	movx	@r0,a
      000E50 08               [12] 3680 	inc	r0
      000E51 EE               [12] 3681 	mov	a,r6
      000E52 F2               [24] 3682 	movx	@r0,a
      000E53 8F 82            [24] 3683 	mov	dpl,r7
      000E55 12r00r00         [24] 3684 	lcall	_radio_transmit
      000E58 40 1A            [24] 3685 	jc	00196$
                                   3686 ;	radio/tdm.c:828: len != 0 && trailer.window != 0 && trailer.command == 0) {
      000E5A 78r69            [12] 3687 	mov	r0,#_tdm_serial_loop_len_1_219
      000E5C E2               [24] 3688 	movx	a,@r0
      000E5D 60 15            [24] 3689 	jz	00196$
      000E5F 78r1D            [12] 3690 	mov	r0,#_trailer
      000E61 E2               [24] 3691 	movx	a,@r0
      000E62 FE               [12] 3692 	mov	r6,a
      000E63 08               [12] 3693 	inc	r0
      000E64 E2               [24] 3694 	movx	a,@r0
      000E65 54 1F            [12] 3695 	anl	a,#0x1F
      000E67 FF               [12] 3696 	mov	r7,a
      000E68 4E               [12] 3697 	orl	a,r6
      000E69 60 09            [24] 3698 	jz	00196$
      000E6B 78r1E            [12] 3699 	mov	r0,#(_trailer + 0x0001)
      000E6D E2               [24] 3700 	movx	a,@r0
      000E6E 20 E5 03         [24] 3701 	jb	acc.5,00196$
                                   3702 ;	radio/tdm.c:829: packet_force_resend();
      000E71 12r00r00         [24] 3703 	lcall	_packet_force_resend
      000E74                       3704 00196$:
                                   3705 ;	radio/tdm.c:832: if (lbt_rssi != 0) {
      000E74 78r16            [12] 3706 	mov	r0,#_lbt_rssi
      000E76 E2               [24] 3707 	movx	a,@r0
      000E77 60 0B            [24] 3708 	jz	00201$
                                   3709 ;	radio/tdm.c:834: lbt_listen_time = 0;
      000E79 78r17            [12] 3710 	mov	r0,#_lbt_listen_time
      000E7B E4               [12] 3711 	clr	a
      000E7C F2               [24] 3712 	movx	@r0,a
      000E7D 08               [12] 3713 	inc	r0
      000E7E F2               [24] 3714 	movx	@r0,a
                                   3715 ;	radio/tdm.c:835: lbt_rand = 0;
      000E7F 78r1B            [12] 3716 	mov	r0,#_lbt_rand
      000E81 F2               [24] 3717 	movx	@r0,a
      000E82 08               [12] 3718 	inc	r0
      000E83 F2               [24] 3719 	movx	@r0,a
      000E84                       3720 00201$:
                                   3721 ;	radio/tdm.c:838: if (len != 0 && trailer.window != 0) {
      000E84 78r69            [12] 3722 	mov	r0,#_tdm_serial_loop_len_1_219
      000E86 E2               [24] 3723 	movx	a,@r0
      000E87 60 0E            [24] 3724 	jz	00203$
      000E89 78r1D            [12] 3725 	mov	r0,#_trailer
      000E8B E2               [24] 3726 	movx	a,@r0
      000E8C FE               [12] 3727 	mov	r6,a
      000E8D 08               [12] 3728 	inc	r0
      000E8E E2               [24] 3729 	movx	a,@r0
      000E8F 54 1F            [12] 3730 	anl	a,#0x1F
      000E91 FF               [12] 3731 	mov	r7,a
      000E92 4E               [12] 3732 	orl	a,r6
      000E93 60 02            [24] 3733 	jz	00203$
                                   3734 ;	radio/tdm.c:839: LED_ACTIVITY = LED_OFF;
      000E95 C2 B6            [12] 3735 	clr	_LED_RED
      000E97                       3736 00203$:
                                   3737 ;	radio/tdm.c:844: if(tdm_state_remaining > tx_window_width/2)
      000E97 78r03            [12] 3738 	mov	r0,#_tx_window_width
      000E99 E2               [24] 3739 	movx	a,@r0
      000E9A FE               [12] 3740 	mov	r6,a
      000E9B 08               [12] 3741 	inc	r0
      000E9C E2               [24] 3742 	movx	a,@r0
      000E9D C3               [12] 3743 	clr	c
      000E9E 13               [12] 3744 	rrc	a
      000E9F CE               [12] 3745 	xch	a,r6
      000EA0 13               [12] 3746 	rrc	a
      000EA1 CE               [12] 3747 	xch	a,r6
      000EA2 FF               [12] 3748 	mov	r7,a
      000EA3 78r01            [12] 3749 	mov	r0,#_tdm_state_remaining
      000EA5 C3               [12] 3750 	clr	c
      000EA6 E2               [24] 3751 	movx	a,@r0
      000EA7 F5 F0            [12] 3752 	mov	b,a
      000EA9 EE               [12] 3753 	mov	a,r6
      000EAA 95 F0            [12] 3754 	subb	a,b
      000EAC 08               [12] 3755 	inc	r0
      000EAD E2               [24] 3756 	movx	a,@r0
      000EAE F5 F0            [12] 3757 	mov	b,a
      000EB0 EF               [12] 3758 	mov	a,r7
      000EB1 95 F0            [12] 3759 	subb	a,b
      000EB3 50 12            [24] 3760 	jnc	00212$
                                   3761 ;	radio/tdm.c:848: if (encrypt_buffer_getting_full()) {
      000EB5 12r00r00         [24] 3762 	lcall	_encrypt_buffer_getting_full
      000EB8 50 0A            [24] 3763 	jnc	00209$
                                   3764 ;	radio/tdm.c:849: while (!encrypt_buffer_getting_empty()) {
      000EBA                       3765 00205$:
      000EBA 12r00r00         [24] 3766 	lcall	_encrypt_buffer_getting_empty
      000EBD 40 08            [24] 3767 	jc	00212$
                                   3768 ;	radio/tdm.c:850: decryptPackets();
      000EBF 12r00r00         [24] 3769 	lcall	_decryptPackets
      000EC2 80 F6            [24] 3770 	sjmp	00205$
      000EC4                       3771 00209$:
                                   3772 ;	radio/tdm.c:853: decryptPackets();
      000EC4 12r00r00         [24] 3773 	lcall	_decryptPackets
      000EC7                       3774 00212$:
                                   3775 ;	radio/tdm.c:860: radio_set_channel(fhop_receive_channel());
      000EC7 12r00r00         [24] 3776 	lcall	_fhop_receive_channel
      000ECA 12r00r00         [24] 3777 	lcall	_radio_set_channel
                                   3778 ;	radio/tdm.c:863: radio_receiver_on();
      000ECD 12r00r00         [24] 3779 	lcall	_radio_receiver_on
      000ED0 02r07rAC         [24] 3780 	ljmp	00215$
                                   3781 ;------------------------------------------------------------
                                   3782 ;Allocation info for local variables in function 'tdm_init'
                                   3783 ;------------------------------------------------------------
                                   3784 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                                   3785 ;i                         Allocated with name '_tdm_init_i_1_270'
                                   3786 ;air_rate                  Allocated with name '_tdm_init_air_rate_1_270'
                                   3787 ;window_width              Allocated with name '_tdm_init_window_width_1_270'
                                   3788 ;------------------------------------------------------------
                                   3789 ;	radio/tdm.c:982: tdm_init(void)
                                   3790 ;	-----------------------------------------
                                   3791 ;	 function tdm_init
                                   3792 ;	-----------------------------------------
      000ED3                       3793 _tdm_init:
                                   3794 ;	radio/tdm.c:985: __xdata uint8_t air_rate = radio_air_rate();
      000ED3 12r00r00         [24] 3795 	lcall	_radio_air_rate
      000ED6 AF 82            [24] 3796 	mov	r7,dpl
                                   3797 ;	radio/tdm.c:994: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
      000ED8 90r00r00         [24] 3798 	mov	dptr,#__mullong_PARM_2
      000EDB EF               [12] 3799 	mov	a,r7
      000EDC F0               [24] 3800 	movx	@dptr,a
      000EDD E4               [12] 3801 	clr	a
      000EDE A3               [24] 3802 	inc	dptr
      000EDF F0               [24] 3803 	movx	@dptr,a
      000EE0 A3               [24] 3804 	inc	dptr
      000EE1 F0               [24] 3805 	movx	@dptr,a
      000EE2 A3               [24] 3806 	inc	dptr
      000EE3 F0               [24] 3807 	movx	@dptr,a
      000EE4 90 03 E8         [24] 3808 	mov	dptr,#0x03E8
      000EE7 E4               [12] 3809 	clr	a
      000EE8 F5 F0            [12] 3810 	mov	b,a
      000EEA 12r00r00         [24] 3811 	lcall	__mullong
      000EED AC 82            [24] 3812 	mov	r4,dpl
      000EEF AD 83            [24] 3813 	mov	r5,dph
      000EF1 AE F0            [24] 3814 	mov	r6,b
      000EF3 FF               [12] 3815 	mov	r7,a
      000EF4 90r00r00         [24] 3816 	mov	dptr,#__divulong_PARM_2
      000EF7 EC               [12] 3817 	mov	a,r4
      000EF8 F0               [24] 3818 	movx	@dptr,a
      000EF9 ED               [12] 3819 	mov	a,r5
      000EFA A3               [24] 3820 	inc	dptr
      000EFB F0               [24] 3821 	movx	@dptr,a
      000EFC EE               [12] 3822 	mov	a,r6
      000EFD A3               [24] 3823 	inc	dptr
      000EFE F0               [24] 3824 	movx	@dptr,a
      000EFF EF               [12] 3825 	mov	a,r7
      000F00 A3               [24] 3826 	inc	dptr
      000F01 F0               [24] 3827 	movx	@dptr,a
      000F02 90 12 00         [24] 3828 	mov	dptr,#0x1200
      000F05 75 F0 7A         [24] 3829 	mov	b,#0x7A
      000F08 E4               [12] 3830 	clr	a
      000F09 12r00r00         [24] 3831 	lcall	__divulong
      000F0C AC 82            [24] 3832 	mov	r4,dpl
      000F0E AD 83            [24] 3833 	mov	r5,dph
      000F10 AE F0            [24] 3834 	mov	r6,b
      000F12 FF               [12] 3835 	mov	r7,a
      000F13 74 08            [12] 3836 	mov	a,#0x08
      000F15 2C               [12] 3837 	add	a,r4
      000F16 FC               [12] 3838 	mov	r4,a
      000F17 E4               [12] 3839 	clr	a
      000F18 3D               [12] 3840 	addc	a,r5
      000F19 FD               [12] 3841 	mov	r5,a
      000F1A E4               [12] 3842 	clr	a
      000F1B 3E               [12] 3843 	addc	a,r6
      000F1C FE               [12] 3844 	mov	r6,a
      000F1D E4               [12] 3845 	clr	a
      000F1E 3F               [12] 3846 	addc	a,r7
      000F1F FF               [12] 3847 	mov	r7,a
      000F20 ED               [12] 3848 	mov	a,r5
      000F21 C4               [12] 3849 	swap	a
      000F22 CC               [12] 3850 	xch	a,r4
      000F23 C4               [12] 3851 	swap	a
      000F24 54 0F            [12] 3852 	anl	a,#0x0F
      000F26 6C               [12] 3853 	xrl	a,r4
      000F27 CC               [12] 3854 	xch	a,r4
      000F28 54 0F            [12] 3855 	anl	a,#0x0F
      000F2A CC               [12] 3856 	xch	a,r4
      000F2B 6C               [12] 3857 	xrl	a,r4
      000F2C CC               [12] 3858 	xch	a,r4
      000F2D FD               [12] 3859 	mov	r5,a
      000F2E EE               [12] 3860 	mov	a,r6
      000F2F C4               [12] 3861 	swap	a
      000F30 54 F0            [12] 3862 	anl	a,#0xF0
      000F32 4D               [12] 3863 	orl	a,r5
      000F33 FD               [12] 3864 	mov	r5,a
      000F34 EF               [12] 3865 	mov	a,r7
      000F35 C4               [12] 3866 	swap	a
      000F36 CE               [12] 3867 	xch	a,r6
      000F37 C4               [12] 3868 	swap	a
      000F38 54 0F            [12] 3869 	anl	a,#0x0F
      000F3A 6E               [12] 3870 	xrl	a,r6
      000F3B CE               [12] 3871 	xch	a,r6
      000F3C 54 0F            [12] 3872 	anl	a,#0x0F
      000F3E CE               [12] 3873 	xch	a,r6
      000F3F 6E               [12] 3874 	xrl	a,r6
      000F40 CE               [12] 3875 	xch	a,r6
                                   3876 ;	radio/tdm.c:995: ticks_per_byte++;
      000F41 74 01            [12] 3877 	mov	a,#0x01
      000F43 2C               [12] 3878 	add	a,r4
      000F44 FE               [12] 3879 	mov	r6,a
      000F45 E4               [12] 3880 	clr	a
      000F46 3D               [12] 3881 	addc	a,r5
      000F47 FF               [12] 3882 	mov	r7,a
      000F48 78r0A            [12] 3883 	mov	r0,#_ticks_per_byte
      000F4A EE               [12] 3884 	mov	a,r6
      000F4B F2               [24] 3885 	movx	@r0,a
      000F4C 08               [12] 3886 	inc	r0
      000F4D EF               [12] 3887 	mov	a,r7
      000F4E F2               [24] 3888 	movx	@r0,a
                                   3889 ;	radio/tdm.c:1002: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
      000F4F 90r00r00         [24] 3890 	mov	dptr,#__mulint_PARM_2
      000F52 EE               [12] 3891 	mov	a,r6
      000F53 F0               [24] 3892 	movx	@dptr,a
      000F54 EF               [12] 3893 	mov	a,r7
      000F55 A3               [24] 3894 	inc	dptr
      000F56 F0               [24] 3895 	movx	@dptr,a
      000F57 90 00 0D         [24] 3896 	mov	dptr,#0x000D
      000F5A C0 07            [24] 3897 	push	ar7
      000F5C C0 06            [24] 3898 	push	ar6
      000F5E 12r00r00         [24] 3899 	lcall	__mulint
      000F61 E5 82            [12] 3900 	mov	a,dpl
      000F63 85 83 F0         [24] 3901 	mov	b,dph
      000F66 D0 06            [24] 3902 	pop	ar6
      000F68 D0 07            [24] 3903 	pop	ar7
      000F6A 24 0D            [12] 3904 	add	a,#0x0D
      000F6C FC               [12] 3905 	mov	r4,a
      000F6D E4               [12] 3906 	clr	a
      000F6E 35 F0            [12] 3907 	addc	a,b
      000F70 FD               [12] 3908 	mov	r5,a
      000F71 78r08            [12] 3909 	mov	r0,#_packet_latency
      000F73 EC               [12] 3910 	mov	a,r4
      000F74 F2               [24] 3911 	movx	@r0,a
      000F75 08               [12] 3912 	inc	r0
      000F76 ED               [12] 3913 	mov	a,r5
      000F77 F2               [24] 3914 	movx	@r0,a
                                   3915 ;	radio/tdm.c:1004: if (feature_golay) {
      000F78 30*00 2E         [24] 3916 	jnb	_feature_golay,00102$
                                   3917 ;	radio/tdm.c:1005: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
      000F7B 78r05            [12] 3918 	mov	r0,#_max_data_packet_length
      000F7D 74 74            [12] 3919 	mov	a,#0x74
      000F7F F2               [24] 3920 	movx	@r0,a
                                   3921 ;	radio/tdm.c:1008: ticks_per_byte *= 2;
      000F80 EF               [12] 3922 	mov	a,r7
      000F81 CE               [12] 3923 	xch	a,r6
      000F82 25 E0            [12] 3924 	add	a,acc
      000F84 CE               [12] 3925 	xch	a,r6
      000F85 33               [12] 3926 	rlc	a
      000F86 FF               [12] 3927 	mov	r7,a
      000F87 78r0A            [12] 3928 	mov	r0,#_ticks_per_byte
      000F89 EE               [12] 3929 	mov	a,r6
      000F8A F2               [24] 3930 	movx	@r0,a
      000F8B 08               [12] 3931 	inc	r0
      000F8C EF               [12] 3932 	mov	a,r7
      000F8D F2               [24] 3933 	movx	@r0,a
                                   3934 ;	radio/tdm.c:1011: packet_latency += 4*ticks_per_byte;
      000F8E EF               [12] 3935 	mov	a,r7
      000F8F CE               [12] 3936 	xch	a,r6
      000F90 25 E0            [12] 3937 	add	a,acc
      000F92 CE               [12] 3938 	xch	a,r6
      000F93 33               [12] 3939 	rlc	a
      000F94 CE               [12] 3940 	xch	a,r6
      000F95 25 E0            [12] 3941 	add	a,acc
      000F97 CE               [12] 3942 	xch	a,r6
      000F98 33               [12] 3943 	rlc	a
      000F99 FF               [12] 3944 	mov	r7,a
      000F9A EE               [12] 3945 	mov	a,r6
      000F9B 2C               [12] 3946 	add	a,r4
      000F9C FC               [12] 3947 	mov	r4,a
      000F9D EF               [12] 3948 	mov	a,r7
      000F9E 3D               [12] 3949 	addc	a,r5
      000F9F FD               [12] 3950 	mov	r5,a
      000FA0 78r08            [12] 3951 	mov	r0,#_packet_latency
      000FA2 EC               [12] 3952 	mov	a,r4
      000FA3 F2               [24] 3953 	movx	@r0,a
      000FA4 08               [12] 3954 	inc	r0
      000FA5 ED               [12] 3955 	mov	a,r5
      000FA6 F2               [24] 3956 	movx	@r0,a
      000FA7 80 05            [24] 3957 	sjmp	00103$
      000FA9                       3958 00102$:
                                   3959 ;	radio/tdm.c:1013: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
      000FA9 78r05            [12] 3960 	mov	r0,#_max_data_packet_length
      000FAB 74 F8            [12] 3961 	mov	a,#0xF8
      000FAD F2               [24] 3962 	movx	@r0,a
      000FAE                       3963 00103$:
                                   3964 ;	radio/tdm.c:1017: silence_period = 2*packet_latency;
      000FAE 78r08            [12] 3965 	mov	r0,#_packet_latency
      000FB0 79r06            [12] 3966 	mov	r1,#_silence_period
      000FB2 E2               [24] 3967 	movx	a,@r0
      000FB3 F3               [24] 3968 	movx	@r1,a
      000FB4 08               [12] 3969 	inc	r0
      000FB5 E2               [24] 3970 	movx	a,@r0
      000FB6 F5 F0            [12] 3971 	mov	b,a
      000FB8 E3               [24] 3972 	movx	a,@r1
      000FB9 25 E0            [12] 3973 	add	a,acc
      000FBB C5 F0            [12] 3974 	xch	a,b
      000FBD 33               [12] 3975 	rlc	a
      000FBE C5 F0            [12] 3976 	xch	a,b
      000FC0 F3               [24] 3977 	movx	@r1,a
      000FC1 09               [12] 3978 	inc	r1
      000FC2 E5 F0            [12] 3979 	mov	a,b
      000FC4 F3               [24] 3980 	movx	@r1,a
                                   3981 ;	radio/tdm.c:1020: window_width = 3*(packet_latency+(max_data_packet_length*(uint32_t)ticks_per_byte));
      000FC5 78r0A            [12] 3982 	mov	r0,#_ticks_per_byte
      000FC7 90r00r00         [24] 3983 	mov	dptr,#__mullong_PARM_2
      000FCA E2               [24] 3984 	movx	a,@r0
      000FCB F0               [24] 3985 	movx	@dptr,a
      000FCC 08               [12] 3986 	inc	r0
      000FCD E2               [24] 3987 	movx	a,@r0
      000FCE A3               [24] 3988 	inc	dptr
      000FCF F0               [24] 3989 	movx	@dptr,a
      000FD0 E4               [12] 3990 	clr	a
      000FD1 A3               [24] 3991 	inc	dptr
      000FD2 F0               [24] 3992 	movx	@dptr,a
      000FD3 A3               [24] 3993 	inc	dptr
      000FD4 F0               [24] 3994 	movx	@dptr,a
      000FD5 78r05            [12] 3995 	mov	r0,#_max_data_packet_length
      000FD7 E2               [24] 3996 	movx	a,@r0
      000FD8 FC               [12] 3997 	mov	r4,a
      000FD9 7D 00            [12] 3998 	mov	r5,#0x00
      000FDB 7E 00            [12] 3999 	mov	r6,#0x00
      000FDD 7F 00            [12] 4000 	mov	r7,#0x00
      000FDF 8C 82            [24] 4001 	mov	dpl,r4
      000FE1 8D 83            [24] 4002 	mov	dph,r5
      000FE3 8E F0            [24] 4003 	mov	b,r6
      000FE5 EF               [12] 4004 	mov	a,r7
      000FE6 12r00r00         [24] 4005 	lcall	__mullong
      000FE9 85 82*17         [24] 4006 	mov	_tdm_init_sloc0_1_0,dpl
      000FEC 85 83*18         [24] 4007 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      000FEF 85 F0*19         [24] 4008 	mov	(_tdm_init_sloc0_1_0 + 2),b
      000FF2 F5*1A            [12] 4009 	mov	(_tdm_init_sloc0_1_0 + 3),a
      000FF4 78r08            [12] 4010 	mov	r0,#_packet_latency
      000FF6 E2               [24] 4011 	movx	a,@r0
      000FF7 FA               [12] 4012 	mov	r2,a
      000FF8 08               [12] 4013 	inc	r0
      000FF9 E2               [24] 4014 	movx	a,@r0
      000FFA FB               [12] 4015 	mov	r3,a
      000FFB 7E 00            [12] 4016 	mov	r6,#0x00
      000FFD 7F 00            [12] 4017 	mov	r7,#0x00
      000FFF 90r00r00         [24] 4018 	mov	dptr,#__mullong_PARM_2
      001002 E5*17            [12] 4019 	mov	a,_tdm_init_sloc0_1_0
      001004 2A               [12] 4020 	add	a,r2
      001005 F0               [24] 4021 	movx	@dptr,a
      001006 E5*18            [12] 4022 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      001008 3B               [12] 4023 	addc	a,r3
      001009 A3               [24] 4024 	inc	dptr
      00100A F0               [24] 4025 	movx	@dptr,a
      00100B E5*19            [12] 4026 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      00100D 3E               [12] 4027 	addc	a,r6
      00100E A3               [24] 4028 	inc	dptr
      00100F F0               [24] 4029 	movx	@dptr,a
      001010 E5*1A            [12] 4030 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      001012 3F               [12] 4031 	addc	a,r7
      001013 A3               [24] 4032 	inc	dptr
      001014 F0               [24] 4033 	movx	@dptr,a
      001015 90 00 03         [24] 4034 	mov	dptr,#(0x03&0x00ff)
      001018 E4               [12] 4035 	clr	a
      001019 F5 F0            [12] 4036 	mov	b,a
      00101B 12r00r00         [24] 4037 	lcall	__mullong
      00101E AC 82            [24] 4038 	mov	r4,dpl
      001020 AD 83            [24] 4039 	mov	r5,dph
      001022 AE F0            [24] 4040 	mov	r6,b
      001024 FF               [12] 4041 	mov	r7,a
      001025 90r01r01         [24] 4042 	mov	dptr,#_tdm_init_window_width_1_270
      001028 EC               [12] 4043 	mov	a,r4
      001029 F0               [24] 4044 	movx	@dptr,a
      00102A ED               [12] 4045 	mov	a,r5
      00102B A3               [24] 4046 	inc	dptr
      00102C F0               [24] 4047 	movx	@dptr,a
      00102D EE               [12] 4048 	mov	a,r6
      00102E A3               [24] 4049 	inc	dptr
      00102F F0               [24] 4050 	movx	@dptr,a
      001030 EF               [12] 4051 	mov	a,r7
      001031 A3               [24] 4052 	inc	dptr
      001032 F0               [24] 4053 	movx	@dptr,a
                                   4054 ;	radio/tdm.c:1023: lbt_min_time = LBT_MIN_TIME_USEC/16;
      001033 78r19            [12] 4055 	mov	r0,#_lbt_min_time
      001035 74 38            [12] 4056 	mov	a,#0x38
      001037 F2               [24] 4057 	movx	@r0,a
      001038 08               [12] 4058 	inc	r0
      001039 74 01            [12] 4059 	mov	a,#0x01
      00103B F2               [24] 4060 	movx	@r0,a
                                   4061 ;	radio/tdm.c:1026: if (lbt_rssi != 0) {
      00103C 78r16            [12] 4062 	mov	r0,#_lbt_rssi
      00103E E2               [24] 4063 	movx	a,@r0
      00103F 60 3A            [24] 4064 	jz	00105$
                                   4065 ;	radio/tdm.c:1027: window_width = constrain(window_width, 3*lbt_min_time, window_width);
      001041 78r00            [12] 4066 	mov	r0,#_constrain_PARM_2
      001043 74 A8            [12] 4067 	mov	a,#0xA8
      001045 F2               [24] 4068 	movx	@r0,a
      001046 08               [12] 4069 	inc	r0
      001047 74 03            [12] 4070 	mov	a,#0x03
      001049 F2               [24] 4071 	movx	@r0,a
      00104A 08               [12] 4072 	inc	r0
      00104B E4               [12] 4073 	clr	a
      00104C F2               [24] 4074 	movx	@r0,a
      00104D 08               [12] 4075 	inc	r0
      00104E F2               [24] 4076 	movx	@r0,a
      00104F 78r00            [12] 4077 	mov	r0,#_constrain_PARM_3
      001051 EC               [12] 4078 	mov	a,r4
      001052 F2               [24] 4079 	movx	@r0,a
      001053 08               [12] 4080 	inc	r0
      001054 ED               [12] 4081 	mov	a,r5
      001055 F2               [24] 4082 	movx	@r0,a
      001056 08               [12] 4083 	inc	r0
      001057 EE               [12] 4084 	mov	a,r6
      001058 F2               [24] 4085 	movx	@r0,a
      001059 08               [12] 4086 	inc	r0
      00105A EF               [12] 4087 	mov	a,r7
      00105B F2               [24] 4088 	movx	@r0,a
      00105C 8C 82            [24] 4089 	mov	dpl,r4
      00105E 8D 83            [24] 4090 	mov	dph,r5
      001060 8E F0            [24] 4091 	mov	b,r6
      001062 EF               [12] 4092 	mov	a,r7
      001063 12r00r00         [24] 4093 	lcall	_constrain
      001066 AC 82            [24] 4094 	mov	r4,dpl
      001068 AD 83            [24] 4095 	mov	r5,dph
      00106A AE F0            [24] 4096 	mov	r6,b
      00106C FF               [12] 4097 	mov	r7,a
      00106D 90r01r01         [24] 4098 	mov	dptr,#_tdm_init_window_width_1_270
      001070 EC               [12] 4099 	mov	a,r4
      001071 F0               [24] 4100 	movx	@dptr,a
      001072 ED               [12] 4101 	mov	a,r5
      001073 A3               [24] 4102 	inc	dptr
      001074 F0               [24] 4103 	movx	@dptr,a
      001075 EE               [12] 4104 	mov	a,r6
      001076 A3               [24] 4105 	inc	dptr
      001077 F0               [24] 4106 	movx	@dptr,a
      001078 EF               [12] 4107 	mov	a,r7
      001079 A3               [24] 4108 	inc	dptr
      00107A F0               [24] 4109 	movx	@dptr,a
      00107B                       4110 00105$:
                                   4111 ;	radio/tdm.c:1032: if (window_width >= REGULATORY_MAX_WINDOW && num_fh_channels > 1) {
      00107B 90r01r01         [24] 4112 	mov	dptr,#_tdm_init_window_width_1_270
      00107E E0               [24] 4113 	movx	a,@dptr
      00107F FC               [12] 4114 	mov	r4,a
      001080 A3               [24] 4115 	inc	dptr
      001081 E0               [24] 4116 	movx	a,@dptr
      001082 FD               [12] 4117 	mov	r5,a
      001083 A3               [24] 4118 	inc	dptr
      001084 E0               [24] 4119 	movx	a,@dptr
      001085 FE               [12] 4120 	mov	r6,a
      001086 A3               [24] 4121 	inc	dptr
      001087 E0               [24] 4122 	movx	a,@dptr
      001088 FF               [12] 4123 	mov	r7,a
      001089 C3               [12] 4124 	clr	c
      00108A EC               [12] 4125 	mov	a,r4
      00108B 94 A8            [12] 4126 	subb	a,#0xA8
      00108D ED               [12] 4127 	mov	a,r5
      00108E 94 61            [12] 4128 	subb	a,#0x61
      001090 EE               [12] 4129 	mov	a,r6
      001091 94 00            [12] 4130 	subb	a,#0x00
      001093 EF               [12] 4131 	mov	a,r7
      001094 94 00            [12] 4132 	subb	a,#0x00
      001096 40 1B            [24] 4133 	jc	00107$
      001098 78r00            [12] 4134 	mov	r0,#_num_fh_channels
      00109A C3               [12] 4135 	clr	c
      00109B E2               [24] 4136 	movx	a,@r0
      00109C F5 F0            [12] 4137 	mov	b,a
      00109E 74 01            [12] 4138 	mov	a,#0x01
      0010A0 95 F0            [12] 4139 	subb	a,b
      0010A2 50 0F            [24] 4140 	jnc	00107$
                                   4141 ;	radio/tdm.c:1033: window_width = REGULATORY_MAX_WINDOW;
      0010A4 90r01r01         [24] 4142 	mov	dptr,#_tdm_init_window_width_1_270
      0010A7 74 A8            [12] 4143 	mov	a,#0xA8
      0010A9 F0               [24] 4144 	movx	@dptr,a
      0010AA 74 61            [12] 4145 	mov	a,#0x61
      0010AC A3               [24] 4146 	inc	dptr
      0010AD F0               [24] 4147 	movx	@dptr,a
      0010AE E4               [12] 4148 	clr	a
      0010AF A3               [24] 4149 	inc	dptr
      0010B0 F0               [24] 4150 	movx	@dptr,a
      0010B1 A3               [24] 4151 	inc	dptr
      0010B2 F0               [24] 4152 	movx	@dptr,a
      0010B3                       4153 00107$:
                                   4154 ;	radio/tdm.c:1037: if (window_width > param_get(PARAM_MAX_WINDOW)*(1000/16)) {
      0010B3 75 82 0F         [24] 4155 	mov	dpl,#0x0F
      0010B6 12r00r00         [24] 4156 	lcall	_param_get
      0010B9 AC 82            [24] 4157 	mov	r4,dpl
      0010BB AD 83            [24] 4158 	mov	r5,dph
      0010BD AE F0            [24] 4159 	mov	r6,b
      0010BF FF               [12] 4160 	mov	r7,a
      0010C0 90r00r00         [24] 4161 	mov	dptr,#__mullong_PARM_2
      0010C3 EC               [12] 4162 	mov	a,r4
      0010C4 F0               [24] 4163 	movx	@dptr,a
      0010C5 ED               [12] 4164 	mov	a,r5
      0010C6 A3               [24] 4165 	inc	dptr
      0010C7 F0               [24] 4166 	movx	@dptr,a
      0010C8 EE               [12] 4167 	mov	a,r6
      0010C9 A3               [24] 4168 	inc	dptr
      0010CA F0               [24] 4169 	movx	@dptr,a
      0010CB EF               [12] 4170 	mov	a,r7
      0010CC A3               [24] 4171 	inc	dptr
      0010CD F0               [24] 4172 	movx	@dptr,a
      0010CE 90 00 3E         [24] 4173 	mov	dptr,#(0x3E&0x00ff)
      0010D1 E4               [12] 4174 	clr	a
      0010D2 F5 F0            [12] 4175 	mov	b,a
      0010D4 12r00r00         [24] 4176 	lcall	__mullong
      0010D7 85 82*17         [24] 4177 	mov	_tdm_init_sloc0_1_0,dpl
      0010DA 85 83*18         [24] 4178 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      0010DD 85 F0*19         [24] 4179 	mov	(_tdm_init_sloc0_1_0 + 2),b
      0010E0 F5*1A            [12] 4180 	mov	(_tdm_init_sloc0_1_0 + 3),a
      0010E2 90r01r01         [24] 4181 	mov	dptr,#_tdm_init_window_width_1_270
      0010E5 E0               [24] 4182 	movx	a,@dptr
      0010E6 FA               [12] 4183 	mov	r2,a
      0010E7 A3               [24] 4184 	inc	dptr
      0010E8 E0               [24] 4185 	movx	a,@dptr
      0010E9 FB               [12] 4186 	mov	r3,a
      0010EA A3               [24] 4187 	inc	dptr
      0010EB E0               [24] 4188 	movx	a,@dptr
      0010EC FE               [12] 4189 	mov	r6,a
      0010ED A3               [24] 4190 	inc	dptr
      0010EE E0               [24] 4191 	movx	a,@dptr
      0010EF FF               [12] 4192 	mov	r7,a
      0010F0 C3               [12] 4193 	clr	c
      0010F1 E5*17            [12] 4194 	mov	a,_tdm_init_sloc0_1_0
      0010F3 9A               [12] 4195 	subb	a,r2
      0010F4 E5*18            [12] 4196 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      0010F6 9B               [12] 4197 	subb	a,r3
      0010F7 E5*19            [12] 4198 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      0010F9 9E               [12] 4199 	subb	a,r6
      0010FA E5*1A            [12] 4200 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      0010FC 9F               [12] 4201 	subb	a,r7
      0010FD 50 39            [24] 4202 	jnc	00110$
                                   4203 ;	radio/tdm.c:1038: window_width = param_get(PARAM_MAX_WINDOW)*(1000/16);
      0010FF 75 82 0F         [24] 4204 	mov	dpl,#0x0F
      001102 12r00r00         [24] 4205 	lcall	_param_get
      001105 AC 82            [24] 4206 	mov	r4,dpl
      001107 AD 83            [24] 4207 	mov	r5,dph
      001109 AE F0            [24] 4208 	mov	r6,b
      00110B FF               [12] 4209 	mov	r7,a
      00110C 90r00r00         [24] 4210 	mov	dptr,#__mullong_PARM_2
      00110F EC               [12] 4211 	mov	a,r4
      001110 F0               [24] 4212 	movx	@dptr,a
      001111 ED               [12] 4213 	mov	a,r5
      001112 A3               [24] 4214 	inc	dptr
      001113 F0               [24] 4215 	movx	@dptr,a
      001114 EE               [12] 4216 	mov	a,r6
      001115 A3               [24] 4217 	inc	dptr
      001116 F0               [24] 4218 	movx	@dptr,a
      001117 EF               [12] 4219 	mov	a,r7
      001118 A3               [24] 4220 	inc	dptr
      001119 F0               [24] 4221 	movx	@dptr,a
      00111A 90 00 3E         [24] 4222 	mov	dptr,#(0x3E&0x00ff)
      00111D E4               [12] 4223 	clr	a
      00111E F5 F0            [12] 4224 	mov	b,a
      001120 12r00r00         [24] 4225 	lcall	__mullong
      001123 AC 82            [24] 4226 	mov	r4,dpl
      001125 AD 83            [24] 4227 	mov	r5,dph
      001127 AE F0            [24] 4228 	mov	r6,b
      001129 FF               [12] 4229 	mov	r7,a
      00112A 90r01r01         [24] 4230 	mov	dptr,#_tdm_init_window_width_1_270
      00112D EC               [12] 4231 	mov	a,r4
      00112E F0               [24] 4232 	movx	@dptr,a
      00112F ED               [12] 4233 	mov	a,r5
      001130 A3               [24] 4234 	inc	dptr
      001131 F0               [24] 4235 	movx	@dptr,a
      001132 EE               [12] 4236 	mov	a,r6
      001133 A3               [24] 4237 	inc	dptr
      001134 F0               [24] 4238 	movx	@dptr,a
      001135 EF               [12] 4239 	mov	a,r7
      001136 A3               [24] 4240 	inc	dptr
      001137 F0               [24] 4241 	movx	@dptr,a
      001138                       4242 00110$:
                                   4243 ;	radio/tdm.c:1042: if (window_width > 0x1fff) {
      001138 90r01r01         [24] 4244 	mov	dptr,#_tdm_init_window_width_1_270
      00113B E0               [24] 4245 	movx	a,@dptr
      00113C FC               [12] 4246 	mov	r4,a
      00113D A3               [24] 4247 	inc	dptr
      00113E E0               [24] 4248 	movx	a,@dptr
      00113F FD               [12] 4249 	mov	r5,a
      001140 A3               [24] 4250 	inc	dptr
      001141 E0               [24] 4251 	movx	a,@dptr
      001142 FE               [12] 4252 	mov	r6,a
      001143 A3               [24] 4253 	inc	dptr
      001144 E0               [24] 4254 	movx	a,@dptr
      001145 FF               [12] 4255 	mov	r7,a
      001146 C3               [12] 4256 	clr	c
      001147 74 FF            [12] 4257 	mov	a,#0xFF
      001149 9C               [12] 4258 	subb	a,r4
      00114A 74 1F            [12] 4259 	mov	a,#0x1F
      00114C 9D               [12] 4260 	subb	a,r5
      00114D E4               [12] 4261 	clr	a
      00114E 9E               [12] 4262 	subb	a,r6
      00114F E4               [12] 4263 	clr	a
      001150 9F               [12] 4264 	subb	a,r7
      001151 50 0F            [24] 4265 	jnc	00112$
                                   4266 ;	radio/tdm.c:1043: window_width = 0x1fff;
      001153 90r01r01         [24] 4267 	mov	dptr,#_tdm_init_window_width_1_270
      001156 74 FF            [12] 4268 	mov	a,#0xFF
      001158 F0               [24] 4269 	movx	@dptr,a
      001159 74 1F            [12] 4270 	mov	a,#0x1F
      00115B A3               [24] 4271 	inc	dptr
      00115C F0               [24] 4272 	movx	@dptr,a
      00115D E4               [12] 4273 	clr	a
      00115E A3               [24] 4274 	inc	dptr
      00115F F0               [24] 4275 	movx	@dptr,a
      001160 A3               [24] 4276 	inc	dptr
      001161 F0               [24] 4277 	movx	@dptr,a
      001162                       4278 00112$:
                                   4279 ;	radio/tdm.c:1046: tx_window_width = window_width;
      001162 90r01r01         [24] 4280 	mov	dptr,#_tdm_init_window_width_1_270
      001165 E0               [24] 4281 	movx	a,@dptr
      001166 FC               [12] 4282 	mov	r4,a
      001167 A3               [24] 4283 	inc	dptr
      001168 E0               [24] 4284 	movx	a,@dptr
      001169 FD               [12] 4285 	mov	r5,a
      00116A A3               [24] 4286 	inc	dptr
      00116B E0               [24] 4287 	movx	a,@dptr
      00116C A3               [24] 4288 	inc	dptr
      00116D E0               [24] 4289 	movx	a,@dptr
      00116E 78r03            [12] 4290 	mov	r0,#_tx_window_width
      001170 EC               [12] 4291 	mov	a,r4
      001171 F2               [24] 4292 	movx	@r0,a
      001172 08               [12] 4293 	inc	r0
      001173 ED               [12] 4294 	mov	a,r5
      001174 F2               [24] 4295 	movx	@r0,a
                                   4296 ;	radio/tdm.c:1051: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
      001175 78r0B            [12] 4297 	mov	r0,#(_settings + 0x000b)
      001177 E2               [24] 4298 	movx	a,@r0
      001178 7E 00            [12] 4299 	mov	r6,#0x00
      00117A 24 F6            [12] 4300 	add	a,#0xF6
      00117C FF               [12] 4301 	mov	r7,a
      00117D EE               [12] 4302 	mov	a,r6
      00117E 34 FF            [12] 4303 	addc	a,#0xFF
      001180 FE               [12] 4304 	mov	r6,a
      001181 90r00r00         [24] 4305 	mov	dptr,#__divsint_PARM_2
      001184 74 02            [12] 4306 	mov	a,#0x02
      001186 F0               [24] 4307 	movx	@dptr,a
      001187 E4               [12] 4308 	clr	a
      001188 A3               [24] 4309 	inc	dptr
      001189 F0               [24] 4310 	movx	@dptr,a
      00118A 8F 82            [24] 4311 	mov	dpl,r7
      00118C 8E 83            [24] 4312 	mov	dph,r6
      00118E C0 05            [24] 4313 	push	ar5
      001190 C0 04            [24] 4314 	push	ar4
      001192 12r00r00         [24] 4315 	lcall	__divsint
      001195 AE 82            [24] 4316 	mov	r6,dpl
      001197 AF 83            [24] 4317 	mov	r7,dph
      001199 78r0A            [12] 4318 	mov	r0,#_ticks_per_byte
      00119B 90r00r00         [24] 4319 	mov	dptr,#__mulint_PARM_2
      00119E E2               [24] 4320 	movx	a,@r0
      00119F F0               [24] 4321 	movx	@dptr,a
      0011A0 08               [12] 4322 	inc	r0
      0011A1 E2               [24] 4323 	movx	a,@r0
      0011A2 A3               [24] 4324 	inc	dptr
      0011A3 F0               [24] 4325 	movx	@dptr,a
      0011A4 8E 82            [24] 4326 	mov	dpl,r6
      0011A6 8F 83            [24] 4327 	mov	dph,r7
      0011A8 12r00r00         [24] 4328 	lcall	__mulint
      0011AB AE 82            [24] 4329 	mov	r6,dpl
      0011AD AF 83            [24] 4330 	mov	r7,dph
      0011AF D0 04            [24] 4331 	pop	ar4
      0011B1 D0 05            [24] 4332 	pop	ar5
      0011B3 78r08            [12] 4333 	mov	r0,#_packet_latency
      0011B5 E2               [24] 4334 	movx	a,@r0
      0011B6 2E               [12] 4335 	add	a,r6
      0011B7 F2               [24] 4336 	movx	@r0,a
      0011B8 08               [12] 4337 	inc	r0
      0011B9 E2               [24] 4338 	movx	a,@r0
      0011BA 3F               [12] 4339 	addc	a,r7
      0011BB F2               [24] 4340 	movx	@r0,a
                                   4341 ;	radio/tdm.c:1055: i = (tx_window_width - packet_latency) / ticks_per_byte;
      0011BC 78r08            [12] 4342 	mov	r0,#_packet_latency
      0011BE D3               [12] 4343 	setb	c
      0011BF E2               [24] 4344 	movx	a,@r0
      0011C0 9C               [12] 4345 	subb	a,r4
      0011C1 F4               [12] 4346 	cpl	a
      0011C2 B3               [12] 4347 	cpl	c
      0011C3 FC               [12] 4348 	mov	r4,a
      0011C4 B3               [12] 4349 	cpl	c
      0011C5 08               [12] 4350 	inc	r0
      0011C6 E2               [24] 4351 	movx	a,@r0
      0011C7 9D               [12] 4352 	subb	a,r5
      0011C8 F4               [12] 4353 	cpl	a
      0011C9 FD               [12] 4354 	mov	r5,a
      0011CA 78r0A            [12] 4355 	mov	r0,#_ticks_per_byte
      0011CC 90r00r00         [24] 4356 	mov	dptr,#__divuint_PARM_2
      0011CF E2               [24] 4357 	movx	a,@r0
      0011D0 F0               [24] 4358 	movx	@dptr,a
      0011D1 08               [12] 4359 	inc	r0
      0011D2 E2               [24] 4360 	movx	a,@r0
      0011D3 A3               [24] 4361 	inc	dptr
      0011D4 F0               [24] 4362 	movx	@dptr,a
      0011D5 8C 82            [24] 4363 	mov	dpl,r4
      0011D7 8D 83            [24] 4364 	mov	dph,r5
      0011D9 12r00r00         [24] 4365 	lcall	__divuint
      0011DC AE 82            [24] 4366 	mov	r6,dpl
      0011DE AF 83            [24] 4367 	mov	r7,dph
      0011E0 90r00rFF         [24] 4368 	mov	dptr,#_tdm_init_i_1_270
      0011E3 EE               [12] 4369 	mov	a,r6
      0011E4 F0               [24] 4370 	movx	@dptr,a
      0011E5 EF               [12] 4371 	mov	a,r7
      0011E6 A3               [24] 4372 	inc	dptr
      0011E7 F0               [24] 4373 	movx	@dptr,a
                                   4374 ;	radio/tdm.c:1056: if (i > max_data_packet_length) {
      0011E8 78r05            [12] 4375 	mov	r0,#_max_data_packet_length
      0011EA E2               [24] 4376 	movx	a,@r0
      0011EB FC               [12] 4377 	mov	r4,a
      0011EC 7D 00            [12] 4378 	mov	r5,#0x00
      0011EE C3               [12] 4379 	clr	c
      0011EF EC               [12] 4380 	mov	a,r4
      0011F0 9E               [12] 4381 	subb	a,r6
      0011F1 ED               [12] 4382 	mov	a,r5
      0011F2 9F               [12] 4383 	subb	a,r7
      0011F3 50 08            [24] 4384 	jnc	00114$
                                   4385 ;	radio/tdm.c:1057: i = max_data_packet_length;
      0011F5 90r00rFF         [24] 4386 	mov	dptr,#_tdm_init_i_1_270
      0011F8 EC               [12] 4387 	mov	a,r4
      0011F9 F0               [24] 4388 	movx	@dptr,a
      0011FA ED               [12] 4389 	mov	a,r5
      0011FB A3               [24] 4390 	inc	dptr
      0011FC F0               [24] 4391 	movx	@dptr,a
      0011FD                       4392 00114$:
                                   4393 ;	radio/tdm.c:1059: packet_set_max_xmit(i);
      0011FD 90r00rFF         [24] 4394 	mov	dptr,#_tdm_init_i_1_270
      001200 E0               [24] 4395 	movx	a,@dptr
      001201 FE               [12] 4396 	mov	r6,a
      001202 A3               [24] 4397 	inc	dptr
      001203 E0               [24] 4398 	movx	a,@dptr
      001204 8E 82            [24] 4399 	mov	dpl,r6
      001206 02r00r00         [24] 4400 	ljmp	_packet_set_max_xmit
                                   4401 ;------------------------------------------------------------
                                   4402 ;Allocation info for local variables in function 'tdm_report_timing'
                                   4403 ;------------------------------------------------------------
                                   4404 ;	radio/tdm.c:1075: tdm_report_timing(void)
                                   4405 ;	-----------------------------------------
                                   4406 ;	 function tdm_report_timing
                                   4407 ;	-----------------------------------------
      001209                       4408 _tdm_report_timing:
                                   4409 ;	radio/tdm.c:1077: printf("silence_period: %u\n", (unsigned)silence_period); delay_msec(1);
      001209 78r06            [12] 4410 	mov	r0,#_silence_period
      00120B E2               [24] 4411 	movx	a,@r0
      00120C C0 E0            [24] 4412 	push	acc
      00120E 08               [12] 4413 	inc	r0
      00120F E2               [24] 4414 	movx	a,@r0
      001210 C0 E0            [24] 4415 	push	acc
      001212 74rEB            [12] 4416 	mov	a,#___str_9
      001214 C0 E0            [24] 4417 	push	acc
      001216 74s00            [12] 4418 	mov	a,#(___str_9 >> 8)
      001218 C0 E0            [24] 4419 	push	acc
      00121A 74 80            [12] 4420 	mov	a,#0x80
      00121C C0 E0            [24] 4421 	push	acc
      00121E 12r00r00         [24] 4422 	lcall	_printfl
      001221 E5 81            [12] 4423 	mov	a,sp
      001223 24 FB            [12] 4424 	add	a,#0xfb
      001225 F5 81            [12] 4425 	mov	sp,a
      001227 90 00 01         [24] 4426 	mov	dptr,#0x0001
      00122A 12r00r00         [24] 4427 	lcall	_delay_msec
                                   4428 ;	radio/tdm.c:1078: printf("tx_window_width: %u\n", (unsigned)tx_window_width); delay_msec(1);
      00122D 78r03            [12] 4429 	mov	r0,#_tx_window_width
      00122F E2               [24] 4430 	movx	a,@r0
      001230 C0 E0            [24] 4431 	push	acc
      001232 08               [12] 4432 	inc	r0
      001233 E2               [24] 4433 	movx	a,@r0
      001234 C0 E0            [24] 4434 	push	acc
      001236 74rFF            [12] 4435 	mov	a,#___str_10
      001238 C0 E0            [24] 4436 	push	acc
      00123A 74s00            [12] 4437 	mov	a,#(___str_10 >> 8)
      00123C C0 E0            [24] 4438 	push	acc
      00123E 74 80            [12] 4439 	mov	a,#0x80
      001240 C0 E0            [24] 4440 	push	acc
      001242 12r00r00         [24] 4441 	lcall	_printfl
      001245 E5 81            [12] 4442 	mov	a,sp
      001247 24 FB            [12] 4443 	add	a,#0xfb
      001249 F5 81            [12] 4444 	mov	sp,a
      00124B 90 00 01         [24] 4445 	mov	dptr,#0x0001
      00124E 12r00r00         [24] 4446 	lcall	_delay_msec
                                   4447 ;	radio/tdm.c:1079: printf("max_data_packet_length: %u\n", (unsigned)max_data_packet_length); delay_msec(1);
      001251 78r05            [12] 4448 	mov	r0,#_max_data_packet_length
      001253 E2               [24] 4449 	movx	a,@r0
      001254 FE               [12] 4450 	mov	r6,a
      001255 7F 00            [12] 4451 	mov	r7,#0x00
      001257 C0 06            [24] 4452 	push	ar6
      001259 C0 07            [24] 4453 	push	ar7
      00125B 74r14            [12] 4454 	mov	a,#___str_11
      00125D C0 E0            [24] 4455 	push	acc
      00125F 74s01            [12] 4456 	mov	a,#(___str_11 >> 8)
      001261 C0 E0            [24] 4457 	push	acc
      001263 74 80            [12] 4458 	mov	a,#0x80
      001265 C0 E0            [24] 4459 	push	acc
      001267 12r00r00         [24] 4460 	lcall	_printfl
      00126A E5 81            [12] 4461 	mov	a,sp
      00126C 24 FB            [12] 4462 	add	a,#0xfb
      00126E F5 81            [12] 4463 	mov	sp,a
      001270 90 00 01         [24] 4464 	mov	dptr,#0x0001
      001273 02r00r00         [24] 4465 	ljmp	_delay_msec
                                   4466 	.area CSEG    (CODE)
                                   4467 	.area CONST   (CODE)
      000000                       4468 ___str_0:
      000000 4C 2F 52 20 52 53 53  4469 	.ascii "L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u "
             49 3A 20 25 75 2F 25
             75 20 20 4C 2F 52 20
             6E 6F 69 73 65 3A 20
             25 75 2F 25 75 20 70
             6B 74 73 3A 20 25 75
             20
      00002B 00                    4470 	.db 0x00
      00002C                       4471 ___str_1:
      00002C 20 74 78 65 3D 25 75  4472 	.ascii " txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u crce=%u temp=%d dco=%"
             20 72 78 65 3D 25 75
             20 73 74 78 3D 25 75
             20 73 72 78 3D 25 75
             20 65 63 63 3D 25 75
             2F 25 75 20 63 72 63
             65 3D 25 75 20 74 65
             6D 70 3D 25 64 20 64
             63 6F 3D 25
      000068 75                    4473 	.ascii "u"
      000069 0A                    4474 	.db 0x0A
      00006A 00                    4475 	.db 0x00
      00006B                       4476 ___str_2:
      00006B 54 44 4D 3A 20 25 75  4477 	.ascii "TDM: %u/%u len=%u "
             2F 25 75 20 6C 65 6E
             3D 25 75 20
      00007D 00                    4478 	.db 0x00
      00007E                       4479 ___str_3:
      00007E 20 64 65 6C 74 61 3A  4480 	.ascii " delta: %d"
             20 25 64
      000088 0A                    4481 	.db 0x0A
      000089 00                    4482 	.db 0x00
      00008A                       4483 ___str_4:
      00008A 54 44 4D 3A 20 63 68  4484 	.ascii "TDM: change timing %u/%u"
             61 6E 67 65 20 74 69
             6D 69 6E 67 20 25 75
             2F 25 75
      0000A2 0A                    4485 	.db 0x0A
      0000A3 00                    4486 	.db 0x00
      0000A4                       4487 ___str_5:
      0000A4 54 44 4D 3A 20 73 63  4488 	.ascii "TDM: scanning"
             61 6E 6E 69 6E 67
      0000B1 0A                    4489 	.db 0x0A
      0000B2 00                    4490 	.db 0x00
      0000B3                       4491 ___str_6:
      0000B3 73 74 61 63 6B 20 62  4492 	.ascii "stack blown"
             6C 6F 77 6E
      0000BE 0A                    4493 	.db 0x0A
      0000BF 00                    4494 	.db 0x00
      0000C0                       4495 ___str_7:
      0000C0 70 64 61 74 61 20 63  4496 	.ascii "pdata canary changed"
             61 6E 61 72 79 20 63
             68 61 6E 67 65 64
      0000D4 0A                    4497 	.db 0x0A
      0000D5 00                    4498 	.db 0x00
      0000D6                       4499 ___str_8:
      0000D6 6F 76 65 72 73 69 7A  4500 	.ascii "oversized tdm packet"
             65 64 20 74 64 6D 20
             70 61 63 6B 65 74
      0000EA 00                    4501 	.db 0x00
      0000EB                       4502 ___str_9:
      0000EB 73 69 6C 65 6E 63 65  4503 	.ascii "silence_period: %u"
             5F 70 65 72 69 6F 64
             3A 20 25 75
      0000FD 0A                    4504 	.db 0x0A
      0000FE 00                    4505 	.db 0x00
      0000FF                       4506 ___str_10:
      0000FF 74 78 5F 77 69 6E 64  4507 	.ascii "tx_window_width: %u"
             6F 77 5F 77 69 64 74
             68 3A 20 25 75
      000112 0A                    4508 	.db 0x0A
      000113 00                    4509 	.db 0x00
      000114                       4510 ___str_11:
      000114 6D 61 78 5F 64 61 74  4511 	.ascii "max_data_packet_length: %u"
             61 5F 70 61 63 6B 65
             74 5F 6C 65 6E 67 74
             68 3A 20 25 75
      00012E 0A                    4512 	.db 0x0A
      00012F 00                    4513 	.db 0x00
                                   4514 	.area XINIT   (CODE)
                                   4515 	.area CABS    (ABS,CODE)
