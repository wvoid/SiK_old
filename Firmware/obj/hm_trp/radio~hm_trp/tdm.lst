                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Sep  7 2022) (Linux)
                                      4 ; This file was generated Wed Sep  7 10:05:12 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module tdm
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _fhop_set_locked
                                     13 	.globl _fhop_window_change
                                     14 	.globl _fhop_receive_channel
                                     15 	.globl _fhop_transmit_channel
                                     16 	.globl _packet_inject
                                     17 	.globl _packet_set_max_xmit
                                     18 	.globl _packet_force_resend
                                     19 	.globl _packet_is_duplicate
                                     20 	.globl _packet_is_injected
                                     21 	.globl _packet_is_resend
                                     22 	.globl _packet_get_next
                                     23 	.globl _timer_entropy
                                     24 	.globl _delay_msec
                                     25 	.globl _timer2_tick
                                     26 	.globl _radio_temperature
                                     27 	.globl _MAVLink_report
                                     28 	.globl _radio_receive_in_progress
                                     29 	.globl _radio_get_transmit_power
                                     30 	.globl _radio_air_rate
                                     31 	.globl _radio_current_rssi
                                     32 	.globl _radio_last_rssi
                                     33 	.globl _radio_set_channel
                                     34 	.globl _radio_receiver_on
                                     35 	.globl _radio_transmit
                                     36 	.globl _radio_preamble_detected
                                     37 	.globl _radio_receive_packet
                                     38 	.globl _printf_end_capture
                                     39 	.globl _printf_start_capture
                                     40 	.globl _printfl
                                     41 	.globl _panic
                                     42 	.globl _at_command
                                     43 	.globl _constrain
                                     44 	.globl _param_get
                                     45 	.globl _serial_write_buf
                                     46 	.globl _strlen
                                     47 	.globl _memset
                                     48 	.globl _memcpy
                                     49 	.globl _rand
                                     50 	.globl _SDN
                                     51 	.globl _NSS1
                                     52 	.globl _IRQ
                                     53 	.globl _PIN_ENABLE
                                     54 	.globl _PIN_CONFIG
                                     55 	.globl _LED_GREEN
                                     56 	.globl _LED_RED
                                     57 	.globl _SPI0EN
                                     58 	.globl _TXBMT0
                                     59 	.globl _NSS0MD0
                                     60 	.globl _NSS0MD1
                                     61 	.globl _RXOVRN0
                                     62 	.globl _MODF0
                                     63 	.globl _WCOL0
                                     64 	.globl _SPIF0
                                     65 	.globl _AD0CM0
                                     66 	.globl _AD0CM1
                                     67 	.globl _AD0CM2
                                     68 	.globl _AD0WINT
                                     69 	.globl _AD0BUSY
                                     70 	.globl _AD0INT
                                     71 	.globl _BURSTEN
                                     72 	.globl _AD0EN
                                     73 	.globl _CCF0
                                     74 	.globl _CCF1
                                     75 	.globl _CCF2
                                     76 	.globl _CCF3
                                     77 	.globl _CCF4
                                     78 	.globl _CCF5
                                     79 	.globl _CR
                                     80 	.globl _CF
                                     81 	.globl _P
                                     82 	.globl _F1
                                     83 	.globl _OV
                                     84 	.globl _RS0
                                     85 	.globl _RS1
                                     86 	.globl _F0
                                     87 	.globl _AC
                                     88 	.globl _CY
                                     89 	.globl _T2XCLK
                                     90 	.globl _T2RCLK
                                     91 	.globl _TR2
                                     92 	.globl _T2SPLIT
                                     93 	.globl _TF2CEN
                                     94 	.globl _TF2LEN
                                     95 	.globl _TF2L
                                     96 	.globl _TF2H
                                     97 	.globl _SI
                                     98 	.globl _ACK
                                     99 	.globl _ARBLOST
                                    100 	.globl _ACKRQ
                                    101 	.globl _STO
                                    102 	.globl _STA
                                    103 	.globl _TXMODE
                                    104 	.globl _MASTER
                                    105 	.globl _PX0
                                    106 	.globl _PT0
                                    107 	.globl _PX1
                                    108 	.globl _PT1
                                    109 	.globl _PS0
                                    110 	.globl _PT2
                                    111 	.globl _PSPI0
                                    112 	.globl _SPI1EN
                                    113 	.globl _TXBMT1
                                    114 	.globl _NSS1MD0
                                    115 	.globl _NSS1MD1
                                    116 	.globl _RXOVRN1
                                    117 	.globl _MODF1
                                    118 	.globl _WCOL1
                                    119 	.globl _SPIF1
                                    120 	.globl _EX0
                                    121 	.globl _ET0
                                    122 	.globl _EX1
                                    123 	.globl _ET1
                                    124 	.globl _ES0
                                    125 	.globl _ET2
                                    126 	.globl _ESPI0
                                    127 	.globl _EA
                                    128 	.globl _RI0
                                    129 	.globl _TI0
                                    130 	.globl _RB80
                                    131 	.globl _TB80
                                    132 	.globl _REN0
                                    133 	.globl _MCE0
                                    134 	.globl _S0MODE
                                    135 	.globl _CRC0VAL
                                    136 	.globl _CRC0INIT
                                    137 	.globl _CRC0SEL
                                    138 	.globl _IT0
                                    139 	.globl _IE0
                                    140 	.globl _IT1
                                    141 	.globl _IE1
                                    142 	.globl _TR0
                                    143 	.globl _TF0
                                    144 	.globl _TR1
                                    145 	.globl _TF1
                                    146 	.globl _PCA0CP4
                                    147 	.globl _PCA0CP0
                                    148 	.globl _PCA0
                                    149 	.globl _PCA0CP3
                                    150 	.globl _PCA0CP2
                                    151 	.globl _PCA0CP1
                                    152 	.globl _PCA0CP5
                                    153 	.globl _TMR2
                                    154 	.globl _TMR2RL
                                    155 	.globl _ADC0LT
                                    156 	.globl _ADC0GT
                                    157 	.globl _ADC0
                                    158 	.globl _TMR3
                                    159 	.globl _TMR3RL
                                    160 	.globl _TOFF
                                    161 	.globl _DP
                                    162 	.globl _VDM0CN
                                    163 	.globl _PCA0CPH4
                                    164 	.globl _PCA0CPL4
                                    165 	.globl _PCA0CPH0
                                    166 	.globl _PCA0CPL0
                                    167 	.globl _PCA0H
                                    168 	.globl _PCA0L
                                    169 	.globl _SPI0CN
                                    170 	.globl _EIP2
                                    171 	.globl _EIP1
                                    172 	.globl _SMB0ADM
                                    173 	.globl _SMB0ADR
                                    174 	.globl _P2MDIN
                                    175 	.globl _P1MDIN
                                    176 	.globl _P0MDIN
                                    177 	.globl _B
                                    178 	.globl _RSTSRC
                                    179 	.globl _PCA0CPH3
                                    180 	.globl _PCA0CPL3
                                    181 	.globl _PCA0CPH2
                                    182 	.globl _PCA0CPL2
                                    183 	.globl _PCA0CPH1
                                    184 	.globl _PCA0CPL1
                                    185 	.globl _ADC0CN
                                    186 	.globl _EIE2
                                    187 	.globl _EIE1
                                    188 	.globl _FLWR
                                    189 	.globl _IT01CF
                                    190 	.globl _XBR2
                                    191 	.globl _XBR1
                                    192 	.globl _XBR0
                                    193 	.globl _ACC
                                    194 	.globl _PCA0PWM
                                    195 	.globl _PCA0CPM4
                                    196 	.globl _PCA0CPM3
                                    197 	.globl _PCA0CPM2
                                    198 	.globl _PCA0CPM1
                                    199 	.globl _PCA0CPM0
                                    200 	.globl _PCA0MD
                                    201 	.globl _PCA0CN
                                    202 	.globl _P0MAT
                                    203 	.globl _P2SKIP
                                    204 	.globl _P1SKIP
                                    205 	.globl _P0SKIP
                                    206 	.globl _PCA0CPH5
                                    207 	.globl _PCA0CPL5
                                    208 	.globl _REF0CN
                                    209 	.globl _PSW
                                    210 	.globl _P1MAT
                                    211 	.globl _PCA0CPM5
                                    212 	.globl _TMR2H
                                    213 	.globl _TMR2L
                                    214 	.globl _TMR2RLH
                                    215 	.globl _TMR2RLL
                                    216 	.globl _REG0CN
                                    217 	.globl _TMR2CN
                                    218 	.globl _P0MASK
                                    219 	.globl _ADC0LTH
                                    220 	.globl _ADC0LTL
                                    221 	.globl _ADC0GTH
                                    222 	.globl _ADC0GTL
                                    223 	.globl _SMB0DAT
                                    224 	.globl _SMB0CF
                                    225 	.globl _SMB0CN
                                    226 	.globl _P1MASK
                                    227 	.globl _ADC0H
                                    228 	.globl _ADC0L
                                    229 	.globl _ADC0TK
                                    230 	.globl _ADC0CF
                                    231 	.globl _ADC0MX
                                    232 	.globl _ADC0PWR
                                    233 	.globl _ADC0AC
                                    234 	.globl _IREF0CN
                                    235 	.globl _IP
                                    236 	.globl _FLKEY
                                    237 	.globl _FLSCL
                                    238 	.globl _PMU0CF
                                    239 	.globl _OSCICL
                                    240 	.globl _OSCICN
                                    241 	.globl _OSCXCN
                                    242 	.globl _SPI1CN
                                    243 	.globl _ONESHOT
                                    244 	.globl _EMI0TC
                                    245 	.globl _RTC0KEY
                                    246 	.globl _RTC0DAT
                                    247 	.globl _RTC0ADR
                                    248 	.globl _EMI0CF
                                    249 	.globl _EMI0CN
                                    250 	.globl _CLKSEL
                                    251 	.globl _IE
                                    252 	.globl _SFRPAGE
                                    253 	.globl _P2DRV
                                    254 	.globl _P2MDOUT
                                    255 	.globl _P1DRV
                                    256 	.globl _P1MDOUT
                                    257 	.globl _P0DRV
                                    258 	.globl _P0MDOUT
                                    259 	.globl _SPI0DAT
                                    260 	.globl _SPI0CKR
                                    261 	.globl _SPI0CFG
                                    262 	.globl _P2
                                    263 	.globl _CPT0MX
                                    264 	.globl _CPT1MX
                                    265 	.globl _CPT0MD
                                    266 	.globl _CPT1MD
                                    267 	.globl _CPT0CN
                                    268 	.globl _CPT1CN
                                    269 	.globl _SBUF0
                                    270 	.globl _SCON0
                                    271 	.globl _CRC0CNT
                                    272 	.globl _DC0CN
                                    273 	.globl _CRC0AUTO
                                    274 	.globl _DC0CF
                                    275 	.globl _TMR3H
                                    276 	.globl _CRC0FLIP
                                    277 	.globl _TMR3L
                                    278 	.globl _CRC0IN
                                    279 	.globl _TMR3RLH
                                    280 	.globl _CRC0CN
                                    281 	.globl _TMR3RLL
                                    282 	.globl _CRC0DAT
                                    283 	.globl _TMR3CN
                                    284 	.globl _P1
                                    285 	.globl _PSCTL
                                    286 	.globl _CKCON
                                    287 	.globl _TH1
                                    288 	.globl _TH0
                                    289 	.globl _TL1
                                    290 	.globl _TL0
                                    291 	.globl _TMOD
                                    292 	.globl _TCON
                                    293 	.globl _PCON
                                    294 	.globl _TOFFH
                                    295 	.globl _SPI1DAT
                                    296 	.globl _TOFFL
                                    297 	.globl _SPI1CKR
                                    298 	.globl _SPI1CFG
                                    299 	.globl _DPH
                                    300 	.globl _DPL
                                    301 	.globl _SP
                                    302 	.globl _P0
                                    303 	.globl _test_display
                                    304 	.globl _pbuf
                                    305 	.globl _trailer
                                    306 	.globl _lbt_rssi
                                    307 	.globl _duty_cycle_offset
                                    308 	.globl _duty_cycle
                                    309 	.globl _transmit_wait
                                    310 	.globl __canary
                                    311 	.globl _tdm_show_rssi
                                    312 	.globl _tdm_change_phase
                                    313 	.globl _tdm_remote_at
                                    314 	.globl _tdm_serial_loop
                                    315 	.globl _tdm_init
                                    316 	.globl _tdm_report_timing
                                    317 ;--------------------------------------------------------
                                    318 ; special function registers
                                    319 ;--------------------------------------------------------
                                    320 	.area RSEG    (ABS,DATA)
      000000                        321 	.org 0x0000
                           000080   322 _P0	=	0x0080
                           000081   323 _SP	=	0x0081
                           000082   324 _DPL	=	0x0082
                           000083   325 _DPH	=	0x0083
                           000084   326 _SPI1CFG	=	0x0084
                           000085   327 _SPI1CKR	=	0x0085
                           000085   328 _TOFFL	=	0x0085
                           000086   329 _SPI1DAT	=	0x0086
                           000086   330 _TOFFH	=	0x0086
                           000087   331 _PCON	=	0x0087
                           000088   332 _TCON	=	0x0088
                           000089   333 _TMOD	=	0x0089
                           00008A   334 _TL0	=	0x008a
                           00008B   335 _TL1	=	0x008b
                           00008C   336 _TH0	=	0x008c
                           00008D   337 _TH1	=	0x008d
                           00008E   338 _CKCON	=	0x008e
                           00008F   339 _PSCTL	=	0x008f
                           000090   340 _P1	=	0x0090
                           000091   341 _TMR3CN	=	0x0091
                           000091   342 _CRC0DAT	=	0x0091
                           000092   343 _TMR3RLL	=	0x0092
                           000092   344 _CRC0CN	=	0x0092
                           000093   345 _TMR3RLH	=	0x0093
                           000093   346 _CRC0IN	=	0x0093
                           000094   347 _TMR3L	=	0x0094
                           000095   348 _CRC0FLIP	=	0x0095
                           000095   349 _TMR3H	=	0x0095
                           000096   350 _DC0CF	=	0x0096
                           000096   351 _CRC0AUTO	=	0x0096
                           000097   352 _DC0CN	=	0x0097
                           000097   353 _CRC0CNT	=	0x0097
                           000098   354 _SCON0	=	0x0098
                           000099   355 _SBUF0	=	0x0099
                           00009A   356 _CPT1CN	=	0x009a
                           00009B   357 _CPT0CN	=	0x009b
                           00009C   358 _CPT1MD	=	0x009c
                           00009D   359 _CPT0MD	=	0x009d
                           00009E   360 _CPT1MX	=	0x009e
                           00009F   361 _CPT0MX	=	0x009f
                           0000A0   362 _P2	=	0x00a0
                           0000A1   363 _SPI0CFG	=	0x00a1
                           0000A2   364 _SPI0CKR	=	0x00a2
                           0000A3   365 _SPI0DAT	=	0x00a3
                           0000A4   366 _P0MDOUT	=	0x00a4
                           0000A4   367 _P0DRV	=	0x00a4
                           0000A5   368 _P1MDOUT	=	0x00a5
                           0000A5   369 _P1DRV	=	0x00a5
                           0000A6   370 _P2MDOUT	=	0x00a6
                           0000A6   371 _P2DRV	=	0x00a6
                           0000A7   372 _SFRPAGE	=	0x00a7
                           0000A8   373 _IE	=	0x00a8
                           0000A9   374 _CLKSEL	=	0x00a9
                           0000AA   375 _EMI0CN	=	0x00aa
                           0000AB   376 _EMI0CF	=	0x00ab
                           0000AC   377 _RTC0ADR	=	0x00ac
                           0000AD   378 _RTC0DAT	=	0x00ad
                           0000AE   379 _RTC0KEY	=	0x00ae
                           0000AF   380 _EMI0TC	=	0x00af
                           0000AF   381 _ONESHOT	=	0x00af
                           0000B0   382 _SPI1CN	=	0x00b0
                           0000B1   383 _OSCXCN	=	0x00b1
                           0000B2   384 _OSCICN	=	0x00b2
                           0000B3   385 _OSCICL	=	0x00b3
                           0000B5   386 _PMU0CF	=	0x00b5
                           0000B6   387 _FLSCL	=	0x00b6
                           0000B7   388 _FLKEY	=	0x00b7
                           0000B8   389 _IP	=	0x00b8
                           0000B9   390 _IREF0CN	=	0x00b9
                           0000BA   391 _ADC0AC	=	0x00ba
                           0000BA   392 _ADC0PWR	=	0x00ba
                           0000BB   393 _ADC0MX	=	0x00bb
                           0000BC   394 _ADC0CF	=	0x00bc
                           0000BD   395 _ADC0TK	=	0x00bd
                           0000BD   396 _ADC0L	=	0x00bd
                           0000BE   397 _ADC0H	=	0x00be
                           0000BF   398 _P1MASK	=	0x00bf
                           0000C0   399 _SMB0CN	=	0x00c0
                           0000C1   400 _SMB0CF	=	0x00c1
                           0000C2   401 _SMB0DAT	=	0x00c2
                           0000C3   402 _ADC0GTL	=	0x00c3
                           0000C4   403 _ADC0GTH	=	0x00c4
                           0000C5   404 _ADC0LTL	=	0x00c5
                           0000C6   405 _ADC0LTH	=	0x00c6
                           0000C7   406 _P0MASK	=	0x00c7
                           0000C8   407 _TMR2CN	=	0x00c8
                           0000C9   408 _REG0CN	=	0x00c9
                           0000CA   409 _TMR2RLL	=	0x00ca
                           0000CB   410 _TMR2RLH	=	0x00cb
                           0000CC   411 _TMR2L	=	0x00cc
                           0000CD   412 _TMR2H	=	0x00cd
                           0000CE   413 _PCA0CPM5	=	0x00ce
                           0000CF   414 _P1MAT	=	0x00cf
                           0000D0   415 _PSW	=	0x00d0
                           0000D1   416 _REF0CN	=	0x00d1
                           0000D2   417 _PCA0CPL5	=	0x00d2
                           0000D3   418 _PCA0CPH5	=	0x00d3
                           0000D4   419 _P0SKIP	=	0x00d4
                           0000D5   420 _P1SKIP	=	0x00d5
                           0000D6   421 _P2SKIP	=	0x00d6
                           0000D7   422 _P0MAT	=	0x00d7
                           0000D8   423 _PCA0CN	=	0x00d8
                           0000D9   424 _PCA0MD	=	0x00d9
                           0000DA   425 _PCA0CPM0	=	0x00da
                           0000DB   426 _PCA0CPM1	=	0x00db
                           0000DC   427 _PCA0CPM2	=	0x00dc
                           0000DD   428 _PCA0CPM3	=	0x00dd
                           0000DE   429 _PCA0CPM4	=	0x00de
                           0000DF   430 _PCA0PWM	=	0x00df
                           0000E0   431 _ACC	=	0x00e0
                           0000E1   432 _XBR0	=	0x00e1
                           0000E2   433 _XBR1	=	0x00e2
                           0000E3   434 _XBR2	=	0x00e3
                           0000E4   435 _IT01CF	=	0x00e4
                           0000E5   436 _FLWR	=	0x00e5
                           0000E6   437 _EIE1	=	0x00e6
                           0000E7   438 _EIE2	=	0x00e7
                           0000E8   439 _ADC0CN	=	0x00e8
                           0000E9   440 _PCA0CPL1	=	0x00e9
                           0000EA   441 _PCA0CPH1	=	0x00ea
                           0000EB   442 _PCA0CPL2	=	0x00eb
                           0000EC   443 _PCA0CPH2	=	0x00ec
                           0000ED   444 _PCA0CPL3	=	0x00ed
                           0000EE   445 _PCA0CPH3	=	0x00ee
                           0000EF   446 _RSTSRC	=	0x00ef
                           0000F0   447 _B	=	0x00f0
                           0000F1   448 _P0MDIN	=	0x00f1
                           0000F2   449 _P1MDIN	=	0x00f2
                           0000F3   450 _P2MDIN	=	0x00f3
                           0000F4   451 _SMB0ADR	=	0x00f4
                           0000F5   452 _SMB0ADM	=	0x00f5
                           0000F6   453 _EIP1	=	0x00f6
                           0000F7   454 _EIP2	=	0x00f7
                           0000F8   455 _SPI0CN	=	0x00f8
                           0000F9   456 _PCA0L	=	0x00f9
                           0000FA   457 _PCA0H	=	0x00fa
                           0000FB   458 _PCA0CPL0	=	0x00fb
                           0000FC   459 _PCA0CPH0	=	0x00fc
                           0000FD   460 _PCA0CPL4	=	0x00fd
                           0000FE   461 _PCA0CPH4	=	0x00fe
                           0000FF   462 _VDM0CN	=	0x00ff
                           008382   463 _DP	=	0x8382
                           008685   464 _TOFF	=	0x8685
                           009392   465 _TMR3RL	=	0x9392
                           009594   466 _TMR3	=	0x9594
                           00BEBD   467 _ADC0	=	0xbebd
                           00C4C3   468 _ADC0GT	=	0xc4c3
                           00C6C5   469 _ADC0LT	=	0xc6c5
                           00CBCA   470 _TMR2RL	=	0xcbca
                           00CDCC   471 _TMR2	=	0xcdcc
                           00D3D2   472 _PCA0CP5	=	0xd3d2
                           00EAE9   473 _PCA0CP1	=	0xeae9
                           00ECEB   474 _PCA0CP2	=	0xeceb
                           00EEED   475 _PCA0CP3	=	0xeeed
                           00FAF9   476 _PCA0	=	0xfaf9
                           00FCFB   477 _PCA0CP0	=	0xfcfb
                           00FEFD   478 _PCA0CP4	=	0xfefd
                                    479 ;--------------------------------------------------------
                                    480 ; special function bits
                                    481 ;--------------------------------------------------------
                                    482 	.area RSEG    (ABS,DATA)
      000000                        483 	.org 0x0000
                           00008F   484 _TF1	=	0x008f
                           00008E   485 _TR1	=	0x008e
                           00008D   486 _TF0	=	0x008d
                           00008C   487 _TR0	=	0x008c
                           00008B   488 _IE1	=	0x008b
                           00008A   489 _IT1	=	0x008a
                           000089   490 _IE0	=	0x0089
                           000088   491 _IT0	=	0x0088
                           000096   492 _CRC0SEL	=	0x0096
                           000095   493 _CRC0INIT	=	0x0095
                           000094   494 _CRC0VAL	=	0x0094
                           00009F   495 _S0MODE	=	0x009f
                           00009D   496 _MCE0	=	0x009d
                           00009C   497 _REN0	=	0x009c
                           00009B   498 _TB80	=	0x009b
                           00009A   499 _RB80	=	0x009a
                           000099   500 _TI0	=	0x0099
                           000098   501 _RI0	=	0x0098
                           0000AF   502 _EA	=	0x00af
                           0000AE   503 _ESPI0	=	0x00ae
                           0000AD   504 _ET2	=	0x00ad
                           0000AC   505 _ES0	=	0x00ac
                           0000AB   506 _ET1	=	0x00ab
                           0000AA   507 _EX1	=	0x00aa
                           0000A9   508 _ET0	=	0x00a9
                           0000A8   509 _EX0	=	0x00a8
                           0000B7   510 _SPIF1	=	0x00b7
                           0000B6   511 _WCOL1	=	0x00b6
                           0000B5   512 _MODF1	=	0x00b5
                           0000B4   513 _RXOVRN1	=	0x00b4
                           0000B3   514 _NSS1MD1	=	0x00b3
                           0000B2   515 _NSS1MD0	=	0x00b2
                           0000B1   516 _TXBMT1	=	0x00b1
                           0000B0   517 _SPI1EN	=	0x00b0
                           0000BE   518 _PSPI0	=	0x00be
                           0000BD   519 _PT2	=	0x00bd
                           0000BC   520 _PS0	=	0x00bc
                           0000BB   521 _PT1	=	0x00bb
                           0000BA   522 _PX1	=	0x00ba
                           0000B9   523 _PT0	=	0x00b9
                           0000B8   524 _PX0	=	0x00b8
                           0000C7   525 _MASTER	=	0x00c7
                           0000C6   526 _TXMODE	=	0x00c6
                           0000C5   527 _STA	=	0x00c5
                           0000C4   528 _STO	=	0x00c4
                           0000C3   529 _ACKRQ	=	0x00c3
                           0000C2   530 _ARBLOST	=	0x00c2
                           0000C1   531 _ACK	=	0x00c1
                           0000C0   532 _SI	=	0x00c0
                           0000CF   533 _TF2H	=	0x00cf
                           0000CE   534 _TF2L	=	0x00ce
                           0000CD   535 _TF2LEN	=	0x00cd
                           0000CC   536 _TF2CEN	=	0x00cc
                           0000CB   537 _T2SPLIT	=	0x00cb
                           0000CA   538 _TR2	=	0x00ca
                           0000C9   539 _T2RCLK	=	0x00c9
                           0000C8   540 _T2XCLK	=	0x00c8
                           0000D7   541 _CY	=	0x00d7
                           0000D6   542 _AC	=	0x00d6
                           0000D5   543 _F0	=	0x00d5
                           0000D4   544 _RS1	=	0x00d4
                           0000D3   545 _RS0	=	0x00d3
                           0000D2   546 _OV	=	0x00d2
                           0000D1   547 _F1	=	0x00d1
                           0000D0   548 _P	=	0x00d0
                           0000DF   549 _CF	=	0x00df
                           0000DE   550 _CR	=	0x00de
                           0000DD   551 _CCF5	=	0x00dd
                           0000DC   552 _CCF4	=	0x00dc
                           0000DB   553 _CCF3	=	0x00db
                           0000DA   554 _CCF2	=	0x00da
                           0000D9   555 _CCF1	=	0x00d9
                           0000D8   556 _CCF0	=	0x00d8
                           0000EF   557 _AD0EN	=	0x00ef
                           0000EE   558 _BURSTEN	=	0x00ee
                           0000ED   559 _AD0INT	=	0x00ed
                           0000EC   560 _AD0BUSY	=	0x00ec
                           0000EB   561 _AD0WINT	=	0x00eb
                           0000EA   562 _AD0CM2	=	0x00ea
                           0000E9   563 _AD0CM1	=	0x00e9
                           0000E8   564 _AD0CM0	=	0x00e8
                           0000FF   565 _SPIF0	=	0x00ff
                           0000FE   566 _WCOL0	=	0x00fe
                           0000FD   567 _MODF0	=	0x00fd
                           0000FC   568 _RXOVRN0	=	0x00fc
                           0000FB   569 _NSS0MD1	=	0x00fb
                           0000FA   570 _NSS0MD0	=	0x00fa
                           0000F9   571 _TXBMT0	=	0x00f9
                           0000F8   572 _SPI0EN	=	0x00f8
                           000096   573 _LED_RED	=	0x0096
                           000095   574 _LED_GREEN	=	0x0095
                           000082   575 _PIN_CONFIG	=	0x0082
                           000083   576 _PIN_ENABLE	=	0x0083
                           000087   577 _IRQ	=	0x0087
                           000094   578 _NSS1	=	0x0094
                           0000A6   579 _SDN	=	0x00a6
                                    580 ;--------------------------------------------------------
                                    581 ; overlayable register banks
                                    582 ;--------------------------------------------------------
                                    583 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        584 	.ds 8
                                    585 ;--------------------------------------------------------
                                    586 ; internal ram data
                                    587 ;--------------------------------------------------------
                                    588 	.area DSEG    (DATA)
      000000                        589 _tdm_show_rssi_sloc0_1_0:
      000000                        590 	.ds 2
      000002                        591 _tdm_show_rssi_sloc1_1_0:
      000002                        592 	.ds 2
      000004                        593 _tdm_show_rssi_sloc2_1_0:
      000004                        594 	.ds 2
      000006                        595 _tdm_show_rssi_sloc3_1_0:
      000006                        596 	.ds 2
      000008                        597 _tdm_show_rssi_sloc4_1_0:
      000008                        598 	.ds 2
      00000A                        599 _sync_tx_windows_old_state_1_162:
      00000A                        600 	.ds 1
      00000B                        601 _tdm_state_update_sloc0_1_0:
      00000B                        602 	.ds 2
      00000D                        603 _tdm_state_update_sloc1_1_0:
      00000D                        604 	.ds 4
      000011                        605 _tdm_state_update_sloc2_1_0:
      000011                        606 	.ds 4
      000015                        607 _tdm_init_sloc0_1_0:
      000015                        608 	.ds 4
                                    609 ;--------------------------------------------------------
                                    610 ; overlayable items in internal ram 
                                    611 ;--------------------------------------------------------
                                    612 ;--------------------------------------------------------
                                    613 ; indirectly addressable internal ram data
                                    614 ;--------------------------------------------------------
                                    615 	.area ISEG    (DATA)
                           0000FF   616 __canary	=	0x00ff
                                    617 ;--------------------------------------------------------
                                    618 ; absolute internal ram data
                                    619 ;--------------------------------------------------------
                                    620 	.area IABS    (ABS,DATA)
                                    621 	.area IABS    (ABS,DATA)
                                    622 ;--------------------------------------------------------
                                    623 ; bit data
                                    624 ;--------------------------------------------------------
                                    625 	.area BSEG    (BIT)
      000000                        626 _bonus_transmit:
      000000                        627 	.ds 1
      000001                        628 _transmit_yield:
      000001                        629 	.ds 1
      000002                        630 _blink_state:
      000002                        631 	.ds 1
      000003                        632 _received_packet:
      000003                        633 	.ds 1
      000004                        634 _duty_cycle_wait:
      000004                        635 	.ds 1
      000005                        636 _send_statistics:
      000005                        637 	.ds 1
      000006                        638 _send_at_command:
      000006                        639 	.ds 1
      000007                        640 _sync_tx_windows_sloc0_1_0:
      000007                        641 	.ds 1
      000008                        642 _tdm_state_update_sloc3_1_0:
      000008                        643 	.ds 1
      000009                        644 _tdm_serial_loop_sloc0_1_0:
      000009                        645 	.ds 1
                                    646 ;--------------------------------------------------------
                                    647 ; paged external ram data
                                    648 ;--------------------------------------------------------
                                    649 	.area PSEG    (PAG,XDATA)
      000000                        650 _tdm_state:
      000000                        651 	.ds 1
      000001                        652 _tdm_state_remaining:
      000001                        653 	.ds 2
      000003                        654 _tx_window_width:
      000003                        655 	.ds 2
      000005                        656 _max_data_packet_length:
      000005                        657 	.ds 1
      000006                        658 _silence_period:
      000006                        659 	.ds 2
      000008                        660 _packet_latency:
      000008                        661 	.ds 2
      00000A                        662 _ticks_per_byte:
      00000A                        663 	.ds 2
      00000C                        664 _transmit_wait::
      00000C                        665 	.ds 2
      00000E                        666 _duty_cycle::
      00000E                        667 	.ds 1
      00000F                        668 _average_duty_cycle:
      00000F                        669 	.ds 4
      000013                        670 _duty_cycle_offset::
      000013                        671 	.ds 1
      000014                        672 _transmitted_ticks:
      000014                        673 	.ds 2
      000016                        674 _lbt_rssi::
      000016                        675 	.ds 1
      000017                        676 _lbt_listen_time:
      000017                        677 	.ds 2
      000019                        678 _lbt_min_time:
      000019                        679 	.ds 2
      00001B                        680 _lbt_rand:
      00001B                        681 	.ds 2
      00001D                        682 _trailer::
      00001D                        683 	.ds 2
      00001F                        684 _remote_at_cmd:
      00001F                        685 	.ds 17
      000030                        686 _sync_tx_windows_delta_2_169:
      000030                        687 	.ds 2
      000032                        688 _tdm_serial_loop_len_1_213:
      000032                        689 	.ds 1
      000033                        690 _tdm_serial_loop_tdelta_1_213:
      000033                        691 	.ds 2
      000035                        692 _tdm_serial_loop_last_t_1_213:
      000035                        693 	.ds 2
      000037                        694 _tdm_serial_loop_last_link_update_1_213:
      000037                        695 	.ds 2
                                    696 ;--------------------------------------------------------
                                    697 ; external ram data
                                    698 ;--------------------------------------------------------
                                    699 	.area XSEG    (XDATA)
      000000                        700 _pbuf::
      000000                        701 	.ds 252
      0000FC                        702 _test_display::
      0000FC                        703 	.ds 1
      0000FD                        704 _link_update_unlock_count_1_192:
      0000FD                        705 	.ds 1
      0000FE                        706 _link_update_temperature_count_1_192:
      0000FE                        707 	.ds 1
      0000FF                        708 _tdm_init_i_1_253:
      0000FF                        709 	.ds 2
      000101                        710 _tdm_init_window_width_1_253:
      000101                        711 	.ds 4
                                    712 ;--------------------------------------------------------
                                    713 ; absolute external ram data
                                    714 ;--------------------------------------------------------
                                    715 	.area XABS    (ABS,XDATA)
                                    716 ;--------------------------------------------------------
                                    717 ; external initialized ram data
                                    718 ;--------------------------------------------------------
                                    719 	.area XISEG   (XDATA)
                                    720 	.area HOME    (CODE)
                                    721 	.area GSINIT0 (CODE)
                                    722 	.area GSINIT1 (CODE)
                                    723 	.area GSINIT2 (CODE)
                                    724 	.area GSINIT3 (CODE)
                                    725 	.area GSINIT4 (CODE)
                                    726 	.area GSINIT5 (CODE)
                                    727 	.area GSINIT  (CODE)
                                    728 	.area GSFINAL (CODE)
                                    729 	.area CSEG    (CODE)
                                    730 ;--------------------------------------------------------
                                    731 ; global & static initialisations
                                    732 ;--------------------------------------------------------
                                    733 	.area HOME    (CODE)
                                    734 	.area GSINIT  (CODE)
                                    735 	.area GSFINAL (CODE)
                                    736 	.area GSINIT  (CODE)
                                    737 ;------------------------------------------------------------
                                    738 ;Allocation info for local variables in function 'link_update'
                                    739 ;------------------------------------------------------------
                                    740 ;old_remaining             Allocated to registers r6 r7 
                                    741 ;unlock_count              Allocated with name '_link_update_unlock_count_1_192'
                                    742 ;temperature_count         Allocated with name '_link_update_temperature_count_1_192'
                                    743 ;------------------------------------------------------------
                                    744 ;	radio/tdm.c:383: static uint8_t unlock_count = 10, temperature_count;
      000000 90r00rFD         [24]  745 	mov	dptr,#_link_update_unlock_count_1_192
      000003 74 0A            [12]  746 	mov	a,#0x0A
      000005 F0               [24]  747 	movx	@dptr,a
                                    748 ;--------------------------------------------------------
                                    749 ; Home
                                    750 ;--------------------------------------------------------
                                    751 	.area HOME    (CODE)
                                    752 	.area HOME    (CODE)
                                    753 ;--------------------------------------------------------
                                    754 ; code
                                    755 ;--------------------------------------------------------
                                    756 	.area CSEG    (CODE)
                                    757 ;------------------------------------------------------------
                                    758 ;Allocation info for local variables in function 'tdm_show_rssi'
                                    759 ;------------------------------------------------------------
                                    760 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                                    761 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                                    762 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                                    763 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                                    764 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                                    765 ;------------------------------------------------------------
                                    766 ;	radio/tdm.c:162: tdm_show_rssi(void)
                                    767 ;	-----------------------------------------
                                    768 ;	 function tdm_show_rssi
                                    769 ;	-----------------------------------------
      000000                        770 _tdm_show_rssi:
                           000007   771 	ar7 = 0x07
                           000006   772 	ar6 = 0x06
                           000005   773 	ar5 = 0x05
                           000004   774 	ar4 = 0x04
                           000003   775 	ar3 = 0x03
                           000002   776 	ar2 = 0x02
                           000001   777 	ar1 = 0x01
                           000000   778 	ar0 = 0x00
                                    779 ;	radio/tdm.c:164: printf("L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u ",
      000000 78r02            [12]  780 	mov	r0,#(_statistics + 0x0002)
      000002 E2               [24]  781 	movx	a,@r0
      000003 FE               [12]  782 	mov	r6,a
      000004 08               [12]  783 	inc	r0
      000005 E2               [24]  784 	movx	a,@r0
      000006 FF               [12]  785 	mov	r7,a
      000007 78r01            [12]  786 	mov	r0,#(_remote_statistics + 0x0001)
      000009 E2               [24]  787 	movx	a,@r0
      00000A FD               [12]  788 	mov	r5,a
      00000B 7C 00            [12]  789 	mov	r4,#0x00
      00000D 78r01            [12]  790 	mov	r0,#(_statistics + 0x0001)
      00000F E2               [24]  791 	movx	a,@r0
      000010 FB               [12]  792 	mov	r3,a
      000011 8B*00            [24]  793 	mov	_tdm_show_rssi_sloc0_1_0,r3
                                    794 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc0_1_0 + 1),#0x00
      000013 8C*01            [24]  795 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),r4
      000015 78r00            [12]  796 	mov	r0,#_remote_statistics
      000017 E2               [24]  797 	movx	a,@r0
      000018 FB               [12]  798 	mov	r3,a
      000019 8B*02            [24]  799 	mov	_tdm_show_rssi_sloc1_1_0,r3
                                    800 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
      00001B 8C*03            [24]  801 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),r4
      00001D 78r00            [12]  802 	mov	r0,#_statistics
      00001F E2               [24]  803 	movx	a,@r0
      000020 FB               [12]  804 	mov	r3,a
      000021 7A 00            [12]  805 	mov	r2,#0x00
      000023 C0 06            [24]  806 	push	ar6
      000025 C0 07            [24]  807 	push	ar7
      000027 C0 05            [24]  808 	push	ar5
      000029 C0 04            [24]  809 	push	ar4
      00002B C0*00            [24]  810 	push	_tdm_show_rssi_sloc0_1_0
      00002D C0*01            [24]  811 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      00002F C0*02            [24]  812 	push	_tdm_show_rssi_sloc1_1_0
      000031 C0*03            [24]  813 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      000033 C0 03            [24]  814 	push	ar3
      000035 C0 02            [24]  815 	push	ar2
      000037 74r00            [12]  816 	mov	a,#___str_0
      000039 C0 E0            [24]  817 	push	acc
      00003B 74s00            [12]  818 	mov	a,#(___str_0 >> 8)
      00003D C0 E0            [24]  819 	push	acc
      00003F 74 80            [12]  820 	mov	a,#0x80
      000041 C0 E0            [24]  821 	push	acc
      000043 12r00r00         [24]  822 	lcall	_printfl
      000046 E5 81            [12]  823 	mov	a,sp
      000048 24 F3            [12]  824 	add	a,#0xf3
      00004A F5 81            [12]  825 	mov	sp,a
                                    826 ;	radio/tdm.c:173: printf(" txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u\n",
      00004C 78r13            [12]  827 	mov	r0,#_duty_cycle_offset
      00004E E2               [24]  828 	movx	a,@r0
      00004F FE               [12]  829 	mov	r6,a
      000050 7F 00            [12]  830 	mov	r7,#0x00
      000052 C0 07            [24]  831 	push	ar7
      000054 C0 06            [24]  832 	push	ar6
      000056 12r00r00         [24]  833 	lcall	_radio_temperature
      000059 AC 82            [24]  834 	mov	r4,dpl
      00005B AD 83            [24]  835 	mov	r5,dph
      00005D D0 06            [24]  836 	pop	ar6
      00005F D0 07            [24]  837 	pop	ar7
      000061 78r0A            [12]  838 	mov	r0,#(_errors + 0x000a)
      000063 E2               [24]  839 	movx	a,@r0
      000064 F5*02            [12]  840 	mov	_tdm_show_rssi_sloc1_1_0,a
      000066 08               [12]  841 	inc	r0
      000067 E2               [24]  842 	movx	a,@r0
      000068 F5*03            [12]  843 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
      00006A 78r08            [12]  844 	mov	r0,#(_errors + 0x0008)
      00006C E2               [24]  845 	movx	a,@r0
      00006D F5*00            [12]  846 	mov	_tdm_show_rssi_sloc0_1_0,a
      00006F 08               [12]  847 	inc	r0
      000070 E2               [24]  848 	movx	a,@r0
      000071 F5*01            [12]  849 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
      000073 78r06            [12]  850 	mov	r0,#(_errors + 0x0006)
      000075 E2               [24]  851 	movx	a,@r0
      000076 F5*04            [12]  852 	mov	_tdm_show_rssi_sloc2_1_0,a
      000078 08               [12]  853 	inc	r0
      000079 E2               [24]  854 	movx	a,@r0
      00007A F5*05            [12]  855 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
      00007C 78r04            [12]  856 	mov	r0,#(_errors + 0x0004)
      00007E E2               [24]  857 	movx	a,@r0
      00007F F5*06            [12]  858 	mov	_tdm_show_rssi_sloc3_1_0,a
      000081 08               [12]  859 	inc	r0
      000082 E2               [24]  860 	movx	a,@r0
      000083 F5*07            [12]  861 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
      000085 78r00            [12]  862 	mov	r0,#_errors
      000087 E2               [24]  863 	movx	a,@r0
      000088 F5*08            [12]  864 	mov	_tdm_show_rssi_sloc4_1_0,a
      00008A 08               [12]  865 	inc	r0
      00008B E2               [24]  866 	movx	a,@r0
      00008C F5*09            [12]  867 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
      00008E 78r02            [12]  868 	mov	r0,#(_errors + 0x0002)
      000090 E2               [24]  869 	movx	a,@r0
      000091 FA               [12]  870 	mov	r2,a
      000092 08               [12]  871 	inc	r0
      000093 E2               [24]  872 	movx	a,@r0
      000094 FB               [12]  873 	mov	r3,a
      000095 C0 06            [24]  874 	push	ar6
      000097 C0 07            [24]  875 	push	ar7
      000099 C0 04            [24]  876 	push	ar4
      00009B C0 05            [24]  877 	push	ar5
      00009D C0*02            [24]  878 	push	_tdm_show_rssi_sloc1_1_0
      00009F C0*03            [24]  879 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      0000A1 C0*00            [24]  880 	push	_tdm_show_rssi_sloc0_1_0
      0000A3 C0*01            [24]  881 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      0000A5 C0*04            [24]  882 	push	_tdm_show_rssi_sloc2_1_0
      0000A7 C0*05            [24]  883 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
      0000A9 C0*06            [24]  884 	push	_tdm_show_rssi_sloc3_1_0
      0000AB C0*07            [24]  885 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
      0000AD C0*08            [24]  886 	push	_tdm_show_rssi_sloc4_1_0
      0000AF C0*09            [24]  887 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
      0000B1 C0 02            [24]  888 	push	ar2
      0000B3 C0 03            [24]  889 	push	ar3
      0000B5 74r2C            [12]  890 	mov	a,#___str_1
      0000B7 C0 E0            [24]  891 	push	acc
      0000B9 74s00            [12]  892 	mov	a,#(___str_1 >> 8)
      0000BB C0 E0            [24]  893 	push	acc
      0000BD 74 80            [12]  894 	mov	a,#0x80
      0000BF C0 E0            [24]  895 	push	acc
      0000C1 12r00r00         [24]  896 	lcall	_printfl
      0000C4 E5 81            [12]  897 	mov	a,sp
      0000C6 24 ED            [12]  898 	add	a,#0xed
      0000C8 F5 81            [12]  899 	mov	sp,a
                                    900 ;	radio/tdm.c:186: statistics.receive_count = 0;
      0000CA 78r02            [12]  901 	mov	r0,#(_statistics + 0x0002)
      0000CC E4               [12]  902 	clr	a
      0000CD F2               [24]  903 	movx	@r0,a
      0000CE 08               [12]  904 	inc	r0
      0000CF F2               [24]  905 	movx	@r0,a
      0000D0 22               [24]  906 	ret
                                    907 ;------------------------------------------------------------
                                    908 ;Allocation info for local variables in function 'display_test_output'
                                    909 ;------------------------------------------------------------
                                    910 ;	radio/tdm.c:192: display_test_output(void)
                                    911 ;	-----------------------------------------
                                    912 ;	 function display_test_output
                                    913 ;	-----------------------------------------
      0000D1                        914 _display_test_output:
                                    915 ;	radio/tdm.c:194: if (test_display & AT_TEST_RSSI) {
      0000D1 90r00rFC         [24]  916 	mov	dptr,#_test_display
      0000D4 E0               [24]  917 	movx	a,@dptr
      0000D5 FF               [12]  918 	mov	r7,a
      0000D6 30 E0 03         [24]  919 	jnb	acc.0,00103$
                                    920 ;	radio/tdm.c:195: tdm_show_rssi();
      0000D9 02r00r00         [24]  921 	ljmp	_tdm_show_rssi
      0000DC                        922 00103$:
      0000DC 22               [24]  923 	ret
                                    924 ;------------------------------------------------------------
                                    925 ;Allocation info for local variables in function 'flight_time_estimate'
                                    926 ;------------------------------------------------------------
                                    927 ;	radio/tdm.c:205: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                                    928 ;	-----------------------------------------
                                    929 ;	 function flight_time_estimate
                                    930 ;	-----------------------------------------
      0000DD                        931 _flight_time_estimate:
      0000DD AF 82            [24]  932 	mov	r7,dpl
                                    933 ;	radio/tdm.c:207: return packet_latency + (packet_len * ticks_per_byte);
      0000DF 7E 00            [12]  934 	mov	r6,#0x00
      0000E1 78r0A            [12]  935 	mov	r0,#_ticks_per_byte
      0000E3 90r00r00         [24]  936 	mov	dptr,#__mulint_PARM_2
      0000E6 E2               [24]  937 	movx	a,@r0
      0000E7 F0               [24]  938 	movx	@dptr,a
      0000E8 08               [12]  939 	inc	r0
      0000E9 E2               [24]  940 	movx	a,@r0
      0000EA A3               [24]  941 	inc	dptr
      0000EB F0               [24]  942 	movx	@dptr,a
      0000EC 8F 82            [24]  943 	mov	dpl,r7
      0000EE 8E 83            [24]  944 	mov	dph,r6
      0000F0 12r00r00         [24]  945 	lcall	__mulint
      0000F3 AE 82            [24]  946 	mov	r6,dpl
      0000F5 AF 83            [24]  947 	mov	r7,dph
      0000F7 78r08            [12]  948 	mov	r0,#_packet_latency
      0000F9 E2               [24]  949 	movx	a,@r0
      0000FA 2E               [12]  950 	add	a,r6
      0000FB FE               [12]  951 	mov	r6,a
      0000FC 08               [12]  952 	inc	r0
      0000FD E2               [24]  953 	movx	a,@r0
      0000FE 3F               [12]  954 	addc	a,r7
      0000FF 8E 82            [24]  955 	mov	dpl,r6
      000101 F5 83            [12]  956 	mov	dph,a
      000103 22               [24]  957 	ret
                                    958 ;------------------------------------------------------------
                                    959 ;Allocation info for local variables in function 'sync_tx_windows'
                                    960 ;------------------------------------------------------------
                                    961 ;old_state                 Allocated with name '_sync_tx_windows_old_state_1_162'
                                    962 ;------------------------------------------------------------
                                    963 ;	radio/tdm.c:221: sync_tx_windows(__pdata uint8_t packet_length)
                                    964 ;	-----------------------------------------
                                    965 ;	 function sync_tx_windows
                                    966 ;	-----------------------------------------
      000104                        967 _sync_tx_windows:
      000104 AF 82            [24]  968 	mov	r7,dpl
                                    969 ;	radio/tdm.c:223: __data enum tdm_state old_state = tdm_state;
      000106 78r00            [12]  970 	mov	r0,#_tdm_state
      000108 E2               [24]  971 	movx	a,@r0
      000109 F5*0A            [12]  972 	mov	_sync_tx_windows_old_state_1_162,a
                                    973 ;	radio/tdm.c:224: __pdata uint16_t old_remaining = tdm_state_remaining;
      00010B 78r01            [12]  974 	mov	r0,#_tdm_state_remaining
      00010D E2               [24]  975 	movx	a,@r0
      00010E FC               [12]  976 	mov	r4,a
      00010F 08               [12]  977 	inc	r0
      000110 E2               [24]  978 	movx	a,@r0
      000111 FD               [12]  979 	mov	r5,a
                                    980 ;	radio/tdm.c:226: if (trailer.bonus) {
      000112 78r1E            [12]  981 	mov	r0,#(_trailer + 0x0001)
      000114 E2               [24]  982 	movx	a,@r0
      000115 30 E6 46         [24]  983 	jnb	acc.6,00109$
                                    984 ;	radio/tdm.c:229: if (old_state == TDM_SILENCE1) {
      000118 74 01            [12]  985 	mov	a,#0x01
      00011A B5*0A 10         [24]  986 	cjne	a,_sync_tx_windows_old_state_1_162,00106$
                                    987 ;	radio/tdm.c:235: tdm_state_remaining = silence_period;
      00011D 78r06            [12]  988 	mov	r0,#_silence_period
      00011F E2               [24]  989 	movx	a,@r0
      000120 FA               [12]  990 	mov	r2,a
      000121 08               [12]  991 	inc	r0
      000122 E2               [24]  992 	movx	a,@r0
      000123 FB               [12]  993 	mov	r3,a
      000124 78r01            [12]  994 	mov	r0,#_tdm_state_remaining
      000126 EA               [12]  995 	mov	a,r2
      000127 F2               [24]  996 	movx	@r0,a
      000128 08               [12]  997 	inc	r0
      000129 EB               [12]  998 	mov	a,r3
      00012A F2               [24]  999 	movx	@r0,a
      00012B 80 46            [24] 1000 	sjmp	00110$
      00012D                       1001 00106$:
                                   1002 ;	radio/tdm.c:236: } else if (old_state == TDM_RECEIVE || old_state == TDM_SILENCE2) {
      00012D 74 02            [12] 1003 	mov	a,#0x02
      00012F B5*0A 02         [24] 1004 	cjne	a,_sync_tx_windows_old_state_1_162,00151$
      000132 80 05            [24] 1005 	sjmp	00101$
      000134                       1006 00151$:
      000134 74 03            [12] 1007 	mov	a,#0x03
      000136 B5*0A 0F         [24] 1008 	cjne	a,_sync_tx_windows_old_state_1_162,00102$
      000139                       1009 00101$:
                                   1010 ;	radio/tdm.c:241: tdm_state = TDM_SILENCE2;
      000139 78r00            [12] 1011 	mov	r0,#_tdm_state
      00013B 74 03            [12] 1012 	mov	a,#0x03
      00013D F2               [24] 1013 	movx	@r0,a
                                   1014 ;	radio/tdm.c:242: tdm_state_remaining = 1;
      00013E 78r01            [12] 1015 	mov	r0,#_tdm_state_remaining
      000140 74 01            [12] 1016 	mov	a,#0x01
      000142 F2               [24] 1017 	movx	@r0,a
      000143 08               [12] 1018 	inc	r0
      000144 E4               [12] 1019 	clr	a
      000145 F2               [24] 1020 	movx	@r0,a
      000146 80 2B            [24] 1021 	sjmp	00110$
      000148                       1022 00102$:
                                   1023 ;	radio/tdm.c:244: tdm_state = TDM_TRANSMIT;
      000148 78r00            [12] 1024 	mov	r0,#_tdm_state
      00014A E4               [12] 1025 	clr	a
      00014B F2               [24] 1026 	movx	@r0,a
                                   1027 ;	radio/tdm.c:245: tdm_state_remaining = trailer.window;
      00014C 78r1D            [12] 1028 	mov	r0,#_trailer
      00014E E2               [24] 1029 	movx	a,@r0
      00014F FA               [12] 1030 	mov	r2,a
      000150 08               [12] 1031 	inc	r0
      000151 E2               [24] 1032 	movx	a,@r0
      000152 54 1F            [12] 1033 	anl	a,#0x1F
      000154 FB               [12] 1034 	mov	r3,a
      000155 78r01            [12] 1035 	mov	r0,#_tdm_state_remaining
      000157 EA               [12] 1036 	mov	a,r2
      000158 F2               [24] 1037 	movx	@r0,a
      000159 08               [12] 1038 	inc	r0
      00015A EB               [12] 1039 	mov	a,r3
      00015B F2               [24] 1040 	movx	@r0,a
      00015C 80 15            [24] 1041 	sjmp	00110$
      00015E                       1042 00109$:
                                   1043 ;	radio/tdm.c:250: tdm_state = TDM_RECEIVE;
      00015E 78r00            [12] 1044 	mov	r0,#_tdm_state
      000160 74 02            [12] 1045 	mov	a,#0x02
      000162 F2               [24] 1046 	movx	@r0,a
                                   1047 ;	radio/tdm.c:251: tdm_state_remaining = trailer.window;
      000163 78r1D            [12] 1048 	mov	r0,#_trailer
      000165 E2               [24] 1049 	movx	a,@r0
      000166 FA               [12] 1050 	mov	r2,a
      000167 08               [12] 1051 	inc	r0
      000168 E2               [24] 1052 	movx	a,@r0
      000169 54 1F            [12] 1053 	anl	a,#0x1F
      00016B FB               [12] 1054 	mov	r3,a
      00016C 78r01            [12] 1055 	mov	r0,#_tdm_state_remaining
      00016E EA               [12] 1056 	mov	a,r2
      00016F F2               [24] 1057 	movx	@r0,a
      000170 08               [12] 1058 	inc	r0
      000171 EB               [12] 1059 	mov	a,r3
      000172 F2               [24] 1060 	movx	@r0,a
      000173                       1061 00110$:
                                   1062 ;	radio/tdm.c:256: bonus_transmit = (tdm_state == TDM_RECEIVE && packet_length==0);
      000173 78r00            [12] 1063 	mov	r0,#_tdm_state
      000175 E2               [24] 1064 	movx	a,@r0
      000176 B4 02 03         [24] 1065 	cjne	a,#0x02,00121$
      000179 EF               [12] 1066 	mov	a,r7
      00017A 60 04            [24] 1067 	jz	00122$
      00017C                       1068 00121$:
      00017C C2*07            [12] 1069 	clr	_sync_tx_windows_sloc0_1_0
      00017E 80 02            [24] 1070 	sjmp	00123$
      000180                       1071 00122$:
      000180 D2*07            [12] 1072 	setb	_sync_tx_windows_sloc0_1_0
      000182                       1073 00123$:
      000182 A2*07            [12] 1074 	mov	c,_sync_tx_windows_sloc0_1_0
      000184 92*00            [24] 1075 	mov	_bonus_transmit,c
                                   1076 ;	radio/tdm.c:259: if (tdm_state != TDM_TRANSMIT) {
      000186 78r00            [12] 1077 	mov	r0,#_tdm_state
      000188 E2               [24] 1078 	movx	a,@r0
      000189 60 02            [24] 1079 	jz	00112$
                                   1080 ;	radio/tdm.c:260: transmit_yield = 0;
      00018B C2*01            [12] 1081 	clr	_transmit_yield
      00018D                       1082 00112$:
                                   1083 ;	radio/tdm.c:263: if (at_testmode & AT_TEST_TDM) {
      00018D 78r00            [12] 1084 	mov	r0,#_at_testmode
      00018F E2               [24] 1085 	movx	a,@r0
      000190 54 02            [12] 1086 	anl	a,#0x02
      000192 70 01            [24] 1087 	jnz	00158$
      000194 22               [24] 1088 	ret
      000195                       1089 00158$:
                                   1090 ;	radio/tdm.c:265: delta = old_remaining - tdm_state_remaining;
      000195 78r01            [12] 1091 	mov	r0,#_tdm_state_remaining
      000197 79r30            [12] 1092 	mov	r1,#_sync_tx_windows_delta_2_169
      000199 D3               [12] 1093 	setb	c
      00019A E2               [24] 1094 	movx	a,@r0
      00019B 9C               [12] 1095 	subb	a,r4
      00019C F4               [12] 1096 	cpl	a
      00019D B3               [12] 1097 	cpl	c
      00019E F3               [24] 1098 	movx	@r1,a
      00019F B3               [12] 1099 	cpl	c
      0001A0 08               [12] 1100 	inc	r0
      0001A1 E2               [24] 1101 	movx	a,@r0
      0001A2 9D               [12] 1102 	subb	a,r5
      0001A3 F4               [12] 1103 	cpl	a
      0001A4 09               [12] 1104 	inc	r1
      0001A5 F3               [24] 1105 	movx	@r1,a
                                   1106 ;	radio/tdm.c:266: if (old_state != tdm_state ||
      0001A6 78r00            [12] 1107 	mov	r0,#_tdm_state
      0001A8 E2               [24] 1108 	movx	a,@r0
      0001A9 B5*0A 6E         [24] 1109 	cjne	a,_sync_tx_windows_old_state_1_162,00113$
                                   1110 ;	radio/tdm.c:267: delta > (int16_t)packet_latency/2 ||
      0001AC C0 07            [24] 1111 	push	ar7
      0001AE 78r08            [12] 1112 	mov	r0,#_packet_latency
      0001B0 E2               [24] 1113 	movx	a,@r0
      0001B1 FA               [12] 1114 	mov	r2,a
      0001B2 08               [12] 1115 	inc	r0
      0001B3 E2               [24] 1116 	movx	a,@r0
      0001B4 FB               [12] 1117 	mov	r3,a
      0001B5 90r00r00         [24] 1118 	mov	dptr,#__divsint_PARM_2
      0001B8 74 02            [12] 1119 	mov	a,#0x02
      0001BA F0               [24] 1120 	movx	@dptr,a
      0001BB E4               [12] 1121 	clr	a
      0001BC A3               [24] 1122 	inc	dptr
      0001BD F0               [24] 1123 	movx	@dptr,a
      0001BE 8A 82            [24] 1124 	mov	dpl,r2
      0001C0 8B 83            [24] 1125 	mov	dph,r3
      0001C2 C0 03            [24] 1126 	push	ar3
      0001C4 C0 02            [24] 1127 	push	ar2
      0001C6 12r00r00         [24] 1128 	lcall	__divsint
      0001C9 AE 82            [24] 1129 	mov	r6,dpl
      0001CB AF 83            [24] 1130 	mov	r7,dph
      0001CD D0 02            [24] 1131 	pop	ar2
      0001CF D0 03            [24] 1132 	pop	ar3
      0001D1 78r30            [12] 1133 	mov	r0,#_sync_tx_windows_delta_2_169
      0001D3 C3               [12] 1134 	clr	c
      0001D4 E2               [24] 1135 	movx	a,@r0
      0001D5 F5 F0            [12] 1136 	mov	b,a
      0001D7 EE               [12] 1137 	mov	a,r6
      0001D8 95 F0            [12] 1138 	subb	a,b
      0001DA 08               [12] 1139 	inc	r0
      0001DB E2               [24] 1140 	movx	a,@r0
      0001DC F5 F0            [12] 1141 	mov	b,a
      0001DE EF               [12] 1142 	mov	a,r7
      0001DF 64 80            [12] 1143 	xrl	a,#0x80
      0001E1 63 F0 80         [24] 1144 	xrl	b,#0x80
      0001E4 95 F0            [12] 1145 	subb	a,b
      0001E6 D0 07            [24] 1146 	pop	ar7
                                   1147 ;	radio/tdm.c:268: delta < -(int16_t)packet_latency/2) {
      0001E8 40 30            [24] 1148 	jc	00113$
      0001EA E4               [12] 1149 	clr	a
      0001EB 9A               [12] 1150 	subb	a,r2
      0001EC FA               [12] 1151 	mov	r2,a
      0001ED E4               [12] 1152 	clr	a
      0001EE 9B               [12] 1153 	subb	a,r3
      0001EF FB               [12] 1154 	mov	r3,a
      0001F0 90r00r00         [24] 1155 	mov	dptr,#__divsint_PARM_2
      0001F3 74 02            [12] 1156 	mov	a,#0x02
      0001F5 F0               [24] 1157 	movx	@dptr,a
      0001F6 E4               [12] 1158 	clr	a
      0001F7 A3               [24] 1159 	inc	dptr
      0001F8 F0               [24] 1160 	movx	@dptr,a
      0001F9 8A 82            [24] 1161 	mov	dpl,r2
      0001FB 8B 83            [24] 1162 	mov	dph,r3
      0001FD C0 07            [24] 1163 	push	ar7
      0001FF 12r00r00         [24] 1164 	lcall	__divsint
      000202 AB 82            [24] 1165 	mov	r3,dpl
      000204 AE 83            [24] 1166 	mov	r6,dph
      000206 D0 07            [24] 1167 	pop	ar7
      000208 78r30            [12] 1168 	mov	r0,#_sync_tx_windows_delta_2_169
      00020A C3               [12] 1169 	clr	c
      00020B E2               [24] 1170 	movx	a,@r0
      00020C 9B               [12] 1171 	subb	a,r3
      00020D 08               [12] 1172 	inc	r0
      00020E E2               [24] 1173 	movx	a,@r0
      00020F 64 80            [12] 1174 	xrl	a,#0x80
      000211 8E F0            [24] 1175 	mov	b,r6
      000213 63 F0 80         [24] 1176 	xrl	b,#0x80
      000216 95 F0            [12] 1177 	subb	a,b
      000218 50 4B            [24] 1178 	jnc	00119$
      00021A                       1179 00113$:
                                   1180 ;	radio/tdm.c:269: printf("TDM: %u/%u len=%u ",
      00021A 7E 00            [12] 1181 	mov	r6,#0x00
      00021C 78r00            [12] 1182 	mov	r0,#_tdm_state
      00021E E2               [24] 1183 	movx	a,@r0
      00021F FA               [12] 1184 	mov	r2,a
      000220 7B 00            [12] 1185 	mov	r3,#0x00
      000222 AC*0A            [24] 1186 	mov	r4,_sync_tx_windows_old_state_1_162
      000224 7D 00            [12] 1187 	mov	r5,#0x00
      000226 C0 07            [24] 1188 	push	ar7
      000228 C0 06            [24] 1189 	push	ar6
      00022A C0 02            [24] 1190 	push	ar2
      00022C C0 03            [24] 1191 	push	ar3
      00022E C0 04            [24] 1192 	push	ar4
      000230 C0 05            [24] 1193 	push	ar5
      000232 74r63            [12] 1194 	mov	a,#___str_2
      000234 C0 E0            [24] 1195 	push	acc
      000236 74s00            [12] 1196 	mov	a,#(___str_2 >> 8)
      000238 C0 E0            [24] 1197 	push	acc
      00023A 74 80            [12] 1198 	mov	a,#0x80
      00023C C0 E0            [24] 1199 	push	acc
      00023E 12r00r00         [24] 1200 	lcall	_printfl
      000241 E5 81            [12] 1201 	mov	a,sp
      000243 24 F7            [12] 1202 	add	a,#0xf7
      000245 F5 81            [12] 1203 	mov	sp,a
                                   1204 ;	radio/tdm.c:273: printf(" delta: %d\n",(int)delta);
      000247 78r30            [12] 1205 	mov	r0,#_sync_tx_windows_delta_2_169
      000249 E2               [24] 1206 	movx	a,@r0
      00024A C0 E0            [24] 1207 	push	acc
      00024C 08               [12] 1208 	inc	r0
      00024D E2               [24] 1209 	movx	a,@r0
      00024E C0 E0            [24] 1210 	push	acc
      000250 74r76            [12] 1211 	mov	a,#___str_3
      000252 C0 E0            [24] 1212 	push	acc
      000254 74s00            [12] 1213 	mov	a,#(___str_3 >> 8)
      000256 C0 E0            [24] 1214 	push	acc
      000258 74 80            [12] 1215 	mov	a,#0x80
      00025A C0 E0            [24] 1216 	push	acc
      00025C 12r00r00         [24] 1217 	lcall	_printfl
      00025F E5 81            [12] 1218 	mov	a,sp
      000261 24 FB            [12] 1219 	add	a,#0xfb
      000263 F5 81            [12] 1220 	mov	sp,a
      000265                       1221 00119$:
      000265 22               [24] 1222 	ret
                                   1223 ;------------------------------------------------------------
                                   1224 ;Allocation info for local variables in function 'tdm_state_update'
                                   1225 ;------------------------------------------------------------
                                   1226 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                                   1227 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                                   1228 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                                   1229 ;------------------------------------------------------------
                                   1230 ;	radio/tdm.c:281: tdm_state_update(__pdata uint16_t tdelta)
                                   1231 ;	-----------------------------------------
                                   1232 ;	 function tdm_state_update
                                   1233 ;	-----------------------------------------
      000266                       1234 _tdm_state_update:
      000266 AE 82            [24] 1235 	mov	r6,dpl
      000268 AF 83            [24] 1236 	mov	r7,dph
                                   1237 ;	radio/tdm.c:285: if (tdelta > transmit_wait) {
      00026A 78r0C            [12] 1238 	mov	r0,#_transmit_wait
      00026C C3               [12] 1239 	clr	c
      00026D E2               [24] 1240 	movx	a,@r0
      00026E 9E               [12] 1241 	subb	a,r6
      00026F 08               [12] 1242 	inc	r0
      000270 E2               [24] 1243 	movx	a,@r0
      000271 9F               [12] 1244 	subb	a,r7
      000272 50 08            [24] 1245 	jnc	00102$
                                   1246 ;	radio/tdm.c:286: transmit_wait = 0;
      000274 78r0C            [12] 1247 	mov	r0,#_transmit_wait
      000276 E4               [12] 1248 	clr	a
      000277 F2               [24] 1249 	movx	@r0,a
      000278 08               [12] 1250 	inc	r0
      000279 F2               [24] 1251 	movx	@r0,a
      00027A 80 0A            [24] 1252 	sjmp	00116$
      00027C                       1253 00102$:
                                   1254 ;	radio/tdm.c:288: transmit_wait -= tdelta;
      00027C 78r0C            [12] 1255 	mov	r0,#_transmit_wait
      00027E E2               [24] 1256 	movx	a,@r0
      00027F C3               [12] 1257 	clr	c
      000280 9E               [12] 1258 	subb	a,r6
      000281 F2               [24] 1259 	movx	@r0,a
      000282 08               [12] 1260 	inc	r0
      000283 E2               [24] 1261 	movx	a,@r0
      000284 9F               [12] 1262 	subb	a,r7
      000285 F2               [24] 1263 	movx	@r0,a
                                   1264 ;	radio/tdm.c:292: while (tdelta >= tdm_state_remaining) {
      000286                       1265 00116$:
      000286 78r01            [12] 1266 	mov	r0,#_tdm_state_remaining
      000288 C3               [12] 1267 	clr	c
      000289 E2               [24] 1268 	movx	a,@r0
      00028A F5 F0            [12] 1269 	mov	b,a
      00028C EE               [12] 1270 	mov	a,r6
      00028D 95 F0            [12] 1271 	subb	a,b
      00028F 08               [12] 1272 	inc	r0
      000290 E2               [24] 1273 	movx	a,@r0
      000291 F5 F0            [12] 1274 	mov	b,a
      000293 EF               [12] 1275 	mov	a,r7
      000294 95 F0            [12] 1276 	subb	a,b
      000296 50 03            [24] 1277 	jnc	00146$
      000298 02r04rD1         [24] 1278 	ljmp	00118$
      00029B                       1279 00146$:
                                   1280 ;	radio/tdm.c:294: tdm_state = (tdm_state+1) % 4;
      00029B 78r00            [12] 1281 	mov	r0,#_tdm_state
      00029D E2               [24] 1282 	movx	a,@r0
      00029E FC               [12] 1283 	mov	r4,a
      00029F 7D 00            [12] 1284 	mov	r5,#0x00
      0002A1 0C               [12] 1285 	inc	r4
      0002A2 BC 00 01         [24] 1286 	cjne	r4,#0x00,00147$
      0002A5 0D               [12] 1287 	inc	r5
      0002A6                       1288 00147$:
      0002A6 90r00r00         [24] 1289 	mov	dptr,#__modsint_PARM_2
      0002A9 74 04            [12] 1290 	mov	a,#0x04
      0002AB F0               [24] 1291 	movx	@dptr,a
      0002AC E4               [12] 1292 	clr	a
      0002AD A3               [24] 1293 	inc	dptr
      0002AE F0               [24] 1294 	movx	@dptr,a
      0002AF 8C 82            [24] 1295 	mov	dpl,r4
      0002B1 8D 83            [24] 1296 	mov	dph,r5
      0002B3 C0 07            [24] 1297 	push	ar7
      0002B5 C0 06            [24] 1298 	push	ar6
      0002B7 12r00r00         [24] 1299 	lcall	__modsint
      0002BA AC 82            [24] 1300 	mov	r4,dpl
      0002BC AD 83            [24] 1301 	mov	r5,dph
      0002BE D0 06            [24] 1302 	pop	ar6
      0002C0 D0 07            [24] 1303 	pop	ar7
      0002C2 78r00            [12] 1304 	mov	r0,#_tdm_state
      0002C4 EC               [12] 1305 	mov	a,r4
      0002C5 F2               [24] 1306 	movx	@r0,a
                                   1307 ;	radio/tdm.c:297: tdelta -= tdm_state_remaining;
      0002C6 78r01            [12] 1308 	mov	r0,#_tdm_state_remaining
      0002C8 D3               [12] 1309 	setb	c
      0002C9 E2               [24] 1310 	movx	a,@r0
      0002CA 9E               [12] 1311 	subb	a,r6
      0002CB F4               [12] 1312 	cpl	a
      0002CC B3               [12] 1313 	cpl	c
      0002CD FE               [12] 1314 	mov	r6,a
      0002CE B3               [12] 1315 	cpl	c
      0002CF 08               [12] 1316 	inc	r0
      0002D0 E2               [24] 1317 	movx	a,@r0
      0002D1 9F               [12] 1318 	subb	a,r7
      0002D2 F4               [12] 1319 	cpl	a
      0002D3 FF               [12] 1320 	mov	r7,a
                                   1321 ;	radio/tdm.c:299: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_RECEIVE) {
      0002D4 78r00            [12] 1322 	mov	r0,#_tdm_state
      0002D6 E2               [24] 1323 	movx	a,@r0
      0002D7 60 06            [24] 1324 	jz	00104$
      0002D9 78r00            [12] 1325 	mov	r0,#_tdm_state
      0002DB E2               [24] 1326 	movx	a,@r0
      0002DC B4 02 10         [24] 1327 	cjne	a,#0x02,00105$
      0002DF                       1328 00104$:
                                   1329 ;	radio/tdm.c:300: tdm_state_remaining = tx_window_width;
      0002DF 78r03            [12] 1330 	mov	r0,#_tx_window_width
      0002E1 E2               [24] 1331 	movx	a,@r0
      0002E2 FC               [12] 1332 	mov	r4,a
      0002E3 08               [12] 1333 	inc	r0
      0002E4 E2               [24] 1334 	movx	a,@r0
      0002E5 FD               [12] 1335 	mov	r5,a
      0002E6 78r01            [12] 1336 	mov	r0,#_tdm_state_remaining
      0002E8 EC               [12] 1337 	mov	a,r4
      0002E9 F2               [24] 1338 	movx	@r0,a
      0002EA 08               [12] 1339 	inc	r0
      0002EB ED               [12] 1340 	mov	a,r5
      0002EC F2               [24] 1341 	movx	@r0,a
      0002ED 80 0E            [24] 1342 	sjmp	00106$
      0002EF                       1343 00105$:
                                   1344 ;	radio/tdm.c:302: tdm_state_remaining = silence_period;
      0002EF 78r06            [12] 1345 	mov	r0,#_silence_period
      0002F1 E2               [24] 1346 	movx	a,@r0
      0002F2 FC               [12] 1347 	mov	r4,a
      0002F3 08               [12] 1348 	inc	r0
      0002F4 E2               [24] 1349 	movx	a,@r0
      0002F5 FD               [12] 1350 	mov	r5,a
      0002F6 78r01            [12] 1351 	mov	r0,#_tdm_state_remaining
      0002F8 EC               [12] 1352 	mov	a,r4
      0002F9 F2               [24] 1353 	movx	@r0,a
      0002FA 08               [12] 1354 	inc	r0
      0002FB ED               [12] 1355 	mov	a,r5
      0002FC F2               [24] 1356 	movx	@r0,a
      0002FD                       1357 00106$:
                                   1358 ;	radio/tdm.c:308: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_SILENCE1) {
      0002FD 78r00            [12] 1359 	mov	r0,#_tdm_state
      0002FF E2               [24] 1360 	movx	a,@r0
      000300 60 06            [24] 1361 	jz	00110$
      000302 78r00            [12] 1362 	mov	r0,#_tdm_state
      000304 E2               [24] 1363 	movx	a,@r0
      000305 B4 01 25         [24] 1364 	cjne	a,#0x01,00111$
      000308                       1365 00110$:
                                   1366 ;	radio/tdm.c:309: fhop_window_change();
      000308 C0 07            [24] 1367 	push	ar7
      00030A C0 06            [24] 1368 	push	ar6
      00030C 12r00r00         [24] 1369 	lcall	_fhop_window_change
                                   1370 ;	radio/tdm.c:310: radio_receiver_on();
      00030F 12r00r00         [24] 1371 	lcall	_radio_receiver_on
      000312 D0 06            [24] 1372 	pop	ar6
      000314 D0 07            [24] 1373 	pop	ar7
                                   1374 ;	radio/tdm.c:312: if (num_fh_channels > 1) {
      000316 78r00            [12] 1375 	mov	r0,#_num_fh_channels
      000318 C3               [12] 1376 	clr	c
      000319 E2               [24] 1377 	movx	a,@r0
      00031A F5 F0            [12] 1378 	mov	b,a
      00031C 74 01            [12] 1379 	mov	a,#0x01
      00031E 95 F0            [12] 1380 	subb	a,b
      000320 50 0B            [24] 1381 	jnc	00111$
                                   1382 ;	radio/tdm.c:314: lbt_listen_time = 0;
      000322 78r17            [12] 1383 	mov	r0,#_lbt_listen_time
      000324 E4               [12] 1384 	clr	a
      000325 F2               [24] 1385 	movx	@r0,a
      000326 08               [12] 1386 	inc	r0
      000327 F2               [24] 1387 	movx	@r0,a
                                   1388 ;	radio/tdm.c:315: lbt_rand = 0;
      000328 78r1B            [12] 1389 	mov	r0,#_lbt_rand
      00032A F2               [24] 1390 	movx	@r0,a
      00032B 08               [12] 1391 	inc	r0
      00032C F2               [24] 1392 	movx	@r0,a
      00032D                       1393 00111$:
                                   1394 ;	radio/tdm.c:319: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
      00032D 78r00            [12] 1395 	mov	r0,#_tdm_state
      00032F E2               [24] 1396 	movx	a,@r0
      000330 60 03            [24] 1397 	jz	00155$
      000332 02r04rC4         [24] 1398 	ljmp	00114$
      000335                       1399 00155$:
      000335 C0 06            [24] 1400 	push	ar6
      000337 C0 07            [24] 1401 	push	ar7
      000339 78r0E            [12] 1402 	mov	r0,#_duty_cycle
      00033B E2               [24] 1403 	movx	a,@r0
      00033C FC               [12] 1404 	mov	r4,a
      00033D 7D 00            [12] 1405 	mov	r5,#0x00
      00033F 78r13            [12] 1406 	mov	r0,#_duty_cycle_offset
      000341 E2               [24] 1407 	movx	a,@r0
      000342 F5*0B            [12] 1408 	mov	_tdm_state_update_sloc0_1_0,a
                                   1409 ;	1-genFromRTrack replaced	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
      000344 8D*0C            [24] 1410 	mov	(_tdm_state_update_sloc0_1_0 + 1),r5
      000346 EC               [12] 1411 	mov	a,r4
      000347 C3               [12] 1412 	clr	c
      000348 95*0B            [12] 1413 	subb	a,_tdm_state_update_sloc0_1_0
      00034A FE               [12] 1414 	mov	r6,a
      00034B ED               [12] 1415 	mov	a,r5
      00034C 95*0C            [12] 1416 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      00034E FF               [12] 1417 	mov	r7,a
      00034F BE 64 0A         [24] 1418 	cjne	r6,#0x64,00156$
      000352 BF 00 07         [24] 1419 	cjne	r7,#0x00,00156$
      000355 D0 07            [24] 1420 	pop	ar7
      000357 D0 06            [24] 1421 	pop	ar6
      000359 02r04rC4         [24] 1422 	ljmp	00114$
      00035C                       1423 00156$:
      00035C D0 07            [24] 1424 	pop	ar7
      00035E D0 06            [24] 1425 	pop	ar6
                                   1426 ;	radio/tdm.c:321: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
      000360 C0 06            [24] 1427 	push	ar6
      000362 C0 07            [24] 1428 	push	ar7
      000364 C0 07            [24] 1429 	push	ar7
      000366 C0 06            [24] 1430 	push	ar6
      000368 C0 05            [24] 1431 	push	ar5
      00036A C0 04            [24] 1432 	push	ar4
      00036C 78r0F            [12] 1433 	mov	r0,#_average_duty_cycle
      00036E E2               [24] 1434 	movx	a,@r0
      00036F C0 E0            [24] 1435 	push	acc
      000371 08               [12] 1436 	inc	r0
      000372 E2               [24] 1437 	movx	a,@r0
      000373 C0 E0            [24] 1438 	push	acc
      000375 08               [12] 1439 	inc	r0
      000376 E2               [24] 1440 	movx	a,@r0
      000377 C0 E0            [24] 1441 	push	acc
      000379 08               [12] 1442 	inc	r0
      00037A E2               [24] 1443 	movx	a,@r0
      00037B C0 E0            [24] 1444 	push	acc
      00037D 90 33 33         [24] 1445 	mov	dptr,#0x3333
      000380 75 F0 73         [24] 1446 	mov	b,#0x73
      000383 74 3F            [12] 1447 	mov	a,#0x3F
      000385 12r00r00         [24] 1448 	lcall	___fsmul
      000388 85 82*0D         [24] 1449 	mov	_tdm_state_update_sloc1_1_0,dpl
      00038B 85 83*0E         [24] 1450 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
      00038E 85 F0*0F         [24] 1451 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
      000391 F5*10            [12] 1452 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
      000393 E5 81            [12] 1453 	mov	a,sp
      000395 24 FC            [12] 1454 	add	a,#0xfc
      000397 F5 81            [12] 1455 	mov	sp,a
      000399 D0 04            [24] 1456 	pop	ar4
      00039B D0 05            [24] 1457 	pop	ar5
      00039D D0 06            [24] 1458 	pop	ar6
      00039F D0 07            [24] 1459 	pop	ar7
      0003A1 78r14            [12] 1460 	mov	r0,#_transmitted_ticks
      0003A3 E2               [24] 1461 	movx	a,@r0
      0003A4 F5 82            [12] 1462 	mov	dpl,a
      0003A6 08               [12] 1463 	inc	r0
      0003A7 E2               [24] 1464 	movx	a,@r0
      0003A8 F5 83            [12] 1465 	mov	dph,a
      0003AA C0 05            [24] 1466 	push	ar5
      0003AC C0 04            [24] 1467 	push	ar4
      0003AE 12r00r00         [24] 1468 	lcall	___uint2fs
      0003B1 AA 82            [24] 1469 	mov	r2,dpl
      0003B3 AB 83            [24] 1470 	mov	r3,dph
      0003B5 AE F0            [24] 1471 	mov	r6,b
      0003B7 FF               [12] 1472 	mov	r7,a
      0003B8 D0 04            [24] 1473 	pop	ar4
      0003BA D0 05            [24] 1474 	pop	ar5
      0003BC C0 07            [24] 1475 	push	ar7
      0003BE C0 06            [24] 1476 	push	ar6
      0003C0 C0 05            [24] 1477 	push	ar5
      0003C2 C0 04            [24] 1478 	push	ar4
      0003C4 C0 02            [24] 1479 	push	ar2
      0003C6 C0 03            [24] 1480 	push	ar3
      0003C8 C0 06            [24] 1481 	push	ar6
      0003CA C0 07            [24] 1482 	push	ar7
      0003CC 90 00 00         [24] 1483 	mov	dptr,#0x0000
      0003CF 75 F0 A0         [24] 1484 	mov	b,#0xA0
      0003D2 74 40            [12] 1485 	mov	a,#0x40
      0003D4 12r00r00         [24] 1486 	lcall	___fsmul
      0003D7 85 82*11         [24] 1487 	mov	_tdm_state_update_sloc2_1_0,dpl
      0003DA 85 83*12         [24] 1488 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
      0003DD 85 F0*13         [24] 1489 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
      0003E0 F5*14            [12] 1490 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
      0003E2 E5 81            [12] 1491 	mov	a,sp
      0003E4 24 FC            [12] 1492 	add	a,#0xfc
      0003E6 F5 81            [12] 1493 	mov	sp,a
      0003E8 D0 04            [24] 1494 	pop	ar4
      0003EA D0 05            [24] 1495 	pop	ar5
      0003EC D0 06            [24] 1496 	pop	ar6
      0003EE D0 07            [24] 1497 	pop	ar7
      0003F0 78r06            [12] 1498 	mov	r0,#_silence_period
      0003F2 79r03            [12] 1499 	mov	r1,#_tx_window_width
      0003F4 E3               [24] 1500 	movx	a,@r1
      0003F5 C5 F0            [12] 1501 	xch	a,b
      0003F7 E2               [24] 1502 	movx	a,@r0
      0003F8 25 F0            [12] 1503 	add	a,b
      0003FA FE               [12] 1504 	mov	r6,a
      0003FB 09               [12] 1505 	inc	r1
      0003FC E3               [24] 1506 	movx	a,@r1
      0003FD C5 F0            [12] 1507 	xch	a,b
      0003FF 08               [12] 1508 	inc	r0
      000400 E2               [24] 1509 	movx	a,@r0
      000401 35 F0            [12] 1510 	addc	a,b
      000403 CE               [12] 1511 	xch	a,r6
      000404 25 E0            [12] 1512 	add	a,acc
      000406 CE               [12] 1513 	xch	a,r6
      000407 33               [12] 1514 	rlc	a
      000408 FF               [12] 1515 	mov	r7,a
      000409 8E 82            [24] 1516 	mov	dpl,r6
      00040B 8F 83            [24] 1517 	mov	dph,r7
      00040D C0 05            [24] 1518 	push	ar5
      00040F C0 04            [24] 1519 	push	ar4
      000411 12r00r00         [24] 1520 	lcall	___uint2fs
      000414 AA 82            [24] 1521 	mov	r2,dpl
      000416 AB 83            [24] 1522 	mov	r3,dph
      000418 AE F0            [24] 1523 	mov	r6,b
      00041A FF               [12] 1524 	mov	r7,a
      00041B C0 02            [24] 1525 	push	ar2
      00041D C0 03            [24] 1526 	push	ar3
      00041F C0 06            [24] 1527 	push	ar6
      000421 C0 07            [24] 1528 	push	ar7
      000423 85*11 82         [24] 1529 	mov	dpl,_tdm_state_update_sloc2_1_0
      000426 85*12 83         [24] 1530 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
      000429 85*13 F0         [24] 1531 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
      00042C E5*14            [12] 1532 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
      00042E 12r00r00         [24] 1533 	lcall	___fsdiv
      000431 AA 82            [24] 1534 	mov	r2,dpl
      000433 AB 83            [24] 1535 	mov	r3,dph
      000435 AE F0            [24] 1536 	mov	r6,b
      000437 FF               [12] 1537 	mov	r7,a
      000438 E5 81            [12] 1538 	mov	a,sp
      00043A 24 FC            [12] 1539 	add	a,#0xfc
      00043C F5 81            [12] 1540 	mov	sp,a
      00043E C0 02            [24] 1541 	push	ar2
      000440 C0 03            [24] 1542 	push	ar3
      000442 C0 06            [24] 1543 	push	ar6
      000444 C0 07            [24] 1544 	push	ar7
      000446 85*0D 82         [24] 1545 	mov	dpl,_tdm_state_update_sloc1_1_0
      000449 85*0E 83         [24] 1546 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
      00044C 85*0F F0         [24] 1547 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
      00044F E5*10            [12] 1548 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
      000451 12r00r00         [24] 1549 	lcall	___fsadd
      000454 AA 82            [24] 1550 	mov	r2,dpl
      000456 AB 83            [24] 1551 	mov	r3,dph
      000458 AE F0            [24] 1552 	mov	r6,b
      00045A FF               [12] 1553 	mov	r7,a
      00045B E5 81            [12] 1554 	mov	a,sp
      00045D 24 FC            [12] 1555 	add	a,#0xfc
      00045F F5 81            [12] 1556 	mov	sp,a
      000461 D0 04            [24] 1557 	pop	ar4
      000463 D0 05            [24] 1558 	pop	ar5
      000465 78r0F            [12] 1559 	mov	r0,#_average_duty_cycle
      000467 EA               [12] 1560 	mov	a,r2
      000468 F2               [24] 1561 	movx	@r0,a
      000469 08               [12] 1562 	inc	r0
      00046A EB               [12] 1563 	mov	a,r3
      00046B F2               [24] 1564 	movx	@r0,a
      00046C 08               [12] 1565 	inc	r0
      00046D EE               [12] 1566 	mov	a,r6
      00046E F2               [24] 1567 	movx	@r0,a
      00046F 08               [12] 1568 	inc	r0
      000470 EF               [12] 1569 	mov	a,r7
      000471 F2               [24] 1570 	movx	@r0,a
                                   1571 ;	radio/tdm.c:322: transmitted_ticks = 0;
      000472 78r14            [12] 1572 	mov	r0,#_transmitted_ticks
      000474 E4               [12] 1573 	clr	a
      000475 F2               [24] 1574 	movx	@r0,a
      000476 08               [12] 1575 	inc	r0
      000477 F2               [24] 1576 	movx	@r0,a
                                   1577 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      000478 EC               [12] 1578 	mov	a,r4
      000479 C3               [12] 1579 	clr	c
      00047A 95*0B            [12] 1580 	subb	a,_tdm_state_update_sloc0_1_0
      00047C FC               [12] 1581 	mov	r4,a
      00047D ED               [12] 1582 	mov	a,r5
      00047E 95*0C            [12] 1583 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      000480 FD               [12] 1584 	mov	r5,a
      000481 8C 82            [24] 1585 	mov	dpl,r4
      000483 8D 83            [24] 1586 	mov	dph,r5
      000485 12r00r00         [24] 1587 	lcall	___sint2fs
      000488 AC 82            [24] 1588 	mov	r4,dpl
      00048A AD 83            [24] 1589 	mov	r5,dph
      00048C AE F0            [24] 1590 	mov	r6,b
      00048E FF               [12] 1591 	mov	r7,a
      00048F C0 07            [24] 1592 	push	ar7
      000491 C0 06            [24] 1593 	push	ar6
      000493 C0 04            [24] 1594 	push	ar4
      000495 C0 05            [24] 1595 	push	ar5
      000497 C0 06            [24] 1596 	push	ar6
      000499 C0 07            [24] 1597 	push	ar7
      00049B 78r0F            [12] 1598 	mov	r0,#_average_duty_cycle
      00049D E2               [24] 1599 	movx	a,@r0
      00049E F5 82            [12] 1600 	mov	dpl,a
      0004A0 08               [12] 1601 	inc	r0
      0004A1 E2               [24] 1602 	movx	a,@r0
      0004A2 F5 83            [12] 1603 	mov	dph,a
      0004A4 08               [12] 1604 	inc	r0
      0004A5 E2               [24] 1605 	movx	a,@r0
      0004A6 F5 F0            [12] 1606 	mov	b,a
      0004A8 08               [12] 1607 	inc	r0
      0004A9 E2               [24] 1608 	movx	a,@r0
      0004AA 12r00r00         [24] 1609 	lcall	___fslt
      0004AD E5 81            [12] 1610 	mov	a,sp
      0004AF 24 FC            [12] 1611 	add	a,#0xfc
      0004B1 F5 81            [12] 1612 	mov	sp,a
      0004B3 D0 06            [24] 1613 	pop	ar6
      0004B5 D0 07            [24] 1614 	pop	ar7
      0004B7 E5 82            [12] 1615 	mov	a,dpl
      0004B9 24 FF            [12] 1616 	add	a,#0xFF
      0004BB 92*08            [24] 1617 	mov  _tdm_state_update_sloc3_1_0,c
      0004BD B3               [12] 1618 	cpl	c
      0004BE 92*04            [24] 1619 	mov	_duty_cycle_wait,c
                                   1620 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004C0 D0 07            [24] 1621 	pop	ar7
      0004C2 D0 06            [24] 1622 	pop	ar6
                                   1623 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      0004C4                       1624 00114$:
                                   1625 ;	radio/tdm.c:327: bonus_transmit = 0;
      0004C4 C2*00            [12] 1626 	clr	_bonus_transmit
                                   1627 ;	radio/tdm.c:330: transmit_yield = 0;
      0004C6 C2*01            [12] 1628 	clr	_transmit_yield
                                   1629 ;	radio/tdm.c:333: transmit_wait = 0;
      0004C8 78r0C            [12] 1630 	mov	r0,#_transmit_wait
      0004CA E4               [12] 1631 	clr	a
      0004CB F2               [24] 1632 	movx	@r0,a
      0004CC 08               [12] 1633 	inc	r0
      0004CD F2               [24] 1634 	movx	@r0,a
      0004CE 02r02r86         [24] 1635 	ljmp	00116$
      0004D1                       1636 00118$:
                                   1637 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004D1 78r01            [12] 1638 	mov	r0,#_tdm_state_remaining
      0004D3 E2               [24] 1639 	movx	a,@r0
      0004D4 C3               [12] 1640 	clr	c
      0004D5 9E               [12] 1641 	subb	a,r6
      0004D6 F2               [24] 1642 	movx	@r0,a
      0004D7 08               [12] 1643 	inc	r0
      0004D8 E2               [24] 1644 	movx	a,@r0
      0004D9 9F               [12] 1645 	subb	a,r7
      0004DA F2               [24] 1646 	movx	@r0,a
      0004DB 22               [24] 1647 	ret
                                   1648 ;------------------------------------------------------------
                                   1649 ;Allocation info for local variables in function 'tdm_change_phase'
                                   1650 ;------------------------------------------------------------
                                   1651 ;	radio/tdm.c:342: tdm_change_phase(void)
                                   1652 ;	-----------------------------------------
                                   1653 ;	 function tdm_change_phase
                                   1654 ;	-----------------------------------------
      0004DC                       1655 _tdm_change_phase:
                                   1656 ;	radio/tdm.c:344: tdm_state = (tdm_state+2) % 4;
      0004DC 78r00            [12] 1657 	mov	r0,#_tdm_state
      0004DE E2               [24] 1658 	movx	a,@r0
      0004DF FE               [12] 1659 	mov	r6,a
      0004E0 7F 00            [12] 1660 	mov	r7,#0x00
      0004E2 74 02            [12] 1661 	mov	a,#0x02
      0004E4 2E               [12] 1662 	add	a,r6
      0004E5 FE               [12] 1663 	mov	r6,a
      0004E6 E4               [12] 1664 	clr	a
      0004E7 3F               [12] 1665 	addc	a,r7
      0004E8 FF               [12] 1666 	mov	r7,a
      0004E9 90r00r00         [24] 1667 	mov	dptr,#__modsint_PARM_2
      0004EC 74 04            [12] 1668 	mov	a,#0x04
      0004EE F0               [24] 1669 	movx	@dptr,a
      0004EF E4               [12] 1670 	clr	a
      0004F0 A3               [24] 1671 	inc	dptr
      0004F1 F0               [24] 1672 	movx	@dptr,a
      0004F2 8E 82            [24] 1673 	mov	dpl,r6
      0004F4 8F 83            [24] 1674 	mov	dph,r7
      0004F6 12r00r00         [24] 1675 	lcall	__modsint
      0004F9 AE 82            [24] 1676 	mov	r6,dpl
      0004FB 78r00            [12] 1677 	mov	r0,#_tdm_state
      0004FD EE               [12] 1678 	mov	a,r6
      0004FE F2               [24] 1679 	movx	@r0,a
      0004FF 22               [24] 1680 	ret
                                   1681 ;------------------------------------------------------------
                                   1682 ;Allocation info for local variables in function 'temperature_update'
                                   1683 ;------------------------------------------------------------
                                   1684 ;diff                      Allocated to registers r6 r7 
                                   1685 ;------------------------------------------------------------
                                   1686 ;	radio/tdm.c:349: static void temperature_update(void)
                                   1687 ;	-----------------------------------------
                                   1688 ;	 function temperature_update
                                   1689 ;	-----------------------------------------
      000500                       1690 _temperature_update:
                                   1691 ;	radio/tdm.c:352: if (radio_get_transmit_power() <= 20) {
      000500 12r00r00         [24] 1692 	lcall	_radio_get_transmit_power
      000503 E5 82            [12] 1693 	mov	a,dpl
      000505 FF               [12] 1694 	mov	r7,a
      000506 24 EB            [12] 1695 	add	a,#0xff - 0x14
      000508 40 05            [24] 1696 	jc	00102$
                                   1697 ;	radio/tdm.c:353: duty_cycle_offset = 0;
      00050A 78r13            [12] 1698 	mov	r0,#_duty_cycle_offset
      00050C E4               [12] 1699 	clr	a
      00050D F2               [24] 1700 	movx	@r0,a
                                   1701 ;	radio/tdm.c:354: return;
      00050E 22               [24] 1702 	ret
      00050F                       1703 00102$:
                                   1704 ;	radio/tdm.c:357: diff = radio_temperature() - MAX_PA_TEMPERATURE;
      00050F 12r00r00         [24] 1705 	lcall	_radio_temperature
      000512 E5 82            [12] 1706 	mov	a,dpl
      000514 85 83 F0         [24] 1707 	mov	b,dph
      000517 24 9C            [12] 1708 	add	a,#0x9C
      000519 FE               [12] 1709 	mov	r6,a
      00051A E5 F0            [12] 1710 	mov	a,b
      00051C 34 FF            [12] 1711 	addc	a,#0xFF
      00051E FF               [12] 1712 	mov	r7,a
                                   1713 ;	radio/tdm.c:358: if (diff <= 0 && duty_cycle_offset > 0) {
      00051F C3               [12] 1714 	clr	c
      000520 E4               [12] 1715 	clr	a
      000521 9E               [12] 1716 	subb	a,r6
      000522 74 80            [12] 1717 	mov	a,#(0x00 ^ 0x80)
      000524 8F F0            [24] 1718 	mov	b,r7
      000526 63 F0 80         [24] 1719 	xrl	b,#0x80
      000529 95 F0            [12] 1720 	subb	a,b
      00052B E4               [12] 1721 	clr	a
      00052C 33               [12] 1722 	rlc	a
      00052D FD               [12] 1723 	mov	r5,a
      00052E 70 0C            [24] 1724 	jnz	00112$
      000530 78r13            [12] 1725 	mov	r0,#_duty_cycle_offset
      000532 E2               [24] 1726 	movx	a,@r0
      000533 60 07            [24] 1727 	jz	00112$
                                   1728 ;	radio/tdm.c:360: duty_cycle_offset -= 1;
      000535 78r13            [12] 1729 	mov	r0,#_duty_cycle_offset
      000537 E2               [24] 1730 	movx	a,@r0
      000538 14               [12] 1731 	dec	a
      000539 F2               [24] 1732 	movx	@r0,a
      00053A 80 37            [24] 1733 	sjmp	00113$
      00053C                       1734 00112$:
                                   1735 ;	radio/tdm.c:361: } else if (diff > 10) {
      00053C C3               [12] 1736 	clr	c
      00053D 74 0A            [12] 1737 	mov	a,#0x0A
      00053F 9E               [12] 1738 	subb	a,r6
      000540 74 80            [12] 1739 	mov	a,#(0x00 ^ 0x80)
      000542 8F F0            [24] 1740 	mov	b,r7
      000544 63 F0 80         [24] 1741 	xrl	b,#0x80
      000547 95 F0            [12] 1742 	subb	a,b
      000549 50 08            [24] 1743 	jnc	00109$
                                   1744 ;	radio/tdm.c:363: duty_cycle_offset += 10;
      00054B 78r13            [12] 1745 	mov	r0,#_duty_cycle_offset
      00054D E2               [24] 1746 	movx	a,@r0
      00054E 24 0A            [12] 1747 	add	a,#0x0A
      000550 F2               [24] 1748 	movx	@r0,a
      000551 80 20            [24] 1749 	sjmp	00113$
      000553                       1750 00109$:
                                   1751 ;	radio/tdm.c:364: } else if (diff > 5) {
      000553 C3               [12] 1752 	clr	c
      000554 74 05            [12] 1753 	mov	a,#0x05
      000556 9E               [12] 1754 	subb	a,r6
      000557 74 80            [12] 1755 	mov	a,#(0x00 ^ 0x80)
      000559 8F F0            [24] 1756 	mov	b,r7
      00055B 63 F0 80         [24] 1757 	xrl	b,#0x80
      00055E 95 F0            [12] 1758 	subb	a,b
      000560 50 08            [24] 1759 	jnc	00106$
                                   1760 ;	radio/tdm.c:366: duty_cycle_offset += 5;
      000562 78r13            [12] 1761 	mov	r0,#_duty_cycle_offset
      000564 E2               [24] 1762 	movx	a,@r0
      000565 24 05            [12] 1763 	add	a,#0x05
      000567 F2               [24] 1764 	movx	@r0,a
      000568 80 09            [24] 1765 	sjmp	00113$
      00056A                       1766 00106$:
                                   1767 ;	radio/tdm.c:367: } else if (diff > 0) {
      00056A ED               [12] 1768 	mov	a,r5
      00056B 60 06            [24] 1769 	jz	00113$
                                   1770 ;	radio/tdm.c:369: duty_cycle_offset += 1;				
      00056D 78r13            [12] 1771 	mov	r0,#_duty_cycle_offset
      00056F E2               [24] 1772 	movx	a,@r0
      000570 24 01            [12] 1773 	add	a,#0x01
      000572 F2               [24] 1774 	movx	@r0,a
      000573                       1775 00113$:
                                   1776 ;	radio/tdm.c:372: if ((duty_cycle-duty_cycle_offset) < 20) {
      000573 78r0E            [12] 1777 	mov	r0,#_duty_cycle
      000575 E2               [24] 1778 	movx	a,@r0
      000576 FE               [12] 1779 	mov	r6,a
      000577 7F 00            [12] 1780 	mov	r7,#0x00
      000579 78r13            [12] 1781 	mov	r0,#_duty_cycle_offset
      00057B E2               [24] 1782 	movx	a,@r0
      00057C FC               [12] 1783 	mov	r4,a
      00057D 7D 00            [12] 1784 	mov	r5,#0x00
      00057F EE               [12] 1785 	mov	a,r6
      000580 C3               [12] 1786 	clr	c
      000581 9C               [12] 1787 	subb	a,r4
      000582 FE               [12] 1788 	mov	r6,a
      000583 EF               [12] 1789 	mov	a,r7
      000584 9D               [12] 1790 	subb	a,r5
      000585 FF               [12] 1791 	mov	r7,a
      000586 C3               [12] 1792 	clr	c
      000587 EE               [12] 1793 	mov	a,r6
      000588 94 14            [12] 1794 	subb	a,#0x14
      00058A EF               [12] 1795 	mov	a,r7
      00058B 64 80            [12] 1796 	xrl	a,#0x80
      00058D 94 80            [12] 1797 	subb	a,#0x80
      00058F 50 08            [24] 1798 	jnc	00117$
                                   1799 ;	radio/tdm.c:373: duty_cycle_offset = duty_cycle - 20;
      000591 78r0E            [12] 1800 	mov	r0,#_duty_cycle
      000593 79r13            [12] 1801 	mov	r1,#_duty_cycle_offset
      000595 E2               [24] 1802 	movx	a,@r0
      000596 24 EC            [12] 1803 	add	a,#0xEC
      000598 F3               [24] 1804 	movx	@r1,a
      000599                       1805 00117$:
      000599 22               [24] 1806 	ret
                                   1807 ;------------------------------------------------------------
                                   1808 ;Allocation info for local variables in function 'link_update'
                                   1809 ;------------------------------------------------------------
                                   1810 ;old_remaining             Allocated to registers r6 r7 
                                   1811 ;unlock_count              Allocated with name '_link_update_unlock_count_1_192'
                                   1812 ;temperature_count         Allocated with name '_link_update_temperature_count_1_192'
                                   1813 ;------------------------------------------------------------
                                   1814 ;	radio/tdm.c:381: link_update(void)
                                   1815 ;	-----------------------------------------
                                   1816 ;	 function link_update
                                   1817 ;	-----------------------------------------
      00059A                       1818 _link_update:
                                   1819 ;	radio/tdm.c:384: if (received_packet) {
      00059A 30*03 09         [24] 1820 	jnb	_received_packet,00102$
                                   1821 ;	radio/tdm.c:385: unlock_count = 0;
      00059D 90r00rFD         [24] 1822 	mov	dptr,#_link_update_unlock_count_1_192
      0005A0 E4               [12] 1823 	clr	a
      0005A1 F0               [24] 1824 	movx	@dptr,a
                                   1825 ;	radio/tdm.c:386: received_packet = false;
      0005A2 C2*03            [12] 1826 	clr	_received_packet
      0005A4 80 07            [24] 1827 	sjmp	00103$
      0005A6                       1828 00102$:
                                   1829 ;	radio/tdm.c:391: unlock_count++;
      0005A6 90r00rFD         [24] 1830 	mov	dptr,#_link_update_unlock_count_1_192
      0005A9 E0               [24] 1831 	movx	a,@dptr
      0005AA 24 01            [12] 1832 	add	a,#0x01
      0005AC F0               [24] 1833 	movx	@dptr,a
      0005AD                       1834 00103$:
                                   1835 ;	radio/tdm.c:394: if (unlock_count < 2) {
      0005AD 90r00rFD         [24] 1836 	mov	dptr,#_link_update_unlock_count_1_192
      0005B0 E0               [24] 1837 	movx	a,@dptr
      0005B1 FF               [12] 1838 	mov	r7,a
      0005B2 BF 02 00         [24] 1839 	cjne	r7,#0x02,00157$
      0005B5                       1840 00157$:
      0005B5 50 04            [24] 1841 	jnc	00105$
                                   1842 ;	radio/tdm.c:395: LED_RADIO = LED_ON;
      0005B7 C2 95            [12] 1843 	clr	_LED_GREEN
      0005B9 80 06            [24] 1844 	sjmp	00106$
      0005BB                       1845 00105$:
                                   1846 ;	radio/tdm.c:401: LED_RADIO = blink_state;
      0005BB A2*02            [12] 1847 	mov	c,_blink_state
      0005BD 92 95            [24] 1848 	mov	_LED_GREEN,c
                                   1849 ;	radio/tdm.c:402: blink_state = !blink_state;
      0005BF B2*02            [12] 1850 	cpl	_blink_state
      0005C1                       1851 00106$:
                                   1852 ;	radio/tdm.c:405: if (unlock_count > 40) {
      0005C1 EF               [12] 1853 	mov	a,r7
      0005C2 24 D7            [12] 1854 	add	a,#0xff - 0x28
      0005C4 40 03            [24] 1855 	jc	00159$
      0005C6 02r06r51         [24] 1856 	ljmp	00117$
      0005C9                       1857 00159$:
                                   1858 ;	radio/tdm.c:409: unlock_count = 5;
      0005C9 90r00rFD         [24] 1859 	mov	dptr,#_link_update_unlock_count_1_192
      0005CC 74 05            [12] 1860 	mov	a,#0x05
      0005CE F0               [24] 1861 	movx	@dptr,a
                                   1862 ;	radio/tdm.c:413: if (timer_entropy() & 1) {
      0005CF 12r00r00         [24] 1863 	lcall	_timer_entropy
      0005D2 E5 82            [12] 1864 	mov	a,dpl
      0005D4 30 E0 59         [24] 1865 	jnb	acc.0,00113$
                                   1866 ;	radio/tdm.c:414: register uint16_t old_remaining = tdm_state_remaining;
      0005D7 78r01            [12] 1867 	mov	r0,#_tdm_state_remaining
      0005D9 E2               [24] 1868 	movx	a,@r0
      0005DA FE               [12] 1869 	mov	r6,a
      0005DB 08               [12] 1870 	inc	r0
      0005DC E2               [24] 1871 	movx	a,@r0
      0005DD FF               [12] 1872 	mov	r7,a
                                   1873 ;	radio/tdm.c:415: if (tdm_state_remaining > silence_period) {
      0005DE 78r06            [12] 1874 	mov	r0,#_silence_period
      0005E0 C3               [12] 1875 	clr	c
      0005E1 E2               [24] 1876 	movx	a,@r0
      0005E2 9E               [12] 1877 	subb	a,r6
      0005E3 08               [12] 1878 	inc	r0
      0005E4 E2               [24] 1879 	movx	a,@r0
      0005E5 9F               [12] 1880 	subb	a,r7
      0005E6 50 17            [24] 1881 	jnc	00108$
                                   1882 ;	radio/tdm.c:416: tdm_state_remaining -= packet_latency;
      0005E8 78r08            [12] 1883 	mov	r0,#_packet_latency
      0005EA D3               [12] 1884 	setb	c
      0005EB E2               [24] 1885 	movx	a,@r0
      0005EC 9E               [12] 1886 	subb	a,r6
      0005ED F4               [12] 1887 	cpl	a
      0005EE B3               [12] 1888 	cpl	c
      0005EF FC               [12] 1889 	mov	r4,a
      0005F0 B3               [12] 1890 	cpl	c
      0005F1 08               [12] 1891 	inc	r0
      0005F2 E2               [24] 1892 	movx	a,@r0
      0005F3 9F               [12] 1893 	subb	a,r7
      0005F4 F4               [12] 1894 	cpl	a
      0005F5 FD               [12] 1895 	mov	r5,a
      0005F6 78r01            [12] 1896 	mov	r0,#_tdm_state_remaining
      0005F8 EC               [12] 1897 	mov	a,r4
      0005F9 F2               [24] 1898 	movx	@r0,a
      0005FA 08               [12] 1899 	inc	r0
      0005FB ED               [12] 1900 	mov	a,r5
      0005FC F2               [24] 1901 	movx	@r0,a
      0005FD 80 08            [24] 1902 	sjmp	00109$
      0005FF                       1903 00108$:
                                   1904 ;	radio/tdm.c:418: tdm_state_remaining = 1;
      0005FF 78r01            [12] 1905 	mov	r0,#_tdm_state_remaining
      000601 74 01            [12] 1906 	mov	a,#0x01
      000603 F2               [24] 1907 	movx	@r0,a
      000604 08               [12] 1908 	inc	r0
      000605 E4               [12] 1909 	clr	a
      000606 F2               [24] 1910 	movx	@r0,a
      000607                       1911 00109$:
                                   1912 ;	radio/tdm.c:420: if (at_testmode & AT_TEST_TDM) {
      000607 78r00            [12] 1913 	mov	r0,#_at_testmode
      000609 E2               [24] 1914 	movx	a,@r0
      00060A 54 02            [12] 1915 	anl	a,#0x02
      00060C 60 22            [24] 1916 	jz	00113$
                                   1917 ;	radio/tdm.c:421: printf("TDM: change timing %u/%u\n",
      00060E 78r01            [12] 1918 	mov	r0,#_tdm_state_remaining
      000610 E2               [24] 1919 	movx	a,@r0
      000611 C0 E0            [24] 1920 	push	acc
      000613 08               [12] 1921 	inc	r0
      000614 E2               [24] 1922 	movx	a,@r0
      000615 C0 E0            [24] 1923 	push	acc
      000617 C0 06            [24] 1924 	push	ar6
      000619 C0 07            [24] 1925 	push	ar7
      00061B 74r82            [12] 1926 	mov	a,#___str_4
      00061D C0 E0            [24] 1927 	push	acc
      00061F 74s00            [12] 1928 	mov	a,#(___str_4 >> 8)
      000621 C0 E0            [24] 1929 	push	acc
      000623 74 80            [12] 1930 	mov	a,#0x80
      000625 C0 E0            [24] 1931 	push	acc
      000627 12r00r00         [24] 1932 	lcall	_printfl
      00062A E5 81            [12] 1933 	mov	a,sp
      00062C 24 F9            [12] 1934 	add	a,#0xf9
      00062E F5 81            [12] 1935 	mov	sp,a
      000630                       1936 00113$:
                                   1937 ;	radio/tdm.c:427: if (at_testmode & AT_TEST_TDM) {
      000630 78r00            [12] 1938 	mov	r0,#_at_testmode
      000632 E2               [24] 1939 	movx	a,@r0
      000633 54 02            [12] 1940 	anl	a,#0x02
      000635 60 15            [24] 1941 	jz	00115$
                                   1942 ;	radio/tdm.c:428: printf("TDM: scanning\n");
      000637 74r9C            [12] 1943 	mov	a,#___str_5
      000639 C0 E0            [24] 1944 	push	acc
      00063B 74s00            [12] 1945 	mov	a,#(___str_5 >> 8)
      00063D C0 E0            [24] 1946 	push	acc
      00063F 74 80            [12] 1947 	mov	a,#0x80
      000641 C0 E0            [24] 1948 	push	acc
      000643 12r00r00         [24] 1949 	lcall	_printfl
      000646 15 81            [12] 1950 	dec	sp
      000648 15 81            [12] 1951 	dec	sp
      00064A 15 81            [12] 1952 	dec	sp
      00064C                       1953 00115$:
                                   1954 ;	radio/tdm.c:430: fhop_set_locked(false);
      00064C C2*00            [12] 1955 	clr	_fhop_set_locked_PARM_1
      00064E 12r00r00         [24] 1956 	lcall	_fhop_set_locked
      000651                       1957 00117$:
                                   1958 ;	radio/tdm.c:433: if (unlock_count != 0) {
      000651 90r00rFD         [24] 1959 	mov	dptr,#_link_update_unlock_count_1_192
      000654 E0               [24] 1960 	movx	a,@dptr
      000655 60 3D            [24] 1961 	jz	00119$
                                   1962 ;	radio/tdm.c:434: statistics.average_rssi = (radio_last_rssi() + 3*(uint16_t)statistics.average_rssi)/4;
      000657 12r00r00         [24] 1963 	lcall	_radio_last_rssi
      00065A AF 82            [24] 1964 	mov	r7,dpl
      00065C 7E 00            [12] 1965 	mov	r6,#0x00
      00065E 78r00            [12] 1966 	mov	r0,#_statistics
      000660 E2               [24] 1967 	movx	a,@r0
      000661 90r00r00         [24] 1968 	mov	dptr,#__mulint_PARM_2
      000664 F0               [24] 1969 	movx	@dptr,a
      000665 E4               [12] 1970 	clr	a
      000666 A3               [24] 1971 	inc	dptr
      000667 F0               [24] 1972 	movx	@dptr,a
      000668 90 00 03         [24] 1973 	mov	dptr,#0x0003
      00066B C0 07            [24] 1974 	push	ar7
      00066D C0 06            [24] 1975 	push	ar6
      00066F 12r00r00         [24] 1976 	lcall	__mulint
      000672 AC 82            [24] 1977 	mov	r4,dpl
      000674 AD 83            [24] 1978 	mov	r5,dph
      000676 D0 06            [24] 1979 	pop	ar6
      000678 D0 07            [24] 1980 	pop	ar7
      00067A EC               [12] 1981 	mov	a,r4
      00067B 2F               [12] 1982 	add	a,r7
      00067C FC               [12] 1983 	mov	r4,a
      00067D ED               [12] 1984 	mov	a,r5
      00067E 3E               [12] 1985 	addc	a,r6
      00067F C3               [12] 1986 	clr	c
      000680 13               [12] 1987 	rrc	a
      000681 CC               [12] 1988 	xch	a,r4
      000682 13               [12] 1989 	rrc	a
      000683 CC               [12] 1990 	xch	a,r4
      000684 C3               [12] 1991 	clr	c
      000685 13               [12] 1992 	rrc	a
      000686 CC               [12] 1993 	xch	a,r4
      000687 13               [12] 1994 	rrc	a
      000688 CC               [12] 1995 	xch	a,r4
      000689 FD               [12] 1996 	mov	r5,a
      00068A 78r00            [12] 1997 	mov	r0,#_statistics
      00068C EC               [12] 1998 	mov	a,r4
      00068D F2               [24] 1999 	movx	@r0,a
                                   2000 ;	radio/tdm.c:437: statistics.receive_count = 0;
      00068E 78r02            [12] 2001 	mov	r0,#(_statistics + 0x0002)
      000690 E4               [12] 2002 	clr	a
      000691 F2               [24] 2003 	movx	@r0,a
      000692 08               [12] 2004 	inc	r0
      000693 F2               [24] 2005 	movx	@r0,a
      000694                       2006 00119$:
                                   2007 ;	radio/tdm.c:440: if (unlock_count > 5) {
      000694 90r00rFD         [24] 2008 	mov	dptr,#_link_update_unlock_count_1_192
      000697 E0               [24] 2009 	movx	a,@dptr
      000698 FF               [12] 2010 	mov  r7,a
      000699 24 FA            [12] 2011 	add	a,#0xff - 0x05
      00069B 50 17            [24] 2012 	jnc	00121$
                                   2013 ;	radio/tdm.c:441: memset(&remote_statistics, 0, sizeof(remote_statistics));
      00069D 90r00r00         [24] 2014 	mov	dptr,#_memset_PARM_2
      0006A0 E4               [12] 2015 	clr	a
      0006A1 F0               [24] 2016 	movx	@dptr,a
      0006A2 90r00r00         [24] 2017 	mov	dptr,#_memset_PARM_3
      0006A5 74 04            [12] 2018 	mov	a,#0x04
      0006A7 F0               [24] 2019 	movx	@dptr,a
      0006A8 E4               [12] 2020 	clr	a
      0006A9 A3               [24] 2021 	inc	dptr
      0006AA F0               [24] 2022 	movx	@dptr,a
      0006AB 90r00r00         [24] 2023 	mov	dptr,#_remote_statistics
      0006AE 75 F0 60         [24] 2024 	mov	b,#0x60
      0006B1 12r00r00         [24] 2025 	lcall	_memset
      0006B4                       2026 00121$:
                                   2027 ;	radio/tdm.c:444: test_display = at_testmode;
      0006B4 78r00            [12] 2028 	mov	r0,#_at_testmode
      0006B6 90r00rFC         [24] 2029 	mov	dptr,#_test_display
      0006B9 E2               [24] 2030 	movx	a,@r0
      0006BA F0               [24] 2031 	movx	@dptr,a
                                   2032 ;	radio/tdm.c:445: send_statistics = 1;
      0006BB D2*05            [12] 2033 	setb	_send_statistics
                                   2034 ;	radio/tdm.c:447: temperature_count++;
      0006BD 90r00rFE         [24] 2035 	mov	dptr,#_link_update_temperature_count_1_192
      0006C0 E0               [24] 2036 	movx	a,@dptr
      0006C1 24 01            [12] 2037 	add	a,#0x01
      0006C3 F0               [24] 2038 	movx	@dptr,a
                                   2039 ;	radio/tdm.c:448: if (temperature_count == 4) {
      0006C4 E0               [24] 2040 	movx	a,@dptr
      0006C5 FF               [12] 2041 	mov	r7,a
      0006C6 BF 04 08         [24] 2042 	cjne	r7,#0x04,00124$
                                   2043 ;	radio/tdm.c:450: temperature_update();
      0006C9 12r05r00         [24] 2044 	lcall	_temperature_update
                                   2045 ;	radio/tdm.c:451: temperature_count = 0;
      0006CC 90r00rFE         [24] 2046 	mov	dptr,#_link_update_temperature_count_1_192
      0006CF E4               [12] 2047 	clr	a
      0006D0 F0               [24] 2048 	movx	@dptr,a
      0006D1                       2049 00124$:
      0006D1 22               [24] 2050 	ret
                                   2051 ;------------------------------------------------------------
                                   2052 ;Allocation info for local variables in function 'tdm_remote_at'
                                   2053 ;------------------------------------------------------------
                                   2054 ;	radio/tdm.c:457: tdm_remote_at(void)
                                   2055 ;	-----------------------------------------
                                   2056 ;	 function tdm_remote_at
                                   2057 ;	-----------------------------------------
      0006D2                       2058 _tdm_remote_at:
                                   2059 ;	radio/tdm.c:459: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
      0006D2 90r00r00         [24] 2060 	mov	dptr,#_at_cmd
      0006D5 75 F0 00         [24] 2061 	mov	b,#0x00
      0006D8 12r00r00         [24] 2062 	lcall	_strlen
      0006DB E5 82            [12] 2063 	mov	a,dpl
      0006DD 85 83 F0         [24] 2064 	mov	b,dph
      0006E0 24 01            [12] 2065 	add	a,#0x01
      0006E2 FE               [12] 2066 	mov	r6,a
      0006E3 E4               [12] 2067 	clr	a
      0006E4 35 F0            [12] 2068 	addc	a,b
      0006E6 FF               [12] 2069 	mov	r7,a
      0006E7 90r00r00         [24] 2070 	mov	dptr,#_memcpy_PARM_2
      0006EA 74r00            [12] 2071 	mov	a,#_at_cmd
      0006EC F0               [24] 2072 	movx	@dptr,a
      0006ED 74s00            [12] 2073 	mov	a,#(_at_cmd >> 8)
      0006EF A3               [24] 2074 	inc	dptr
      0006F0 F0               [24] 2075 	movx	@dptr,a
      0006F1 E4               [12] 2076 	clr	a
      0006F2 A3               [24] 2077 	inc	dptr
      0006F3 F0               [24] 2078 	movx	@dptr,a
      0006F4 90r00r00         [24] 2079 	mov	dptr,#_memcpy_PARM_3
      0006F7 EE               [12] 2080 	mov	a,r6
      0006F8 F0               [24] 2081 	movx	@dptr,a
      0006F9 EF               [12] 2082 	mov	a,r7
      0006FA A3               [24] 2083 	inc	dptr
      0006FB F0               [24] 2084 	movx	@dptr,a
      0006FC 90r00r1F         [24] 2085 	mov	dptr,#_remote_at_cmd
      0006FF 75 F0 60         [24] 2086 	mov	b,#0x60
      000702 12r00r00         [24] 2087 	lcall	_memcpy
                                   2088 ;	radio/tdm.c:460: send_at_command = true;
      000705 D2*06            [12] 2089 	setb	_send_at_command
      000707 22               [24] 2090 	ret
                                   2091 ;------------------------------------------------------------
                                   2092 ;Allocation info for local variables in function 'handle_at_command'
                                   2093 ;------------------------------------------------------------
                                   2094 ;	radio/tdm.c:468: handle_at_command(__pdata uint8_t len)
                                   2095 ;	-----------------------------------------
                                   2096 ;	 function handle_at_command
                                   2097 ;	-----------------------------------------
      000708                       2098 _handle_at_command:
      000708 AF 82            [24] 2099 	mov	r7,dpl
                                   2100 ;	radio/tdm.c:470: if (len < 2 || len > AT_CMD_MAXLEN ||
      00070A BF 02 00         [24] 2101 	cjne	r7,#0x02,00122$
      00070D                       2102 00122$:
      00070D 40 17            [24] 2103 	jc	00101$
      00070F EF               [12] 2104 	mov	a,r7
      000710 24 EF            [12] 2105 	add	a,#0xff - 0x10
      000712 40 12            [24] 2106 	jc	00101$
                                   2107 ;	radio/tdm.c:471: pbuf[0] != (uint8_t)'R' ||
      000714 90r00r00         [24] 2108 	mov	dptr,#_pbuf
      000717 E0               [24] 2109 	movx	a,@dptr
      000718 FE               [12] 2110 	mov	r6,a
      000719 BE 52 0A         [24] 2111 	cjne	r6,#0x52,00101$
                                   2112 ;	radio/tdm.c:472: pbuf[1] != (uint8_t)'T') {
      00071C 90r00r01         [24] 2113 	mov	dptr,#(_pbuf + 0x0001)
      00071F E0               [24] 2114 	movx	a,@dptr
      000720 FE               [12] 2115 	mov	r6,a
      000721 BE 54 02         [24] 2116 	cjne	r6,#0x54,00127$
      000724 80 02            [24] 2117 	sjmp	00102$
      000726                       2118 00127$:
      000726                       2119 00101$:
                                   2120 ;	radio/tdm.c:473: return true;
      000726 D3               [12] 2121 	setb	c
      000727 22               [24] 2122 	ret
      000728                       2123 00102$:
                                   2124 ;	radio/tdm.c:477: memcpy(at_cmd, pbuf, len);
      000728 90r00r00         [24] 2125 	mov	dptr,#_memcpy_PARM_2
      00072B 74r00            [12] 2126 	mov	a,#_pbuf
      00072D F0               [24] 2127 	movx	@dptr,a
      00072E 74s00            [12] 2128 	mov	a,#(_pbuf >> 8)
      000730 A3               [24] 2129 	inc	dptr
      000731 F0               [24] 2130 	movx	@dptr,a
      000732 E4               [12] 2131 	clr	a
      000733 A3               [24] 2132 	inc	dptr
      000734 F0               [24] 2133 	movx	@dptr,a
      000735 90r00r00         [24] 2134 	mov	dptr,#_memcpy_PARM_3
      000738 EF               [12] 2135 	mov	a,r7
      000739 F0               [24] 2136 	movx	@dptr,a
      00073A E4               [12] 2137 	clr	a
      00073B A3               [24] 2138 	inc	dptr
      00073C F0               [24] 2139 	movx	@dptr,a
      00073D 90r00r00         [24] 2140 	mov	dptr,#_at_cmd
      000740 75 F0 00         [24] 2141 	mov	b,#0x00
      000743 C0 07            [24] 2142 	push	ar7
      000745 12r00r00         [24] 2143 	lcall	_memcpy
      000748 D0 07            [24] 2144 	pop	ar7
                                   2145 ;	radio/tdm.c:478: at_cmd[len] = 0;
      00074A EF               [12] 2146 	mov	a,r7
      00074B 24r00            [12] 2147 	add	a,#_at_cmd
      00074D F5 82            [12] 2148 	mov	dpl,a
      00074F E4               [12] 2149 	clr	a
      000750 34s00            [12] 2150 	addc	a,#(_at_cmd >> 8)
      000752 F5 83            [12] 2151 	mov	dph,a
      000754 E4               [12] 2152 	clr	a
      000755 F0               [24] 2153 	movx	@dptr,a
                                   2154 ;	radio/tdm.c:479: at_cmd[0] = 'A'; // replace 'R'
      000756 90r00r00         [24] 2155 	mov	dptr,#_at_cmd
      000759 74 41            [12] 2156 	mov	a,#0x41
      00075B F0               [24] 2157 	movx	@dptr,a
                                   2158 ;	radio/tdm.c:480: at_cmd_len = len;
      00075C 78r00            [12] 2159 	mov	r0,#_at_cmd_len
      00075E EF               [12] 2160 	mov	a,r7
      00075F F2               [24] 2161 	movx	@r0,a
                                   2162 ;	radio/tdm.c:481: at_cmd_ready = true;
      000760 D2*00            [12] 2163 	setb	_at_cmd_ready
                                   2164 ;	radio/tdm.c:486: printf_start_capture(pbuf, sizeof(pbuf));
      000762 90r00r00         [24] 2165 	mov	dptr,#_printf_start_capture_PARM_2
      000765 74 FC            [12] 2166 	mov	a,#0xFC
      000767 F0               [24] 2167 	movx	@dptr,a
      000768 90r00r00         [24] 2168 	mov	dptr,#_pbuf
      00076B 12r00r00         [24] 2169 	lcall	_printf_start_capture
                                   2170 ;	radio/tdm.c:487: at_command();
      00076E 12r00r00         [24] 2171 	lcall	_at_command
                                   2172 ;	radio/tdm.c:488: len = printf_end_capture();
      000771 12r00r00         [24] 2173 	lcall	_printf_end_capture
                                   2174 ;	radio/tdm.c:489: if (len > 0) {
      000774 E5 82            [12] 2175 	mov	a,dpl
      000776 FF               [12] 2176 	mov	r7,a
      000777 60 0A            [24] 2177 	jz	00107$
                                   2178 ;	radio/tdm.c:490: packet_inject(pbuf, len);
      000779 78r00            [12] 2179 	mov	r0,#_packet_inject_PARM_2
      00077B EF               [12] 2180 	mov	a,r7
      00077C F2               [24] 2181 	movx	@r0,a
      00077D 90r00r00         [24] 2182 	mov	dptr,#_pbuf
      000780 12r00r00         [24] 2183 	lcall	_packet_inject
      000783                       2184 00107$:
                                   2185 ;	radio/tdm.c:492: return false;
      000783 C3               [12] 2186 	clr	c
      000784 22               [24] 2187 	ret
                                   2188 ;------------------------------------------------------------
                                   2189 ;Allocation info for local variables in function 'tdm_serial_loop'
                                   2190 ;------------------------------------------------------------
                                   2191 ;	radio/tdm.c:501: tdm_serial_loop(void)
                                   2192 ;	-----------------------------------------
                                   2193 ;	 function tdm_serial_loop
                                   2194 ;	-----------------------------------------
      000785                       2195 _tdm_serial_loop:
                                   2196 ;	radio/tdm.c:516: __pdata uint16_t last_t = timer2_tick();
      000785 12r00r00         [24] 2197 	lcall	_timer2_tick
      000788 78r35            [12] 2198 	mov	r0,#_tdm_serial_loop_last_t_1_213
      00078A E5 82            [12] 2199 	mov	a,dpl
      00078C F2               [24] 2200 	movx	@r0,a
      00078D 08               [12] 2201 	inc	r0
      00078E E5 83            [12] 2202 	mov	a,dph
      000790 F2               [24] 2203 	movx	@r0,a
                                   2204 ;	radio/tdm.c:517: __pdata uint16_t last_link_update = last_t;
      000791 78r35            [12] 2205 	mov	r0,#_tdm_serial_loop_last_t_1_213
      000793 79r37            [12] 2206 	mov	r1,#_tdm_serial_loop_last_link_update_1_213
      000795 E2               [24] 2207 	movx	a,@r0
      000796 F3               [24] 2208 	movx	@r1,a
      000797 08               [12] 2209 	inc	r0
      000798 E2               [24] 2210 	movx	a,@r0
      000799 09               [12] 2211 	inc	r1
      00079A F3               [24] 2212 	movx	@r1,a
                                   2213 ;	radio/tdm.c:520: _canary = 42;
      00079B 78 FF            [12] 2214 	mov	r0,#__canary
      00079D 76 2A            [12] 2215 	mov	@r0,#0x2A
      00079F                       2216 00195$:
                                   2217 ;	radio/tdm.c:523: if (_canary != 42) {
      00079F 78 FF            [12] 2218 	mov	r0,#__canary
      0007A1 B6 2A 02         [24] 2219 	cjne	@r0,#0x2A,00345$
      0007A4 80 15            [24] 2220 	sjmp	00102$
      0007A6                       2221 00345$:
                                   2222 ;	radio/tdm.c:524: panic("stack blown\n");
      0007A6 74rAB            [12] 2223 	mov	a,#___str_6
      0007A8 C0 E0            [24] 2224 	push	acc
      0007AA 74s00            [12] 2225 	mov	a,#(___str_6 >> 8)
      0007AC C0 E0            [24] 2226 	push	acc
      0007AE 74 80            [12] 2227 	mov	a,#0x80
      0007B0 C0 E0            [24] 2228 	push	acc
      0007B2 12r00r00         [24] 2229 	lcall	_panic
      0007B5 15 81            [12] 2230 	dec	sp
      0007B7 15 81            [12] 2231 	dec	sp
      0007B9 15 81            [12] 2232 	dec	sp
      0007BB                       2233 00102$:
                                   2234 ;	radio/tdm.c:527: if (pdata_canary != 0x41) {
      0007BB 78r00            [12] 2235 	mov	r0,#_pdata_canary
      0007BD E2               [24] 2236 	movx	a,@r0
      0007BE B4 41 02         [24] 2237 	cjne	a,#0x41,00346$
      0007C1 80 15            [24] 2238 	sjmp	00104$
      0007C3                       2239 00346$:
                                   2240 ;	radio/tdm.c:528: panic("pdata canary changed\n");
      0007C3 74rB8            [12] 2241 	mov	a,#___str_7
      0007C5 C0 E0            [24] 2242 	push	acc
      0007C7 74s00            [12] 2243 	mov	a,#(___str_7 >> 8)
      0007C9 C0 E0            [24] 2244 	push	acc
      0007CB 74 80            [12] 2245 	mov	a,#0x80
      0007CD C0 E0            [24] 2246 	push	acc
      0007CF 12r00r00         [24] 2247 	lcall	_panic
      0007D2 15 81            [12] 2248 	dec	sp
      0007D4 15 81            [12] 2249 	dec	sp
      0007D6 15 81            [12] 2250 	dec	sp
      0007D8                       2251 00104$:
                                   2252 ;	radio/tdm.c:532: at_command();
      0007D8 12r00r00         [24] 2253 	lcall	_at_command
                                   2254 ;	radio/tdm.c:535: if (test_display) {
      0007DB 90r00rFC         [24] 2255 	mov	dptr,#_test_display
      0007DE E0               [24] 2256 	movx	a,@dptr
      0007DF 60 08            [24] 2257 	jz	00106$
                                   2258 ;	radio/tdm.c:536: display_test_output();
      0007E1 12r00rD1         [24] 2259 	lcall	_display_test_output
                                   2260 ;	radio/tdm.c:537: test_display = 0;
      0007E4 90r00rFC         [24] 2261 	mov	dptr,#_test_display
      0007E7 E4               [12] 2262 	clr	a
      0007E8 F0               [24] 2263 	movx	@dptr,a
      0007E9                       2264 00106$:
                                   2265 ;	radio/tdm.c:540: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
      0007E9 30*00 0E         [24] 2266 	jnb	_seen_mavlink,00108$
      0007EC 90r00r00         [24] 2267 	mov	dptr,#_feature_mavlink_framing
      0007EF E0               [24] 2268 	movx	a,@dptr
      0007F0 60 08            [24] 2269 	jz	00108$
      0007F2 20*00 05         [24] 2270 	jb	_at_mode_active,00108$
                                   2271 ;	radio/tdm.c:541: seen_mavlink = false;
      0007F5 C2*00            [12] 2272 	clr	_seen_mavlink
                                   2273 ;	radio/tdm.c:542: MAVLink_report();
      0007F7 12r00r00         [24] 2274 	lcall	_MAVLink_report
      0007FA                       2275 00108$:
                                   2276 ;	radio/tdm.c:546: radio_set_channel(fhop_receive_channel());
      0007FA 12r00r00         [24] 2277 	lcall	_fhop_receive_channel
      0007FD 12r00r00         [24] 2278 	lcall	_radio_set_channel
                                   2279 ;	radio/tdm.c:549: tnow = timer2_tick();
      000800 12r00r00         [24] 2280 	lcall	_timer2_tick
      000803 AA 82            [24] 2281 	mov	r2,dpl
      000805 AB 83            [24] 2282 	mov	r3,dph
                                   2283 ;	radio/tdm.c:552: if (radio_receive_packet(&len, pbuf)) {
      000807 78r00            [12] 2284 	mov	r0,#_radio_receive_packet_PARM_2
      000809 74r00            [12] 2285 	mov	a,#_pbuf
      00080B F2               [24] 2286 	movx	@r0,a
      00080C 08               [12] 2287 	inc	r0
      00080D 74s00            [12] 2288 	mov	a,#(_pbuf >> 8)
      00080F F2               [24] 2289 	movx	@r0,a
      000810 90r00r32         [24] 2290 	mov	dptr,#_tdm_serial_loop_len_1_213
      000813 75 F0 60         [24] 2291 	mov	b,#0x60
      000816 C0 03            [24] 2292 	push	ar3
      000818 C0 02            [24] 2293 	push	ar2
      00081A 12r00r00         [24] 2294 	lcall	_radio_receive_packet
      00081D D0 02            [24] 2295 	pop	ar2
      00081F D0 03            [24] 2296 	pop	ar3
      000821 40 03            [24] 2297 	jc	00351$
      000823 02r09rA5         [24] 2298 	ljmp	00129$
      000826                       2299 00351$:
                                   2300 ;	radio/tdm.c:555: received_packet = true;
      000826 D2*03            [12] 2301 	setb	_received_packet
                                   2302 ;	radio/tdm.c:556: fhop_set_locked(true);
      000828 D2*00            [12] 2303 	setb	_fhop_set_locked_PARM_1
      00082A C0 03            [24] 2304 	push	ar3
      00082C C0 02            [24] 2305 	push	ar2
      00082E 12r00r00         [24] 2306 	lcall	_fhop_set_locked
                                   2307 ;	radio/tdm.c:559: statistics.average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics.average_rssi)/8;
      000831 12r00r00         [24] 2308 	lcall	_radio_last_rssi
      000834 AD 82            [24] 2309 	mov	r5,dpl
      000836 D0 02            [24] 2310 	pop	ar2
      000838 D0 03            [24] 2311 	pop	ar3
      00083A 7C 00            [12] 2312 	mov	r4,#0x00
      00083C 78r00            [12] 2313 	mov	r0,#_statistics
      00083E E2               [24] 2314 	movx	a,@r0
      00083F 90r00r00         [24] 2315 	mov	dptr,#__mulint_PARM_2
      000842 F0               [24] 2316 	movx	@dptr,a
      000843 E4               [12] 2317 	clr	a
      000844 A3               [24] 2318 	inc	dptr
      000845 F0               [24] 2319 	movx	@dptr,a
      000846 90 00 07         [24] 2320 	mov	dptr,#0x0007
      000849 C0 05            [24] 2321 	push	ar5
      00084B C0 04            [24] 2322 	push	ar4
      00084D C0 03            [24] 2323 	push	ar3
      00084F C0 02            [24] 2324 	push	ar2
      000851 12r00r00         [24] 2325 	lcall	__mulint
      000854 AE 82            [24] 2326 	mov	r6,dpl
      000856 AF 83            [24] 2327 	mov	r7,dph
      000858 D0 02            [24] 2328 	pop	ar2
      00085A D0 03            [24] 2329 	pop	ar3
      00085C D0 04            [24] 2330 	pop	ar4
      00085E D0 05            [24] 2331 	pop	ar5
      000860 EE               [12] 2332 	mov	a,r6
      000861 2D               [12] 2333 	add	a,r5
      000862 FE               [12] 2334 	mov	r6,a
      000863 EF               [12] 2335 	mov	a,r7
      000864 3C               [12] 2336 	addc	a,r4
      000865 C4               [12] 2337 	swap	a
      000866 23               [12] 2338 	rl	a
      000867 CE               [12] 2339 	xch	a,r6
      000868 C4               [12] 2340 	swap	a
      000869 23               [12] 2341 	rl	a
      00086A 54 1F            [12] 2342 	anl	a,#0x1F
      00086C 6E               [12] 2343 	xrl	a,r6
      00086D CE               [12] 2344 	xch	a,r6
      00086E 54 1F            [12] 2345 	anl	a,#0x1F
      000870 CE               [12] 2346 	xch	a,r6
      000871 6E               [12] 2347 	xrl	a,r6
      000872 CE               [12] 2348 	xch	a,r6
      000873 78r00            [12] 2349 	mov	r0,#_statistics
      000875 EE               [12] 2350 	mov	a,r6
      000876 F2               [24] 2351 	movx	@r0,a
                                   2352 ;	radio/tdm.c:560: statistics.receive_count++;
      000877 78r02            [12] 2353 	mov	r0,#(_statistics + 0x0002)
      000879 E2               [24] 2354 	movx	a,@r0
      00087A FE               [12] 2355 	mov	r6,a
      00087B 08               [12] 2356 	inc	r0
      00087C E2               [24] 2357 	movx	a,@r0
      00087D FF               [12] 2358 	mov	r7,a
      00087E 0E               [12] 2359 	inc	r6
      00087F BE 00 01         [24] 2360 	cjne	r6,#0x00,00352$
      000882 0F               [12] 2361 	inc	r7
      000883                       2362 00352$:
      000883 78r02            [12] 2363 	mov	r0,#(_statistics + 0x0002)
      000885 EE               [12] 2364 	mov	a,r6
      000886 F2               [24] 2365 	movx	@r0,a
      000887 08               [12] 2366 	inc	r0
      000888 EF               [12] 2367 	mov	a,r7
      000889 F2               [24] 2368 	movx	@r0,a
                                   2369 ;	radio/tdm.c:564: transmit_wait = 0;
      00088A 78r0C            [12] 2370 	mov	r0,#_transmit_wait
      00088C E4               [12] 2371 	clr	a
      00088D F2               [24] 2372 	movx	@r0,a
      00088E 08               [12] 2373 	inc	r0
      00088F F2               [24] 2374 	movx	@r0,a
                                   2375 ;	radio/tdm.c:566: if (len < 2) {
      000890 78r32            [12] 2376 	mov	r0,#_tdm_serial_loop_len_1_213
      000892 E2               [24] 2377 	movx	a,@r0
      000893 B4 02 00         [24] 2378 	cjne	a,#0x02,00353$
      000896                       2379 00353$:
      000896 50 03            [24] 2380 	jnc	00354$
      000898 02r07r9F         [24] 2381 	ljmp	00195$
      00089B                       2382 00354$:
                                   2383 ;	radio/tdm.c:573: memcpy(&trailer, &pbuf[len-sizeof(trailer)], sizeof(trailer));
      00089B 78r32            [12] 2384 	mov	r0,#_tdm_serial_loop_len_1_213
      00089D E2               [24] 2385 	movx	a,@r0
      00089E 24 FE            [12] 2386 	add	a,#0xFE
      0008A0 24r00            [12] 2387 	add	a,#_pbuf
      0008A2 FE               [12] 2388 	mov	r6,a
      0008A3 E4               [12] 2389 	clr	a
      0008A4 34s00            [12] 2390 	addc	a,#(_pbuf >> 8)
      0008A6 FF               [12] 2391 	mov	r7,a
      0008A7 90r00r00         [24] 2392 	mov	dptr,#_memcpy_PARM_2
      0008AA EE               [12] 2393 	mov	a,r6
      0008AB F0               [24] 2394 	movx	@dptr,a
      0008AC EF               [12] 2395 	mov	a,r7
      0008AD A3               [24] 2396 	inc	dptr
      0008AE F0               [24] 2397 	movx	@dptr,a
      0008AF E4               [12] 2398 	clr	a
      0008B0 A3               [24] 2399 	inc	dptr
      0008B1 F0               [24] 2400 	movx	@dptr,a
      0008B2 90r00r00         [24] 2401 	mov	dptr,#_memcpy_PARM_3
      0008B5 74 02            [12] 2402 	mov	a,#0x02
      0008B7 F0               [24] 2403 	movx	@dptr,a
      0008B8 E4               [12] 2404 	clr	a
      0008B9 A3               [24] 2405 	inc	dptr
      0008BA F0               [24] 2406 	movx	@dptr,a
      0008BB 90r00r1D         [24] 2407 	mov	dptr,#_trailer
      0008BE 75 F0 60         [24] 2408 	mov	b,#0x60
      0008C1 C0 03            [24] 2409 	push	ar3
      0008C3 C0 02            [24] 2410 	push	ar2
      0008C5 12r00r00         [24] 2411 	lcall	_memcpy
      0008C8 D0 02            [24] 2412 	pop	ar2
      0008CA D0 03            [24] 2413 	pop	ar3
                                   2414 ;	radio/tdm.c:574: len -= sizeof(trailer);
      0008CC 78r32            [12] 2415 	mov	r0,#_tdm_serial_loop_len_1_213
      0008CE E2               [24] 2416 	movx	a,@r0
      0008CF 14               [12] 2417 	dec	a
      0008D0 14               [12] 2418 	dec	a
      0008D1 F2               [24] 2419 	movx	@r0,a
                                   2420 ;	radio/tdm.c:576: if (trailer.window == 0 && len != 0) {
      0008D2 78r1D            [12] 2421 	mov	r0,#_trailer
      0008D4 E2               [24] 2422 	movx	a,@r0
      0008D5 FE               [12] 2423 	mov	r6,a
      0008D6 08               [12] 2424 	inc	r0
      0008D7 E2               [24] 2425 	movx	a,@r0
      0008D8 54 1F            [12] 2426 	anl	a,#0x1F
      0008DA FF               [12] 2427 	mov	r7,a
      0008DB 4E               [12] 2428 	orl	a,r6
      0008DC 70 41            [24] 2429 	jnz	00125$
      0008DE 78r32            [12] 2430 	mov	r0,#_tdm_serial_loop_len_1_213
      0008E0 E2               [24] 2431 	movx	a,@r0
      0008E1 60 3C            [24] 2432 	jz	00125$
                                   2433 ;	radio/tdm.c:578: if (len == sizeof(struct statistics)) {
      0008E3 78r32            [12] 2434 	mov	r0,#_tdm_serial_loop_len_1_213
      0008E5 E2               [24] 2435 	movx	a,@r0
      0008E6 B4 04 20         [24] 2436 	cjne	a,#0x04,00114$
                                   2437 ;	radio/tdm.c:579: memcpy(&remote_statistics, pbuf, len);
      0008E9 90r00r00         [24] 2438 	mov	dptr,#_memcpy_PARM_2
      0008EC 74r00            [12] 2439 	mov	a,#_pbuf
      0008EE F0               [24] 2440 	movx	@dptr,a
      0008EF 74s00            [12] 2441 	mov	a,#(_pbuf >> 8)
      0008F1 A3               [24] 2442 	inc	dptr
      0008F2 F0               [24] 2443 	movx	@dptr,a
      0008F3 E4               [12] 2444 	clr	a
      0008F4 A3               [24] 2445 	inc	dptr
      0008F5 F0               [24] 2446 	movx	@dptr,a
      0008F6 78r32            [12] 2447 	mov	r0,#_tdm_serial_loop_len_1_213
      0008F8 90r00r00         [24] 2448 	mov	dptr,#_memcpy_PARM_3
      0008FB E2               [24] 2449 	movx	a,@r0
      0008FC F0               [24] 2450 	movx	@dptr,a
      0008FD E4               [12] 2451 	clr	a
      0008FE A3               [24] 2452 	inc	dptr
      0008FF F0               [24] 2453 	movx	@dptr,a
      000900 90r00r00         [24] 2454 	mov	dptr,#_remote_statistics
      000903 75 F0 60         [24] 2455 	mov	b,#0x60
      000906 12r00r00         [24] 2456 	lcall	_memcpy
      000909                       2457 00114$:
                                   2458 ;	radio/tdm.c:583: statistics.receive_count--;
      000909 78r02            [12] 2459 	mov	r0,#(_statistics + 0x0002)
      00090B E2               [24] 2460 	movx	a,@r0
      00090C FE               [12] 2461 	mov	r6,a
      00090D 08               [12] 2462 	inc	r0
      00090E E2               [24] 2463 	movx	a,@r0
      00090F FF               [12] 2464 	mov	r7,a
      000910 1E               [12] 2465 	dec	r6
      000911 BE FF 01         [24] 2466 	cjne	r6,#0xFF,00359$
      000914 1F               [12] 2467 	dec	r7
      000915                       2468 00359$:
      000915 78r02            [12] 2469 	mov	r0,#(_statistics + 0x0002)
      000917 EE               [12] 2470 	mov	a,r6
      000918 F2               [24] 2471 	movx	@r0,a
      000919 08               [12] 2472 	inc	r0
      00091A EF               [12] 2473 	mov	a,r7
      00091B F2               [24] 2474 	movx	@r0,a
      00091C 02r07r9F         [24] 2475 	ljmp	00195$
      00091F                       2476 00125$:
                                   2477 ;	radio/tdm.c:584: } else if (trailer.window != 0) {
      00091F 78r1D            [12] 2478 	mov	r0,#_trailer
      000921 E2               [24] 2479 	movx	a,@r0
      000922 FE               [12] 2480 	mov	r6,a
      000923 08               [12] 2481 	inc	r0
      000924 E2               [24] 2482 	movx	a,@r0
      000925 54 1F            [12] 2483 	anl	a,#0x1F
      000927 FF               [12] 2484 	mov	r7,a
      000928 4E               [12] 2485 	orl	a,r6
      000929 70 03            [24] 2486 	jnz	00360$
      00092B 02r07r9F         [24] 2487 	ljmp	00195$
      00092E                       2488 00360$:
                                   2489 ;	radio/tdm.c:587: sync_tx_windows(len);
      00092E 78r32            [12] 2490 	mov	r0,#_tdm_serial_loop_len_1_213
      000930 E2               [24] 2491 	movx	a,@r0
      000931 F5 82            [12] 2492 	mov	dpl,a
      000933 C0 03            [24] 2493 	push	ar3
      000935 C0 02            [24] 2494 	push	ar2
      000937 12r01r04         [24] 2495 	lcall	_sync_tx_windows
      00093A D0 02            [24] 2496 	pop	ar2
      00093C D0 03            [24] 2497 	pop	ar3
                                   2498 ;	radio/tdm.c:588: last_t = tnow;
      00093E 78r35            [12] 2499 	mov	r0,#_tdm_serial_loop_last_t_1_213
      000940 EA               [12] 2500 	mov	a,r2
      000941 F2               [24] 2501 	movx	@r0,a
      000942 08               [12] 2502 	inc	r0
      000943 EB               [12] 2503 	mov	a,r3
      000944 F2               [24] 2504 	movx	@r0,a
                                   2505 ;	radio/tdm.c:597: if ((trailer.command == 1 && handle_at_command(len)) 
      000945 78r1E            [12] 2506 	mov	r0,#(_trailer + 0x0001)
      000947 E2               [24] 2507 	movx	a,@r0
      000948 C4               [12] 2508 	swap	a
      000949 03               [12] 2509 	rr	a
      00094A 54 01            [12] 2510 	anl	a,#0x01
      00094C FF               [12] 2511 	mov	r7,a
      00094D BF 01 0A         [24] 2512 	cjne	r7,#0x01,00121$
      000950 78r32            [12] 2513 	mov	r0,#_tdm_serial_loop_len_1_213
      000952 E2               [24] 2514 	movx	a,@r0
      000953 F5 82            [12] 2515 	mov	dpl,a
      000955 12r07r08         [24] 2516 	lcall	_handle_at_command
      000958 40 38            [24] 2517 	jc	00115$
      00095A                       2518 00121$:
                                   2519 ;	radio/tdm.c:599: (len != 0 && trailer.command == 0 &&
      00095A 78r32            [12] 2520 	mov	r0,#_tdm_serial_loop_len_1_213
      00095C E2               [24] 2521 	movx	a,@r0
      00095D 70 03            [24] 2522 	jnz	00364$
      00095F 02r07r9F         [24] 2523 	ljmp	00195$
      000962                       2524 00364$:
      000962 78r1E            [12] 2525 	mov	r0,#(_trailer + 0x0001)
      000964 E2               [24] 2526 	movx	a,@r0
      000965 30 E5 03         [24] 2527 	jnb	acc.5,00365$
      000968 02r07r9F         [24] 2528 	ljmp	00195$
      00096B                       2529 00365$:
                                   2530 ;	radio/tdm.c:600: !packet_is_duplicate(len, pbuf, trailer.resend) &&
      00096B 78r1E            [12] 2531 	mov	r0,#(_trailer + 0x0001)
      00096D E2               [24] 2532 	movx	a,@r0
      00096E 23               [12] 2533 	rl	a
      00096F 54 01            [12] 2534 	anl	a,#0x01
      000971 24 FF            [12] 2535 	add	a,#0xff
      000973 92*00            [24] 2536 	mov	_packet_is_duplicate_PARM_3,c
      000975 90r00r00         [24] 2537 	mov	dptr,#_packet_is_duplicate_PARM_2
      000978 74r00            [12] 2538 	mov	a,#_pbuf
      00097A F0               [24] 2539 	movx	@dptr,a
      00097B 74s00            [12] 2540 	mov	a,#(_pbuf >> 8)
      00097D A3               [24] 2541 	inc	dptr
      00097E F0               [24] 2542 	movx	@dptr,a
      00097F 78r32            [12] 2543 	mov	r0,#_tdm_serial_loop_len_1_213
      000981 E2               [24] 2544 	movx	a,@r0
      000982 F5 82            [12] 2545 	mov	dpl,a
      000984 12r00r00         [24] 2546 	lcall	_packet_is_duplicate
      000987 50 03            [24] 2547 	jnc	00366$
      000989 02r07r9F         [24] 2548 	ljmp	00195$
      00098C                       2549 00366$:
                                   2550 ;	radio/tdm.c:601: !at_mode_active
      00098C 30*00 03         [24] 2551 	jnb	_at_mode_active,00367$
      00098F 02r07r9F         [24] 2552 	ljmp	00195$
      000992                       2553 00367$:
      000992                       2554 00115$:
                                   2555 ;	radio/tdm.c:620: LED_ACTIVITY = LED_ON;
      000992 C2 96            [12] 2556 	clr	_LED_RED
                                   2557 ;	radio/tdm.c:621: serial_write_buf(pbuf, len);
      000994 78r32            [12] 2558 	mov	r0,#_tdm_serial_loop_len_1_213
      000996 79r00            [12] 2559 	mov	r1,#_serial_write_buf_PARM_2
      000998 E2               [24] 2560 	movx	a,@r0
      000999 F3               [24] 2561 	movx	@r1,a
      00099A 90r00r00         [24] 2562 	mov	dptr,#_pbuf
      00099D 12r00r00         [24] 2563 	lcall	_serial_write_buf
                                   2564 ;	radio/tdm.c:622: LED_ACTIVITY = LED_OFF;
      0009A0 D2 96            [12] 2565 	setb	_LED_RED
                                   2566 ;	radio/tdm.c:627: continue;
      0009A2 02r07r9F         [24] 2567 	ljmp	00195$
      0009A5                       2568 00129$:
                                   2569 ;	radio/tdm.c:633: tnow = timer2_tick();
      0009A5 12r00r00         [24] 2570 	lcall	_timer2_tick
      0009A8 AA 82            [24] 2571 	mov	r2,dpl
      0009AA AB 83            [24] 2572 	mov	r3,dph
                                   2573 ;	radio/tdm.c:634: tdelta = tnow - last_t;
      0009AC 78r35            [12] 2574 	mov	r0,#_tdm_serial_loop_last_t_1_213
      0009AE 79r33            [12] 2575 	mov	r1,#_tdm_serial_loop_tdelta_1_213
      0009B0 D3               [12] 2576 	setb	c
      0009B1 E2               [24] 2577 	movx	a,@r0
      0009B2 9A               [12] 2578 	subb	a,r2
      0009B3 F4               [12] 2579 	cpl	a
      0009B4 B3               [12] 2580 	cpl	c
      0009B5 F3               [24] 2581 	movx	@r1,a
      0009B6 B3               [12] 2582 	cpl	c
      0009B7 08               [12] 2583 	inc	r0
      0009B8 E2               [24] 2584 	movx	a,@r0
      0009B9 9B               [12] 2585 	subb	a,r3
      0009BA F4               [12] 2586 	cpl	a
      0009BB 09               [12] 2587 	inc	r1
      0009BC F3               [24] 2588 	movx	@r1,a
                                   2589 ;	radio/tdm.c:635: tdm_state_update(tdelta);
      0009BD 78r33            [12] 2590 	mov	r0,#_tdm_serial_loop_tdelta_1_213
      0009BF E2               [24] 2591 	movx	a,@r0
      0009C0 F5 82            [12] 2592 	mov	dpl,a
      0009C2 08               [12] 2593 	inc	r0
      0009C3 E2               [24] 2594 	movx	a,@r0
      0009C4 F5 83            [12] 2595 	mov	dph,a
      0009C6 C0 03            [24] 2596 	push	ar3
      0009C8 C0 02            [24] 2597 	push	ar2
      0009CA 12r02r66         [24] 2598 	lcall	_tdm_state_update
      0009CD D0 02            [24] 2599 	pop	ar2
      0009CF D0 03            [24] 2600 	pop	ar3
                                   2601 ;	radio/tdm.c:636: last_t = tnow;
      0009D1 78r35            [12] 2602 	mov	r0,#_tdm_serial_loop_last_t_1_213
      0009D3 EA               [12] 2603 	mov	a,r2
      0009D4 F2               [24] 2604 	movx	@r0,a
      0009D5 08               [12] 2605 	inc	r0
      0009D6 EB               [12] 2606 	mov	a,r3
      0009D7 F2               [24] 2607 	movx	@r0,a
                                   2608 ;	radio/tdm.c:639: if (tnow - last_link_update > 32768) {
      0009D8 78r37            [12] 2609 	mov	r0,#_tdm_serial_loop_last_link_update_1_213
      0009DA D3               [12] 2610 	setb	c
      0009DB E2               [24] 2611 	movx	a,@r0
      0009DC 9A               [12] 2612 	subb	a,r2
      0009DD F4               [12] 2613 	cpl	a
      0009DE B3               [12] 2614 	cpl	c
      0009DF FC               [12] 2615 	mov	r4,a
      0009E0 B3               [12] 2616 	cpl	c
      0009E1 08               [12] 2617 	inc	r0
      0009E2 E2               [24] 2618 	movx	a,@r0
      0009E3 9B               [12] 2619 	subb	a,r3
      0009E4 F4               [12] 2620 	cpl	a
      0009E5 FD               [12] 2621 	mov	r5,a
      0009E6 7E 00            [12] 2622 	mov	r6,#0x00
      0009E8 7F 00            [12] 2623 	mov	r7,#0x00
      0009EA C3               [12] 2624 	clr	c
      0009EB E4               [12] 2625 	clr	a
      0009EC 9C               [12] 2626 	subb	a,r4
      0009ED 74 80            [12] 2627 	mov	a,#0x80
      0009EF 9D               [12] 2628 	subb	a,r5
      0009F0 E4               [12] 2629 	clr	a
      0009F1 9E               [12] 2630 	subb	a,r6
      0009F2 74 80            [12] 2631 	mov	a,#(0x00 ^ 0x80)
      0009F4 8F F0            [24] 2632 	mov	b,r7
      0009F6 63 F0 80         [24] 2633 	xrl	b,#0x80
      0009F9 95 F0            [12] 2634 	subb	a,b
      0009FB 50 12            [24] 2635 	jnc	00131$
                                   2636 ;	radio/tdm.c:640: link_update();
      0009FD C0 03            [24] 2637 	push	ar3
      0009FF C0 02            [24] 2638 	push	ar2
      000A01 12r05r9A         [24] 2639 	lcall	_link_update
      000A04 D0 02            [24] 2640 	pop	ar2
      000A06 D0 03            [24] 2641 	pop	ar3
                                   2642 ;	radio/tdm.c:641: last_link_update = tnow;
      000A08 78r37            [12] 2643 	mov	r0,#_tdm_serial_loop_last_link_update_1_213
      000A0A EA               [12] 2644 	mov	a,r2
      000A0B F2               [24] 2645 	movx	@r0,a
      000A0C 08               [12] 2646 	inc	r0
      000A0D EB               [12] 2647 	mov	a,r3
      000A0E F2               [24] 2648 	movx	@r0,a
      000A0F                       2649 00131$:
                                   2650 ;	radio/tdm.c:645: if (lbt_rssi != 0) {
      000A0F 78r16            [12] 2651 	mov	r0,#_lbt_rssi
      000A11 E2               [24] 2652 	movx	a,@r0
      000A12 70 03            [24] 2653 	jnz	00369$
      000A14 02r0Ar94         [24] 2654 	ljmp	00140$
      000A17                       2655 00369$:
                                   2656 ;	radio/tdm.c:647: if (radio_current_rssi() < lbt_rssi) {
      000A17 12r00r00         [24] 2657 	lcall	_radio_current_rssi
      000A1A AF 82            [24] 2658 	mov	r7,dpl
      000A1C 78r16            [12] 2659 	mov	r0,#_lbt_rssi
      000A1E C3               [12] 2660 	clr	c
      000A1F E2               [24] 2661 	movx	a,@r0
      000A20 F5 F0            [12] 2662 	mov	b,a
      000A22 EF               [12] 2663 	mov	a,r7
      000A23 95 F0            [12] 2664 	subb	a,b
      000A25 50 16            [24] 2665 	jnc	00135$
                                   2666 ;	radio/tdm.c:648: lbt_listen_time += tdelta;
      000A27 78r17            [12] 2667 	mov	r0,#_lbt_listen_time
      000A29 79r33            [12] 2668 	mov	r1,#_tdm_serial_loop_tdelta_1_213
      000A2B E3               [24] 2669 	movx	a,@r1
      000A2C C5 F0            [12] 2670 	xch	a,b
      000A2E E2               [24] 2671 	movx	a,@r0
      000A2F 25 F0            [12] 2672 	add	a,b
      000A31 F2               [24] 2673 	movx	@r0,a
      000A32 09               [12] 2674 	inc	r1
      000A33 E3               [24] 2675 	movx	a,@r1
      000A34 C5 F0            [12] 2676 	xch	a,b
      000A36 08               [12] 2677 	inc	r0
      000A37 E2               [24] 2678 	movx	a,@r0
      000A38 35 F0            [12] 2679 	addc	a,b
      000A3A F2               [24] 2680 	movx	@r0,a
      000A3B 80 36            [24] 2681 	sjmp	00136$
      000A3D                       2682 00135$:
                                   2683 ;	radio/tdm.c:650: lbt_listen_time = 0;
      000A3D 78r17            [12] 2684 	mov	r0,#_lbt_listen_time
      000A3F E4               [12] 2685 	clr	a
      000A40 F2               [24] 2686 	movx	@r0,a
      000A41 08               [12] 2687 	inc	r0
      000A42 F2               [24] 2688 	movx	@r0,a
                                   2689 ;	radio/tdm.c:651: if (lbt_rand == 0) {
      000A43 78r1B            [12] 2690 	mov	r0,#_lbt_rand
      000A45 E2               [24] 2691 	movx	a,@r0
      000A46 F5 F0            [12] 2692 	mov	b,a
      000A48 08               [12] 2693 	inc	r0
      000A49 E2               [24] 2694 	movx	a,@r0
      000A4A 45 F0            [12] 2695 	orl	a,b
      000A4C 70 25            [24] 2696 	jnz	00136$
                                   2697 ;	radio/tdm.c:652: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
      000A4E 12r00r00         [24] 2698 	lcall	_rand
      000A51 AE 82            [24] 2699 	mov	r6,dpl
      000A53 AF 83            [24] 2700 	mov	r7,dph
      000A55 78r19            [12] 2701 	mov	r0,#_lbt_min_time
      000A57 90r00r00         [24] 2702 	mov	dptr,#__moduint_PARM_2
      000A5A E2               [24] 2703 	movx	a,@r0
      000A5B F0               [24] 2704 	movx	@dptr,a
      000A5C 08               [12] 2705 	inc	r0
      000A5D E2               [24] 2706 	movx	a,@r0
      000A5E A3               [24] 2707 	inc	dptr
      000A5F F0               [24] 2708 	movx	@dptr,a
      000A60 8E 82            [24] 2709 	mov	dpl,r6
      000A62 8F 83            [24] 2710 	mov	dph,r7
      000A64 12r00r00         [24] 2711 	lcall	__moduint
      000A67 E5 82            [12] 2712 	mov	a,dpl
      000A69 85 83 F0         [24] 2713 	mov	b,dph
      000A6C 78r1B            [12] 2714 	mov	r0,#_lbt_rand
      000A6E F2               [24] 2715 	movx	@r0,a
      000A6F 08               [12] 2716 	inc	r0
      000A70 E5 F0            [12] 2717 	mov	a,b
      000A72 F2               [24] 2718 	movx	@r0,a
      000A73                       2719 00136$:
                                   2720 ;	radio/tdm.c:655: if (lbt_listen_time < lbt_min_time + lbt_rand) {
      000A73 78r19            [12] 2721 	mov	r0,#_lbt_min_time
      000A75 79r1B            [12] 2722 	mov	r1,#_lbt_rand
      000A77 E3               [24] 2723 	movx	a,@r1
      000A78 C5 F0            [12] 2724 	xch	a,b
      000A7A E2               [24] 2725 	movx	a,@r0
      000A7B 25 F0            [12] 2726 	add	a,b
      000A7D FE               [12] 2727 	mov	r6,a
      000A7E 09               [12] 2728 	inc	r1
      000A7F E3               [24] 2729 	movx	a,@r1
      000A80 C5 F0            [12] 2730 	xch	a,b
      000A82 08               [12] 2731 	inc	r0
      000A83 E2               [24] 2732 	movx	a,@r0
      000A84 35 F0            [12] 2733 	addc	a,b
      000A86 FF               [12] 2734 	mov	r7,a
      000A87 78r17            [12] 2735 	mov	r0,#_lbt_listen_time
      000A89 C3               [12] 2736 	clr	c
      000A8A E2               [24] 2737 	movx	a,@r0
      000A8B 9E               [12] 2738 	subb	a,r6
      000A8C 08               [12] 2739 	inc	r0
      000A8D E2               [24] 2740 	movx	a,@r0
      000A8E 9F               [12] 2741 	subb	a,r7
      000A8F 50 03            [24] 2742 	jnc	00372$
      000A91 02r07r9F         [24] 2743 	ljmp	00195$
      000A94                       2744 00372$:
                                   2745 ;	radio/tdm.c:657: continue;
      000A94                       2746 00140$:
                                   2747 ;	radio/tdm.c:665: if (tdm_state != TDM_TRANSMIT &&
      000A94 78r00            [12] 2748 	mov	r0,#_tdm_state
      000A96 E2               [24] 2749 	movx	a,@r0
      000A97 60 11            [24] 2750 	jz	00142$
                                   2751 ;	radio/tdm.c:666: !(bonus_transmit && tdm_state == TDM_RECEIVE)) {
      000A99 20*00 03         [24] 2752 	jb	_bonus_transmit,00374$
      000A9C 02r07r9F         [24] 2753 	ljmp	00195$
      000A9F                       2754 00374$:
      000A9F 78r00            [12] 2755 	mov	r0,#_tdm_state
      000AA1 E2               [24] 2756 	movx	a,@r0
      000AA2 B4 02 02         [24] 2757 	cjne	a,#0x02,00375$
      000AA5 80 03            [24] 2758 	sjmp	00376$
      000AA7                       2759 00375$:
      000AA7 02r07r9F         [24] 2760 	ljmp	00195$
      000AAA                       2761 00376$:
                                   2762 ;	radio/tdm.c:668: continue;
      000AAA                       2763 00142$:
                                   2764 ;	radio/tdm.c:676: if (transmit_yield != 0) {
      000AAA 30*01 03         [24] 2765 	jnb	_transmit_yield,00377$
      000AAD 02r07r9F         [24] 2766 	ljmp	00195$
      000AB0                       2767 00377$:
                                   2768 ;	radio/tdm.c:681: if (transmit_wait != 0) {
      000AB0 78r0C            [12] 2769 	mov	r0,#_transmit_wait
      000AB2 E2               [24] 2770 	movx	a,@r0
      000AB3 F5 F0            [12] 2771 	mov	b,a
      000AB5 08               [12] 2772 	inc	r0
      000AB6 E2               [24] 2773 	movx	a,@r0
      000AB7 45 F0            [12] 2774 	orl	a,b
      000AB9 60 03            [24] 2775 	jz	00378$
      000ABB 02r07r9F         [24] 2776 	ljmp	00195$
      000ABE                       2777 00378$:
                                   2778 ;	radio/tdm.c:686: if (!received_packet &&
      000ABE 20*03 05         [24] 2779 	jb	_received_packet,00152$
                                   2780 ;	radio/tdm.c:687: radio_preamble_detected() ||
      000AC1 12r00r00         [24] 2781 	lcall	_radio_preamble_detected
      000AC4 40 05            [24] 2782 	jc	00149$
      000AC6                       2783 00152$:
                                   2784 ;	radio/tdm.c:688: radio_receive_in_progress()) {
      000AC6 12r00r00         [24] 2785 	lcall	_radio_receive_in_progress
      000AC9 50 11            [24] 2786 	jnc	00150$
      000ACB                       2787 00149$:
                                   2788 ;	radio/tdm.c:691: transmit_wait = packet_latency;
      000ACB 78r08            [12] 2789 	mov	r0,#_packet_latency
      000ACD E2               [24] 2790 	movx	a,@r0
      000ACE FE               [12] 2791 	mov	r6,a
      000ACF 08               [12] 2792 	inc	r0
      000AD0 E2               [24] 2793 	movx	a,@r0
      000AD1 FF               [12] 2794 	mov	r7,a
      000AD2 78r0C            [12] 2795 	mov	r0,#_transmit_wait
      000AD4 EE               [12] 2796 	mov	a,r6
      000AD5 F2               [24] 2797 	movx	@r0,a
      000AD6 08               [12] 2798 	inc	r0
      000AD7 EF               [12] 2799 	mov	a,r7
      000AD8 F2               [24] 2800 	movx	@r0,a
                                   2801 ;	radio/tdm.c:692: continue;
      000AD9 02r07r9F         [24] 2802 	ljmp	00195$
      000ADC                       2803 00150$:
                                   2804 ;	radio/tdm.c:698: statistics.average_noise = (radio_current_rssi() + 3*(uint16_t)statistics.average_noise)/4;
      000ADC 12r00r00         [24] 2805 	lcall	_radio_current_rssi
      000ADF AF 82            [24] 2806 	mov	r7,dpl
      000AE1 7E 00            [12] 2807 	mov	r6,#0x00
      000AE3 78r01            [12] 2808 	mov	r0,#(_statistics + 0x0001)
      000AE5 E2               [24] 2809 	movx	a,@r0
      000AE6 90r00r00         [24] 2810 	mov	dptr,#__mulint_PARM_2
      000AE9 F0               [24] 2811 	movx	@dptr,a
      000AEA E4               [12] 2812 	clr	a
      000AEB A3               [24] 2813 	inc	dptr
      000AEC F0               [24] 2814 	movx	@dptr,a
      000AED 90 00 03         [24] 2815 	mov	dptr,#0x0003
      000AF0 C0 07            [24] 2816 	push	ar7
      000AF2 C0 06            [24] 2817 	push	ar6
      000AF4 12r00r00         [24] 2818 	lcall	__mulint
      000AF7 AC 82            [24] 2819 	mov	r4,dpl
      000AF9 AD 83            [24] 2820 	mov	r5,dph
      000AFB D0 06            [24] 2821 	pop	ar6
      000AFD D0 07            [24] 2822 	pop	ar7
      000AFF EC               [12] 2823 	mov	a,r4
      000B00 2F               [12] 2824 	add	a,r7
      000B01 FC               [12] 2825 	mov	r4,a
      000B02 ED               [12] 2826 	mov	a,r5
      000B03 3E               [12] 2827 	addc	a,r6
      000B04 C3               [12] 2828 	clr	c
      000B05 13               [12] 2829 	rrc	a
      000B06 CC               [12] 2830 	xch	a,r4
      000B07 13               [12] 2831 	rrc	a
      000B08 CC               [12] 2832 	xch	a,r4
      000B09 C3               [12] 2833 	clr	c
      000B0A 13               [12] 2834 	rrc	a
      000B0B CC               [12] 2835 	xch	a,r4
      000B0C 13               [12] 2836 	rrc	a
      000B0D CC               [12] 2837 	xch	a,r4
      000B0E FD               [12] 2838 	mov	r5,a
      000B0F 78r01            [12] 2839 	mov	r0,#(_statistics + 0x0001)
      000B11 EC               [12] 2840 	mov	a,r4
      000B12 F2               [24] 2841 	movx	@r0,a
                                   2842 ;	radio/tdm.c:700: if (duty_cycle_wait) {
      000B13 30*04 03         [24] 2843 	jnb	_duty_cycle_wait,00382$
      000B16 02r07r9F         [24] 2844 	ljmp	00195$
      000B19                       2845 00382$:
                                   2846 ;	radio/tdm.c:707: if (tdm_state_remaining < packet_latency) {
      000B19 78r01            [12] 2847 	mov	r0,#_tdm_state_remaining
      000B1B 79r08            [12] 2848 	mov	r1,#_packet_latency
      000B1D C3               [12] 2849 	clr	c
      000B1E E3               [24] 2850 	movx	a,@r1
      000B1F F5 F0            [12] 2851 	mov	b,a
      000B21 E2               [24] 2852 	movx	a,@r0
      000B22 95 F0            [12] 2853 	subb	a,b
      000B24 09               [12] 2854 	inc	r1
      000B25 E3               [24] 2855 	movx	a,@r1
      000B26 F5 F0            [12] 2856 	mov	b,a
      000B28 08               [12] 2857 	inc	r0
      000B29 E2               [24] 2858 	movx	a,@r0
      000B2A 95 F0            [12] 2859 	subb	a,b
      000B2C 50 03            [24] 2860 	jnc	00383$
      000B2E 02r07r9F         [24] 2861 	ljmp	00195$
      000B31                       2862 00383$:
                                   2863 ;	radio/tdm.c:711: max_xmit = (tdm_state_remaining - packet_latency) / ticks_per_byte;
      000B31 78r01            [12] 2864 	mov	r0,#_tdm_state_remaining
      000B33 79r08            [12] 2865 	mov	r1,#_packet_latency
      000B35 E3               [24] 2866 	movx	a,@r1
      000B36 F5 F0            [12] 2867 	mov	b,a
      000B38 C3               [12] 2868 	clr	c
      000B39 E2               [24] 2869 	movx	a,@r0
      000B3A 95 F0            [12] 2870 	subb	a,b
      000B3C FE               [12] 2871 	mov	r6,a
      000B3D 09               [12] 2872 	inc	r1
      000B3E E3               [24] 2873 	movx	a,@r1
      000B3F F5 F0            [12] 2874 	mov	b,a
      000B41 08               [12] 2875 	inc	r0
      000B42 E2               [24] 2876 	movx	a,@r0
      000B43 95 F0            [12] 2877 	subb	a,b
      000B45 FF               [12] 2878 	mov	r7,a
      000B46 78r0A            [12] 2879 	mov	r0,#_ticks_per_byte
      000B48 90r00r00         [24] 2880 	mov	dptr,#__divuint_PARM_2
      000B4B E2               [24] 2881 	movx	a,@r0
      000B4C F0               [24] 2882 	movx	@dptr,a
      000B4D 08               [12] 2883 	inc	r0
      000B4E E2               [24] 2884 	movx	a,@r0
      000B4F A3               [24] 2885 	inc	dptr
      000B50 F0               [24] 2886 	movx	@dptr,a
      000B51 8E 82            [24] 2887 	mov	dpl,r6
      000B53 8F 83            [24] 2888 	mov	dph,r7
      000B55 12r00r00         [24] 2889 	lcall	__divuint
      000B58 AE 82            [24] 2890 	mov	r6,dpl
      000B5A AF 83            [24] 2891 	mov	r7,dph
                                   2892 ;	radio/tdm.c:712: if (max_xmit < PACKET_OVERHEAD) {
      000B5C BE 12 00         [24] 2893 	cjne	r6,#0x12,00384$
      000B5F                       2894 00384$:
      000B5F 50 03            [24] 2895 	jnc	00385$
      000B61 02r07r9F         [24] 2896 	ljmp	00195$
      000B64                       2897 00385$:
                                   2898 ;	radio/tdm.c:717: max_xmit -= sizeof(trailer)+1;
      000B64 1E               [12] 2899 	dec	r6
      000B65 1E               [12] 2900 	dec	r6
      000B66 1E               [12] 2901 	dec	r6
                                   2902 ;	radio/tdm.c:731: if (max_xmit > max_data_packet_length) {
      000B67 78r05            [12] 2903 	mov	r0,#_max_data_packet_length
      000B69 C3               [12] 2904 	clr	c
      000B6A E2               [24] 2905 	movx	a,@r0
      000B6B 9E               [12] 2906 	subb	a,r6
      000B6C 50 04            [24] 2907 	jnc	00160$
                                   2908 ;	radio/tdm.c:732: max_xmit = max_data_packet_length;
      000B6E 78r05            [12] 2909 	mov	r0,#_max_data_packet_length
      000B70 E2               [24] 2910 	movx	a,@r0
      000B71 FE               [12] 2911 	mov	r6,a
      000B72                       2912 00160$:
                                   2913 ;	radio/tdm.c:741: if (send_at_command && 
      000B72 30*06 57         [24] 2914 	jnb	_send_at_command,00165$
                                   2915 ;	radio/tdm.c:742: max_xmit >= strlen(remote_at_cmd)) {
      000B75 90r00r1F         [24] 2916 	mov	dptr,#_remote_at_cmd
      000B78 75 F0 60         [24] 2917 	mov	b,#0x60
      000B7B C0 06            [24] 2918 	push	ar6
      000B7D 12r00r00         [24] 2919 	lcall	_strlen
      000B80 AD 82            [24] 2920 	mov	r5,dpl
      000B82 AF 83            [24] 2921 	mov	r7,dph
      000B84 D0 06            [24] 2922 	pop	ar6
      000B86 8E 03            [24] 2923 	mov	ar3,r6
      000B88 7C 00            [12] 2924 	mov	r4,#0x00
      000B8A C3               [12] 2925 	clr	c
      000B8B EB               [12] 2926 	mov	a,r3
      000B8C 9D               [12] 2927 	subb	a,r5
      000B8D EC               [12] 2928 	mov	a,r4
      000B8E 9F               [12] 2929 	subb	a,r7
      000B8F 40 3B            [24] 2930 	jc	00165$
                                   2931 ;	radio/tdm.c:744: len = strlen(remote_at_cmd);
      000B91 90r00r1F         [24] 2932 	mov	dptr,#_remote_at_cmd
      000B94 75 F0 60         [24] 2933 	mov	b,#0x60
      000B97 C0 06            [24] 2934 	push	ar6
      000B99 12r00r00         [24] 2935 	lcall	_strlen
      000B9C AD 82            [24] 2936 	mov	r5,dpl
      000B9E 78r32            [12] 2937 	mov	r0,#_tdm_serial_loop_len_1_213
      000BA0 ED               [12] 2938 	mov	a,r5
      000BA1 F2               [24] 2939 	movx	@r0,a
                                   2940 ;	radio/tdm.c:745: memcpy(pbuf, remote_at_cmd, len);
      000BA2 90r00r00         [24] 2941 	mov	dptr,#_memcpy_PARM_2
      000BA5 74r1F            [12] 2942 	mov	a,#_remote_at_cmd
      000BA7 F0               [24] 2943 	movx	@dptr,a
      000BA8 E4               [12] 2944 	clr	a
      000BA9 A3               [24] 2945 	inc	dptr
      000BAA F0               [24] 2946 	movx	@dptr,a
      000BAB 74 60            [12] 2947 	mov	a,#0x60
      000BAD A3               [24] 2948 	inc	dptr
      000BAE F0               [24] 2949 	movx	@dptr,a
      000BAF 90r00r00         [24] 2950 	mov	dptr,#_memcpy_PARM_3
      000BB2 ED               [12] 2951 	mov	a,r5
      000BB3 F0               [24] 2952 	movx	@dptr,a
      000BB4 E4               [12] 2953 	clr	a
      000BB5 A3               [24] 2954 	inc	dptr
      000BB6 F0               [24] 2955 	movx	@dptr,a
      000BB7 90r00r00         [24] 2956 	mov	dptr,#_pbuf
      000BBA 75 F0 00         [24] 2957 	mov	b,#0x00
      000BBD 12r00r00         [24] 2958 	lcall	_memcpy
      000BC0 D0 06            [24] 2959 	pop	ar6
                                   2960 ;	radio/tdm.c:746: trailer.command = 1;
      000BC2 78r1E            [12] 2961 	mov	r0,#(_trailer + 0x0001)
      000BC4 E2               [24] 2962 	movx	a,@r0
      000BC5 44 20            [12] 2963 	orl	a,#0x20
      000BC7 F2               [24] 2964 	movx	@r0,a
                                   2965 ;	radio/tdm.c:747: send_at_command = false;
      000BC8 C2*06            [12] 2966 	clr	_send_at_command
      000BCA 80 37            [24] 2967 	sjmp	00166$
      000BCC                       2968 00165$:
                                   2969 ;	radio/tdm.c:750: len = packet_get_next(max_xmit, pbuf);
      000BCC 90r00r00         [24] 2970 	mov	dptr,#_packet_get_next_PARM_2
      000BCF 74r00            [12] 2971 	mov	a,#_pbuf
      000BD1 F0               [24] 2972 	movx	@dptr,a
      000BD2 74s00            [12] 2973 	mov	a,#(_pbuf >> 8)
      000BD4 A3               [24] 2974 	inc	dptr
      000BD5 F0               [24] 2975 	movx	@dptr,a
      000BD6 8E 82            [24] 2976 	mov	dpl,r6
      000BD8 C0 06            [24] 2977 	push	ar6
      000BDA 12r00r00         [24] 2978 	lcall	_packet_get_next
      000BDD AF 82            [24] 2979 	mov	r7,dpl
      000BDF D0 06            [24] 2980 	pop	ar6
      000BE1 78r32            [12] 2981 	mov	r0,#_tdm_serial_loop_len_1_213
      000BE3 EF               [12] 2982 	mov	a,r7
      000BE4 F2               [24] 2983 	movx	@r0,a
                                   2984 ;	radio/tdm.c:752: if (len > 0) {
      000BE5 EF               [12] 2985 	mov	a,r7
      000BE6 60 15            [24] 2986 	jz	00162$
                                   2987 ;	radio/tdm.c:753: trailer.command = packet_is_injected();
      000BE8 C0 06            [24] 2988 	push	ar6
      000BEA 12r00r00         [24] 2989 	lcall	_packet_is_injected
      000BED D0 06            [24] 2990 	pop	ar6
      000BEF 92*09            [24] 2991 	mov  _tdm_serial_loop_sloc0_1_0,c
      000BF1 E4               [12] 2992 	clr	a
      000BF2 33               [12] 2993 	rlc	a
      000BF3 FF               [12] 2994 	mov	r7,a
      000BF4 78r1E            [12] 2995 	mov	r0,#(_trailer + 0x0001)
      000BF6 13               [12] 2996 	rrc	a
      000BF7 E2               [24] 2997 	movx	a,@r0
      000BF8 92 E5            [24] 2998 	mov	acc.5,c
      000BFA F2               [24] 2999 	movx	@r0,a
      000BFB 80 06            [24] 3000 	sjmp	00166$
      000BFD                       3001 00162$:
                                   3002 ;	radio/tdm.c:755: trailer.command = 0;
      000BFD 78r1E            [12] 3003 	mov	r0,#(_trailer + 0x0001)
      000BFF E2               [24] 3004 	movx	a,@r0
      000C00 54 DF            [12] 3005 	anl	a,#0xDF
      000C02 F2               [24] 3006 	movx	@r0,a
      000C03                       3007 00166$:
                                   3008 ;	radio/tdm.c:762: if (len > max_data_packet_length) {
      000C03 78r32            [12] 3009 	mov	r0,#_tdm_serial_loop_len_1_213
      000C05 79r05            [12] 3010 	mov	r1,#_max_data_packet_length
      000C07 C3               [12] 3011 	clr	c
      000C08 E2               [24] 3012 	movx	a,@r0
      000C09 F5 F0            [12] 3013 	mov	b,a
      000C0B E3               [24] 3014 	movx	a,@r1
      000C0C 95 F0            [12] 3015 	subb	a,b
      000C0E 50 19            [24] 3016 	jnc	00169$
                                   3017 ;	radio/tdm.c:763: panic("oversized tdm packet");
      000C10 C0 06            [24] 3018 	push	ar6
      000C12 74rCE            [12] 3019 	mov	a,#___str_8
      000C14 C0 E0            [24] 3020 	push	acc
      000C16 74s00            [12] 3021 	mov	a,#(___str_8 >> 8)
      000C18 C0 E0            [24] 3022 	push	acc
      000C1A 74 80            [12] 3023 	mov	a,#0x80
      000C1C C0 E0            [24] 3024 	push	acc
      000C1E 12r00r00         [24] 3025 	lcall	_panic
      000C21 15 81            [12] 3026 	dec	sp
      000C23 15 81            [12] 3027 	dec	sp
      000C25 15 81            [12] 3028 	dec	sp
      000C27 D0 06            [24] 3029 	pop	ar6
      000C29                       3030 00169$:
                                   3031 ;	radio/tdm.c:766: trailer.bonus = (tdm_state == TDM_RECEIVE);
      000C29 78r00            [12] 3032 	mov	r0,#_tdm_state
      000C2B E2               [24] 3033 	movx	a,@r0
      000C2C B4 02 03         [24] 3034 	cjne	a,#0x02,00391$
      000C2F D3               [12] 3035 	setb	c
      000C30 80 01            [24] 3036 	sjmp	00392$
      000C32                       3037 00391$:
      000C32 C3               [12] 3038 	clr	c
      000C33                       3039 00392$:
      000C33 92*09            [24] 3040 	mov  _tdm_serial_loop_sloc0_1_0,c
      000C35 E4               [12] 3041 	clr	a
      000C36 33               [12] 3042 	rlc	a
      000C37 78r1E            [12] 3043 	mov	r0,#(_trailer + 0x0001)
      000C39 13               [12] 3044 	rrc	a
      000C3A E2               [24] 3045 	movx	a,@r0
      000C3B 92 E6            [24] 3046 	mov	acc.6,c
      000C3D F2               [24] 3047 	movx	@r0,a
                                   3048 ;	radio/tdm.c:767: trailer.resend = packet_is_resend();
      000C3E C0 06            [24] 3049 	push	ar6
      000C40 12r00r00         [24] 3050 	lcall	_packet_is_resend
      000C43 D0 06            [24] 3051 	pop	ar6
      000C45 92*09            [24] 3052 	mov  _tdm_serial_loop_sloc0_1_0,c
      000C47 E4               [12] 3053 	clr	a
      000C48 33               [12] 3054 	rlc	a
      000C49 FF               [12] 3055 	mov	r7,a
      000C4A 78r1E            [12] 3056 	mov	r0,#(_trailer + 0x0001)
      000C4C 13               [12] 3057 	rrc	a
      000C4D E2               [24] 3058 	movx	a,@r0
      000C4E 92 E7            [24] 3059 	mov	acc.7,c
      000C50 F2               [24] 3060 	movx	@r0,a
                                   3061 ;	radio/tdm.c:769: if (tdm_state == TDM_TRANSMIT &&
      000C51 78r00            [12] 3062 	mov	r0,#_tdm_state
      000C53 E2               [24] 3063 	movx	a,@r0
      000C54 70 44            [24] 3064 	jnz	00171$
                                   3065 ;	radio/tdm.c:770: len == 0 &&
      000C56 78r32            [12] 3066 	mov	r0,#_tdm_serial_loop_len_1_213
      000C58 E2               [24] 3067 	movx	a,@r0
      000C59 70 3F            [24] 3068 	jnz	00171$
                                   3069 ;	radio/tdm.c:771: send_statistics &&
      000C5B 30*05 3C         [24] 3070 	jnb	_send_statistics,00171$
                                   3071 ;	radio/tdm.c:772: max_xmit >= sizeof(statistics)) {
      000C5E BE 04 00         [24] 3072 	cjne	r6,#0x04,00396$
      000C61                       3073 00396$:
      000C61 40 37            [24] 3074 	jc	00171$
                                   3075 ;	radio/tdm.c:774: send_statistics = 0;
      000C63 C2*05            [12] 3076 	clr	_send_statistics
                                   3077 ;	radio/tdm.c:775: memcpy(pbuf, &statistics, sizeof(statistics));
      000C65 90r00r00         [24] 3078 	mov	dptr,#_memcpy_PARM_2
      000C68 74r00            [12] 3079 	mov	a,#_statistics
      000C6A F0               [24] 3080 	movx	@dptr,a
      000C6B E4               [12] 3081 	clr	a
      000C6C A3               [24] 3082 	inc	dptr
      000C6D F0               [24] 3083 	movx	@dptr,a
      000C6E 74 60            [12] 3084 	mov	a,#0x60
      000C70 A3               [24] 3085 	inc	dptr
      000C71 F0               [24] 3086 	movx	@dptr,a
      000C72 90r00r00         [24] 3087 	mov	dptr,#_memcpy_PARM_3
      000C75 74 04            [12] 3088 	mov	a,#0x04
      000C77 F0               [24] 3089 	movx	@dptr,a
      000C78 E4               [12] 3090 	clr	a
      000C79 A3               [24] 3091 	inc	dptr
      000C7A F0               [24] 3092 	movx	@dptr,a
      000C7B 90r00r00         [24] 3093 	mov	dptr,#_pbuf
      000C7E 75 F0 00         [24] 3094 	mov	b,#0x00
      000C81 12r00r00         [24] 3095 	lcall	_memcpy
                                   3096 ;	radio/tdm.c:776: len = sizeof(statistics);
      000C84 78r32            [12] 3097 	mov	r0,#_tdm_serial_loop_len_1_213
      000C86 74 04            [12] 3098 	mov	a,#0x04
      000C88 F2               [24] 3099 	movx	@r0,a
                                   3100 ;	radio/tdm.c:779: trailer.window = 0;
      000C89 78r1D            [12] 3101 	mov	r0,#_trailer
      000C8B E4               [12] 3102 	clr	a
      000C8C F2               [24] 3103 	movx	@r0,a
      000C8D 08               [12] 3104 	inc	r0
      000C8E E2               [24] 3105 	movx	a,@r0
      000C8F 54 E0            [12] 3106 	anl	a,#0xE0
      000C91 F2               [24] 3107 	movx	@r0,a
                                   3108 ;	radio/tdm.c:780: trailer.resend = 0;
      000C92 78r1E            [12] 3109 	mov	r0,#(_trailer + 0x0001)
      000C94 E2               [24] 3110 	movx	a,@r0
      000C95 54 7F            [12] 3111 	anl	a,#0x7F
      000C97 F2               [24] 3112 	movx	@r0,a
      000C98 80 28            [24] 3113 	sjmp	00172$
      000C9A                       3114 00171$:
                                   3115 ;	radio/tdm.c:794: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));
      000C9A 78r32            [12] 3116 	mov	r0,#_tdm_serial_loop_len_1_213
      000C9C E2               [24] 3117 	movx	a,@r0
      000C9D 24 02            [12] 3118 	add	a,#0x02
      000C9F F5 82            [12] 3119 	mov	dpl,a
      000CA1 12r00rDD         [24] 3120 	lcall	_flight_time_estimate
      000CA4 AE 82            [24] 3121 	mov	r6,dpl
      000CA6 AF 83            [24] 3122 	mov	r7,dph
      000CA8 78r01            [12] 3123 	mov	r0,#_tdm_state_remaining
      000CAA E2               [24] 3124 	movx	a,@r0
      000CAB C3               [12] 3125 	clr	c
      000CAC 9E               [12] 3126 	subb	a,r6
      000CAD FE               [12] 3127 	mov	r6,a
      000CAE 08               [12] 3128 	inc	r0
      000CAF E2               [24] 3129 	movx	a,@r0
      000CB0 9F               [12] 3130 	subb	a,r7
      000CB1 FF               [12] 3131 	mov	r7,a
      000CB2 78r1D            [12] 3132 	mov	r0,#_trailer
      000CB4 EE               [12] 3133 	mov	a,r6
      000CB5 F2               [24] 3134 	movx	@r0,a
      000CB6 08               [12] 3135 	inc	r0
      000CB7 EF               [12] 3136 	mov	a,r7
      000CB8 54 1F            [12] 3137 	anl	a,#0x1F
      000CBA F5 F0            [12] 3138 	mov	b,a
      000CBC E2               [24] 3139 	movx	a,@r0
      000CBD 54 E0            [12] 3140 	anl	a,#0xE0
      000CBF 45 F0            [12] 3141 	orl	a,b
      000CC1 F2               [24] 3142 	movx	@r0,a
      000CC2                       3143 00172$:
                                   3144 ;	radio/tdm.c:799: radio_set_channel(fhop_transmit_channel());
      000CC2 12r00r00         [24] 3145 	lcall	_fhop_transmit_channel
      000CC5 12r00r00         [24] 3146 	lcall	_radio_set_channel
                                   3147 ;	radio/tdm.c:801: memcpy(&pbuf[len], &trailer, sizeof(trailer));
      000CC8 78r32            [12] 3148 	mov	r0,#_tdm_serial_loop_len_1_213
      000CCA E2               [24] 3149 	movx	a,@r0
      000CCB 24r00            [12] 3150 	add	a,#_pbuf
      000CCD FE               [12] 3151 	mov	r6,a
      000CCE E4               [12] 3152 	clr	a
      000CCF 34s00            [12] 3153 	addc	a,#(_pbuf >> 8)
      000CD1 FF               [12] 3154 	mov	r7,a
      000CD2 7D 00            [12] 3155 	mov	r5,#0x00
      000CD4 90r00r00         [24] 3156 	mov	dptr,#_memcpy_PARM_2
      000CD7 74r1D            [12] 3157 	mov	a,#_trailer
      000CD9 F0               [24] 3158 	movx	@dptr,a
      000CDA E4               [12] 3159 	clr	a
      000CDB A3               [24] 3160 	inc	dptr
      000CDC F0               [24] 3161 	movx	@dptr,a
      000CDD 74 60            [12] 3162 	mov	a,#0x60
      000CDF A3               [24] 3163 	inc	dptr
      000CE0 F0               [24] 3164 	movx	@dptr,a
      000CE1 90r00r00         [24] 3165 	mov	dptr,#_memcpy_PARM_3
      000CE4 74 02            [12] 3166 	mov	a,#0x02
      000CE6 F0               [24] 3167 	movx	@dptr,a
      000CE7 E4               [12] 3168 	clr	a
      000CE8 A3               [24] 3169 	inc	dptr
      000CE9 F0               [24] 3170 	movx	@dptr,a
      000CEA 8E 82            [24] 3171 	mov	dpl,r6
      000CEC 8F 83            [24] 3172 	mov	dph,r7
      000CEE 8D F0            [24] 3173 	mov	b,r5
      000CF0 12r00r00         [24] 3174 	lcall	_memcpy
                                   3175 ;	radio/tdm.c:803: if (len != 0 && trailer.window != 0) {
      000CF3 78r32            [12] 3176 	mov	r0,#_tdm_serial_loop_len_1_213
      000CF5 E2               [24] 3177 	movx	a,@r0
      000CF6 60 0E            [24] 3178 	jz	00177$
      000CF8 78r1D            [12] 3179 	mov	r0,#_trailer
      000CFA E2               [24] 3180 	movx	a,@r0
      000CFB FE               [12] 3181 	mov	r6,a
      000CFC 08               [12] 3182 	inc	r0
      000CFD E2               [24] 3183 	movx	a,@r0
      000CFE 54 1F            [12] 3184 	anl	a,#0x1F
      000D00 FF               [12] 3185 	mov	r7,a
      000D01 4E               [12] 3186 	orl	a,r6
      000D02 60 02            [24] 3187 	jz	00177$
                                   3188 ;	radio/tdm.c:805: LED_ACTIVITY = LED_ON;
      000D04 C2 96            [12] 3189 	clr	_LED_RED
      000D06                       3190 00177$:
                                   3191 ;	radio/tdm.c:808: if (len == 0) {
      000D06 78r32            [12] 3192 	mov	r0,#_tdm_serial_loop_len_1_213
      000D08 E2               [24] 3193 	movx	a,@r0
      000D09 70 02            [24] 3194 	jnz	00180$
                                   3195 ;	radio/tdm.c:812: transmit_yield = 1;
      000D0B D2*01            [12] 3196 	setb	_transmit_yield
      000D0D                       3197 00180$:
                                   3198 ;	radio/tdm.c:818: transmit_wait = packet_latency;
      000D0D 78r08            [12] 3199 	mov	r0,#_packet_latency
      000D0F E2               [24] 3200 	movx	a,@r0
      000D10 FE               [12] 3201 	mov	r6,a
      000D11 08               [12] 3202 	inc	r0
      000D12 E2               [24] 3203 	movx	a,@r0
      000D13 FF               [12] 3204 	mov	r7,a
      000D14 78r0C            [12] 3205 	mov	r0,#_transmit_wait
      000D16 EE               [12] 3206 	mov	a,r6
      000D17 F2               [24] 3207 	movx	@r0,a
      000D18 08               [12] 3208 	inc	r0
      000D19 EF               [12] 3209 	mov	a,r7
      000D1A F2               [24] 3210 	movx	@r0,a
                                   3211 ;	radio/tdm.c:822: if ((duty_cycle - duty_cycle_offset) != 100) {
      000D1B 78r0E            [12] 3212 	mov	r0,#_duty_cycle
      000D1D E2               [24] 3213 	movx	a,@r0
      000D1E FE               [12] 3214 	mov	r6,a
      000D1F 7F 00            [12] 3215 	mov	r7,#0x00
      000D21 78r13            [12] 3216 	mov	r0,#_duty_cycle_offset
      000D23 E2               [24] 3217 	movx	a,@r0
      000D24 FC               [12] 3218 	mov	r4,a
      000D25 7D 00            [12] 3219 	mov	r5,#0x00
      000D27 EE               [12] 3220 	mov	a,r6
      000D28 C3               [12] 3221 	clr	c
      000D29 9C               [12] 3222 	subb	a,r4
      000D2A FE               [12] 3223 	mov	r6,a
      000D2B EF               [12] 3224 	mov	a,r7
      000D2C 9D               [12] 3225 	subb	a,r5
      000D2D FF               [12] 3226 	mov	r7,a
      000D2E BE 64 05         [24] 3227 	cjne	r6,#0x64,00401$
      000D31 BF 00 02         [24] 3228 	cjne	r7,#0x00,00401$
      000D34 80 17            [24] 3229 	sjmp	00182$
      000D36                       3230 00401$:
                                   3231 ;	radio/tdm.c:823: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
      000D36 78r32            [12] 3232 	mov	r0,#_tdm_serial_loop_len_1_213
      000D38 E2               [24] 3233 	movx	a,@r0
      000D39 24 02            [12] 3234 	add	a,#0x02
      000D3B F5 82            [12] 3235 	mov	dpl,a
      000D3D 12r00rDD         [24] 3236 	lcall	_flight_time_estimate
      000D40 AE 82            [24] 3237 	mov	r6,dpl
      000D42 AF 83            [24] 3238 	mov	r7,dph
      000D44 78r14            [12] 3239 	mov	r0,#_transmitted_ticks
      000D46 E2               [24] 3240 	movx	a,@r0
      000D47 2E               [12] 3241 	add	a,r6
      000D48 F2               [24] 3242 	movx	@r0,a
      000D49 08               [12] 3243 	inc	r0
      000D4A E2               [24] 3244 	movx	a,@r0
      000D4B 3F               [12] 3245 	addc	a,r7
      000D4C F2               [24] 3246 	movx	@r0,a
      000D4D                       3247 00182$:
                                   3248 ;	radio/tdm.c:827: if (!radio_transmit(len + sizeof(trailer), pbuf, tdm_state_remaining + (silence_period/2)) &&
      000D4D 78r32            [12] 3249 	mov	r0,#_tdm_serial_loop_len_1_213
      000D4F E2               [24] 3250 	movx	a,@r0
      000D50 24 02            [12] 3251 	add	a,#0x02
      000D52 FF               [12] 3252 	mov	r7,a
      000D53 78r06            [12] 3253 	mov	r0,#_silence_period
      000D55 E2               [24] 3254 	movx	a,@r0
      000D56 FD               [12] 3255 	mov	r5,a
      000D57 08               [12] 3256 	inc	r0
      000D58 E2               [24] 3257 	movx	a,@r0
      000D59 C3               [12] 3258 	clr	c
      000D5A 13               [12] 3259 	rrc	a
      000D5B CD               [12] 3260 	xch	a,r5
      000D5C 13               [12] 3261 	rrc	a
      000D5D CD               [12] 3262 	xch	a,r5
      000D5E FE               [12] 3263 	mov	r6,a
      000D5F 78r01            [12] 3264 	mov	r0,#_tdm_state_remaining
      000D61 E2               [24] 3265 	movx	a,@r0
      000D62 2D               [12] 3266 	add	a,r5
      000D63 FD               [12] 3267 	mov	r5,a
      000D64 08               [12] 3268 	inc	r0
      000D65 E2               [24] 3269 	movx	a,@r0
      000D66 3E               [12] 3270 	addc	a,r6
      000D67 FE               [12] 3271 	mov	r6,a
      000D68 78r00            [12] 3272 	mov	r0,#_radio_transmit_PARM_2
      000D6A 74r00            [12] 3273 	mov	a,#_pbuf
      000D6C F2               [24] 3274 	movx	@r0,a
      000D6D 08               [12] 3275 	inc	r0
      000D6E 74s00            [12] 3276 	mov	a,#(_pbuf >> 8)
      000D70 F2               [24] 3277 	movx	@r0,a
      000D71 78r00            [12] 3278 	mov	r0,#_radio_transmit_PARM_3
      000D73 ED               [12] 3279 	mov	a,r5
      000D74 F2               [24] 3280 	movx	@r0,a
      000D75 08               [12] 3281 	inc	r0
      000D76 EE               [12] 3282 	mov	a,r6
      000D77 F2               [24] 3283 	movx	@r0,a
      000D78 8F 82            [24] 3284 	mov	dpl,r7
      000D7A 12r00r00         [24] 3285 	lcall	_radio_transmit
      000D7D 40 1A            [24] 3286 	jc	00184$
                                   3287 ;	radio/tdm.c:828: len != 0 && trailer.window != 0 && trailer.command == 0) {
      000D7F 78r32            [12] 3288 	mov	r0,#_tdm_serial_loop_len_1_213
      000D81 E2               [24] 3289 	movx	a,@r0
      000D82 60 15            [24] 3290 	jz	00184$
      000D84 78r1D            [12] 3291 	mov	r0,#_trailer
      000D86 E2               [24] 3292 	movx	a,@r0
      000D87 FE               [12] 3293 	mov	r6,a
      000D88 08               [12] 3294 	inc	r0
      000D89 E2               [24] 3295 	movx	a,@r0
      000D8A 54 1F            [12] 3296 	anl	a,#0x1F
      000D8C FF               [12] 3297 	mov	r7,a
      000D8D 4E               [12] 3298 	orl	a,r6
      000D8E 60 09            [24] 3299 	jz	00184$
      000D90 78r1E            [12] 3300 	mov	r0,#(_trailer + 0x0001)
      000D92 E2               [24] 3301 	movx	a,@r0
      000D93 20 E5 03         [24] 3302 	jb	acc.5,00184$
                                   3303 ;	radio/tdm.c:829: packet_force_resend();
      000D96 12r00r00         [24] 3304 	lcall	_packet_force_resend
      000D99                       3305 00184$:
                                   3306 ;	radio/tdm.c:832: if (lbt_rssi != 0) {
      000D99 78r16            [12] 3307 	mov	r0,#_lbt_rssi
      000D9B E2               [24] 3308 	movx	a,@r0
      000D9C 60 0B            [24] 3309 	jz	00189$
                                   3310 ;	radio/tdm.c:834: lbt_listen_time = 0;
      000D9E 78r17            [12] 3311 	mov	r0,#_lbt_listen_time
      000DA0 E4               [12] 3312 	clr	a
      000DA1 F2               [24] 3313 	movx	@r0,a
      000DA2 08               [12] 3314 	inc	r0
      000DA3 F2               [24] 3315 	movx	@r0,a
                                   3316 ;	radio/tdm.c:835: lbt_rand = 0;
      000DA4 78r1B            [12] 3317 	mov	r0,#_lbt_rand
      000DA6 F2               [24] 3318 	movx	@r0,a
      000DA7 08               [12] 3319 	inc	r0
      000DA8 F2               [24] 3320 	movx	@r0,a
      000DA9                       3321 00189$:
                                   3322 ;	radio/tdm.c:838: if (len != 0 && trailer.window != 0) {
      000DA9 78r32            [12] 3323 	mov	r0,#_tdm_serial_loop_len_1_213
      000DAB E2               [24] 3324 	movx	a,@r0
      000DAC 60 0E            [24] 3325 	jz	00191$
      000DAE 78r1D            [12] 3326 	mov	r0,#_trailer
      000DB0 E2               [24] 3327 	movx	a,@r0
      000DB1 FE               [12] 3328 	mov	r6,a
      000DB2 08               [12] 3329 	inc	r0
      000DB3 E2               [24] 3330 	movx	a,@r0
      000DB4 54 1F            [12] 3331 	anl	a,#0x1F
      000DB6 FF               [12] 3332 	mov	r7,a
      000DB7 4E               [12] 3333 	orl	a,r6
      000DB8 60 02            [24] 3334 	jz	00191$
                                   3335 ;	radio/tdm.c:839: LED_ACTIVITY = LED_OFF;
      000DBA D2 96            [12] 3336 	setb	_LED_RED
      000DBC                       3337 00191$:
                                   3338 ;	radio/tdm.c:860: radio_set_channel(fhop_receive_channel());
      000DBC 12r00r00         [24] 3339 	lcall	_fhop_receive_channel
      000DBF 12r00r00         [24] 3340 	lcall	_radio_set_channel
                                   3341 ;	radio/tdm.c:863: radio_receiver_on();
      000DC2 12r00r00         [24] 3342 	lcall	_radio_receiver_on
      000DC5 02r07r9F         [24] 3343 	ljmp	00195$
                                   3344 ;------------------------------------------------------------
                                   3345 ;Allocation info for local variables in function 'tdm_init'
                                   3346 ;------------------------------------------------------------
                                   3347 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                                   3348 ;i                         Allocated with name '_tdm_init_i_1_253'
                                   3349 ;air_rate                  Allocated with name '_tdm_init_air_rate_1_253'
                                   3350 ;window_width              Allocated with name '_tdm_init_window_width_1_253'
                                   3351 ;------------------------------------------------------------
                                   3352 ;	radio/tdm.c:982: tdm_init(void)
                                   3353 ;	-----------------------------------------
                                   3354 ;	 function tdm_init
                                   3355 ;	-----------------------------------------
      000DC8                       3356 _tdm_init:
                                   3357 ;	radio/tdm.c:985: __xdata uint8_t air_rate = radio_air_rate();
      000DC8 12r00r00         [24] 3358 	lcall	_radio_air_rate
      000DCB AF 82            [24] 3359 	mov	r7,dpl
                                   3360 ;	radio/tdm.c:994: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
      000DCD 90r00r00         [24] 3361 	mov	dptr,#__mullong_PARM_2
      000DD0 EF               [12] 3362 	mov	a,r7
      000DD1 F0               [24] 3363 	movx	@dptr,a
      000DD2 E4               [12] 3364 	clr	a
      000DD3 A3               [24] 3365 	inc	dptr
      000DD4 F0               [24] 3366 	movx	@dptr,a
      000DD5 A3               [24] 3367 	inc	dptr
      000DD6 F0               [24] 3368 	movx	@dptr,a
      000DD7 A3               [24] 3369 	inc	dptr
      000DD8 F0               [24] 3370 	movx	@dptr,a
      000DD9 90 03 E8         [24] 3371 	mov	dptr,#0x03E8
      000DDC E4               [12] 3372 	clr	a
      000DDD F5 F0            [12] 3373 	mov	b,a
      000DDF 12r00r00         [24] 3374 	lcall	__mullong
      000DE2 AC 82            [24] 3375 	mov	r4,dpl
      000DE4 AD 83            [24] 3376 	mov	r5,dph
      000DE6 AE F0            [24] 3377 	mov	r6,b
      000DE8 FF               [12] 3378 	mov	r7,a
      000DE9 90r00r00         [24] 3379 	mov	dptr,#__divulong_PARM_2
      000DEC EC               [12] 3380 	mov	a,r4
      000DED F0               [24] 3381 	movx	@dptr,a
      000DEE ED               [12] 3382 	mov	a,r5
      000DEF A3               [24] 3383 	inc	dptr
      000DF0 F0               [24] 3384 	movx	@dptr,a
      000DF1 EE               [12] 3385 	mov	a,r6
      000DF2 A3               [24] 3386 	inc	dptr
      000DF3 F0               [24] 3387 	movx	@dptr,a
      000DF4 EF               [12] 3388 	mov	a,r7
      000DF5 A3               [24] 3389 	inc	dptr
      000DF6 F0               [24] 3390 	movx	@dptr,a
      000DF7 90 12 00         [24] 3391 	mov	dptr,#0x1200
      000DFA 75 F0 7A         [24] 3392 	mov	b,#0x7A
      000DFD E4               [12] 3393 	clr	a
      000DFE 12r00r00         [24] 3394 	lcall	__divulong
      000E01 AC 82            [24] 3395 	mov	r4,dpl
      000E03 AD 83            [24] 3396 	mov	r5,dph
      000E05 AE F0            [24] 3397 	mov	r6,b
      000E07 FF               [12] 3398 	mov	r7,a
      000E08 74 08            [12] 3399 	mov	a,#0x08
      000E0A 2C               [12] 3400 	add	a,r4
      000E0B FC               [12] 3401 	mov	r4,a
      000E0C E4               [12] 3402 	clr	a
      000E0D 3D               [12] 3403 	addc	a,r5
      000E0E FD               [12] 3404 	mov	r5,a
      000E0F E4               [12] 3405 	clr	a
      000E10 3E               [12] 3406 	addc	a,r6
      000E11 FE               [12] 3407 	mov	r6,a
      000E12 E4               [12] 3408 	clr	a
      000E13 3F               [12] 3409 	addc	a,r7
      000E14 FF               [12] 3410 	mov	r7,a
      000E15 ED               [12] 3411 	mov	a,r5
      000E16 C4               [12] 3412 	swap	a
      000E17 CC               [12] 3413 	xch	a,r4
      000E18 C4               [12] 3414 	swap	a
      000E19 54 0F            [12] 3415 	anl	a,#0x0F
      000E1B 6C               [12] 3416 	xrl	a,r4
      000E1C CC               [12] 3417 	xch	a,r4
      000E1D 54 0F            [12] 3418 	anl	a,#0x0F
      000E1F CC               [12] 3419 	xch	a,r4
      000E20 6C               [12] 3420 	xrl	a,r4
      000E21 CC               [12] 3421 	xch	a,r4
      000E22 FD               [12] 3422 	mov	r5,a
      000E23 EE               [12] 3423 	mov	a,r6
      000E24 C4               [12] 3424 	swap	a
      000E25 54 F0            [12] 3425 	anl	a,#0xF0
      000E27 4D               [12] 3426 	orl	a,r5
      000E28 FD               [12] 3427 	mov	r5,a
      000E29 EF               [12] 3428 	mov	a,r7
      000E2A C4               [12] 3429 	swap	a
      000E2B CE               [12] 3430 	xch	a,r6
      000E2C C4               [12] 3431 	swap	a
      000E2D 54 0F            [12] 3432 	anl	a,#0x0F
      000E2F 6E               [12] 3433 	xrl	a,r6
      000E30 CE               [12] 3434 	xch	a,r6
      000E31 54 0F            [12] 3435 	anl	a,#0x0F
      000E33 CE               [12] 3436 	xch	a,r6
      000E34 6E               [12] 3437 	xrl	a,r6
      000E35 CE               [12] 3438 	xch	a,r6
                                   3439 ;	radio/tdm.c:995: ticks_per_byte++;
      000E36 74 01            [12] 3440 	mov	a,#0x01
      000E38 2C               [12] 3441 	add	a,r4
      000E39 FE               [12] 3442 	mov	r6,a
      000E3A E4               [12] 3443 	clr	a
      000E3B 3D               [12] 3444 	addc	a,r5
      000E3C FF               [12] 3445 	mov	r7,a
      000E3D 78r0A            [12] 3446 	mov	r0,#_ticks_per_byte
      000E3F EE               [12] 3447 	mov	a,r6
      000E40 F2               [24] 3448 	movx	@r0,a
      000E41 08               [12] 3449 	inc	r0
      000E42 EF               [12] 3450 	mov	a,r7
      000E43 F2               [24] 3451 	movx	@r0,a
                                   3452 ;	radio/tdm.c:1002: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
      000E44 90r00r00         [24] 3453 	mov	dptr,#__mulint_PARM_2
      000E47 EE               [12] 3454 	mov	a,r6
      000E48 F0               [24] 3455 	movx	@dptr,a
      000E49 EF               [12] 3456 	mov	a,r7
      000E4A A3               [24] 3457 	inc	dptr
      000E4B F0               [24] 3458 	movx	@dptr,a
      000E4C 90 00 0D         [24] 3459 	mov	dptr,#0x000D
      000E4F C0 07            [24] 3460 	push	ar7
      000E51 C0 06            [24] 3461 	push	ar6
      000E53 12r00r00         [24] 3462 	lcall	__mulint
      000E56 E5 82            [12] 3463 	mov	a,dpl
      000E58 85 83 F0         [24] 3464 	mov	b,dph
      000E5B D0 06            [24] 3465 	pop	ar6
      000E5D D0 07            [24] 3466 	pop	ar7
      000E5F 24 0D            [12] 3467 	add	a,#0x0D
      000E61 FC               [12] 3468 	mov	r4,a
      000E62 E4               [12] 3469 	clr	a
      000E63 35 F0            [12] 3470 	addc	a,b
      000E65 FD               [12] 3471 	mov	r5,a
      000E66 78r08            [12] 3472 	mov	r0,#_packet_latency
      000E68 EC               [12] 3473 	mov	a,r4
      000E69 F2               [24] 3474 	movx	@r0,a
      000E6A 08               [12] 3475 	inc	r0
      000E6B ED               [12] 3476 	mov	a,r5
      000E6C F2               [24] 3477 	movx	@r0,a
                                   3478 ;	radio/tdm.c:1004: if (feature_golay) {
      000E6D 30*00 2E         [24] 3479 	jnb	_feature_golay,00102$
                                   3480 ;	radio/tdm.c:1005: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
      000E70 78r05            [12] 3481 	mov	r0,#_max_data_packet_length
      000E72 74 76            [12] 3482 	mov	a,#0x76
      000E74 F2               [24] 3483 	movx	@r0,a
                                   3484 ;	radio/tdm.c:1008: ticks_per_byte *= 2;
      000E75 EF               [12] 3485 	mov	a,r7
      000E76 CE               [12] 3486 	xch	a,r6
      000E77 25 E0            [12] 3487 	add	a,acc
      000E79 CE               [12] 3488 	xch	a,r6
      000E7A 33               [12] 3489 	rlc	a
      000E7B FF               [12] 3490 	mov	r7,a
      000E7C 78r0A            [12] 3491 	mov	r0,#_ticks_per_byte
      000E7E EE               [12] 3492 	mov	a,r6
      000E7F F2               [24] 3493 	movx	@r0,a
      000E80 08               [12] 3494 	inc	r0
      000E81 EF               [12] 3495 	mov	a,r7
      000E82 F2               [24] 3496 	movx	@r0,a
                                   3497 ;	radio/tdm.c:1011: packet_latency += 4*ticks_per_byte;
      000E83 EF               [12] 3498 	mov	a,r7
      000E84 CE               [12] 3499 	xch	a,r6
      000E85 25 E0            [12] 3500 	add	a,acc
      000E87 CE               [12] 3501 	xch	a,r6
      000E88 33               [12] 3502 	rlc	a
      000E89 CE               [12] 3503 	xch	a,r6
      000E8A 25 E0            [12] 3504 	add	a,acc
      000E8C CE               [12] 3505 	xch	a,r6
      000E8D 33               [12] 3506 	rlc	a
      000E8E FF               [12] 3507 	mov	r7,a
      000E8F EE               [12] 3508 	mov	a,r6
      000E90 2C               [12] 3509 	add	a,r4
      000E91 FC               [12] 3510 	mov	r4,a
      000E92 EF               [12] 3511 	mov	a,r7
      000E93 3D               [12] 3512 	addc	a,r5
      000E94 FD               [12] 3513 	mov	r5,a
      000E95 78r08            [12] 3514 	mov	r0,#_packet_latency
      000E97 EC               [12] 3515 	mov	a,r4
      000E98 F2               [24] 3516 	movx	@r0,a
      000E99 08               [12] 3517 	inc	r0
      000E9A ED               [12] 3518 	mov	a,r5
      000E9B F2               [24] 3519 	movx	@r0,a
      000E9C 80 05            [24] 3520 	sjmp	00103$
      000E9E                       3521 00102$:
                                   3522 ;	radio/tdm.c:1013: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
      000E9E 78r05            [12] 3523 	mov	r0,#_max_data_packet_length
      000EA0 74 FA            [12] 3524 	mov	a,#0xFA
      000EA2 F2               [24] 3525 	movx	@r0,a
      000EA3                       3526 00103$:
                                   3527 ;	radio/tdm.c:1017: silence_period = 2*packet_latency;
      000EA3 78r08            [12] 3528 	mov	r0,#_packet_latency
      000EA5 79r06            [12] 3529 	mov	r1,#_silence_period
      000EA7 E2               [24] 3530 	movx	a,@r0
      000EA8 F3               [24] 3531 	movx	@r1,a
      000EA9 08               [12] 3532 	inc	r0
      000EAA E2               [24] 3533 	movx	a,@r0
      000EAB F5 F0            [12] 3534 	mov	b,a
      000EAD E3               [24] 3535 	movx	a,@r1
      000EAE 25 E0            [12] 3536 	add	a,acc
      000EB0 C5 F0            [12] 3537 	xch	a,b
      000EB2 33               [12] 3538 	rlc	a
      000EB3 C5 F0            [12] 3539 	xch	a,b
      000EB5 F3               [24] 3540 	movx	@r1,a
      000EB6 09               [12] 3541 	inc	r1
      000EB7 E5 F0            [12] 3542 	mov	a,b
      000EB9 F3               [24] 3543 	movx	@r1,a
                                   3544 ;	radio/tdm.c:1020: window_width = 3*(packet_latency+(max_data_packet_length*(uint32_t)ticks_per_byte));
      000EBA 78r0A            [12] 3545 	mov	r0,#_ticks_per_byte
      000EBC 90r00r00         [24] 3546 	mov	dptr,#__mullong_PARM_2
      000EBF E2               [24] 3547 	movx	a,@r0
      000EC0 F0               [24] 3548 	movx	@dptr,a
      000EC1 08               [12] 3549 	inc	r0
      000EC2 E2               [24] 3550 	movx	a,@r0
      000EC3 A3               [24] 3551 	inc	dptr
      000EC4 F0               [24] 3552 	movx	@dptr,a
      000EC5 E4               [12] 3553 	clr	a
      000EC6 A3               [24] 3554 	inc	dptr
      000EC7 F0               [24] 3555 	movx	@dptr,a
      000EC8 A3               [24] 3556 	inc	dptr
      000EC9 F0               [24] 3557 	movx	@dptr,a
      000ECA 78r05            [12] 3558 	mov	r0,#_max_data_packet_length
      000ECC E2               [24] 3559 	movx	a,@r0
      000ECD FC               [12] 3560 	mov	r4,a
      000ECE 7D 00            [12] 3561 	mov	r5,#0x00
      000ED0 7E 00            [12] 3562 	mov	r6,#0x00
      000ED2 7F 00            [12] 3563 	mov	r7,#0x00
      000ED4 8C 82            [24] 3564 	mov	dpl,r4
      000ED6 8D 83            [24] 3565 	mov	dph,r5
      000ED8 8E F0            [24] 3566 	mov	b,r6
      000EDA EF               [12] 3567 	mov	a,r7
      000EDB 12r00r00         [24] 3568 	lcall	__mullong
      000EDE 85 82*15         [24] 3569 	mov	_tdm_init_sloc0_1_0,dpl
      000EE1 85 83*16         [24] 3570 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      000EE4 85 F0*17         [24] 3571 	mov	(_tdm_init_sloc0_1_0 + 2),b
      000EE7 F5*18            [12] 3572 	mov	(_tdm_init_sloc0_1_0 + 3),a
      000EE9 78r08            [12] 3573 	mov	r0,#_packet_latency
      000EEB E2               [24] 3574 	movx	a,@r0
      000EEC FA               [12] 3575 	mov	r2,a
      000EED 08               [12] 3576 	inc	r0
      000EEE E2               [24] 3577 	movx	a,@r0
      000EEF FB               [12] 3578 	mov	r3,a
      000EF0 7E 00            [12] 3579 	mov	r6,#0x00
      000EF2 7F 00            [12] 3580 	mov	r7,#0x00
      000EF4 90r00r00         [24] 3581 	mov	dptr,#__mullong_PARM_2
      000EF7 E5*15            [12] 3582 	mov	a,_tdm_init_sloc0_1_0
      000EF9 2A               [12] 3583 	add	a,r2
      000EFA F0               [24] 3584 	movx	@dptr,a
      000EFB E5*16            [12] 3585 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      000EFD 3B               [12] 3586 	addc	a,r3
      000EFE A3               [24] 3587 	inc	dptr
      000EFF F0               [24] 3588 	movx	@dptr,a
      000F00 E5*17            [12] 3589 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      000F02 3E               [12] 3590 	addc	a,r6
      000F03 A3               [24] 3591 	inc	dptr
      000F04 F0               [24] 3592 	movx	@dptr,a
      000F05 E5*18            [12] 3593 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      000F07 3F               [12] 3594 	addc	a,r7
      000F08 A3               [24] 3595 	inc	dptr
      000F09 F0               [24] 3596 	movx	@dptr,a
      000F0A 90 00 03         [24] 3597 	mov	dptr,#(0x03&0x00ff)
      000F0D E4               [12] 3598 	clr	a
      000F0E F5 F0            [12] 3599 	mov	b,a
      000F10 12r00r00         [24] 3600 	lcall	__mullong
      000F13 AC 82            [24] 3601 	mov	r4,dpl
      000F15 AD 83            [24] 3602 	mov	r5,dph
      000F17 AE F0            [24] 3603 	mov	r6,b
      000F19 FF               [12] 3604 	mov	r7,a
      000F1A 90r01r01         [24] 3605 	mov	dptr,#_tdm_init_window_width_1_253
      000F1D EC               [12] 3606 	mov	a,r4
      000F1E F0               [24] 3607 	movx	@dptr,a
      000F1F ED               [12] 3608 	mov	a,r5
      000F20 A3               [24] 3609 	inc	dptr
      000F21 F0               [24] 3610 	movx	@dptr,a
      000F22 EE               [12] 3611 	mov	a,r6
      000F23 A3               [24] 3612 	inc	dptr
      000F24 F0               [24] 3613 	movx	@dptr,a
      000F25 EF               [12] 3614 	mov	a,r7
      000F26 A3               [24] 3615 	inc	dptr
      000F27 F0               [24] 3616 	movx	@dptr,a
                                   3617 ;	radio/tdm.c:1023: lbt_min_time = LBT_MIN_TIME_USEC/16;
      000F28 78r19            [12] 3618 	mov	r0,#_lbt_min_time
      000F2A 74 38            [12] 3619 	mov	a,#0x38
      000F2C F2               [24] 3620 	movx	@r0,a
      000F2D 08               [12] 3621 	inc	r0
      000F2E 74 01            [12] 3622 	mov	a,#0x01
      000F30 F2               [24] 3623 	movx	@r0,a
                                   3624 ;	radio/tdm.c:1026: if (lbt_rssi != 0) {
      000F31 78r16            [12] 3625 	mov	r0,#_lbt_rssi
      000F33 E2               [24] 3626 	movx	a,@r0
      000F34 60 3A            [24] 3627 	jz	00105$
                                   3628 ;	radio/tdm.c:1027: window_width = constrain(window_width, 3*lbt_min_time, window_width);
      000F36 78r00            [12] 3629 	mov	r0,#_constrain_PARM_2
      000F38 74 A8            [12] 3630 	mov	a,#0xA8
      000F3A F2               [24] 3631 	movx	@r0,a
      000F3B 08               [12] 3632 	inc	r0
      000F3C 74 03            [12] 3633 	mov	a,#0x03
      000F3E F2               [24] 3634 	movx	@r0,a
      000F3F 08               [12] 3635 	inc	r0
      000F40 E4               [12] 3636 	clr	a
      000F41 F2               [24] 3637 	movx	@r0,a
      000F42 08               [12] 3638 	inc	r0
      000F43 F2               [24] 3639 	movx	@r0,a
      000F44 78r00            [12] 3640 	mov	r0,#_constrain_PARM_3
      000F46 EC               [12] 3641 	mov	a,r4
      000F47 F2               [24] 3642 	movx	@r0,a
      000F48 08               [12] 3643 	inc	r0
      000F49 ED               [12] 3644 	mov	a,r5
      000F4A F2               [24] 3645 	movx	@r0,a
      000F4B 08               [12] 3646 	inc	r0
      000F4C EE               [12] 3647 	mov	a,r6
      000F4D F2               [24] 3648 	movx	@r0,a
      000F4E 08               [12] 3649 	inc	r0
      000F4F EF               [12] 3650 	mov	a,r7
      000F50 F2               [24] 3651 	movx	@r0,a
      000F51 8C 82            [24] 3652 	mov	dpl,r4
      000F53 8D 83            [24] 3653 	mov	dph,r5
      000F55 8E F0            [24] 3654 	mov	b,r6
      000F57 EF               [12] 3655 	mov	a,r7
      000F58 12r00r00         [24] 3656 	lcall	_constrain
      000F5B AC 82            [24] 3657 	mov	r4,dpl
      000F5D AD 83            [24] 3658 	mov	r5,dph
      000F5F AE F0            [24] 3659 	mov	r6,b
      000F61 FF               [12] 3660 	mov	r7,a
      000F62 90r01r01         [24] 3661 	mov	dptr,#_tdm_init_window_width_1_253
      000F65 EC               [12] 3662 	mov	a,r4
      000F66 F0               [24] 3663 	movx	@dptr,a
      000F67 ED               [12] 3664 	mov	a,r5
      000F68 A3               [24] 3665 	inc	dptr
      000F69 F0               [24] 3666 	movx	@dptr,a
      000F6A EE               [12] 3667 	mov	a,r6
      000F6B A3               [24] 3668 	inc	dptr
      000F6C F0               [24] 3669 	movx	@dptr,a
      000F6D EF               [12] 3670 	mov	a,r7
      000F6E A3               [24] 3671 	inc	dptr
      000F6F F0               [24] 3672 	movx	@dptr,a
      000F70                       3673 00105$:
                                   3674 ;	radio/tdm.c:1032: if (window_width >= REGULATORY_MAX_WINDOW && num_fh_channels > 1) {
      000F70 90r01r01         [24] 3675 	mov	dptr,#_tdm_init_window_width_1_253
      000F73 E0               [24] 3676 	movx	a,@dptr
      000F74 FC               [12] 3677 	mov	r4,a
      000F75 A3               [24] 3678 	inc	dptr
      000F76 E0               [24] 3679 	movx	a,@dptr
      000F77 FD               [12] 3680 	mov	r5,a
      000F78 A3               [24] 3681 	inc	dptr
      000F79 E0               [24] 3682 	movx	a,@dptr
      000F7A FE               [12] 3683 	mov	r6,a
      000F7B A3               [24] 3684 	inc	dptr
      000F7C E0               [24] 3685 	movx	a,@dptr
      000F7D FF               [12] 3686 	mov	r7,a
      000F7E C3               [12] 3687 	clr	c
      000F7F EC               [12] 3688 	mov	a,r4
      000F80 94 A8            [12] 3689 	subb	a,#0xA8
      000F82 ED               [12] 3690 	mov	a,r5
      000F83 94 61            [12] 3691 	subb	a,#0x61
      000F85 EE               [12] 3692 	mov	a,r6
      000F86 94 00            [12] 3693 	subb	a,#0x00
      000F88 EF               [12] 3694 	mov	a,r7
      000F89 94 00            [12] 3695 	subb	a,#0x00
      000F8B 40 1B            [24] 3696 	jc	00107$
      000F8D 78r00            [12] 3697 	mov	r0,#_num_fh_channels
      000F8F C3               [12] 3698 	clr	c
      000F90 E2               [24] 3699 	movx	a,@r0
      000F91 F5 F0            [12] 3700 	mov	b,a
      000F93 74 01            [12] 3701 	mov	a,#0x01
      000F95 95 F0            [12] 3702 	subb	a,b
      000F97 50 0F            [24] 3703 	jnc	00107$
                                   3704 ;	radio/tdm.c:1033: window_width = REGULATORY_MAX_WINDOW;
      000F99 90r01r01         [24] 3705 	mov	dptr,#_tdm_init_window_width_1_253
      000F9C 74 A8            [12] 3706 	mov	a,#0xA8
      000F9E F0               [24] 3707 	movx	@dptr,a
      000F9F 74 61            [12] 3708 	mov	a,#0x61
      000FA1 A3               [24] 3709 	inc	dptr
      000FA2 F0               [24] 3710 	movx	@dptr,a
      000FA3 E4               [12] 3711 	clr	a
      000FA4 A3               [24] 3712 	inc	dptr
      000FA5 F0               [24] 3713 	movx	@dptr,a
      000FA6 A3               [24] 3714 	inc	dptr
      000FA7 F0               [24] 3715 	movx	@dptr,a
      000FA8                       3716 00107$:
                                   3717 ;	radio/tdm.c:1037: if (window_width > param_get(PARAM_MAX_WINDOW)*(1000/16)) {
      000FA8 75 82 0F         [24] 3718 	mov	dpl,#0x0F
      000FAB 12r00r00         [24] 3719 	lcall	_param_get
      000FAE AC 82            [24] 3720 	mov	r4,dpl
      000FB0 AD 83            [24] 3721 	mov	r5,dph
      000FB2 AE F0            [24] 3722 	mov	r6,b
      000FB4 FF               [12] 3723 	mov	r7,a
      000FB5 90r00r00         [24] 3724 	mov	dptr,#__mullong_PARM_2
      000FB8 EC               [12] 3725 	mov	a,r4
      000FB9 F0               [24] 3726 	movx	@dptr,a
      000FBA ED               [12] 3727 	mov	a,r5
      000FBB A3               [24] 3728 	inc	dptr
      000FBC F0               [24] 3729 	movx	@dptr,a
      000FBD EE               [12] 3730 	mov	a,r6
      000FBE A3               [24] 3731 	inc	dptr
      000FBF F0               [24] 3732 	movx	@dptr,a
      000FC0 EF               [12] 3733 	mov	a,r7
      000FC1 A3               [24] 3734 	inc	dptr
      000FC2 F0               [24] 3735 	movx	@dptr,a
      000FC3 90 00 3E         [24] 3736 	mov	dptr,#(0x3E&0x00ff)
      000FC6 E4               [12] 3737 	clr	a
      000FC7 F5 F0            [12] 3738 	mov	b,a
      000FC9 12r00r00         [24] 3739 	lcall	__mullong
      000FCC 85 82*15         [24] 3740 	mov	_tdm_init_sloc0_1_0,dpl
      000FCF 85 83*16         [24] 3741 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      000FD2 85 F0*17         [24] 3742 	mov	(_tdm_init_sloc0_1_0 + 2),b
      000FD5 F5*18            [12] 3743 	mov	(_tdm_init_sloc0_1_0 + 3),a
      000FD7 90r01r01         [24] 3744 	mov	dptr,#_tdm_init_window_width_1_253
      000FDA E0               [24] 3745 	movx	a,@dptr
      000FDB FA               [12] 3746 	mov	r2,a
      000FDC A3               [24] 3747 	inc	dptr
      000FDD E0               [24] 3748 	movx	a,@dptr
      000FDE FB               [12] 3749 	mov	r3,a
      000FDF A3               [24] 3750 	inc	dptr
      000FE0 E0               [24] 3751 	movx	a,@dptr
      000FE1 FE               [12] 3752 	mov	r6,a
      000FE2 A3               [24] 3753 	inc	dptr
      000FE3 E0               [24] 3754 	movx	a,@dptr
      000FE4 FF               [12] 3755 	mov	r7,a
      000FE5 C3               [12] 3756 	clr	c
      000FE6 E5*15            [12] 3757 	mov	a,_tdm_init_sloc0_1_0
      000FE8 9A               [12] 3758 	subb	a,r2
      000FE9 E5*16            [12] 3759 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      000FEB 9B               [12] 3760 	subb	a,r3
      000FEC E5*17            [12] 3761 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      000FEE 9E               [12] 3762 	subb	a,r6
      000FEF E5*18            [12] 3763 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      000FF1 9F               [12] 3764 	subb	a,r7
      000FF2 50 39            [24] 3765 	jnc	00110$
                                   3766 ;	radio/tdm.c:1038: window_width = param_get(PARAM_MAX_WINDOW)*(1000/16);
      000FF4 75 82 0F         [24] 3767 	mov	dpl,#0x0F
      000FF7 12r00r00         [24] 3768 	lcall	_param_get
      000FFA AC 82            [24] 3769 	mov	r4,dpl
      000FFC AD 83            [24] 3770 	mov	r5,dph
      000FFE AE F0            [24] 3771 	mov	r6,b
      001000 FF               [12] 3772 	mov	r7,a
      001001 90r00r00         [24] 3773 	mov	dptr,#__mullong_PARM_2
      001004 EC               [12] 3774 	mov	a,r4
      001005 F0               [24] 3775 	movx	@dptr,a
      001006 ED               [12] 3776 	mov	a,r5
      001007 A3               [24] 3777 	inc	dptr
      001008 F0               [24] 3778 	movx	@dptr,a
      001009 EE               [12] 3779 	mov	a,r6
      00100A A3               [24] 3780 	inc	dptr
      00100B F0               [24] 3781 	movx	@dptr,a
      00100C EF               [12] 3782 	mov	a,r7
      00100D A3               [24] 3783 	inc	dptr
      00100E F0               [24] 3784 	movx	@dptr,a
      00100F 90 00 3E         [24] 3785 	mov	dptr,#(0x3E&0x00ff)
      001012 E4               [12] 3786 	clr	a
      001013 F5 F0            [12] 3787 	mov	b,a
      001015 12r00r00         [24] 3788 	lcall	__mullong
      001018 AC 82            [24] 3789 	mov	r4,dpl
      00101A AD 83            [24] 3790 	mov	r5,dph
      00101C AE F0            [24] 3791 	mov	r6,b
      00101E FF               [12] 3792 	mov	r7,a
      00101F 90r01r01         [24] 3793 	mov	dptr,#_tdm_init_window_width_1_253
      001022 EC               [12] 3794 	mov	a,r4
      001023 F0               [24] 3795 	movx	@dptr,a
      001024 ED               [12] 3796 	mov	a,r5
      001025 A3               [24] 3797 	inc	dptr
      001026 F0               [24] 3798 	movx	@dptr,a
      001027 EE               [12] 3799 	mov	a,r6
      001028 A3               [24] 3800 	inc	dptr
      001029 F0               [24] 3801 	movx	@dptr,a
      00102A EF               [12] 3802 	mov	a,r7
      00102B A3               [24] 3803 	inc	dptr
      00102C F0               [24] 3804 	movx	@dptr,a
      00102D                       3805 00110$:
                                   3806 ;	radio/tdm.c:1042: if (window_width > 0x1fff) {
      00102D 90r01r01         [24] 3807 	mov	dptr,#_tdm_init_window_width_1_253
      001030 E0               [24] 3808 	movx	a,@dptr
      001031 FC               [12] 3809 	mov	r4,a
      001032 A3               [24] 3810 	inc	dptr
      001033 E0               [24] 3811 	movx	a,@dptr
      001034 FD               [12] 3812 	mov	r5,a
      001035 A3               [24] 3813 	inc	dptr
      001036 E0               [24] 3814 	movx	a,@dptr
      001037 FE               [12] 3815 	mov	r6,a
      001038 A3               [24] 3816 	inc	dptr
      001039 E0               [24] 3817 	movx	a,@dptr
      00103A FF               [12] 3818 	mov	r7,a
      00103B C3               [12] 3819 	clr	c
      00103C 74 FF            [12] 3820 	mov	a,#0xFF
      00103E 9C               [12] 3821 	subb	a,r4
      00103F 74 1F            [12] 3822 	mov	a,#0x1F
      001041 9D               [12] 3823 	subb	a,r5
      001042 E4               [12] 3824 	clr	a
      001043 9E               [12] 3825 	subb	a,r6
      001044 E4               [12] 3826 	clr	a
      001045 9F               [12] 3827 	subb	a,r7
      001046 50 0F            [24] 3828 	jnc	00112$
                                   3829 ;	radio/tdm.c:1043: window_width = 0x1fff;
      001048 90r01r01         [24] 3830 	mov	dptr,#_tdm_init_window_width_1_253
      00104B 74 FF            [12] 3831 	mov	a,#0xFF
      00104D F0               [24] 3832 	movx	@dptr,a
      00104E 74 1F            [12] 3833 	mov	a,#0x1F
      001050 A3               [24] 3834 	inc	dptr
      001051 F0               [24] 3835 	movx	@dptr,a
      001052 E4               [12] 3836 	clr	a
      001053 A3               [24] 3837 	inc	dptr
      001054 F0               [24] 3838 	movx	@dptr,a
      001055 A3               [24] 3839 	inc	dptr
      001056 F0               [24] 3840 	movx	@dptr,a
      001057                       3841 00112$:
                                   3842 ;	radio/tdm.c:1046: tx_window_width = window_width;
      001057 90r01r01         [24] 3843 	mov	dptr,#_tdm_init_window_width_1_253
      00105A E0               [24] 3844 	movx	a,@dptr
      00105B FC               [12] 3845 	mov	r4,a
      00105C A3               [24] 3846 	inc	dptr
      00105D E0               [24] 3847 	movx	a,@dptr
      00105E FD               [12] 3848 	mov	r5,a
      00105F A3               [24] 3849 	inc	dptr
      001060 E0               [24] 3850 	movx	a,@dptr
      001061 A3               [24] 3851 	inc	dptr
      001062 E0               [24] 3852 	movx	a,@dptr
      001063 78r03            [12] 3853 	mov	r0,#_tx_window_width
      001065 EC               [12] 3854 	mov	a,r4
      001066 F2               [24] 3855 	movx	@r0,a
      001067 08               [12] 3856 	inc	r0
      001068 ED               [12] 3857 	mov	a,r5
      001069 F2               [24] 3858 	movx	@r0,a
                                   3859 ;	radio/tdm.c:1051: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
      00106A 78r0B            [12] 3860 	mov	r0,#(_settings + 0x000b)
      00106C E2               [24] 3861 	movx	a,@r0
      00106D 7E 00            [12] 3862 	mov	r6,#0x00
      00106F 24 F6            [12] 3863 	add	a,#0xF6
      001071 FF               [12] 3864 	mov	r7,a
      001072 EE               [12] 3865 	mov	a,r6
      001073 34 FF            [12] 3866 	addc	a,#0xFF
      001075 FE               [12] 3867 	mov	r6,a
      001076 90r00r00         [24] 3868 	mov	dptr,#__divsint_PARM_2
      001079 74 02            [12] 3869 	mov	a,#0x02
      00107B F0               [24] 3870 	movx	@dptr,a
      00107C E4               [12] 3871 	clr	a
      00107D A3               [24] 3872 	inc	dptr
      00107E F0               [24] 3873 	movx	@dptr,a
      00107F 8F 82            [24] 3874 	mov	dpl,r7
      001081 8E 83            [24] 3875 	mov	dph,r6
      001083 C0 05            [24] 3876 	push	ar5
      001085 C0 04            [24] 3877 	push	ar4
      001087 12r00r00         [24] 3878 	lcall	__divsint
      00108A AE 82            [24] 3879 	mov	r6,dpl
      00108C AF 83            [24] 3880 	mov	r7,dph
      00108E 78r0A            [12] 3881 	mov	r0,#_ticks_per_byte
      001090 90r00r00         [24] 3882 	mov	dptr,#__mulint_PARM_2
      001093 E2               [24] 3883 	movx	a,@r0
      001094 F0               [24] 3884 	movx	@dptr,a
      001095 08               [12] 3885 	inc	r0
      001096 E2               [24] 3886 	movx	a,@r0
      001097 A3               [24] 3887 	inc	dptr
      001098 F0               [24] 3888 	movx	@dptr,a
      001099 8E 82            [24] 3889 	mov	dpl,r6
      00109B 8F 83            [24] 3890 	mov	dph,r7
      00109D 12r00r00         [24] 3891 	lcall	__mulint
      0010A0 AE 82            [24] 3892 	mov	r6,dpl
      0010A2 AF 83            [24] 3893 	mov	r7,dph
      0010A4 D0 04            [24] 3894 	pop	ar4
      0010A6 D0 05            [24] 3895 	pop	ar5
      0010A8 78r08            [12] 3896 	mov	r0,#_packet_latency
      0010AA E2               [24] 3897 	movx	a,@r0
      0010AB 2E               [12] 3898 	add	a,r6
      0010AC F2               [24] 3899 	movx	@r0,a
      0010AD 08               [12] 3900 	inc	r0
      0010AE E2               [24] 3901 	movx	a,@r0
      0010AF 3F               [12] 3902 	addc	a,r7
      0010B0 F2               [24] 3903 	movx	@r0,a
                                   3904 ;	radio/tdm.c:1055: i = (tx_window_width - packet_latency) / ticks_per_byte;
      0010B1 78r08            [12] 3905 	mov	r0,#_packet_latency
      0010B3 D3               [12] 3906 	setb	c
      0010B4 E2               [24] 3907 	movx	a,@r0
      0010B5 9C               [12] 3908 	subb	a,r4
      0010B6 F4               [12] 3909 	cpl	a
      0010B7 B3               [12] 3910 	cpl	c
      0010B8 FC               [12] 3911 	mov	r4,a
      0010B9 B3               [12] 3912 	cpl	c
      0010BA 08               [12] 3913 	inc	r0
      0010BB E2               [24] 3914 	movx	a,@r0
      0010BC 9D               [12] 3915 	subb	a,r5
      0010BD F4               [12] 3916 	cpl	a
      0010BE FD               [12] 3917 	mov	r5,a
      0010BF 78r0A            [12] 3918 	mov	r0,#_ticks_per_byte
      0010C1 90r00r00         [24] 3919 	mov	dptr,#__divuint_PARM_2
      0010C4 E2               [24] 3920 	movx	a,@r0
      0010C5 F0               [24] 3921 	movx	@dptr,a
      0010C6 08               [12] 3922 	inc	r0
      0010C7 E2               [24] 3923 	movx	a,@r0
      0010C8 A3               [24] 3924 	inc	dptr
      0010C9 F0               [24] 3925 	movx	@dptr,a
      0010CA 8C 82            [24] 3926 	mov	dpl,r4
      0010CC 8D 83            [24] 3927 	mov	dph,r5
      0010CE 12r00r00         [24] 3928 	lcall	__divuint
      0010D1 AE 82            [24] 3929 	mov	r6,dpl
      0010D3 AF 83            [24] 3930 	mov	r7,dph
      0010D5 90r00rFF         [24] 3931 	mov	dptr,#_tdm_init_i_1_253
      0010D8 EE               [12] 3932 	mov	a,r6
      0010D9 F0               [24] 3933 	movx	@dptr,a
      0010DA EF               [12] 3934 	mov	a,r7
      0010DB A3               [24] 3935 	inc	dptr
      0010DC F0               [24] 3936 	movx	@dptr,a
                                   3937 ;	radio/tdm.c:1056: if (i > max_data_packet_length) {
      0010DD 78r05            [12] 3938 	mov	r0,#_max_data_packet_length
      0010DF E2               [24] 3939 	movx	a,@r0
      0010E0 FC               [12] 3940 	mov	r4,a
      0010E1 7D 00            [12] 3941 	mov	r5,#0x00
      0010E3 C3               [12] 3942 	clr	c
      0010E4 EC               [12] 3943 	mov	a,r4
      0010E5 9E               [12] 3944 	subb	a,r6
      0010E6 ED               [12] 3945 	mov	a,r5
      0010E7 9F               [12] 3946 	subb	a,r7
      0010E8 50 08            [24] 3947 	jnc	00114$
                                   3948 ;	radio/tdm.c:1057: i = max_data_packet_length;
      0010EA 90r00rFF         [24] 3949 	mov	dptr,#_tdm_init_i_1_253
      0010ED EC               [12] 3950 	mov	a,r4
      0010EE F0               [24] 3951 	movx	@dptr,a
      0010EF ED               [12] 3952 	mov	a,r5
      0010F0 A3               [24] 3953 	inc	dptr
      0010F1 F0               [24] 3954 	movx	@dptr,a
      0010F2                       3955 00114$:
                                   3956 ;	radio/tdm.c:1059: packet_set_max_xmit(i);
      0010F2 90r00rFF         [24] 3957 	mov	dptr,#_tdm_init_i_1_253
      0010F5 E0               [24] 3958 	movx	a,@dptr
      0010F6 FE               [12] 3959 	mov	r6,a
      0010F7 A3               [24] 3960 	inc	dptr
      0010F8 E0               [24] 3961 	movx	a,@dptr
      0010F9 8E 82            [24] 3962 	mov	dpl,r6
      0010FB 02r00r00         [24] 3963 	ljmp	_packet_set_max_xmit
                                   3964 ;------------------------------------------------------------
                                   3965 ;Allocation info for local variables in function 'tdm_report_timing'
                                   3966 ;------------------------------------------------------------
                                   3967 ;	radio/tdm.c:1075: tdm_report_timing(void)
                                   3968 ;	-----------------------------------------
                                   3969 ;	 function tdm_report_timing
                                   3970 ;	-----------------------------------------
      0010FE                       3971 _tdm_report_timing:
                                   3972 ;	radio/tdm.c:1077: printf("silence_period: %u\n", (unsigned)silence_period); delay_msec(1);
      0010FE 78r06            [12] 3973 	mov	r0,#_silence_period
      001100 E2               [24] 3974 	movx	a,@r0
      001101 C0 E0            [24] 3975 	push	acc
      001103 08               [12] 3976 	inc	r0
      001104 E2               [24] 3977 	movx	a,@r0
      001105 C0 E0            [24] 3978 	push	acc
      001107 74rE3            [12] 3979 	mov	a,#___str_9
      001109 C0 E0            [24] 3980 	push	acc
      00110B 74s00            [12] 3981 	mov	a,#(___str_9 >> 8)
      00110D C0 E0            [24] 3982 	push	acc
      00110F 74 80            [12] 3983 	mov	a,#0x80
      001111 C0 E0            [24] 3984 	push	acc
      001113 12r00r00         [24] 3985 	lcall	_printfl
      001116 E5 81            [12] 3986 	mov	a,sp
      001118 24 FB            [12] 3987 	add	a,#0xfb
      00111A F5 81            [12] 3988 	mov	sp,a
      00111C 90 00 01         [24] 3989 	mov	dptr,#0x0001
      00111F 12r00r00         [24] 3990 	lcall	_delay_msec
                                   3991 ;	radio/tdm.c:1078: printf("tx_window_width: %u\n", (unsigned)tx_window_width); delay_msec(1);
      001122 78r03            [12] 3992 	mov	r0,#_tx_window_width
      001124 E2               [24] 3993 	movx	a,@r0
      001125 C0 E0            [24] 3994 	push	acc
      001127 08               [12] 3995 	inc	r0
      001128 E2               [24] 3996 	movx	a,@r0
      001129 C0 E0            [24] 3997 	push	acc
      00112B 74rF7            [12] 3998 	mov	a,#___str_10
      00112D C0 E0            [24] 3999 	push	acc
      00112F 74s00            [12] 4000 	mov	a,#(___str_10 >> 8)
      001131 C0 E0            [24] 4001 	push	acc
      001133 74 80            [12] 4002 	mov	a,#0x80
      001135 C0 E0            [24] 4003 	push	acc
      001137 12r00r00         [24] 4004 	lcall	_printfl
      00113A E5 81            [12] 4005 	mov	a,sp
      00113C 24 FB            [12] 4006 	add	a,#0xfb
      00113E F5 81            [12] 4007 	mov	sp,a
      001140 90 00 01         [24] 4008 	mov	dptr,#0x0001
      001143 12r00r00         [24] 4009 	lcall	_delay_msec
                                   4010 ;	radio/tdm.c:1079: printf("max_data_packet_length: %u\n", (unsigned)max_data_packet_length); delay_msec(1);
      001146 78r05            [12] 4011 	mov	r0,#_max_data_packet_length
      001148 E2               [24] 4012 	movx	a,@r0
      001149 FE               [12] 4013 	mov	r6,a
      00114A 7F 00            [12] 4014 	mov	r7,#0x00
      00114C C0 06            [24] 4015 	push	ar6
      00114E C0 07            [24] 4016 	push	ar7
      001150 74r0C            [12] 4017 	mov	a,#___str_11
      001152 C0 E0            [24] 4018 	push	acc
      001154 74s01            [12] 4019 	mov	a,#(___str_11 >> 8)
      001156 C0 E0            [24] 4020 	push	acc
      001158 74 80            [12] 4021 	mov	a,#0x80
      00115A C0 E0            [24] 4022 	push	acc
      00115C 12r00r00         [24] 4023 	lcall	_printfl
      00115F E5 81            [12] 4024 	mov	a,sp
      001161 24 FB            [12] 4025 	add	a,#0xfb
      001163 F5 81            [12] 4026 	mov	sp,a
      001165 90 00 01         [24] 4027 	mov	dptr,#0x0001
      001168 02r00r00         [24] 4028 	ljmp	_delay_msec
                                   4029 	.area CSEG    (CODE)
                                   4030 	.area CONST   (CODE)
      000000                       4031 ___str_0:
      000000 4C 2F 52 20 52 53 53  4032 	.ascii "L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u "
             49 3A 20 25 75 2F 25
             75 20 20 4C 2F 52 20
             6E 6F 69 73 65 3A 20
             25 75 2F 25 75 20 70
             6B 74 73 3A 20 25 75
             20
      00002B 00                    4033 	.db 0x00
      00002C                       4034 ___str_1:
      00002C 20 74 78 65 3D 25 75  4035 	.ascii " txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u"
             20 72 78 65 3D 25 75
             20 73 74 78 3D 25 75
             20 73 72 78 3D 25 75
             20 65 63 63 3D 25 75
             2F 25 75 20 74 65 6D
             70 3D 25 64 20 64 63
             6F 3D 25 75
      000061 0A                    4036 	.db 0x0A
      000062 00                    4037 	.db 0x00
      000063                       4038 ___str_2:
      000063 54 44 4D 3A 20 25 75  4039 	.ascii "TDM: %u/%u len=%u "
             2F 25 75 20 6C 65 6E
             3D 25 75 20
      000075 00                    4040 	.db 0x00
      000076                       4041 ___str_3:
      000076 20 64 65 6C 74 61 3A  4042 	.ascii " delta: %d"
             20 25 64
      000080 0A                    4043 	.db 0x0A
      000081 00                    4044 	.db 0x00
      000082                       4045 ___str_4:
      000082 54 44 4D 3A 20 63 68  4046 	.ascii "TDM: change timing %u/%u"
             61 6E 67 65 20 74 69
             6D 69 6E 67 20 25 75
             2F 25 75
      00009A 0A                    4047 	.db 0x0A
      00009B 00                    4048 	.db 0x00
      00009C                       4049 ___str_5:
      00009C 54 44 4D 3A 20 73 63  4050 	.ascii "TDM: scanning"
             61 6E 6E 69 6E 67
      0000A9 0A                    4051 	.db 0x0A
      0000AA 00                    4052 	.db 0x00
      0000AB                       4053 ___str_6:
      0000AB 73 74 61 63 6B 20 62  4054 	.ascii "stack blown"
             6C 6F 77 6E
      0000B6 0A                    4055 	.db 0x0A
      0000B7 00                    4056 	.db 0x00
      0000B8                       4057 ___str_7:
      0000B8 70 64 61 74 61 20 63  4058 	.ascii "pdata canary changed"
             61 6E 61 72 79 20 63
             68 61 6E 67 65 64
      0000CC 0A                    4059 	.db 0x0A
      0000CD 00                    4060 	.db 0x00
      0000CE                       4061 ___str_8:
      0000CE 6F 76 65 72 73 69 7A  4062 	.ascii "oversized tdm packet"
             65 64 20 74 64 6D 20
             70 61 63 6B 65 74
      0000E2 00                    4063 	.db 0x00
      0000E3                       4064 ___str_9:
      0000E3 73 69 6C 65 6E 63 65  4065 	.ascii "silence_period: %u"
             5F 70 65 72 69 6F 64
             3A 20 25 75
      0000F5 0A                    4066 	.db 0x0A
      0000F6 00                    4067 	.db 0x00
      0000F7                       4068 ___str_10:
      0000F7 74 78 5F 77 69 6E 64  4069 	.ascii "tx_window_width: %u"
             6F 77 5F 77 69 64 74
             68 3A 20 25 75
      00010A 0A                    4070 	.db 0x0A
      00010B 00                    4071 	.db 0x00
      00010C                       4072 ___str_11:
      00010C 6D 61 78 5F 64 61 74  4073 	.ascii "max_data_packet_length: %u"
             61 5F 70 61 63 6B 65
             74 5F 6C 65 6E 67 74
             68 3A 20 25 75
      000126 0A                    4074 	.db 0x0A
      000127 00                    4075 	.db 0x00
                                   4076 	.area XINIT   (CODE)
                                   4077 	.area CABS    (ABS,CODE)
