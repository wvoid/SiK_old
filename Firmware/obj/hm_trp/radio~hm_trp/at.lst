                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Sep  7 2022) (Linux)
                                      4 ; This file was generated Wed Sep  7 10:05:12 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module at
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _tdm_show_rssi
                                     13 	.globl _tdm_change_phase
                                     14 	.globl _tdm_remote_at
                                     15 	.globl _tdm_report_timing
                                     16 	.globl _printfl
                                     17 	.globl _param_default
                                     18 	.globl _param_save
                                     19 	.globl _param_name
                                     20 	.globl _param_get
                                     21 	.globl _param_set
                                     22 	.globl _strcmp
                                     23 	.globl _putchar
                                     24 	.globl _isdigit
                                     25 	.globl _toupper
                                     26 	.globl _isprint
                                     27 	.globl _SDN
                                     28 	.globl _NSS1
                                     29 	.globl _IRQ
                                     30 	.globl _PIN_ENABLE
                                     31 	.globl _PIN_CONFIG
                                     32 	.globl _LED_GREEN
                                     33 	.globl _LED_RED
                                     34 	.globl _SPI0EN
                                     35 	.globl _TXBMT0
                                     36 	.globl _NSS0MD0
                                     37 	.globl _NSS0MD1
                                     38 	.globl _RXOVRN0
                                     39 	.globl _MODF0
                                     40 	.globl _WCOL0
                                     41 	.globl _SPIF0
                                     42 	.globl _AD0CM0
                                     43 	.globl _AD0CM1
                                     44 	.globl _AD0CM2
                                     45 	.globl _AD0WINT
                                     46 	.globl _AD0BUSY
                                     47 	.globl _AD0INT
                                     48 	.globl _BURSTEN
                                     49 	.globl _AD0EN
                                     50 	.globl _CCF0
                                     51 	.globl _CCF1
                                     52 	.globl _CCF2
                                     53 	.globl _CCF3
                                     54 	.globl _CCF4
                                     55 	.globl _CCF5
                                     56 	.globl _CR
                                     57 	.globl _CF
                                     58 	.globl _P
                                     59 	.globl _F1
                                     60 	.globl _OV
                                     61 	.globl _RS0
                                     62 	.globl _RS1
                                     63 	.globl _F0
                                     64 	.globl _AC
                                     65 	.globl _CY
                                     66 	.globl _T2XCLK
                                     67 	.globl _T2RCLK
                                     68 	.globl _TR2
                                     69 	.globl _T2SPLIT
                                     70 	.globl _TF2CEN
                                     71 	.globl _TF2LEN
                                     72 	.globl _TF2L
                                     73 	.globl _TF2H
                                     74 	.globl _SI
                                     75 	.globl _ACK
                                     76 	.globl _ARBLOST
                                     77 	.globl _ACKRQ
                                     78 	.globl _STO
                                     79 	.globl _STA
                                     80 	.globl _TXMODE
                                     81 	.globl _MASTER
                                     82 	.globl _PX0
                                     83 	.globl _PT0
                                     84 	.globl _PX1
                                     85 	.globl _PT1
                                     86 	.globl _PS0
                                     87 	.globl _PT2
                                     88 	.globl _PSPI0
                                     89 	.globl _SPI1EN
                                     90 	.globl _TXBMT1
                                     91 	.globl _NSS1MD0
                                     92 	.globl _NSS1MD1
                                     93 	.globl _RXOVRN1
                                     94 	.globl _MODF1
                                     95 	.globl _WCOL1
                                     96 	.globl _SPIF1
                                     97 	.globl _EX0
                                     98 	.globl _ET0
                                     99 	.globl _EX1
                                    100 	.globl _ET1
                                    101 	.globl _ES0
                                    102 	.globl _ET2
                                    103 	.globl _ESPI0
                                    104 	.globl _EA
                                    105 	.globl _RI0
                                    106 	.globl _TI0
                                    107 	.globl _RB80
                                    108 	.globl _TB80
                                    109 	.globl _REN0
                                    110 	.globl _MCE0
                                    111 	.globl _S0MODE
                                    112 	.globl _CRC0VAL
                                    113 	.globl _CRC0INIT
                                    114 	.globl _CRC0SEL
                                    115 	.globl _IT0
                                    116 	.globl _IE0
                                    117 	.globl _IT1
                                    118 	.globl _IE1
                                    119 	.globl _TR0
                                    120 	.globl _TF0
                                    121 	.globl _TR1
                                    122 	.globl _TF1
                                    123 	.globl _PCA0CP4
                                    124 	.globl _PCA0CP0
                                    125 	.globl _PCA0
                                    126 	.globl _PCA0CP3
                                    127 	.globl _PCA0CP2
                                    128 	.globl _PCA0CP1
                                    129 	.globl _PCA0CP5
                                    130 	.globl _TMR2
                                    131 	.globl _TMR2RL
                                    132 	.globl _ADC0LT
                                    133 	.globl _ADC0GT
                                    134 	.globl _ADC0
                                    135 	.globl _TMR3
                                    136 	.globl _TMR3RL
                                    137 	.globl _TOFF
                                    138 	.globl _DP
                                    139 	.globl _VDM0CN
                                    140 	.globl _PCA0CPH4
                                    141 	.globl _PCA0CPL4
                                    142 	.globl _PCA0CPH0
                                    143 	.globl _PCA0CPL0
                                    144 	.globl _PCA0H
                                    145 	.globl _PCA0L
                                    146 	.globl _SPI0CN
                                    147 	.globl _EIP2
                                    148 	.globl _EIP1
                                    149 	.globl _SMB0ADM
                                    150 	.globl _SMB0ADR
                                    151 	.globl _P2MDIN
                                    152 	.globl _P1MDIN
                                    153 	.globl _P0MDIN
                                    154 	.globl _B
                                    155 	.globl _RSTSRC
                                    156 	.globl _PCA0CPH3
                                    157 	.globl _PCA0CPL3
                                    158 	.globl _PCA0CPH2
                                    159 	.globl _PCA0CPL2
                                    160 	.globl _PCA0CPH1
                                    161 	.globl _PCA0CPL1
                                    162 	.globl _ADC0CN
                                    163 	.globl _EIE2
                                    164 	.globl _EIE1
                                    165 	.globl _FLWR
                                    166 	.globl _IT01CF
                                    167 	.globl _XBR2
                                    168 	.globl _XBR1
                                    169 	.globl _XBR0
                                    170 	.globl _ACC
                                    171 	.globl _PCA0PWM
                                    172 	.globl _PCA0CPM4
                                    173 	.globl _PCA0CPM3
                                    174 	.globl _PCA0CPM2
                                    175 	.globl _PCA0CPM1
                                    176 	.globl _PCA0CPM0
                                    177 	.globl _PCA0MD
                                    178 	.globl _PCA0CN
                                    179 	.globl _P0MAT
                                    180 	.globl _P2SKIP
                                    181 	.globl _P1SKIP
                                    182 	.globl _P0SKIP
                                    183 	.globl _PCA0CPH5
                                    184 	.globl _PCA0CPL5
                                    185 	.globl _REF0CN
                                    186 	.globl _PSW
                                    187 	.globl _P1MAT
                                    188 	.globl _PCA0CPM5
                                    189 	.globl _TMR2H
                                    190 	.globl _TMR2L
                                    191 	.globl _TMR2RLH
                                    192 	.globl _TMR2RLL
                                    193 	.globl _REG0CN
                                    194 	.globl _TMR2CN
                                    195 	.globl _P0MASK
                                    196 	.globl _ADC0LTH
                                    197 	.globl _ADC0LTL
                                    198 	.globl _ADC0GTH
                                    199 	.globl _ADC0GTL
                                    200 	.globl _SMB0DAT
                                    201 	.globl _SMB0CF
                                    202 	.globl _SMB0CN
                                    203 	.globl _P1MASK
                                    204 	.globl _ADC0H
                                    205 	.globl _ADC0L
                                    206 	.globl _ADC0TK
                                    207 	.globl _ADC0CF
                                    208 	.globl _ADC0MX
                                    209 	.globl _ADC0PWR
                                    210 	.globl _ADC0AC
                                    211 	.globl _IREF0CN
                                    212 	.globl _IP
                                    213 	.globl _FLKEY
                                    214 	.globl _FLSCL
                                    215 	.globl _PMU0CF
                                    216 	.globl _OSCICL
                                    217 	.globl _OSCICN
                                    218 	.globl _OSCXCN
                                    219 	.globl _SPI1CN
                                    220 	.globl _ONESHOT
                                    221 	.globl _EMI0TC
                                    222 	.globl _RTC0KEY
                                    223 	.globl _RTC0DAT
                                    224 	.globl _RTC0ADR
                                    225 	.globl _EMI0CF
                                    226 	.globl _EMI0CN
                                    227 	.globl _CLKSEL
                                    228 	.globl _IE
                                    229 	.globl _SFRPAGE
                                    230 	.globl _P2DRV
                                    231 	.globl _P2MDOUT
                                    232 	.globl _P1DRV
                                    233 	.globl _P1MDOUT
                                    234 	.globl _P0DRV
                                    235 	.globl _P0MDOUT
                                    236 	.globl _SPI0DAT
                                    237 	.globl _SPI0CKR
                                    238 	.globl _SPI0CFG
                                    239 	.globl _P2
                                    240 	.globl _CPT0MX
                                    241 	.globl _CPT1MX
                                    242 	.globl _CPT0MD
                                    243 	.globl _CPT1MD
                                    244 	.globl _CPT0CN
                                    245 	.globl _CPT1CN
                                    246 	.globl _SBUF0
                                    247 	.globl _SCON0
                                    248 	.globl _CRC0CNT
                                    249 	.globl _DC0CN
                                    250 	.globl _CRC0AUTO
                                    251 	.globl _DC0CF
                                    252 	.globl _TMR3H
                                    253 	.globl _CRC0FLIP
                                    254 	.globl _TMR3L
                                    255 	.globl _CRC0IN
                                    256 	.globl _TMR3RLH
                                    257 	.globl _CRC0CN
                                    258 	.globl _TMR3RLL
                                    259 	.globl _CRC0DAT
                                    260 	.globl _TMR3CN
                                    261 	.globl _P1
                                    262 	.globl _PSCTL
                                    263 	.globl _CKCON
                                    264 	.globl _TH1
                                    265 	.globl _TH0
                                    266 	.globl _TL1
                                    267 	.globl _TL0
                                    268 	.globl _TMOD
                                    269 	.globl _TCON
                                    270 	.globl _PCON
                                    271 	.globl _TOFFH
                                    272 	.globl _SPI1DAT
                                    273 	.globl _TOFFL
                                    274 	.globl _SPI1CKR
                                    275 	.globl _SPI1CFG
                                    276 	.globl _DPH
                                    277 	.globl _DPL
                                    278 	.globl _SP
                                    279 	.globl _P0
                                    280 	.globl _at_num
                                    281 	.globl _idx
                                    282 	.globl _at_cmd
                                    283 	.globl _at_testmode
                                    284 	.globl _at_cmd_len
                                    285 	.globl _pdata_canary
                                    286 	.globl _at_cmd_ready
                                    287 	.globl _at_mode_active
                                    288 	.globl _at_input
                                    289 	.globl _at_plus_detector
                                    290 	.globl _at_timer
                                    291 	.globl _at_command
                                    292 ;--------------------------------------------------------
                                    293 ; special function registers
                                    294 ;--------------------------------------------------------
                                    295 	.area RSEG    (ABS,DATA)
      000000                        296 	.org 0x0000
                           000080   297 _P0	=	0x0080
                           000081   298 _SP	=	0x0081
                           000082   299 _DPL	=	0x0082
                           000083   300 _DPH	=	0x0083
                           000084   301 _SPI1CFG	=	0x0084
                           000085   302 _SPI1CKR	=	0x0085
                           000085   303 _TOFFL	=	0x0085
                           000086   304 _SPI1DAT	=	0x0086
                           000086   305 _TOFFH	=	0x0086
                           000087   306 _PCON	=	0x0087
                           000088   307 _TCON	=	0x0088
                           000089   308 _TMOD	=	0x0089
                           00008A   309 _TL0	=	0x008a
                           00008B   310 _TL1	=	0x008b
                           00008C   311 _TH0	=	0x008c
                           00008D   312 _TH1	=	0x008d
                           00008E   313 _CKCON	=	0x008e
                           00008F   314 _PSCTL	=	0x008f
                           000090   315 _P1	=	0x0090
                           000091   316 _TMR3CN	=	0x0091
                           000091   317 _CRC0DAT	=	0x0091
                           000092   318 _TMR3RLL	=	0x0092
                           000092   319 _CRC0CN	=	0x0092
                           000093   320 _TMR3RLH	=	0x0093
                           000093   321 _CRC0IN	=	0x0093
                           000094   322 _TMR3L	=	0x0094
                           000095   323 _CRC0FLIP	=	0x0095
                           000095   324 _TMR3H	=	0x0095
                           000096   325 _DC0CF	=	0x0096
                           000096   326 _CRC0AUTO	=	0x0096
                           000097   327 _DC0CN	=	0x0097
                           000097   328 _CRC0CNT	=	0x0097
                           000098   329 _SCON0	=	0x0098
                           000099   330 _SBUF0	=	0x0099
                           00009A   331 _CPT1CN	=	0x009a
                           00009B   332 _CPT0CN	=	0x009b
                           00009C   333 _CPT1MD	=	0x009c
                           00009D   334 _CPT0MD	=	0x009d
                           00009E   335 _CPT1MX	=	0x009e
                           00009F   336 _CPT0MX	=	0x009f
                           0000A0   337 _P2	=	0x00a0
                           0000A1   338 _SPI0CFG	=	0x00a1
                           0000A2   339 _SPI0CKR	=	0x00a2
                           0000A3   340 _SPI0DAT	=	0x00a3
                           0000A4   341 _P0MDOUT	=	0x00a4
                           0000A4   342 _P0DRV	=	0x00a4
                           0000A5   343 _P1MDOUT	=	0x00a5
                           0000A5   344 _P1DRV	=	0x00a5
                           0000A6   345 _P2MDOUT	=	0x00a6
                           0000A6   346 _P2DRV	=	0x00a6
                           0000A7   347 _SFRPAGE	=	0x00a7
                           0000A8   348 _IE	=	0x00a8
                           0000A9   349 _CLKSEL	=	0x00a9
                           0000AA   350 _EMI0CN	=	0x00aa
                           0000AB   351 _EMI0CF	=	0x00ab
                           0000AC   352 _RTC0ADR	=	0x00ac
                           0000AD   353 _RTC0DAT	=	0x00ad
                           0000AE   354 _RTC0KEY	=	0x00ae
                           0000AF   355 _EMI0TC	=	0x00af
                           0000AF   356 _ONESHOT	=	0x00af
                           0000B0   357 _SPI1CN	=	0x00b0
                           0000B1   358 _OSCXCN	=	0x00b1
                           0000B2   359 _OSCICN	=	0x00b2
                           0000B3   360 _OSCICL	=	0x00b3
                           0000B5   361 _PMU0CF	=	0x00b5
                           0000B6   362 _FLSCL	=	0x00b6
                           0000B7   363 _FLKEY	=	0x00b7
                           0000B8   364 _IP	=	0x00b8
                           0000B9   365 _IREF0CN	=	0x00b9
                           0000BA   366 _ADC0AC	=	0x00ba
                           0000BA   367 _ADC0PWR	=	0x00ba
                           0000BB   368 _ADC0MX	=	0x00bb
                           0000BC   369 _ADC0CF	=	0x00bc
                           0000BD   370 _ADC0TK	=	0x00bd
                           0000BD   371 _ADC0L	=	0x00bd
                           0000BE   372 _ADC0H	=	0x00be
                           0000BF   373 _P1MASK	=	0x00bf
                           0000C0   374 _SMB0CN	=	0x00c0
                           0000C1   375 _SMB0CF	=	0x00c1
                           0000C2   376 _SMB0DAT	=	0x00c2
                           0000C3   377 _ADC0GTL	=	0x00c3
                           0000C4   378 _ADC0GTH	=	0x00c4
                           0000C5   379 _ADC0LTL	=	0x00c5
                           0000C6   380 _ADC0LTH	=	0x00c6
                           0000C7   381 _P0MASK	=	0x00c7
                           0000C8   382 _TMR2CN	=	0x00c8
                           0000C9   383 _REG0CN	=	0x00c9
                           0000CA   384 _TMR2RLL	=	0x00ca
                           0000CB   385 _TMR2RLH	=	0x00cb
                           0000CC   386 _TMR2L	=	0x00cc
                           0000CD   387 _TMR2H	=	0x00cd
                           0000CE   388 _PCA0CPM5	=	0x00ce
                           0000CF   389 _P1MAT	=	0x00cf
                           0000D0   390 _PSW	=	0x00d0
                           0000D1   391 _REF0CN	=	0x00d1
                           0000D2   392 _PCA0CPL5	=	0x00d2
                           0000D3   393 _PCA0CPH5	=	0x00d3
                           0000D4   394 _P0SKIP	=	0x00d4
                           0000D5   395 _P1SKIP	=	0x00d5
                           0000D6   396 _P2SKIP	=	0x00d6
                           0000D7   397 _P0MAT	=	0x00d7
                           0000D8   398 _PCA0CN	=	0x00d8
                           0000D9   399 _PCA0MD	=	0x00d9
                           0000DA   400 _PCA0CPM0	=	0x00da
                           0000DB   401 _PCA0CPM1	=	0x00db
                           0000DC   402 _PCA0CPM2	=	0x00dc
                           0000DD   403 _PCA0CPM3	=	0x00dd
                           0000DE   404 _PCA0CPM4	=	0x00de
                           0000DF   405 _PCA0PWM	=	0x00df
                           0000E0   406 _ACC	=	0x00e0
                           0000E1   407 _XBR0	=	0x00e1
                           0000E2   408 _XBR1	=	0x00e2
                           0000E3   409 _XBR2	=	0x00e3
                           0000E4   410 _IT01CF	=	0x00e4
                           0000E5   411 _FLWR	=	0x00e5
                           0000E6   412 _EIE1	=	0x00e6
                           0000E7   413 _EIE2	=	0x00e7
                           0000E8   414 _ADC0CN	=	0x00e8
                           0000E9   415 _PCA0CPL1	=	0x00e9
                           0000EA   416 _PCA0CPH1	=	0x00ea
                           0000EB   417 _PCA0CPL2	=	0x00eb
                           0000EC   418 _PCA0CPH2	=	0x00ec
                           0000ED   419 _PCA0CPL3	=	0x00ed
                           0000EE   420 _PCA0CPH3	=	0x00ee
                           0000EF   421 _RSTSRC	=	0x00ef
                           0000F0   422 _B	=	0x00f0
                           0000F1   423 _P0MDIN	=	0x00f1
                           0000F2   424 _P1MDIN	=	0x00f2
                           0000F3   425 _P2MDIN	=	0x00f3
                           0000F4   426 _SMB0ADR	=	0x00f4
                           0000F5   427 _SMB0ADM	=	0x00f5
                           0000F6   428 _EIP1	=	0x00f6
                           0000F7   429 _EIP2	=	0x00f7
                           0000F8   430 _SPI0CN	=	0x00f8
                           0000F9   431 _PCA0L	=	0x00f9
                           0000FA   432 _PCA0H	=	0x00fa
                           0000FB   433 _PCA0CPL0	=	0x00fb
                           0000FC   434 _PCA0CPH0	=	0x00fc
                           0000FD   435 _PCA0CPL4	=	0x00fd
                           0000FE   436 _PCA0CPH4	=	0x00fe
                           0000FF   437 _VDM0CN	=	0x00ff
                           008382   438 _DP	=	0x8382
                           008685   439 _TOFF	=	0x8685
                           009392   440 _TMR3RL	=	0x9392
                           009594   441 _TMR3	=	0x9594
                           00BEBD   442 _ADC0	=	0xbebd
                           00C4C3   443 _ADC0GT	=	0xc4c3
                           00C6C5   444 _ADC0LT	=	0xc6c5
                           00CBCA   445 _TMR2RL	=	0xcbca
                           00CDCC   446 _TMR2	=	0xcdcc
                           00D3D2   447 _PCA0CP5	=	0xd3d2
                           00EAE9   448 _PCA0CP1	=	0xeae9
                           00ECEB   449 _PCA0CP2	=	0xeceb
                           00EEED   450 _PCA0CP3	=	0xeeed
                           00FAF9   451 _PCA0	=	0xfaf9
                           00FCFB   452 _PCA0CP0	=	0xfcfb
                           00FEFD   453 _PCA0CP4	=	0xfefd
                                    454 ;--------------------------------------------------------
                                    455 ; special function bits
                                    456 ;--------------------------------------------------------
                                    457 	.area RSEG    (ABS,DATA)
      000000                        458 	.org 0x0000
                           00008F   459 _TF1	=	0x008f
                           00008E   460 _TR1	=	0x008e
                           00008D   461 _TF0	=	0x008d
                           00008C   462 _TR0	=	0x008c
                           00008B   463 _IE1	=	0x008b
                           00008A   464 _IT1	=	0x008a
                           000089   465 _IE0	=	0x0089
                           000088   466 _IT0	=	0x0088
                           000096   467 _CRC0SEL	=	0x0096
                           000095   468 _CRC0INIT	=	0x0095
                           000094   469 _CRC0VAL	=	0x0094
                           00009F   470 _S0MODE	=	0x009f
                           00009D   471 _MCE0	=	0x009d
                           00009C   472 _REN0	=	0x009c
                           00009B   473 _TB80	=	0x009b
                           00009A   474 _RB80	=	0x009a
                           000099   475 _TI0	=	0x0099
                           000098   476 _RI0	=	0x0098
                           0000AF   477 _EA	=	0x00af
                           0000AE   478 _ESPI0	=	0x00ae
                           0000AD   479 _ET2	=	0x00ad
                           0000AC   480 _ES0	=	0x00ac
                           0000AB   481 _ET1	=	0x00ab
                           0000AA   482 _EX1	=	0x00aa
                           0000A9   483 _ET0	=	0x00a9
                           0000A8   484 _EX0	=	0x00a8
                           0000B7   485 _SPIF1	=	0x00b7
                           0000B6   486 _WCOL1	=	0x00b6
                           0000B5   487 _MODF1	=	0x00b5
                           0000B4   488 _RXOVRN1	=	0x00b4
                           0000B3   489 _NSS1MD1	=	0x00b3
                           0000B2   490 _NSS1MD0	=	0x00b2
                           0000B1   491 _TXBMT1	=	0x00b1
                           0000B0   492 _SPI1EN	=	0x00b0
                           0000BE   493 _PSPI0	=	0x00be
                           0000BD   494 _PT2	=	0x00bd
                           0000BC   495 _PS0	=	0x00bc
                           0000BB   496 _PT1	=	0x00bb
                           0000BA   497 _PX1	=	0x00ba
                           0000B9   498 _PT0	=	0x00b9
                           0000B8   499 _PX0	=	0x00b8
                           0000C7   500 _MASTER	=	0x00c7
                           0000C6   501 _TXMODE	=	0x00c6
                           0000C5   502 _STA	=	0x00c5
                           0000C4   503 _STO	=	0x00c4
                           0000C3   504 _ACKRQ	=	0x00c3
                           0000C2   505 _ARBLOST	=	0x00c2
                           0000C1   506 _ACK	=	0x00c1
                           0000C0   507 _SI	=	0x00c0
                           0000CF   508 _TF2H	=	0x00cf
                           0000CE   509 _TF2L	=	0x00ce
                           0000CD   510 _TF2LEN	=	0x00cd
                           0000CC   511 _TF2CEN	=	0x00cc
                           0000CB   512 _T2SPLIT	=	0x00cb
                           0000CA   513 _TR2	=	0x00ca
                           0000C9   514 _T2RCLK	=	0x00c9
                           0000C8   515 _T2XCLK	=	0x00c8
                           0000D7   516 _CY	=	0x00d7
                           0000D6   517 _AC	=	0x00d6
                           0000D5   518 _F0	=	0x00d5
                           0000D4   519 _RS1	=	0x00d4
                           0000D3   520 _RS0	=	0x00d3
                           0000D2   521 _OV	=	0x00d2
                           0000D1   522 _F1	=	0x00d1
                           0000D0   523 _P	=	0x00d0
                           0000DF   524 _CF	=	0x00df
                           0000DE   525 _CR	=	0x00de
                           0000DD   526 _CCF5	=	0x00dd
                           0000DC   527 _CCF4	=	0x00dc
                           0000DB   528 _CCF3	=	0x00db
                           0000DA   529 _CCF2	=	0x00da
                           0000D9   530 _CCF1	=	0x00d9
                           0000D8   531 _CCF0	=	0x00d8
                           0000EF   532 _AD0EN	=	0x00ef
                           0000EE   533 _BURSTEN	=	0x00ee
                           0000ED   534 _AD0INT	=	0x00ed
                           0000EC   535 _AD0BUSY	=	0x00ec
                           0000EB   536 _AD0WINT	=	0x00eb
                           0000EA   537 _AD0CM2	=	0x00ea
                           0000E9   538 _AD0CM1	=	0x00e9
                           0000E8   539 _AD0CM0	=	0x00e8
                           0000FF   540 _SPIF0	=	0x00ff
                           0000FE   541 _WCOL0	=	0x00fe
                           0000FD   542 _MODF0	=	0x00fd
                           0000FC   543 _RXOVRN0	=	0x00fc
                           0000FB   544 _NSS0MD1	=	0x00fb
                           0000FA   545 _NSS0MD0	=	0x00fa
                           0000F9   546 _TXBMT0	=	0x00f9
                           0000F8   547 _SPI0EN	=	0x00f8
                           000096   548 _LED_RED	=	0x0096
                           000095   549 _LED_GREEN	=	0x0095
                           000082   550 _PIN_CONFIG	=	0x0082
                           000083   551 _PIN_ENABLE	=	0x0083
                           000087   552 _IRQ	=	0x0087
                           000094   553 _NSS1	=	0x0094
                           0000A6   554 _SDN	=	0x00a6
                                    555 ;--------------------------------------------------------
                                    556 ; overlayable register banks
                                    557 ;--------------------------------------------------------
                                    558 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        559 	.ds 8
                                    560 ;--------------------------------------------------------
                                    561 ; internal ram data
                                    562 ;--------------------------------------------------------
                                    563 	.area DSEG    (DATA)
      000000                        564 _print_ID_vals_id_1_166:
      000000                        565 	.ds 1
      000001                        566 _print_ID_vals_sloc0_1_0:
      000001                        567 	.ds 1
      000002                        568 _print_ID_vals_sloc1_1_0:
      000002                        569 	.ds 3
                                    570 ;--------------------------------------------------------
                                    571 ; overlayable items in internal ram 
                                    572 ;--------------------------------------------------------
                                    573 ;--------------------------------------------------------
                                    574 ; indirectly addressable internal ram data
                                    575 ;--------------------------------------------------------
                                    576 	.area ISEG    (DATA)
                                    577 ;--------------------------------------------------------
                                    578 ; absolute internal ram data
                                    579 ;--------------------------------------------------------
                                    580 	.area IABS    (ABS,DATA)
                                    581 	.area IABS    (ABS,DATA)
                                    582 ;--------------------------------------------------------
                                    583 ; bit data
                                    584 ;--------------------------------------------------------
                                    585 	.area BSEG    (BIT)
      000000                        586 _at_mode_active::
      000000                        587 	.ds 1
      000001                        588 _at_cmd_ready::
      000001                        589 	.ds 1
                                    590 ;--------------------------------------------------------
                                    591 ; paged external ram data
                                    592 ;--------------------------------------------------------
                                    593 	.area PSEG    (PAG,XDATA)
      000000                        594 _pdata_canary::
      000000                        595 	.ds 1
      000001                        596 _at_cmd_len::
      000001                        597 	.ds 1
      000002                        598 _at_testmode::
      000002                        599 	.ds 1
      000003                        600 _at_plus_state:
      000003                        601 	.ds 1
      000004                        602 _at_plus_counter:
      000004                        603 	.ds 1
                                    604 ;--------------------------------------------------------
                                    605 ; external ram data
                                    606 ;--------------------------------------------------------
                                    607 	.area XSEG    (XDATA)
      000000                        608 _at_cmd::
      000000                        609 	.ds 17
      000011                        610 _idx::
      000011                        611 	.ds 1
      000012                        612 _at_num::
      000012                        613 	.ds 4
      000016                        614 _print_ID_vals_PARM_2:
      000016                        615 	.ds 1
      000017                        616 _print_ID_vals_PARM_3:
      000017                        617 	.ds 2
      000019                        618 _print_ID_vals_PARM_4:
      000019                        619 	.ds 2
      00001B                        620 _print_ID_vals_param_1_163:
      00001B                        621 	.ds 1
                                    622 ;--------------------------------------------------------
                                    623 ; absolute external ram data
                                    624 ;--------------------------------------------------------
                                    625 	.area XABS    (ABS,XDATA)
                                    626 ;--------------------------------------------------------
                                    627 ; external initialized ram data
                                    628 ;--------------------------------------------------------
                                    629 	.area XISEG   (XDATA)
                                    630 	.area HOME    (CODE)
                                    631 	.area GSINIT0 (CODE)
                                    632 	.area GSINIT1 (CODE)
                                    633 	.area GSINIT2 (CODE)
                                    634 	.area GSINIT3 (CODE)
                                    635 	.area GSINIT4 (CODE)
                                    636 	.area GSINIT5 (CODE)
                                    637 	.area GSINIT  (CODE)
                                    638 	.area GSFINAL (CODE)
                                    639 	.area CSEG    (CODE)
                                    640 ;--------------------------------------------------------
                                    641 ; global & static initialisations
                                    642 ;--------------------------------------------------------
                                    643 	.area HOME    (CODE)
                                    644 	.area GSINIT  (CODE)
                                    645 	.area GSFINAL (CODE)
                                    646 	.area GSINIT  (CODE)
                                    647 ;	radio/at.c:48: __pdata uint8_t pdata_canary = 0x41;
      000000 78r00            [12]  648 	mov	r0,#_pdata_canary
      000002 74 41            [12]  649 	mov	a,#0x41
      000004 F2               [24]  650 	movx	@r0,a
                                    651 ;	radio/at.c:140: static __pdata uint8_t	at_plus_counter = ATP_COUNT_1S;
      000005 78r04            [12]  652 	mov	r0,#_at_plus_counter
      000007 74 64            [12]  653 	mov	a,#0x64
      000009 F2               [24]  654 	movx	@r0,a
                                    655 ;--------------------------------------------------------
                                    656 ; Home
                                    657 ;--------------------------------------------------------
                                    658 	.area HOME    (CODE)
                                    659 	.area HOME    (CODE)
                                    660 ;--------------------------------------------------------
                                    661 ; code
                                    662 ;--------------------------------------------------------
                                    663 	.area CSEG    (CODE)
                                    664 ;------------------------------------------------------------
                                    665 ;Allocation info for local variables in function 'at_input'
                                    666 ;------------------------------------------------------------
                                    667 ;c                         Allocated to registers r7 
                                    668 ;------------------------------------------------------------
                                    669 ;	radio/at.c:73: at_input(register uint8_t c)
                                    670 ;	-----------------------------------------
                                    671 ;	 function at_input
                                    672 ;	-----------------------------------------
      000000                        673 _at_input:
                           000007   674 	ar7 = 0x07
                           000006   675 	ar6 = 0x06
                           000005   676 	ar5 = 0x05
                           000004   677 	ar4 = 0x04
                           000003   678 	ar3 = 0x03
                           000002   679 	ar2 = 0x02
                           000001   680 	ar1 = 0x01
                           000000   681 	ar0 = 0x00
      000000 AF 82            [24]  682 	mov	r7,dpl
                                    683 ;	radio/at.c:76: switch (c) {
      000002 8F 06            [24]  684 	mov	ar6,r7
      000004 BE 08 02         [24]  685 	cjne	r6,#0x08,00132$
      000007 80 21            [24]  686 	sjmp	00103$
      000009                        687 00132$:
      000009 BE 0D 02         [24]  688 	cjne	r6,#0x0D,00133$
      00000C 80 05            [24]  689 	sjmp	00101$
      00000E                        690 00133$:
                                    691 ;	radio/at.c:78: case '\r':
      00000E BE 7F 36         [24]  692 	cjne	r6,#0x7F,00106$
      000011 80 17            [24]  693 	sjmp	00103$
      000013                        694 00101$:
                                    695 ;	radio/at.c:79: putchar('\n');
      000013 75 82 0A         [24]  696 	mov	dpl,#0x0A
      000016 12r00r00         [24]  697 	lcall	_putchar
                                    698 ;	radio/at.c:80: at_cmd[at_cmd_len] = 0;
      000019 78r01            [12]  699 	mov	r0,#_at_cmd_len
      00001B E2               [24]  700 	movx	a,@r0
      00001C 24r00            [12]  701 	add	a,#_at_cmd
      00001E F5 82            [12]  702 	mov	dpl,a
      000020 E4               [12]  703 	clr	a
      000021 34s00            [12]  704 	addc	a,#(_at_cmd >> 8)
      000023 F5 83            [12]  705 	mov	dph,a
      000025 E4               [12]  706 	clr	a
      000026 F0               [24]  707 	movx	@dptr,a
                                    708 ;	radio/at.c:81: at_cmd_ready = true;
      000027 D2*01            [12]  709 	setb	_at_cmd_ready
                                    710 ;	radio/at.c:82: break;
                                    711 ;	radio/at.c:87: case '\x7f':
      000029 22               [24]  712 	ret
      00002A                        713 00103$:
                                    714 ;	radio/at.c:88: if (at_cmd_len > 0) {
      00002A 78r01            [12]  715 	mov	r0,#_at_cmd_len
      00002C E2               [24]  716 	movx	a,@r0
      00002D 60 66            [24]  717 	jz	00112$
                                    718 ;	radio/at.c:89: putchar('\b');
      00002F 75 82 08         [24]  719 	mov	dpl,#0x08
      000032 12r00r00         [24]  720 	lcall	_putchar
                                    721 ;	radio/at.c:90: putchar(' ');
      000035 75 82 20         [24]  722 	mov	dpl,#0x20
      000038 12r00r00         [24]  723 	lcall	_putchar
                                    724 ;	radio/at.c:91: putchar('\b');
      00003B 75 82 08         [24]  725 	mov	dpl,#0x08
      00003E 12r00r00         [24]  726 	lcall	_putchar
                                    727 ;	radio/at.c:92: at_cmd_len--;
      000041 78r01            [12]  728 	mov	r0,#_at_cmd_len
      000043 E2               [24]  729 	movx	a,@r0
      000044 14               [12]  730 	dec	a
      000045 F2               [24]  731 	movx	@r0,a
                                    732 ;	radio/at.c:94: break;
                                    733 ;	radio/at.c:97: default:
      000046 22               [24]  734 	ret
      000047                        735 00106$:
                                    736 ;	radio/at.c:98: if (at_cmd_len < AT_CMD_MAXLEN) {
      000047 78r01            [12]  737 	mov	r0,#_at_cmd_len
      000049 E2               [24]  738 	movx	a,@r0
      00004A B4 10 00         [24]  739 	cjne	a,#0x10,00136$
      00004D                        740 00136$:
      00004D 50 40            [24]  741 	jnc	00110$
                                    742 ;	radio/at.c:99: if (isprint(c)) {
      00004F 8F 05            [24]  743 	mov	ar5,r7
      000051 7E 00            [12]  744 	mov	r6,#0x00
      000053 8D 82            [24]  745 	mov	dpl,r5
      000055 8E 83            [24]  746 	mov	dph,r6
      000057 C0 06            [24]  747 	push	ar6
      000059 C0 05            [24]  748 	push	ar5
      00005B 12r00r00         [24]  749 	lcall	_isprint
      00005E E5 82            [12]  750 	mov	a,dpl
      000060 85 83 F0         [24]  751 	mov	b,dph
      000063 D0 05            [24]  752 	pop	ar5
      000065 D0 06            [24]  753 	pop	ar6
      000067 45 F0            [12]  754 	orl	a,b
      000069 60 2A            [24]  755 	jz	00112$
                                    756 ;	radio/at.c:100: c = toupper(c);
      00006B 8D 82            [24]  757 	mov	dpl,r5
      00006D 8E 83            [24]  758 	mov	dph,r6
      00006F 12r00r00         [24]  759 	lcall	_toupper
      000072 AD 82            [24]  760 	mov	r5,dpl
      000074 8D 07            [24]  761 	mov	ar7,r5
                                    762 ;	radio/at.c:101: at_cmd[at_cmd_len++] = c;
      000076 78r01            [12]  763 	mov	r0,#_at_cmd_len
      000078 E2               [24]  764 	movx	a,@r0
      000079 FE               [12]  765 	mov	r6,a
      00007A 78r01            [12]  766 	mov	r0,#_at_cmd_len
      00007C 04               [12]  767 	inc	a
      00007D F2               [24]  768 	movx	@r0,a
      00007E EE               [12]  769 	mov	a,r6
      00007F 24r00            [12]  770 	add	a,#_at_cmd
      000081 F5 82            [12]  771 	mov	dpl,a
      000083 E4               [12]  772 	clr	a
      000084 34s00            [12]  773 	addc	a,#(_at_cmd >> 8)
      000086 F5 83            [12]  774 	mov	dph,a
      000088 EF               [12]  775 	mov	a,r7
      000089 F0               [24]  776 	movx	@dptr,a
                                    777 ;	radio/at.c:102: putchar(c);
      00008A 8F 82            [24]  778 	mov	dpl,r7
                                    779 ;	radio/at.c:104: break;
      00008C 02r00r00         [24]  780 	ljmp	_putchar
      00008F                        781 00110$:
                                    782 ;	radio/at.c:112: at_mode_active = 0;
      00008F C2*00            [12]  783 	clr	_at_mode_active
                                    784 ;	radio/at.c:113: at_cmd_len = 0;
      000091 78r01            [12]  785 	mov	r0,#_at_cmd_len
      000093 E4               [12]  786 	clr	a
      000094 F2               [24]  787 	movx	@r0,a
                                    788 ;	radio/at.c:115: }
      000095                        789 00112$:
      000095 22               [24]  790 	ret
                                    791 ;------------------------------------------------------------
                                    792 ;Allocation info for local variables in function 'at_plus_detector'
                                    793 ;------------------------------------------------------------
                                    794 ;c                         Allocated to registers r7 
                                    795 ;------------------------------------------------------------
                                    796 ;	radio/at.c:145: at_plus_detector(register uint8_t c)
                                    797 ;	-----------------------------------------
                                    798 ;	 function at_plus_detector
                                    799 ;	-----------------------------------------
      000096                        800 _at_plus_detector:
      000096 AF 82            [24]  801 	mov	r7,dpl
                                    802 ;	radio/at.c:151: if (c != (uint8_t)'+')
      000098 BF 2B 02         [24]  803 	cjne	r7,#0x2B,00118$
      00009B 80 04            [24]  804 	sjmp	00102$
      00009D                        805 00118$:
                                    806 ;	radio/at.c:152: at_plus_state = ATP_WAIT_FOR_IDLE;
      00009D 78r03            [12]  807 	mov	r0,#_at_plus_state
      00009F E4               [12]  808 	clr	a
      0000A0 F2               [24]  809 	movx	@r0,a
      0000A1                        810 00102$:
                                    811 ;	radio/at.c:156: switch (at_plus_state) {
      0000A1 78r03            [12]  812 	mov	r0,#_at_plus_state
      0000A3 C3               [12]  813 	clr	c
      0000A4 E2               [24]  814 	movx	a,@r0
      0000A5 F5 F0            [12]  815 	mov	b,a
      0000A7 74 04            [12]  816 	mov	a,#0x04
      0000A9 95 F0            [12]  817 	subb	a,b
      0000AB 40 2C            [24]  818 	jc	00106$
      0000AD 78r03            [12]  819 	mov	r0,#_at_plus_state
      0000AF E2               [24]  820 	movx	a,@r0
      0000B0 75 F0 03         [24]  821 	mov	b,#0x03
      0000B3 A4               [48]  822 	mul	ab
      0000B4 90r00rB8         [24]  823 	mov	dptr,#00120$
      0000B7 73               [24]  824 	jmp	@a+dptr
      0000B8                        825 00120$:
      0000B8 02r00rDD         [24]  826 	ljmp	00107$
      0000BB 02r00rC7         [24]  827 	ljmp	00103$
      0000BE 02r00rC7         [24]  828 	ljmp	00104$
      0000C1 02r00rCE         [24]  829 	ljmp	00105$
      0000C4 02r00rDD         [24]  830 	ljmp	00108$
                                    831 ;	radio/at.c:158: case ATP_WAIT_FOR_PLUS1:
      0000C7                        832 00103$:
                                    833 ;	radio/at.c:159: case ATP_WAIT_FOR_PLUS2:
      0000C7                        834 00104$:
                                    835 ;	radio/at.c:160: at_plus_state++;
      0000C7 78r03            [12]  836 	mov	r0,#_at_plus_state
      0000C9 E2               [24]  837 	movx	a,@r0
      0000CA 24 01            [12]  838 	add	a,#0x01
      0000CC F2               [24]  839 	movx	@r0,a
                                    840 ;	radio/at.c:161: break;
                                    841 ;	radio/at.c:163: case ATP_WAIT_FOR_PLUS3:
      0000CD 22               [24]  842 	ret
      0000CE                        843 00105$:
                                    844 ;	radio/at.c:164: at_plus_state = ATP_WAIT_FOR_ENABLE;
      0000CE 78r03            [12]  845 	mov	r0,#_at_plus_state
      0000D0 74 04            [12]  846 	mov	a,#0x04
      0000D2 F2               [24]  847 	movx	@r0,a
                                    848 ;	radio/at.c:165: at_plus_counter = ATP_COUNT_1S;
      0000D3 78r04            [12]  849 	mov	r0,#_at_plus_counter
      0000D5 74 64            [12]  850 	mov	a,#0x64
      0000D7 F2               [24]  851 	movx	@r0,a
                                    852 ;	radio/at.c:166: break;
                                    853 ;	radio/at.c:168: default:
      0000D8 22               [24]  854 	ret
      0000D9                        855 00106$:
                                    856 ;	radio/at.c:169: at_plus_state = ATP_WAIT_FOR_IDLE;
      0000D9 78r03            [12]  857 	mov	r0,#_at_plus_state
      0000DB E4               [12]  858 	clr	a
      0000DC F2               [24]  859 	movx	@r0,a
                                    860 ;	radio/at.c:171: case ATP_WAIT_FOR_IDLE:
      0000DD                        861 00107$:
                                    862 ;	radio/at.c:172: case ATP_WAIT_FOR_ENABLE:
      0000DD                        863 00108$:
                                    864 ;	radio/at.c:173: at_plus_counter = ATP_COUNT_1S;
      0000DD 78r04            [12]  865 	mov	r0,#_at_plus_counter
      0000DF 74 64            [12]  866 	mov	a,#0x64
      0000E1 F2               [24]  867 	movx	@r0,a
                                    868 ;	radio/at.c:175: }
      0000E2 22               [24]  869 	ret
                                    870 ;------------------------------------------------------------
                                    871 ;Allocation info for local variables in function 'at_timer'
                                    872 ;------------------------------------------------------------
                                    873 ;	radio/at.c:182: at_timer(void)
                                    874 ;	-----------------------------------------
                                    875 ;	 function at_timer
                                    876 ;	-----------------------------------------
      0000E3                        877 _at_timer:
                                    878 ;	radio/at.c:185: if (at_plus_counter > 0) {
      0000E3 78r04            [12]  879 	mov	r0,#_at_plus_counter
      0000E5 E2               [24]  880 	movx	a,@r0
      0000E6 60 3B            [24]  881 	jz	00109$
                                    882 ;	radio/at.c:188: if (--at_plus_counter == 0) {
      0000E8 78r04            [12]  883 	mov	r0,#_at_plus_counter
      0000EA E2               [24]  884 	movx	a,@r0
      0000EB 14               [12]  885 	dec	a
      0000EC F2               [24]  886 	movx	@r0,a
      0000ED 78r04            [12]  887 	mov	r0,#_at_plus_counter
      0000EF E2               [24]  888 	movx	a,@r0
      0000F0 70 31            [24]  889 	jnz	00109$
                                    890 ;	radio/at.c:191: switch (at_plus_state) {
      0000F2 78r03            [12]  891 	mov	r0,#_at_plus_state
      0000F4 E2               [24]  892 	movx	a,@r0
      0000F5 60 08            [24]  893 	jz	00101$
      0000F7 78r03            [12]  894 	mov	r0,#_at_plus_state
      0000F9 E2               [24]  895 	movx	a,@r0
                                    896 ;	radio/at.c:192: case ATP_WAIT_FOR_IDLE:
      0000FA B4 04 26         [24]  897 	cjne	a,#0x04,00109$
      0000FD 80 06            [24]  898 	sjmp	00102$
      0000FF                        899 00101$:
                                    900 ;	radio/at.c:193: at_plus_state = ATP_WAIT_FOR_PLUS1;
      0000FF 78r03            [12]  901 	mov	r0,#_at_plus_state
      000101 74 01            [12]  902 	mov	a,#0x01
      000103 F2               [24]  903 	movx	@r0,a
                                    904 ;	radio/at.c:194: break;
                                    905 ;	radio/at.c:196: case ATP_WAIT_FOR_ENABLE:
      000104 22               [24]  906 	ret
      000105                        907 00102$:
                                    908 ;	radio/at.c:197: at_mode_active = true;
      000105 D2*00            [12]  909 	setb	_at_mode_active
                                    910 ;	radio/at.c:198: at_plus_state = ATP_WAIT_FOR_IDLE;
      000107 78r03            [12]  911 	mov	r0,#_at_plus_state
      000109 E4               [12]  912 	clr	a
      00010A F2               [24]  913 	movx	@r0,a
                                    914 ;	radio/at.c:201: at_cmd[0] = 'A';
      00010B 90r00r00         [24]  915 	mov	dptr,#_at_cmd
      00010E 74 41            [12]  916 	mov	a,#0x41
      000110 F0               [24]  917 	movx	@dptr,a
                                    918 ;	radio/at.c:202: at_cmd[1] = 'T';
      000111 90r00r01         [24]  919 	mov	dptr,#(_at_cmd + 0x0001)
      000114 74 54            [12]  920 	mov	a,#0x54
      000116 F0               [24]  921 	movx	@dptr,a
                                    922 ;	radio/at.c:203: at_cmd[2] = '\0';
      000117 90r00r02         [24]  923 	mov	dptr,#(_at_cmd + 0x0002)
      00011A E4               [12]  924 	clr	a
      00011B F0               [24]  925 	movx	@dptr,a
                                    926 ;	radio/at.c:204: at_cmd_len = 2;
      00011C 78r01            [12]  927 	mov	r0,#_at_cmd_len
      00011E 74 02            [12]  928 	mov	a,#0x02
      000120 F2               [24]  929 	movx	@r0,a
                                    930 ;	radio/at.c:205: at_cmd_ready = true;
      000121 D2*01            [12]  931 	setb	_at_cmd_ready
                                    932 ;	radio/at.c:209: }
      000123                        933 00109$:
      000123 22               [24]  934 	ret
                                    935 ;------------------------------------------------------------
                                    936 ;Allocation info for local variables in function 'at_command'
                                    937 ;------------------------------------------------------------
                                    938 ;	radio/at.c:216: at_command(void)
                                    939 ;	-----------------------------------------
                                    940 ;	 function at_command
                                    941 ;	-----------------------------------------
      000124                        942 _at_command:
                                    943 ;	radio/at.c:219: if (at_cmd_ready) {
      000124 20*01 01         [24]  944 	jb	_at_cmd_ready,00174$
      000127 22               [24]  945 	ret
      000128                        946 00174$:
                                    947 ;	radio/at.c:220: if ((at_cmd_len >= 2) && (at_cmd[0] == 'R') && (at_cmd[1] == 'T')) {
      000128 78r01            [12]  948 	mov	r0,#_at_cmd_len
      00012A E2               [24]  949 	movx	a,@r0
      00012B B4 02 00         [24]  950 	cjne	a,#0x02,00175$
      00012E                        951 00175$:
      00012E E4               [12]  952 	clr	a
      00012F 33               [12]  953 	rlc	a
      000130 FF               [12]  954 	mov	r7,a
      000131 70 1A            [24]  955 	jnz	00102$
      000133 90r00r00         [24]  956 	mov	dptr,#_at_cmd
      000136 E0               [24]  957 	movx	a,@dptr
      000137 FE               [12]  958 	mov	r6,a
      000138 BE 52 12         [24]  959 	cjne	r6,#0x52,00102$
      00013B 90r00r01         [24]  960 	mov	dptr,#(_at_cmd + 0x0001)
      00013E E0               [24]  961 	movx	a,@dptr
      00013F FE               [12]  962 	mov	r6,a
      000140 BE 54 0A         [24]  963 	cjne	r6,#0x54,00102$
                                    964 ;	radio/at.c:223: tdm_remote_at();
      000143 12r00r00         [24]  965 	lcall	_tdm_remote_at
                                    966 ;	radio/at.c:224: at_cmd_len = 0;
      000146 78r01            [12]  967 	mov	r0,#_at_cmd_len
      000148 E4               [12]  968 	clr	a
      000149 F2               [24]  969 	movx	@r0,a
                                    970 ;	radio/at.c:225: at_cmd_ready = false;
      00014A C2*01            [12]  971 	clr	_at_cmd_ready
                                    972 ;	radio/at.c:226: return;
      00014C 22               [24]  973 	ret
      00014D                        974 00102$:
                                    975 ;	radio/at.c:229: if ((at_cmd_len >= 2) && (at_cmd[0] == 'A') && (at_cmd[1] == 'T')) {
      00014D EF               [12]  976 	mov	a,r7
      00014E 60 03            [24]  977 	jz	00181$
      000150 02r01rBC         [24]  978 	ljmp	00117$
      000153                        979 00181$:
      000153 90r00r00         [24]  980 	mov	dptr,#_at_cmd
      000156 E0               [24]  981 	movx	a,@dptr
      000157 FF               [12]  982 	mov	r7,a
      000158 BF 41 61         [24]  983 	cjne	r7,#0x41,00117$
      00015B 90r00r01         [24]  984 	mov	dptr,#(_at_cmd + 0x0001)
      00015E E0               [24]  985 	movx	a,@dptr
      00015F FF               [12]  986 	mov	r7,a
      000160 BF 54 59         [24]  987 	cjne	r7,#0x54,00117$
                                    988 ;	radio/at.c:232: switch (at_cmd[2]) {
      000163 90r00r02         [24]  989 	mov	dptr,#(_at_cmd + 0x0002)
      000166 E0               [24]  990 	movx	a,@dptr
      000167 FF               [12]  991 	mov	r7,a
      000168 60 23            [24]  992 	jz	00105$
      00016A BF 26 02         [24]  993 	cjne	r7,#0x26,00187$
      00016D 80 23            [24]  994 	sjmp	00106$
      00016F                        995 00187$:
      00016F BF 2B 02         [24]  996 	cjne	r7,#0x2B,00188$
      000172 80 23            [24]  997 	sjmp	00107$
      000174                        998 00188$:
      000174 BF 49 02         [24]  999 	cjne	r7,#0x49,00189$
      000177 80 23            [24] 1000 	sjmp	00108$
      000179                       1001 00189$:
      000179 BF 4F 02         [24] 1002 	cjne	r7,#0x4F,00190$
      00017C 80 28            [24] 1003 	sjmp	00110$
      00017E                       1004 00190$:
      00017E BF 50 02         [24] 1005 	cjne	r7,#0x50,00191$
      000181 80 1E            [24] 1006 	sjmp	00109$
      000183                       1007 00191$:
      000183 BF 53 02         [24] 1008 	cjne	r7,#0x53,00192$
      000186 80 27            [24] 1009 	sjmp	00111$
      000188                       1010 00192$:
                                   1011 ;	radio/at.c:233: case '\0':		// no command -> OK
      000188 BF 5A 2E         [24] 1012 	cjne	r7,#0x5A,00114$
      00018B 80 27            [24] 1013 	sjmp	00112$
      00018D                       1014 00105$:
                                   1015 ;	radio/at.c:234: at_ok();
      00018D 12r01rC3         [24] 1016 	lcall	_at_ok
                                   1017 ;	radio/at.c:235: break;
                                   1018 ;	radio/at.c:236: case '&':
      000190 80 2A            [24] 1019 	sjmp	00117$
      000192                       1020 00106$:
                                   1021 ;	radio/at.c:237: at_ampersand();
      000192 12r05r04         [24] 1022 	lcall	_at_ampersand
                                   1023 ;	radio/at.c:238: break;
                                   1024 ;	radio/at.c:239: case '+':
      000195 80 25            [24] 1025 	sjmp	00117$
      000197                       1026 00107$:
                                   1027 ;	radio/at.c:240: at_plus();
      000197 12r05rEA         [24] 1028 	lcall	_at_plus
                                   1029 ;	radio/at.c:241: break;
                                   1030 ;	radio/at.c:242: case 'I':
      00019A 80 20            [24] 1031 	sjmp	00117$
      00019C                       1032 00108$:
                                   1033 ;	radio/at.c:243: at_i();
      00019C 12r03r5C         [24] 1034 	lcall	_at_i
                                   1035 ;	radio/at.c:244: break;
                                   1036 ;	radio/at.c:245: case 'P':
      00019F 80 1B            [24] 1037 	sjmp	00117$
      0001A1                       1038 00109$:
                                   1039 ;	radio/at.c:246: at_p();
      0001A1 12r05rE7         [24] 1040 	lcall	_at_p
                                   1041 ;	radio/at.c:247: break;
                                   1042 ;	radio/at.c:248: case 'O':		// O -> go online (exit command mode)
      0001A4 80 16            [24] 1043 	sjmp	00117$
      0001A6                       1044 00110$:
                                   1045 ;	radio/at.c:249: at_plus_counter = ATP_COUNT_1S;
      0001A6 78r04            [12] 1046 	mov	r0,#_at_plus_counter
      0001A8 74 64            [12] 1047 	mov	a,#0x64
      0001AA F2               [24] 1048 	movx	@r0,a
                                   1049 ;	radio/at.c:250: at_mode_active = 0;
      0001AB C2*00            [12] 1050 	clr	_at_mode_active
                                   1051 ;	radio/at.c:251: break;
                                   1052 ;	radio/at.c:252: case 'S':
      0001AD 80 0D            [24] 1053 	sjmp	00117$
      0001AF                       1054 00111$:
                                   1055 ;	radio/at.c:253: at_s();
      0001AF 12r04r5D         [24] 1056 	lcall	_at_s
                                   1057 ;	radio/at.c:254: break;
                                   1058 ;	radio/at.c:255: case 'Z':
      0001B2 80 08            [24] 1059 	sjmp	00117$
      0001B4                       1060 00112$:
                                   1061 ;	radio/at.c:257: RSTSRC |= (1 << 4);
      0001B4 43 EF 10         [24] 1062 	orl	_RSTSRC,#0x10
      0001B7                       1063 00123$:
                                   1064 ;	radio/at.c:261: default:
      0001B7 80 FE            [24] 1065 	sjmp	00123$
      0001B9                       1066 00114$:
                                   1067 ;	radio/at.c:262: at_error();
      0001B9 12r01rE5         [24] 1068 	lcall	_at_error
                                   1069 ;	radio/at.c:263: }
      0001BC                       1070 00117$:
                                   1071 ;	radio/at.c:267: at_cmd_len = 0;
      0001BC 78r01            [12] 1072 	mov	r0,#_at_cmd_len
      0001BE E4               [12] 1073 	clr	a
      0001BF F2               [24] 1074 	movx	@r0,a
                                   1075 ;	radio/at.c:268: at_cmd_ready = false;
      0001C0 C2*01            [12] 1076 	clr	_at_cmd_ready
      0001C2 22               [24] 1077 	ret
                                   1078 ;------------------------------------------------------------
                                   1079 ;Allocation info for local variables in function 'at_ok'
                                   1080 ;------------------------------------------------------------
                                   1081 ;	radio/at.c:273: at_ok(void)
                                   1082 ;	-----------------------------------------
                                   1083 ;	 function at_ok
                                   1084 ;	-----------------------------------------
      0001C3                       1085 _at_ok:
                                   1086 ;	radio/at.c:275: printf("%s\n", "OK");
      0001C3 74r04            [12] 1087 	mov	a,#___str_1
      0001C5 C0 E0            [24] 1088 	push	acc
      0001C7 74s00            [12] 1089 	mov	a,#(___str_1 >> 8)
      0001C9 C0 E0            [24] 1090 	push	acc
      0001CB 74 80            [12] 1091 	mov	a,#0x80
      0001CD C0 E0            [24] 1092 	push	acc
      0001CF 74r00            [12] 1093 	mov	a,#___str_0
      0001D1 C0 E0            [24] 1094 	push	acc
      0001D3 74s00            [12] 1095 	mov	a,#(___str_0 >> 8)
      0001D5 C0 E0            [24] 1096 	push	acc
      0001D7 74 80            [12] 1097 	mov	a,#0x80
      0001D9 C0 E0            [24] 1098 	push	acc
      0001DB 12r00r00         [24] 1099 	lcall	_printfl
      0001DE E5 81            [12] 1100 	mov	a,sp
      0001E0 24 FA            [12] 1101 	add	a,#0xfa
      0001E2 F5 81            [12] 1102 	mov	sp,a
      0001E4 22               [24] 1103 	ret
                                   1104 ;------------------------------------------------------------
                                   1105 ;Allocation info for local variables in function 'at_error'
                                   1106 ;------------------------------------------------------------
                                   1107 ;	radio/at.c:279: at_error(void)
                                   1108 ;	-----------------------------------------
                                   1109 ;	 function at_error
                                   1110 ;	-----------------------------------------
      0001E5                       1111 _at_error:
                                   1112 ;	radio/at.c:281: printf("%s\n", "ERROR");
      0001E5 74r07            [12] 1113 	mov	a,#___str_2
      0001E7 C0 E0            [24] 1114 	push	acc
      0001E9 74s00            [12] 1115 	mov	a,#(___str_2 >> 8)
      0001EB C0 E0            [24] 1116 	push	acc
      0001ED 74 80            [12] 1117 	mov	a,#0x80
      0001EF C0 E0            [24] 1118 	push	acc
      0001F1 74r00            [12] 1119 	mov	a,#___str_0
      0001F3 C0 E0            [24] 1120 	push	acc
      0001F5 74s00            [12] 1121 	mov	a,#(___str_0 >> 8)
      0001F7 C0 E0            [24] 1122 	push	acc
      0001F9 74 80            [12] 1123 	mov	a,#0x80
      0001FB C0 E0            [24] 1124 	push	acc
      0001FD 12r00r00         [24] 1125 	lcall	_printfl
      000200 E5 81            [12] 1126 	mov	a,sp
      000202 24 FA            [12] 1127 	add	a,#0xfa
      000204 F5 81            [12] 1128 	mov	sp,a
      000206 22               [24] 1129 	ret
                                   1130 ;------------------------------------------------------------
                                   1131 ;Allocation info for local variables in function 'at_parse_number'
                                   1132 ;------------------------------------------------------------
                                   1133 ;c                         Allocated to registers r7 
                                   1134 ;sloc0                     Allocated to stack - sp -3
                                   1135 ;------------------------------------------------------------
                                   1136 ;	radio/at.c:291: at_parse_number() __reentrant
                                   1137 ;	-----------------------------------------
                                   1138 ;	 function at_parse_number
                                   1139 ;	-----------------------------------------
      000207                       1140 _at_parse_number:
      000207 E5 81            [12] 1141 	mov	a,sp
      000209 24 04            [12] 1142 	add	a,#0x04
      00020B F5 81            [12] 1143 	mov	sp,a
                                   1144 ;	radio/at.c:295: at_num = 0;
      00020D 90r00r12         [24] 1145 	mov	dptr,#_at_num
      000210 E4               [12] 1146 	clr	a
      000211 F0               [24] 1147 	movx	@dptr,a
      000212 A3               [24] 1148 	inc	dptr
      000213 F0               [24] 1149 	movx	@dptr,a
      000214 A3               [24] 1150 	inc	dptr
      000215 F0               [24] 1151 	movx	@dptr,a
      000216 A3               [24] 1152 	inc	dptr
      000217 F0               [24] 1153 	movx	@dptr,a
      000218                       1154 00104$:
                                   1155 ;	radio/at.c:297: c = at_cmd[idx];
      000218 90r00r11         [24] 1156 	mov	dptr,#_idx
      00021B E0               [24] 1157 	movx	a,@dptr
      00021C 24r00            [12] 1158 	add	a,#_at_cmd
      00021E F5 82            [12] 1159 	mov	dpl,a
      000220 E4               [12] 1160 	clr	a
      000221 34s00            [12] 1161 	addc	a,#(_at_cmd >> 8)
      000223 F5 83            [12] 1162 	mov	dph,a
      000225 E0               [24] 1163 	movx	a,@dptr
                                   1164 ;	radio/at.c:298: if (!isdigit(c))
      000226 FF               [12] 1165 	mov	r7,a
      000227 FD               [12] 1166 	mov	r5,a
      000228 7E 00            [12] 1167 	mov	r6,#0x00
      00022A 8D 82            [24] 1168 	mov	dpl,r5
      00022C 8E 83            [24] 1169 	mov	dph,r6
      00022E C0 07            [24] 1170 	push	ar7
      000230 12r00r00         [24] 1171 	lcall	_isdigit
      000233 E5 82            [12] 1172 	mov	a,dpl
      000235 85 83 F0         [24] 1173 	mov	b,dph
      000238 D0 07            [24] 1174 	pop	ar7
      00023A 45 F0            [12] 1175 	orl	a,b
      00023C 60 6E            [24] 1176 	jz	00106$
                                   1177 ;	radio/at.c:300: at_num = (at_num * 10) + (c - '0');
      00023E 90r00r12         [24] 1178 	mov	dptr,#_at_num
      000241 E0               [24] 1179 	movx	a,@dptr
      000242 FB               [12] 1180 	mov	r3,a
      000243 A3               [24] 1181 	inc	dptr
      000244 E0               [24] 1182 	movx	a,@dptr
      000245 FC               [12] 1183 	mov	r4,a
      000246 A3               [24] 1184 	inc	dptr
      000247 E0               [24] 1185 	movx	a,@dptr
      000248 FD               [12] 1186 	mov	r5,a
      000249 A3               [24] 1187 	inc	dptr
      00024A E0               [24] 1188 	movx	a,@dptr
      00024B FE               [12] 1189 	mov	r6,a
      00024C 90r00r00         [24] 1190 	mov	dptr,#__mullong_PARM_2
      00024F EB               [12] 1191 	mov	a,r3
      000250 F0               [24] 1192 	movx	@dptr,a
      000251 EC               [12] 1193 	mov	a,r4
      000252 A3               [24] 1194 	inc	dptr
      000253 F0               [24] 1195 	movx	@dptr,a
      000254 ED               [12] 1196 	mov	a,r5
      000255 A3               [24] 1197 	inc	dptr
      000256 F0               [24] 1198 	movx	@dptr,a
      000257 EE               [12] 1199 	mov	a,r6
      000258 A3               [24] 1200 	inc	dptr
      000259 F0               [24] 1201 	movx	@dptr,a
      00025A 90 00 0A         [24] 1202 	mov	dptr,#(0x0A&0x00ff)
      00025D E4               [12] 1203 	clr	a
      00025E F5 F0            [12] 1204 	mov	b,a
      000260 C0 07            [24] 1205 	push	ar7
      000262 12r00r00         [24] 1206 	lcall	__mullong
      000265 C8               [12] 1207 	xch	a,r0
      000266 E5 81            [12] 1208 	mov	a,sp
      000268 24 FC            [12] 1209 	add	a,#0xfc
      00026A C8               [12] 1210 	xch	a,r0
      00026B A6 82            [24] 1211 	mov	@r0,dpl
      00026D 08               [12] 1212 	inc	r0
      00026E A6 83            [24] 1213 	mov	@r0,dph
      000270 08               [12] 1214 	inc	r0
      000271 A6 F0            [24] 1215 	mov	@r0,b
      000273 08               [12] 1216 	inc	r0
      000274 F6               [12] 1217 	mov	@r0,a
      000275 D0 07            [24] 1218 	pop	ar7
      000277 7A 00            [12] 1219 	mov	r2,#0x00
      000279 EF               [12] 1220 	mov	a,r7
      00027A 24 D0            [12] 1221 	add	a,#0xD0
      00027C FF               [12] 1222 	mov	r7,a
      00027D EA               [12] 1223 	mov	a,r2
      00027E 34 FF            [12] 1224 	addc	a,#0xFF
      000280 FA               [12] 1225 	mov	r2,a
      000281 8F 05            [24] 1226 	mov	ar5,r7
      000283 33               [12] 1227 	rlc	a
      000284 95 E0            [12] 1228 	subb	a,acc
      000286 FE               [12] 1229 	mov	r6,a
      000287 FF               [12] 1230 	mov	r7,a
      000288 E5 81            [12] 1231 	mov	a,sp
      00028A 24 FD            [12] 1232 	add	a,#0xfd
      00028C F8               [12] 1233 	mov	r0,a
      00028D 90r00r12         [24] 1234 	mov	dptr,#_at_num
      000290 ED               [12] 1235 	mov	a,r5
      000291 26               [12] 1236 	add	a,@r0
      000292 F0               [24] 1237 	movx	@dptr,a
      000293 EA               [12] 1238 	mov	a,r2
      000294 08               [12] 1239 	inc	r0
      000295 36               [12] 1240 	addc	a,@r0
      000296 A3               [24] 1241 	inc	dptr
      000297 F0               [24] 1242 	movx	@dptr,a
      000298 EE               [12] 1243 	mov	a,r6
      000299 08               [12] 1244 	inc	r0
      00029A 36               [12] 1245 	addc	a,@r0
      00029B A3               [24] 1246 	inc	dptr
      00029C F0               [24] 1247 	movx	@dptr,a
      00029D EF               [12] 1248 	mov	a,r7
      00029E 08               [12] 1249 	inc	r0
      00029F 36               [12] 1250 	addc	a,@r0
      0002A0 A3               [24] 1251 	inc	dptr
      0002A1 F0               [24] 1252 	movx	@dptr,a
                                   1253 ;	radio/at.c:301: idx++;
      0002A2 90r00r11         [24] 1254 	mov	dptr,#_idx
      0002A5 E0               [24] 1255 	movx	a,@dptr
      0002A6 24 01            [12] 1256 	add	a,#0x01
      0002A8 F0               [24] 1257 	movx	@dptr,a
      0002A9 02r02r18         [24] 1258 	ljmp	00104$
      0002AC                       1259 00106$:
      0002AC E5 81            [12] 1260 	mov	a,sp
      0002AE 24 FC            [12] 1261 	add	a,#0xFC
      0002B0 F5 81            [12] 1262 	mov	sp,a
      0002B2 22               [24] 1263 	ret
                                   1264 ;------------------------------------------------------------
                                   1265 ;Allocation info for local variables in function 'print_ID_vals'
                                   1266 ;------------------------------------------------------------
                                   1267 ;id                        Allocated with name '_print_ID_vals_id_1_166'
                                   1268 ;sloc0                     Allocated with name '_print_ID_vals_sloc0_1_0'
                                   1269 ;sloc1                     Allocated with name '_print_ID_vals_sloc1_1_0'
                                   1270 ;end                       Allocated with name '_print_ID_vals_PARM_2'
                                   1271 ;name_param                Allocated with name '_print_ID_vals_PARM_3'
                                   1272 ;get_param                 Allocated with name '_print_ID_vals_PARM_4'
                                   1273 ;param                     Allocated with name '_print_ID_vals_param_1_163'
                                   1274 ;------------------------------------------------------------
                                   1275 ;	radio/at.c:305: static void print_ID_vals(char param, uint8_t end,
                                   1276 ;	-----------------------------------------
                                   1277 ;	 function print_ID_vals
                                   1278 ;	-----------------------------------------
      0002B3                       1279 _print_ID_vals:
      0002B3 E5 82            [12] 1280 	mov	a,dpl
      0002B5 90r00r1B         [24] 1281 	mov	dptr,#_print_ID_vals_param_1_163
      0002B8 F0               [24] 1282 	movx	@dptr,a
                                   1283 ;	radio/at.c:312: for (id = 0; id < end; id++) {
      0002B9 E0               [24] 1284 	movx	a,@dptr
      0002BA F5*01            [12] 1285 	mov	_print_ID_vals_sloc0_1_0,a
      0002BC 90r00r16         [24] 1286 	mov	dptr,#_print_ID_vals_PARM_2
      0002BF E0               [24] 1287 	movx	a,@dptr
      0002C0 FE               [12] 1288 	mov	r6,a
      0002C1 75*00 00         [24] 1289 	mov	_print_ID_vals_id_1_166,#0x00
      0002C4                       1290 00103$:
      0002C4 C3               [12] 1291 	clr	c
      0002C5 E5*00            [12] 1292 	mov	a,_print_ID_vals_id_1_166
      0002C7 9E               [12] 1293 	subb	a,r6
      0002C8 40 01            [24] 1294 	jc	00114$
      0002CA 22               [24] 1295 	ret
      0002CB                       1296 00114$:
                                   1297 ;	radio/at.c:313: printf("%c%u:%s=%lu\n",
      0002CB C0 06            [24] 1298 	push	ar6
      0002CD C0 06            [24] 1299 	push	ar6
      0002CF 12r02rD4         [24] 1300 	lcall	00115$
      0002D2 80 0E            [24] 1301 	sjmp	00116$
      0002D4                       1302 00115$:
      0002D4 90r00r19         [24] 1303 	mov	dptr,#_print_ID_vals_PARM_4
      0002D7 E0               [24] 1304 	movx	a,@dptr
      0002D8 C0 E0            [24] 1305 	push	acc
      0002DA A3               [24] 1306 	inc	dptr
      0002DB E0               [24] 1307 	movx	a,@dptr
      0002DC C0 E0            [24] 1308 	push	acc
      0002DE 85*00 82         [24] 1309 	mov	dpl,_print_ID_vals_id_1_166
      0002E1 22               [24] 1310 	ret
      0002E2                       1311 00116$:
      0002E2 A9 82            [24] 1312 	mov	r1,dpl
      0002E4 AA 83            [24] 1313 	mov	r2,dph
      0002E6 AB F0            [24] 1314 	mov	r3,b
      0002E8 FC               [12] 1315 	mov	r4,a
      0002E9 D0 06            [24] 1316 	pop	ar6
      0002EB C0 06            [24] 1317 	push	ar6
      0002ED C0 04            [24] 1318 	push	ar4
      0002EF C0 03            [24] 1319 	push	ar3
      0002F1 C0 02            [24] 1320 	push	ar2
      0002F3 C0 01            [24] 1321 	push	ar1
      0002F5 12r02rFA         [24] 1322 	lcall	00117$
      0002F8 80 0E            [24] 1323 	sjmp	00118$
      0002FA                       1324 00117$:
      0002FA 90r00r17         [24] 1325 	mov	dptr,#_print_ID_vals_PARM_3
      0002FD E0               [24] 1326 	movx	a,@dptr
      0002FE C0 E0            [24] 1327 	push	acc
      000300 A3               [24] 1328 	inc	dptr
      000301 E0               [24] 1329 	movx	a,@dptr
      000302 C0 E0            [24] 1330 	push	acc
      000304 85*00 82         [24] 1331 	mov	dpl,_print_ID_vals_id_1_166
      000307 22               [24] 1332 	ret
      000308                       1333 00118$:
      000308 85 82*02         [24] 1334 	mov	_print_ID_vals_sloc1_1_0,dpl
      00030B 85 83*03         [24] 1335 	mov	(_print_ID_vals_sloc1_1_0 + 1),dph
      00030E 85 F0*04         [24] 1336 	mov	(_print_ID_vals_sloc1_1_0 + 2),b
      000311 D0 01            [24] 1337 	pop	ar1
      000313 D0 02            [24] 1338 	pop	ar2
      000315 D0 03            [24] 1339 	pop	ar3
      000317 D0 04            [24] 1340 	pop	ar4
      000319 D0 06            [24] 1341 	pop	ar6
      00031B AE*00            [24] 1342 	mov	r6,_print_ID_vals_id_1_166
      00031D 7F 00            [12] 1343 	mov	r7,#0x00
      00031F E5*01            [12] 1344 	mov	a,_print_ID_vals_sloc0_1_0
      000321 F8               [12] 1345 	mov	r0,a
      000322 33               [12] 1346 	rlc	a
      000323 95 E0            [12] 1347 	subb	a,acc
      000325 FD               [12] 1348 	mov	r5,a
      000326 C0 06            [24] 1349 	push	ar6
      000328 C0 01            [24] 1350 	push	ar1
      00032A C0 02            [24] 1351 	push	ar2
      00032C C0 03            [24] 1352 	push	ar3
      00032E C0 04            [24] 1353 	push	ar4
      000330 C0*02            [24] 1354 	push	_print_ID_vals_sloc1_1_0
      000332 C0*03            [24] 1355 	push	(_print_ID_vals_sloc1_1_0 + 1)
      000334 C0*04            [24] 1356 	push	(_print_ID_vals_sloc1_1_0 + 2)
      000336 C0 06            [24] 1357 	push	ar6
      000338 C0 07            [24] 1358 	push	ar7
      00033A C0 00            [24] 1359 	push	ar0
      00033C C0 05            [24] 1360 	push	ar5
      00033E 74r0D            [12] 1361 	mov	a,#___str_3
      000340 C0 E0            [24] 1362 	push	acc
      000342 74s00            [12] 1363 	mov	a,#(___str_3 >> 8)
      000344 C0 E0            [24] 1364 	push	acc
      000346 74 80            [12] 1365 	mov	a,#0x80
      000348 C0 E0            [24] 1366 	push	acc
      00034A 12r00r00         [24] 1367 	lcall	_printfl
      00034D E5 81            [12] 1368 	mov	a,sp
      00034F 24 F2            [12] 1369 	add	a,#0xf2
      000351 F5 81            [12] 1370 	mov	sp,a
      000353 D0 06            [24] 1371 	pop	ar6
                                   1372 ;	radio/at.c:312: for (id = 0; id < end; id++) {
      000355 05*00            [12] 1373 	inc	_print_ID_vals_id_1_166
      000357 D0 06            [24] 1374 	pop	ar6
      000359 02r02rC4         [24] 1375 	ljmp	00103$
                                   1376 ;------------------------------------------------------------
                                   1377 ;Allocation info for local variables in function 'at_i'
                                   1378 ;------------------------------------------------------------
                                   1379 ;	radio/at.c:322: at_i(void)
                                   1380 ;	-----------------------------------------
                                   1381 ;	 function at_i
                                   1382 ;	-----------------------------------------
      00035C                       1383 _at_i:
                                   1384 ;	radio/at.c:324: switch (at_cmd[3]) {
      00035C 90r00r03         [24] 1385 	mov	dptr,#(_at_cmd + 0x0003)
      00035F E0               [24] 1386 	movx	a,@dptr
      000360 FF               [12] 1387 	mov	r7,a
      000361 60 30            [24] 1388 	jz	00102$
      000363 BF 30 02         [24] 1389 	cjne	r7,#0x30,00142$
      000366 80 2B            [24] 1390 	sjmp	00102$
      000368                       1391 00142$:
      000368 BF 31 02         [24] 1392 	cjne	r7,#0x31,00143$
      00036B 80 48            [24] 1393 	sjmp	00103$
      00036D                       1394 00143$:
      00036D BF 32 02         [24] 1395 	cjne	r7,#0x32,00144$
      000370 80 65            [24] 1396 	sjmp	00104$
      000372                       1397 00144$:
      000372 BF 33 03         [24] 1398 	cjne	r7,#0x33,00145$
      000375 02r03rF4         [24] 1399 	ljmp	00105$
      000378                       1400 00145$:
      000378 BF 34 03         [24] 1401 	cjne	r7,#0x34,00146$
      00037B 02r04r14         [24] 1402 	ljmp	00106$
      00037E                       1403 00146$:
      00037E BF 35 03         [24] 1404 	cjne	r7,#0x35,00147$
      000381 02r04r34         [24] 1405 	ljmp	00107$
      000384                       1406 00147$:
      000384 BF 36 03         [24] 1407 	cjne	r7,#0x36,00148$
      000387 02r04r54         [24] 1408 	ljmp	00108$
      00038A                       1409 00148$:
      00038A BF 37 03         [24] 1410 	cjne	r7,#0x37,00149$
      00038D 02r04r57         [24] 1411 	ljmp	00109$
      000390                       1412 00149$:
      000390 02r04r5A         [24] 1413 	ljmp	00110$
                                   1414 ;	radio/at.c:326: case '0':
      000393                       1415 00102$:
                                   1416 ;	radio/at.c:327: printf("%s\n", g_banner_string);
      000393 74r00            [12] 1417 	mov	a,#_g_banner_string
      000395 C0 E0            [24] 1418 	push	acc
      000397 74s00            [12] 1419 	mov	a,#(_g_banner_string >> 8)
      000399 C0 E0            [24] 1420 	push	acc
      00039B 74 80            [12] 1421 	mov	a,#0x80
      00039D C0 E0            [24] 1422 	push	acc
      00039F 74r00            [12] 1423 	mov	a,#___str_0
      0003A1 C0 E0            [24] 1424 	push	acc
      0003A3 74s00            [12] 1425 	mov	a,#(___str_0 >> 8)
      0003A5 C0 E0            [24] 1426 	push	acc
      0003A7 74 80            [12] 1427 	mov	a,#0x80
      0003A9 C0 E0            [24] 1428 	push	acc
      0003AB 12r00r00         [24] 1429 	lcall	_printfl
      0003AE E5 81            [12] 1430 	mov	a,sp
      0003B0 24 FA            [12] 1431 	add	a,#0xfa
      0003B2 F5 81            [12] 1432 	mov	sp,a
                                   1433 ;	radio/at.c:328: return;
      0003B4 22               [24] 1434 	ret
                                   1435 ;	radio/at.c:329: case '1':
      0003B5                       1436 00103$:
                                   1437 ;	radio/at.c:330: printf("%s\n", g_version_string);
      0003B5 74r00            [12] 1438 	mov	a,#_g_version_string
      0003B7 C0 E0            [24] 1439 	push	acc
      0003B9 74s00            [12] 1440 	mov	a,#(_g_version_string >> 8)
      0003BB C0 E0            [24] 1441 	push	acc
      0003BD 74 80            [12] 1442 	mov	a,#0x80
      0003BF C0 E0            [24] 1443 	push	acc
      0003C1 74r00            [12] 1444 	mov	a,#___str_0
      0003C3 C0 E0            [24] 1445 	push	acc
      0003C5 74s00            [12] 1446 	mov	a,#(___str_0 >> 8)
      0003C7 C0 E0            [24] 1447 	push	acc
      0003C9 74 80            [12] 1448 	mov	a,#0x80
      0003CB C0 E0            [24] 1449 	push	acc
      0003CD 12r00r00         [24] 1450 	lcall	_printfl
      0003D0 E5 81            [12] 1451 	mov	a,sp
      0003D2 24 FA            [12] 1452 	add	a,#0xfa
      0003D4 F5 81            [12] 1453 	mov	sp,a
                                   1454 ;	radio/at.c:331: return;
      0003D6 22               [24] 1455 	ret
                                   1456 ;	radio/at.c:332: case '2':
      0003D7                       1457 00104$:
                                   1458 ;	radio/at.c:333: printf("%u\n", BOARD_ID);
      0003D7 74 4E            [12] 1459 	mov	a,#0x4E
      0003D9 C0 E0            [24] 1460 	push	acc
      0003DB E4               [12] 1461 	clr	a
      0003DC C0 E0            [24] 1462 	push	acc
      0003DE 74r1A            [12] 1463 	mov	a,#___str_4
      0003E0 C0 E0            [24] 1464 	push	acc
      0003E2 74s00            [12] 1465 	mov	a,#(___str_4 >> 8)
      0003E4 C0 E0            [24] 1466 	push	acc
      0003E6 74 80            [12] 1467 	mov	a,#0x80
      0003E8 C0 E0            [24] 1468 	push	acc
      0003EA 12r00r00         [24] 1469 	lcall	_printfl
      0003ED E5 81            [12] 1470 	mov	a,sp
      0003EF 24 FB            [12] 1471 	add	a,#0xfb
      0003F1 F5 81            [12] 1472 	mov	sp,a
                                   1473 ;	radio/at.c:334: break;
                                   1474 ;	radio/at.c:335: case '3':
      0003F3 22               [24] 1475 	ret
      0003F4                       1476 00105$:
                                   1477 ;	radio/at.c:336: printf("%u\n", g_board_frequency);
      0003F4 78r00            [12] 1478 	mov	r0,#_g_board_frequency
      0003F6 E2               [24] 1479 	movx	a,@r0
      0003F7 FE               [12] 1480 	mov	r6,a
      0003F8 7F 00            [12] 1481 	mov	r7,#0x00
      0003FA C0 06            [24] 1482 	push	ar6
      0003FC C0 07            [24] 1483 	push	ar7
      0003FE 74r1A            [12] 1484 	mov	a,#___str_4
      000400 C0 E0            [24] 1485 	push	acc
      000402 74s00            [12] 1486 	mov	a,#(___str_4 >> 8)
      000404 C0 E0            [24] 1487 	push	acc
      000406 74 80            [12] 1488 	mov	a,#0x80
      000408 C0 E0            [24] 1489 	push	acc
      00040A 12r00r00         [24] 1490 	lcall	_printfl
      00040D E5 81            [12] 1491 	mov	a,sp
      00040F 24 FB            [12] 1492 	add	a,#0xfb
      000411 F5 81            [12] 1493 	mov	sp,a
                                   1494 ;	radio/at.c:337: break;
                                   1495 ;	radio/at.c:338: case '4':
      000413 22               [24] 1496 	ret
      000414                       1497 00106$:
                                   1498 ;	radio/at.c:339: printf("%u\n", g_board_bl_version);
      000414 78r00            [12] 1499 	mov	r0,#_g_board_bl_version
      000416 E2               [24] 1500 	movx	a,@r0
      000417 FE               [12] 1501 	mov	r6,a
      000418 7F 00            [12] 1502 	mov	r7,#0x00
      00041A C0 06            [24] 1503 	push	ar6
      00041C C0 07            [24] 1504 	push	ar7
      00041E 74r1A            [12] 1505 	mov	a,#___str_4
      000420 C0 E0            [24] 1506 	push	acc
      000422 74s00            [12] 1507 	mov	a,#(___str_4 >> 8)
      000424 C0 E0            [24] 1508 	push	acc
      000426 74 80            [12] 1509 	mov	a,#0x80
      000428 C0 E0            [24] 1510 	push	acc
      00042A 12r00r00         [24] 1511 	lcall	_printfl
      00042D E5 81            [12] 1512 	mov	a,sp
      00042F 24 FB            [12] 1513 	add	a,#0xfb
      000431 F5 81            [12] 1514 	mov	sp,a
                                   1515 ;	radio/at.c:340: return;
                                   1516 ;	radio/at.c:341: case '5':
      000433 22               [24] 1517 	ret
      000434                       1518 00107$:
                                   1519 ;	radio/at.c:342: print_ID_vals('S', PARAM_MAX, param_name, param_get);
      000434 90r00r16         [24] 1520 	mov	dptr,#_print_ID_vals_PARM_2
      000437 74 10            [12] 1521 	mov	a,#0x10
      000439 F0               [24] 1522 	movx	@dptr,a
      00043A 90r00r17         [24] 1523 	mov	dptr,#_print_ID_vals_PARM_3
      00043D 74r00            [12] 1524 	mov	a,#_param_name
      00043F F0               [24] 1525 	movx	@dptr,a
      000440 74s00            [12] 1526 	mov	a,#(_param_name >> 8)
      000442 A3               [24] 1527 	inc	dptr
      000443 F0               [24] 1528 	movx	@dptr,a
      000444 90r00r19         [24] 1529 	mov	dptr,#_print_ID_vals_PARM_4
      000447 74r00            [12] 1530 	mov	a,#_param_get
      000449 F0               [24] 1531 	movx	@dptr,a
      00044A 74s00            [12] 1532 	mov	a,#(_param_get >> 8)
      00044C A3               [24] 1533 	inc	dptr
      00044D F0               [24] 1534 	movx	@dptr,a
      00044E 75 82 53         [24] 1535 	mov	dpl,#0x53
                                   1536 ;	radio/at.c:343: return;
                                   1537 ;	radio/at.c:344: case '6':
      000451 02r02rB3         [24] 1538 	ljmp	_print_ID_vals
      000454                       1539 00108$:
                                   1540 ;	radio/at.c:345: tdm_report_timing();
                                   1541 ;	radio/at.c:346: return;
                                   1542 ;	radio/at.c:347: case '7':
      000454 02r00r00         [24] 1543 	ljmp	_tdm_report_timing
      000457                       1544 00109$:
                                   1545 ;	radio/at.c:348: tdm_show_rssi();
                                   1546 ;	radio/at.c:349: return;
                                   1547 ;	radio/at.c:350: default:
      000457 02r00r00         [24] 1548 	ljmp	_tdm_show_rssi
      00045A                       1549 00110$:
                                   1550 ;	radio/at.c:351: at_error();
                                   1551 ;	radio/at.c:352: return;
                                   1552 ;	radio/at.c:353: }
      00045A 02r01rE5         [24] 1553 	ljmp	_at_error
                                   1554 ;------------------------------------------------------------
                                   1555 ;Allocation info for local variables in function 'at_s'
                                   1556 ;------------------------------------------------------------
                                   1557 ;	radio/at.c:357: at_s(void)
                                   1558 ;	-----------------------------------------
                                   1559 ;	 function at_s
                                   1560 ;	-----------------------------------------
      00045D                       1561 _at_s:
                                   1562 ;	radio/at.c:362: idx = 3;
      00045D 90r00r11         [24] 1563 	mov	dptr,#_idx
      000460 74 03            [12] 1564 	mov	a,#0x03
      000462 F0               [24] 1565 	movx	@dptr,a
                                   1566 ;	radio/at.c:363: at_parse_number();
      000463 12r02r07         [24] 1567 	lcall	_at_parse_number
                                   1568 ;	radio/at.c:364: sreg = at_num;
      000466 90r00r12         [24] 1569 	mov	dptr,#_at_num
      000469 E0               [24] 1570 	movx	a,@dptr
      00046A FC               [12] 1571 	mov	r4,a
      00046B A3               [24] 1572 	inc	dptr
      00046C E0               [24] 1573 	movx	a,@dptr
      00046D FD               [12] 1574 	mov	r5,a
      00046E A3               [24] 1575 	inc	dptr
      00046F E0               [24] 1576 	movx	a,@dptr
      000470 FE               [12] 1577 	mov	r6,a
      000471 A3               [24] 1578 	inc	dptr
      000472 E0               [24] 1579 	movx	a,@dptr
      000473 FF               [12] 1580 	mov	r7,a
                                   1581 ;	radio/at.c:366: if (sreg >= PARAM_MAX) {
      000474 BC 10 00         [24] 1582 	cjne	r4,#0x10,00127$
      000477                       1583 00127$:
      000477 40 03            [24] 1584 	jc	00102$
                                   1585 ;	radio/at.c:367: at_error();
                                   1586 ;	radio/at.c:368: return;
      000479 02r01rE5         [24] 1587 	ljmp	_at_error
      00047C                       1588 00102$:
                                   1589 ;	radio/at.c:371: switch (at_cmd[idx]) {
      00047C 90r00r11         [24] 1590 	mov	dptr,#_idx
      00047F E0               [24] 1591 	movx	a,@dptr
      000480 FF               [12] 1592 	mov	r7,a
      000481 24r00            [12] 1593 	add	a,#_at_cmd
      000483 F5 82            [12] 1594 	mov	dpl,a
      000485 E4               [12] 1595 	clr	a
      000486 34s00            [12] 1596 	addc	a,#(_at_cmd >> 8)
      000488 F5 83            [12] 1597 	mov	dph,a
      00048A E0               [24] 1598 	movx	a,@dptr
      00048B FE               [12] 1599 	mov	r6,a
      00048C BE 3D 02         [24] 1600 	cjne	r6,#0x3D,00129$
      00048F 80 3B            [24] 1601 	sjmp	00104$
      000491                       1602 00129$:
      000491 BE 3F 6D         [24] 1603 	cjne	r6,#0x3F,00109$
                                   1604 ;	radio/at.c:373: at_num = param_get(sreg);
      000494 8C 82            [24] 1605 	mov	dpl,r4
      000496 12r00r00         [24] 1606 	lcall	_param_get
      000499 AA 82            [24] 1607 	mov	r2,dpl
      00049B AB 83            [24] 1608 	mov	r3,dph
      00049D AD F0            [24] 1609 	mov	r5,b
      00049F FE               [12] 1610 	mov	r6,a
      0004A0 90r00r12         [24] 1611 	mov	dptr,#_at_num
      0004A3 EA               [12] 1612 	mov	a,r2
      0004A4 F0               [24] 1613 	movx	@dptr,a
      0004A5 EB               [12] 1614 	mov	a,r3
      0004A6 A3               [24] 1615 	inc	dptr
      0004A7 F0               [24] 1616 	movx	@dptr,a
      0004A8 ED               [12] 1617 	mov	a,r5
      0004A9 A3               [24] 1618 	inc	dptr
      0004AA F0               [24] 1619 	movx	@dptr,a
      0004AB EE               [12] 1620 	mov	a,r6
      0004AC A3               [24] 1621 	inc	dptr
      0004AD F0               [24] 1622 	movx	@dptr,a
                                   1623 ;	radio/at.c:374: printf("%lu\n", at_num);
      0004AE C0 02            [24] 1624 	push	ar2
      0004B0 C0 03            [24] 1625 	push	ar3
      0004B2 C0 05            [24] 1626 	push	ar5
      0004B4 C0 06            [24] 1627 	push	ar6
      0004B6 74r1E            [12] 1628 	mov	a,#___str_5
      0004B8 C0 E0            [24] 1629 	push	acc
      0004BA 74s00            [12] 1630 	mov	a,#(___str_5 >> 8)
      0004BC C0 E0            [24] 1631 	push	acc
      0004BE 74 80            [12] 1632 	mov	a,#0x80
      0004C0 C0 E0            [24] 1633 	push	acc
      0004C2 12r00r00         [24] 1634 	lcall	_printfl
      0004C5 E5 81            [12] 1635 	mov	a,sp
      0004C7 24 F9            [12] 1636 	add	a,#0xf9
      0004C9 F5 81            [12] 1637 	mov	sp,a
                                   1638 ;	radio/at.c:375: return;
                                   1639 ;	radio/at.c:377: case '=':
      0004CB 22               [24] 1640 	ret
      0004CC                       1641 00104$:
                                   1642 ;	radio/at.c:378: if (sreg > 0) {
      0004CC EC               [12] 1643 	mov	a,r4
      0004CD 60 32            [24] 1644 	jz	00109$
                                   1645 ;	radio/at.c:379: idx++;
      0004CF 90r00r11         [24] 1646 	mov	dptr,#_idx
      0004D2 EF               [12] 1647 	mov	a,r7
      0004D3 04               [12] 1648 	inc	a
      0004D4 F0               [24] 1649 	movx	@dptr,a
                                   1650 ;	radio/at.c:380: at_parse_number();
      0004D5 C0 04            [24] 1651 	push	ar4
      0004D7 12r02r07         [24] 1652 	lcall	_at_parse_number
      0004DA D0 04            [24] 1653 	pop	ar4
                                   1654 ;	radio/at.c:381: if (param_set(sreg, at_num)) {
      0004DC 90r00r12         [24] 1655 	mov	dptr,#_at_num
      0004DF E0               [24] 1656 	movx	a,@dptr
      0004E0 FB               [12] 1657 	mov	r3,a
      0004E1 A3               [24] 1658 	inc	dptr
      0004E2 E0               [24] 1659 	movx	a,@dptr
      0004E3 FD               [12] 1660 	mov	r5,a
      0004E4 A3               [24] 1661 	inc	dptr
      0004E5 E0               [24] 1662 	movx	a,@dptr
      0004E6 FE               [12] 1663 	mov	r6,a
      0004E7 A3               [24] 1664 	inc	dptr
      0004E8 E0               [24] 1665 	movx	a,@dptr
      0004E9 FF               [12] 1666 	mov	r7,a
      0004EA 78r00            [12] 1667 	mov	r0,#_param_set_PARM_2
      0004EC EB               [12] 1668 	mov	a,r3
      0004ED F2               [24] 1669 	movx	@r0,a
      0004EE 08               [12] 1670 	inc	r0
      0004EF ED               [12] 1671 	mov	a,r5
      0004F0 F2               [24] 1672 	movx	@r0,a
      0004F1 08               [12] 1673 	inc	r0
      0004F2 EE               [12] 1674 	mov	a,r6
      0004F3 F2               [24] 1675 	movx	@r0,a
      0004F4 08               [12] 1676 	inc	r0
      0004F5 EF               [12] 1677 	mov	a,r7
      0004F6 F2               [24] 1678 	movx	@r0,a
      0004F7 8C 82            [24] 1679 	mov	dpl,r4
      0004F9 12r00r00         [24] 1680 	lcall	_param_set
      0004FC 50 03            [24] 1681 	jnc	00109$
                                   1682 ;	radio/at.c:382: at_ok();
                                   1683 ;	radio/at.c:383: return;
                                   1684 ;	radio/at.c:387: }
      0004FE 02r01rC3         [24] 1685 	ljmp	_at_ok
      000501                       1686 00109$:
                                   1687 ;	radio/at.c:388: at_error();
      000501 02r01rE5         [24] 1688 	ljmp	_at_error
                                   1689 ;------------------------------------------------------------
                                   1690 ;Allocation info for local variables in function 'at_ampersand'
                                   1691 ;------------------------------------------------------------
                                   1692 ;	radio/at.c:392: at_ampersand(void)
                                   1693 ;	-----------------------------------------
                                   1694 ;	 function at_ampersand
                                   1695 ;	-----------------------------------------
      000504                       1696 _at_ampersand:
                                   1697 ;	radio/at.c:394: switch (at_cmd[3]) {
      000504 90r00r03         [24] 1698 	mov	dptr,#(_at_cmd + 0x0003)
      000507 E0               [24] 1699 	movx	a,@dptr
      000508 FF               [12] 1700 	mov	r7,a
      000509 BF 46 02         [24] 1701 	cjne	r7,#0x46,00154$
      00050C 80 17            [24] 1702 	sjmp	00101$
      00050E                       1703 00154$:
      00050E BF 50 02         [24] 1704 	cjne	r7,#0x50,00155$
      000511 80 58            [24] 1705 	sjmp	00107$
      000513                       1706 00155$:
      000513 BF 54 02         [24] 1707 	cjne	r7,#0x54,00156$
      000516 80 56            [24] 1708 	sjmp	00108$
      000518                       1709 00156$:
      000518 BF 55 02         [24] 1710 	cjne	r7,#0x55,00157$
      00051B 80 14            [24] 1711 	sjmp	00103$
      00051D                       1712 00157$:
      00051D BF 57 02         [24] 1713 	cjne	r7,#0x57,00158$
      000520 80 09            [24] 1714 	sjmp	00102$
      000522                       1715 00158$:
      000522 02r05rE4         [24] 1716 	ljmp	00118$
                                   1717 ;	radio/at.c:395: case 'F':
      000525                       1718 00101$:
                                   1719 ;	radio/at.c:396: param_default();
      000525 12r00r00         [24] 1720 	lcall	_param_default
                                   1721 ;	radio/at.c:397: at_ok();
                                   1722 ;	radio/at.c:398: break;
      000528 02r01rC3         [24] 1723 	ljmp	_at_ok
                                   1724 ;	radio/at.c:399: case 'W':
      00052B                       1725 00102$:
                                   1726 ;	radio/at.c:400: param_save();
      00052B 12r00r00         [24] 1727 	lcall	_param_save
                                   1728 ;	radio/at.c:401: at_ok();
                                   1729 ;	radio/at.c:402: break;
      00052E 02r01rC3         [24] 1730 	ljmp	_at_ok
                                   1731 ;	radio/at.c:404: case 'U':
      000531                       1732 00103$:
                                   1733 ;	radio/at.c:405: if (!strcmp(at_cmd + 4, "PDATE")) {
      000531 90r00r00         [24] 1734 	mov	dptr,#_strcmp_PARM_2
      000534 74r23            [12] 1735 	mov	a,#___str_6
      000536 F0               [24] 1736 	movx	@dptr,a
      000537 74s00            [12] 1737 	mov	a,#(___str_6 >> 8)
      000539 A3               [24] 1738 	inc	dptr
      00053A F0               [24] 1739 	movx	@dptr,a
      00053B 74 80            [12] 1740 	mov	a,#0x80
      00053D A3               [24] 1741 	inc	dptr
      00053E F0               [24] 1742 	movx	@dptr,a
      00053F 90r00r04         [24] 1743 	mov	dptr,#(_at_cmd + 0x0004)
      000542 75 F0 00         [24] 1744 	mov	b,#0x00
      000545 12r00r00         [24] 1745 	lcall	_strcmp
      000548 E5 82            [12] 1746 	mov	a,dpl
      00054A 85 83 F0         [24] 1747 	mov	b,dph
      00054D 45 F0            [12] 1748 	orl	a,b
      00054F 70 17            [24] 1749 	jnz	00106$
                                   1750 ;	radio/at.c:407: FLKEY = 0xa5;
      000551 75 B7 A5         [24] 1751 	mov	_FLKEY,#0xA5
                                   1752 ;	radio/at.c:408: FLKEY = 0xf1;
      000554 75 B7 F1         [24] 1753 	mov	_FLKEY,#0xF1
                                   1754 ;	radio/at.c:409: PSCTL = 0x03;				// set PSWE and PSEE
      000557 75 8F 03         [24] 1755 	mov	_PSCTL,#0x03
                                   1756 ;	radio/at.c:410: *(uint8_t __xdata *)FLASH_SIGNATURE_BYTES = 0xff;	// do the page erase
      00055A 90 F7 FE         [24] 1757 	mov	dptr,#0xF7FE
      00055D 74 FF            [12] 1758 	mov	a,#0xFF
      00055F F0               [24] 1759 	movx	@dptr,a
                                   1760 ;	radio/at.c:411: PSCTL = 0x00;				// disable PSWE/PSEE
      000560 75 8F 00         [24] 1761 	mov	_PSCTL,#0x00
                                   1762 ;	radio/at.c:414: RSTSRC |= 0x10;
      000563 43 EF 10         [24] 1763 	orl	_RSTSRC,#0x10
      000566                       1764 00121$:
      000566 80 FE            [24] 1765 	sjmp	00121$
      000568                       1766 00106$:
                                   1767 ;	radio/at.c:419: at_error();
                                   1768 ;	radio/at.c:420: break;
      000568 02r01rE5         [24] 1769 	ljmp	_at_error
                                   1770 ;	radio/at.c:422: case 'P':
      00056B                       1771 00107$:
                                   1772 ;	radio/at.c:423: tdm_change_phase();
                                   1773 ;	radio/at.c:424: break;
      00056B 02r00r00         [24] 1774 	ljmp	_tdm_change_phase
                                   1775 ;	radio/at.c:426: case 'T':
      00056E                       1776 00108$:
                                   1777 ;	radio/at.c:428: if (!strcmp(at_cmd + 4, "")) {
      00056E 90r00r00         [24] 1778 	mov	dptr,#_strcmp_PARM_2
      000571 74r29            [12] 1779 	mov	a,#___str_7
      000573 F0               [24] 1780 	movx	@dptr,a
      000574 74s00            [12] 1781 	mov	a,#(___str_7 >> 8)
      000576 A3               [24] 1782 	inc	dptr
      000577 F0               [24] 1783 	movx	@dptr,a
      000578 74 80            [12] 1784 	mov	a,#0x80
      00057A A3               [24] 1785 	inc	dptr
      00057B F0               [24] 1786 	movx	@dptr,a
      00057C 90r00r04         [24] 1787 	mov	dptr,#(_at_cmd + 0x0004)
      00057F 75 F0 00         [24] 1788 	mov	b,#0x00
      000582 12r00r00         [24] 1789 	lcall	_strcmp
      000585 E5 82            [12] 1790 	mov	a,dpl
      000587 85 83 F0         [24] 1791 	mov	b,dph
      00058A 45 F0            [12] 1792 	orl	a,b
      00058C 70 05            [24] 1793 	jnz	00116$
                                   1794 ;	radio/at.c:430: at_testmode = 0;
      00058E 78r02            [12] 1795 	mov	r0,#_at_testmode
      000590 E4               [12] 1796 	clr	a
      000591 F2               [24] 1797 	movx	@r0,a
      000592 22               [24] 1798 	ret
      000593                       1799 00116$:
                                   1800 ;	radio/at.c:431: } else if (!strcmp(at_cmd + 4, "=RSSI")) {
      000593 90r00r00         [24] 1801 	mov	dptr,#_strcmp_PARM_2
      000596 74r2A            [12] 1802 	mov	a,#___str_8
      000598 F0               [24] 1803 	movx	@dptr,a
      000599 74s00            [12] 1804 	mov	a,#(___str_8 >> 8)
      00059B A3               [24] 1805 	inc	dptr
      00059C F0               [24] 1806 	movx	@dptr,a
      00059D 74 80            [12] 1807 	mov	a,#0x80
      00059F A3               [24] 1808 	inc	dptr
      0005A0 F0               [24] 1809 	movx	@dptr,a
      0005A1 90r00r04         [24] 1810 	mov	dptr,#(_at_cmd + 0x0004)
      0005A4 75 F0 00         [24] 1811 	mov	b,#0x00
      0005A7 12r00r00         [24] 1812 	lcall	_strcmp
      0005AA E5 82            [12] 1813 	mov	a,dpl
      0005AC 85 83 F0         [24] 1814 	mov	b,dph
      0005AF 45 F0            [12] 1815 	orl	a,b
      0005B1 70 07            [24] 1816 	jnz	00113$
                                   1817 ;	radio/at.c:433: at_testmode ^= AT_TEST_RSSI;
      0005B3 78r02            [12] 1818 	mov	r0,#_at_testmode
      0005B5 E2               [24] 1819 	movx	a,@r0
      0005B6 64 01            [12] 1820 	xrl	a,#0x01
      0005B8 F2               [24] 1821 	movx	@r0,a
      0005B9 22               [24] 1822 	ret
      0005BA                       1823 00113$:
                                   1824 ;	radio/at.c:434: } else if (!strcmp(at_cmd + 4, "=TDM")) {
      0005BA 90r00r00         [24] 1825 	mov	dptr,#_strcmp_PARM_2
      0005BD 74r30            [12] 1826 	mov	a,#___str_9
      0005BF F0               [24] 1827 	movx	@dptr,a
      0005C0 74s00            [12] 1828 	mov	a,#(___str_9 >> 8)
      0005C2 A3               [24] 1829 	inc	dptr
      0005C3 F0               [24] 1830 	movx	@dptr,a
      0005C4 74 80            [12] 1831 	mov	a,#0x80
      0005C6 A3               [24] 1832 	inc	dptr
      0005C7 F0               [24] 1833 	movx	@dptr,a
      0005C8 90r00r04         [24] 1834 	mov	dptr,#(_at_cmd + 0x0004)
      0005CB 75 F0 00         [24] 1835 	mov	b,#0x00
      0005CE 12r00r00         [24] 1836 	lcall	_strcmp
      0005D1 E5 82            [12] 1837 	mov	a,dpl
      0005D3 85 83 F0         [24] 1838 	mov	b,dph
      0005D6 45 F0            [12] 1839 	orl	a,b
      0005D8 70 07            [24] 1840 	jnz	00110$
                                   1841 ;	radio/at.c:436: at_testmode ^= AT_TEST_TDM;
      0005DA 78r02            [12] 1842 	mov	r0,#_at_testmode
      0005DC E2               [24] 1843 	movx	a,@r0
      0005DD 64 02            [12] 1844 	xrl	a,#0x02
      0005DF F2               [24] 1845 	movx	@r0,a
      0005E0 22               [24] 1846 	ret
      0005E1                       1847 00110$:
                                   1848 ;	radio/at.c:438: at_error();
                                   1849 ;	radio/at.c:440: break;
                                   1850 ;	radio/at.c:456: default:
      0005E1 02r01rE5         [24] 1851 	ljmp	_at_error
      0005E4                       1852 00118$:
                                   1853 ;	radio/at.c:457: at_error();
                                   1854 ;	radio/at.c:459: }
      0005E4 02r01rE5         [24] 1855 	ljmp	_at_error
                                   1856 ;------------------------------------------------------------
                                   1857 ;Allocation info for local variables in function 'at_p'
                                   1858 ;------------------------------------------------------------
                                   1859 ;	radio/at.c:463: at_p (void)
                                   1860 ;	-----------------------------------------
                                   1861 ;	 function at_p
                                   1862 ;	-----------------------------------------
      0005E7                       1863 _at_p:
                                   1864 ;	radio/at.c:522: at_error();
      0005E7 02r01rE5         [24] 1865 	ljmp	_at_error
                                   1866 ;------------------------------------------------------------
                                   1867 ;Allocation info for local variables in function 'at_plus'
                                   1868 ;------------------------------------------------------------
                                   1869 ;	radio/at.c:527: at_plus(void)
                                   1870 ;	-----------------------------------------
                                   1871 ;	 function at_plus
                                   1872 ;	-----------------------------------------
      0005EA                       1873 _at_plus:
                                   1874 ;	radio/at.c:532: idx = 4;
      0005EA 90r00r11         [24] 1875 	mov	dptr,#_idx
      0005ED 74 04            [12] 1876 	mov	a,#0x04
      0005EF F0               [24] 1877 	movx	@dptr,a
                                   1878 ;	radio/at.c:533: at_parse_number();
      0005F0 12r02r07         [24] 1879 	lcall	_at_parse_number
                                   1880 ;	radio/at.c:605: at_error();
      0005F3 02r01rE5         [24] 1881 	ljmp	_at_error
                                   1882 	.area CSEG    (CODE)
                                   1883 	.area CONST   (CODE)
      000000                       1884 ___str_0:
      000000 25 73                 1885 	.ascii "%s"
      000002 0A                    1886 	.db 0x0A
      000003 00                    1887 	.db 0x00
      000004                       1888 ___str_1:
      000004 4F 4B                 1889 	.ascii "OK"
      000006 00                    1890 	.db 0x00
      000007                       1891 ___str_2:
      000007 45 52 52 4F 52        1892 	.ascii "ERROR"
      00000C 00                    1893 	.db 0x00
      00000D                       1894 ___str_3:
      00000D 25 63 25 75 3A 25 73  1895 	.ascii "%c%u:%s=%lu"
             3D 25 6C 75
      000018 0A                    1896 	.db 0x0A
      000019 00                    1897 	.db 0x00
      00001A                       1898 ___str_4:
      00001A 25 75                 1899 	.ascii "%u"
      00001C 0A                    1900 	.db 0x0A
      00001D 00                    1901 	.db 0x00
      00001E                       1902 ___str_5:
      00001E 25 6C 75              1903 	.ascii "%lu"
      000021 0A                    1904 	.db 0x0A
      000022 00                    1905 	.db 0x00
      000023                       1906 ___str_6:
      000023 50 44 41 54 45        1907 	.ascii "PDATE"
      000028 00                    1908 	.db 0x00
      000029                       1909 ___str_7:
      000029 00                    1910 	.db 0x00
      00002A                       1911 ___str_8:
      00002A 3D 52 53 53 49        1912 	.ascii "=RSSI"
      00002F 00                    1913 	.db 0x00
      000030                       1914 ___str_9:
      000030 3D 54 44 4D           1915 	.ascii "=TDM"
      000034 00                    1916 	.db 0x00
                                   1917 	.area XINIT   (CODE)
                                   1918 	.area CABS    (ABS,CODE)
