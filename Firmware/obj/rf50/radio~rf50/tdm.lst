                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Sep  7 2022) (Linux)
                                      4 ; This file was generated Wed Sep  7 10:05:05 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module tdm
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _fhop_set_locked
                                     13 	.globl _fhop_window_change
                                     14 	.globl _fhop_receive_channel
                                     15 	.globl _fhop_transmit_channel
                                     16 	.globl _packet_inject
                                     17 	.globl _packet_set_max_xmit
                                     18 	.globl _packet_force_resend
                                     19 	.globl _packet_is_duplicate
                                     20 	.globl _packet_is_injected
                                     21 	.globl _packet_is_resend
                                     22 	.globl _packet_get_next
                                     23 	.globl _timer_entropy
                                     24 	.globl _delay_msec
                                     25 	.globl _timer2_tick
                                     26 	.globl _radio_temperature
                                     27 	.globl _MAVLink_report
                                     28 	.globl _radio_receive_in_progress
                                     29 	.globl _radio_get_transmit_power
                                     30 	.globl _radio_air_rate
                                     31 	.globl _radio_current_rssi
                                     32 	.globl _radio_last_rssi
                                     33 	.globl _radio_set_channel
                                     34 	.globl _radio_receiver_on
                                     35 	.globl _radio_transmit
                                     36 	.globl _radio_preamble_detected
                                     37 	.globl _radio_receive_packet
                                     38 	.globl _printf_end_capture
                                     39 	.globl _printf_start_capture
                                     40 	.globl _printfl
                                     41 	.globl _panic
                                     42 	.globl _at_command
                                     43 	.globl _constrain
                                     44 	.globl _param_get
                                     45 	.globl _serial_write_buf
                                     46 	.globl _strlen
                                     47 	.globl _memset
                                     48 	.globl _memcpy
                                     49 	.globl _rand
                                     50 	.globl _SDN
                                     51 	.globl _NSS1
                                     52 	.globl _IRQ
                                     53 	.globl _BUTTON_DOWN
                                     54 	.globl _BUTTON_UP
                                     55 	.globl _BUTTON_ENTER
                                     56 	.globl _LED_GREEN
                                     57 	.globl _LED_RED
                                     58 	.globl _SPI0EN
                                     59 	.globl _TXBMT0
                                     60 	.globl _NSS0MD0
                                     61 	.globl _NSS0MD1
                                     62 	.globl _RXOVRN0
                                     63 	.globl _MODF0
                                     64 	.globl _WCOL0
                                     65 	.globl _SPIF0
                                     66 	.globl _AD0CM0
                                     67 	.globl _AD0CM1
                                     68 	.globl _AD0CM2
                                     69 	.globl _AD0WINT
                                     70 	.globl _AD0BUSY
                                     71 	.globl _AD0INT
                                     72 	.globl _BURSTEN
                                     73 	.globl _AD0EN
                                     74 	.globl _CCF0
                                     75 	.globl _CCF1
                                     76 	.globl _CCF2
                                     77 	.globl _CCF3
                                     78 	.globl _CCF4
                                     79 	.globl _CCF5
                                     80 	.globl _CR
                                     81 	.globl _CF
                                     82 	.globl _P
                                     83 	.globl _F1
                                     84 	.globl _OV
                                     85 	.globl _RS0
                                     86 	.globl _RS1
                                     87 	.globl _F0
                                     88 	.globl _AC
                                     89 	.globl _CY
                                     90 	.globl _T2XCLK
                                     91 	.globl _T2RCLK
                                     92 	.globl _TR2
                                     93 	.globl _T2SPLIT
                                     94 	.globl _TF2CEN
                                     95 	.globl _TF2LEN
                                     96 	.globl _TF2L
                                     97 	.globl _TF2H
                                     98 	.globl _SI
                                     99 	.globl _ACK
                                    100 	.globl _ARBLOST
                                    101 	.globl _ACKRQ
                                    102 	.globl _STO
                                    103 	.globl _STA
                                    104 	.globl _TXMODE
                                    105 	.globl _MASTER
                                    106 	.globl _PX0
                                    107 	.globl _PT0
                                    108 	.globl _PX1
                                    109 	.globl _PT1
                                    110 	.globl _PS0
                                    111 	.globl _PT2
                                    112 	.globl _PSPI0
                                    113 	.globl _SPI1EN
                                    114 	.globl _TXBMT1
                                    115 	.globl _NSS1MD0
                                    116 	.globl _NSS1MD1
                                    117 	.globl _RXOVRN1
                                    118 	.globl _MODF1
                                    119 	.globl _WCOL1
                                    120 	.globl _SPIF1
                                    121 	.globl _EX0
                                    122 	.globl _ET0
                                    123 	.globl _EX1
                                    124 	.globl _ET1
                                    125 	.globl _ES0
                                    126 	.globl _ET2
                                    127 	.globl _ESPI0
                                    128 	.globl _EA
                                    129 	.globl _RI0
                                    130 	.globl _TI0
                                    131 	.globl _RB80
                                    132 	.globl _TB80
                                    133 	.globl _REN0
                                    134 	.globl _MCE0
                                    135 	.globl _S0MODE
                                    136 	.globl _CRC0VAL
                                    137 	.globl _CRC0INIT
                                    138 	.globl _CRC0SEL
                                    139 	.globl _IT0
                                    140 	.globl _IE0
                                    141 	.globl _IT1
                                    142 	.globl _IE1
                                    143 	.globl _TR0
                                    144 	.globl _TF0
                                    145 	.globl _TR1
                                    146 	.globl _TF1
                                    147 	.globl _PCA0CP4
                                    148 	.globl _PCA0CP0
                                    149 	.globl _PCA0
                                    150 	.globl _PCA0CP3
                                    151 	.globl _PCA0CP2
                                    152 	.globl _PCA0CP1
                                    153 	.globl _PCA0CP5
                                    154 	.globl _TMR2
                                    155 	.globl _TMR2RL
                                    156 	.globl _ADC0LT
                                    157 	.globl _ADC0GT
                                    158 	.globl _ADC0
                                    159 	.globl _TMR3
                                    160 	.globl _TMR3RL
                                    161 	.globl _TOFF
                                    162 	.globl _DP
                                    163 	.globl _VDM0CN
                                    164 	.globl _PCA0CPH4
                                    165 	.globl _PCA0CPL4
                                    166 	.globl _PCA0CPH0
                                    167 	.globl _PCA0CPL0
                                    168 	.globl _PCA0H
                                    169 	.globl _PCA0L
                                    170 	.globl _SPI0CN
                                    171 	.globl _EIP2
                                    172 	.globl _EIP1
                                    173 	.globl _SMB0ADM
                                    174 	.globl _SMB0ADR
                                    175 	.globl _P2MDIN
                                    176 	.globl _P1MDIN
                                    177 	.globl _P0MDIN
                                    178 	.globl _B
                                    179 	.globl _RSTSRC
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPL3
                                    182 	.globl _PCA0CPH2
                                    183 	.globl _PCA0CPL2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPL1
                                    186 	.globl _ADC0CN
                                    187 	.globl _EIE2
                                    188 	.globl _EIE1
                                    189 	.globl _FLWR
                                    190 	.globl _IT01CF
                                    191 	.globl _XBR2
                                    192 	.globl _XBR1
                                    193 	.globl _XBR0
                                    194 	.globl _ACC
                                    195 	.globl _PCA0PWM
                                    196 	.globl _PCA0CPM4
                                    197 	.globl _PCA0CPM3
                                    198 	.globl _PCA0CPM2
                                    199 	.globl _PCA0CPM1
                                    200 	.globl _PCA0CPM0
                                    201 	.globl _PCA0MD
                                    202 	.globl _PCA0CN
                                    203 	.globl _P0MAT
                                    204 	.globl _P2SKIP
                                    205 	.globl _P1SKIP
                                    206 	.globl _P0SKIP
                                    207 	.globl _PCA0CPH5
                                    208 	.globl _PCA0CPL5
                                    209 	.globl _REF0CN
                                    210 	.globl _PSW
                                    211 	.globl _P1MAT
                                    212 	.globl _PCA0CPM5
                                    213 	.globl _TMR2H
                                    214 	.globl _TMR2L
                                    215 	.globl _TMR2RLH
                                    216 	.globl _TMR2RLL
                                    217 	.globl _REG0CN
                                    218 	.globl _TMR2CN
                                    219 	.globl _P0MASK
                                    220 	.globl _ADC0LTH
                                    221 	.globl _ADC0LTL
                                    222 	.globl _ADC0GTH
                                    223 	.globl _ADC0GTL
                                    224 	.globl _SMB0DAT
                                    225 	.globl _SMB0CF
                                    226 	.globl _SMB0CN
                                    227 	.globl _P1MASK
                                    228 	.globl _ADC0H
                                    229 	.globl _ADC0L
                                    230 	.globl _ADC0TK
                                    231 	.globl _ADC0CF
                                    232 	.globl _ADC0MX
                                    233 	.globl _ADC0PWR
                                    234 	.globl _ADC0AC
                                    235 	.globl _IREF0CN
                                    236 	.globl _IP
                                    237 	.globl _FLKEY
                                    238 	.globl _FLSCL
                                    239 	.globl _PMU0CF
                                    240 	.globl _OSCICL
                                    241 	.globl _OSCICN
                                    242 	.globl _OSCXCN
                                    243 	.globl _SPI1CN
                                    244 	.globl _ONESHOT
                                    245 	.globl _EMI0TC
                                    246 	.globl _RTC0KEY
                                    247 	.globl _RTC0DAT
                                    248 	.globl _RTC0ADR
                                    249 	.globl _EMI0CF
                                    250 	.globl _EMI0CN
                                    251 	.globl _CLKSEL
                                    252 	.globl _IE
                                    253 	.globl _SFRPAGE
                                    254 	.globl _P2DRV
                                    255 	.globl _P2MDOUT
                                    256 	.globl _P1DRV
                                    257 	.globl _P1MDOUT
                                    258 	.globl _P0DRV
                                    259 	.globl _P0MDOUT
                                    260 	.globl _SPI0DAT
                                    261 	.globl _SPI0CKR
                                    262 	.globl _SPI0CFG
                                    263 	.globl _P2
                                    264 	.globl _CPT0MX
                                    265 	.globl _CPT1MX
                                    266 	.globl _CPT0MD
                                    267 	.globl _CPT1MD
                                    268 	.globl _CPT0CN
                                    269 	.globl _CPT1CN
                                    270 	.globl _SBUF0
                                    271 	.globl _SCON0
                                    272 	.globl _CRC0CNT
                                    273 	.globl _DC0CN
                                    274 	.globl _CRC0AUTO
                                    275 	.globl _DC0CF
                                    276 	.globl _TMR3H
                                    277 	.globl _CRC0FLIP
                                    278 	.globl _TMR3L
                                    279 	.globl _CRC0IN
                                    280 	.globl _TMR3RLH
                                    281 	.globl _CRC0CN
                                    282 	.globl _TMR3RLL
                                    283 	.globl _CRC0DAT
                                    284 	.globl _TMR3CN
                                    285 	.globl _P1
                                    286 	.globl _PSCTL
                                    287 	.globl _CKCON
                                    288 	.globl _TH1
                                    289 	.globl _TH0
                                    290 	.globl _TL1
                                    291 	.globl _TL0
                                    292 	.globl _TMOD
                                    293 	.globl _TCON
                                    294 	.globl _PCON
                                    295 	.globl _TOFFH
                                    296 	.globl _SPI1DAT
                                    297 	.globl _TOFFL
                                    298 	.globl _SPI1CKR
                                    299 	.globl _SPI1CFG
                                    300 	.globl _DPH
                                    301 	.globl _DPL
                                    302 	.globl _SP
                                    303 	.globl _P0
                                    304 	.globl _test_display
                                    305 	.globl _pbuf
                                    306 	.globl _trailer
                                    307 	.globl _lbt_rssi
                                    308 	.globl _duty_cycle_offset
                                    309 	.globl _duty_cycle
                                    310 	.globl _transmit_wait
                                    311 	.globl __canary
                                    312 	.globl _tdm_show_rssi
                                    313 	.globl _tdm_change_phase
                                    314 	.globl _tdm_remote_at
                                    315 	.globl _tdm_serial_loop
                                    316 	.globl _tdm_init
                                    317 	.globl _tdm_report_timing
                                    318 ;--------------------------------------------------------
                                    319 ; special function registers
                                    320 ;--------------------------------------------------------
                                    321 	.area RSEG    (ABS,DATA)
      000000                        322 	.org 0x0000
                           000080   323 _P0	=	0x0080
                           000081   324 _SP	=	0x0081
                           000082   325 _DPL	=	0x0082
                           000083   326 _DPH	=	0x0083
                           000084   327 _SPI1CFG	=	0x0084
                           000085   328 _SPI1CKR	=	0x0085
                           000085   329 _TOFFL	=	0x0085
                           000086   330 _SPI1DAT	=	0x0086
                           000086   331 _TOFFH	=	0x0086
                           000087   332 _PCON	=	0x0087
                           000088   333 _TCON	=	0x0088
                           000089   334 _TMOD	=	0x0089
                           00008A   335 _TL0	=	0x008a
                           00008B   336 _TL1	=	0x008b
                           00008C   337 _TH0	=	0x008c
                           00008D   338 _TH1	=	0x008d
                           00008E   339 _CKCON	=	0x008e
                           00008F   340 _PSCTL	=	0x008f
                           000090   341 _P1	=	0x0090
                           000091   342 _TMR3CN	=	0x0091
                           000091   343 _CRC0DAT	=	0x0091
                           000092   344 _TMR3RLL	=	0x0092
                           000092   345 _CRC0CN	=	0x0092
                           000093   346 _TMR3RLH	=	0x0093
                           000093   347 _CRC0IN	=	0x0093
                           000094   348 _TMR3L	=	0x0094
                           000095   349 _CRC0FLIP	=	0x0095
                           000095   350 _TMR3H	=	0x0095
                           000096   351 _DC0CF	=	0x0096
                           000096   352 _CRC0AUTO	=	0x0096
                           000097   353 _DC0CN	=	0x0097
                           000097   354 _CRC0CNT	=	0x0097
                           000098   355 _SCON0	=	0x0098
                           000099   356 _SBUF0	=	0x0099
                           00009A   357 _CPT1CN	=	0x009a
                           00009B   358 _CPT0CN	=	0x009b
                           00009C   359 _CPT1MD	=	0x009c
                           00009D   360 _CPT0MD	=	0x009d
                           00009E   361 _CPT1MX	=	0x009e
                           00009F   362 _CPT0MX	=	0x009f
                           0000A0   363 _P2	=	0x00a0
                           0000A1   364 _SPI0CFG	=	0x00a1
                           0000A2   365 _SPI0CKR	=	0x00a2
                           0000A3   366 _SPI0DAT	=	0x00a3
                           0000A4   367 _P0MDOUT	=	0x00a4
                           0000A4   368 _P0DRV	=	0x00a4
                           0000A5   369 _P1MDOUT	=	0x00a5
                           0000A5   370 _P1DRV	=	0x00a5
                           0000A6   371 _P2MDOUT	=	0x00a6
                           0000A6   372 _P2DRV	=	0x00a6
                           0000A7   373 _SFRPAGE	=	0x00a7
                           0000A8   374 _IE	=	0x00a8
                           0000A9   375 _CLKSEL	=	0x00a9
                           0000AA   376 _EMI0CN	=	0x00aa
                           0000AB   377 _EMI0CF	=	0x00ab
                           0000AC   378 _RTC0ADR	=	0x00ac
                           0000AD   379 _RTC0DAT	=	0x00ad
                           0000AE   380 _RTC0KEY	=	0x00ae
                           0000AF   381 _EMI0TC	=	0x00af
                           0000AF   382 _ONESHOT	=	0x00af
                           0000B0   383 _SPI1CN	=	0x00b0
                           0000B1   384 _OSCXCN	=	0x00b1
                           0000B2   385 _OSCICN	=	0x00b2
                           0000B3   386 _OSCICL	=	0x00b3
                           0000B5   387 _PMU0CF	=	0x00b5
                           0000B6   388 _FLSCL	=	0x00b6
                           0000B7   389 _FLKEY	=	0x00b7
                           0000B8   390 _IP	=	0x00b8
                           0000B9   391 _IREF0CN	=	0x00b9
                           0000BA   392 _ADC0AC	=	0x00ba
                           0000BA   393 _ADC0PWR	=	0x00ba
                           0000BB   394 _ADC0MX	=	0x00bb
                           0000BC   395 _ADC0CF	=	0x00bc
                           0000BD   396 _ADC0TK	=	0x00bd
                           0000BD   397 _ADC0L	=	0x00bd
                           0000BE   398 _ADC0H	=	0x00be
                           0000BF   399 _P1MASK	=	0x00bf
                           0000C0   400 _SMB0CN	=	0x00c0
                           0000C1   401 _SMB0CF	=	0x00c1
                           0000C2   402 _SMB0DAT	=	0x00c2
                           0000C3   403 _ADC0GTL	=	0x00c3
                           0000C4   404 _ADC0GTH	=	0x00c4
                           0000C5   405 _ADC0LTL	=	0x00c5
                           0000C6   406 _ADC0LTH	=	0x00c6
                           0000C7   407 _P0MASK	=	0x00c7
                           0000C8   408 _TMR2CN	=	0x00c8
                           0000C9   409 _REG0CN	=	0x00c9
                           0000CA   410 _TMR2RLL	=	0x00ca
                           0000CB   411 _TMR2RLH	=	0x00cb
                           0000CC   412 _TMR2L	=	0x00cc
                           0000CD   413 _TMR2H	=	0x00cd
                           0000CE   414 _PCA0CPM5	=	0x00ce
                           0000CF   415 _P1MAT	=	0x00cf
                           0000D0   416 _PSW	=	0x00d0
                           0000D1   417 _REF0CN	=	0x00d1
                           0000D2   418 _PCA0CPL5	=	0x00d2
                           0000D3   419 _PCA0CPH5	=	0x00d3
                           0000D4   420 _P0SKIP	=	0x00d4
                           0000D5   421 _P1SKIP	=	0x00d5
                           0000D6   422 _P2SKIP	=	0x00d6
                           0000D7   423 _P0MAT	=	0x00d7
                           0000D8   424 _PCA0CN	=	0x00d8
                           0000D9   425 _PCA0MD	=	0x00d9
                           0000DA   426 _PCA0CPM0	=	0x00da
                           0000DB   427 _PCA0CPM1	=	0x00db
                           0000DC   428 _PCA0CPM2	=	0x00dc
                           0000DD   429 _PCA0CPM3	=	0x00dd
                           0000DE   430 _PCA0CPM4	=	0x00de
                           0000DF   431 _PCA0PWM	=	0x00df
                           0000E0   432 _ACC	=	0x00e0
                           0000E1   433 _XBR0	=	0x00e1
                           0000E2   434 _XBR1	=	0x00e2
                           0000E3   435 _XBR2	=	0x00e3
                           0000E4   436 _IT01CF	=	0x00e4
                           0000E5   437 _FLWR	=	0x00e5
                           0000E6   438 _EIE1	=	0x00e6
                           0000E7   439 _EIE2	=	0x00e7
                           0000E8   440 _ADC0CN	=	0x00e8
                           0000E9   441 _PCA0CPL1	=	0x00e9
                           0000EA   442 _PCA0CPH1	=	0x00ea
                           0000EB   443 _PCA0CPL2	=	0x00eb
                           0000EC   444 _PCA0CPH2	=	0x00ec
                           0000ED   445 _PCA0CPL3	=	0x00ed
                           0000EE   446 _PCA0CPH3	=	0x00ee
                           0000EF   447 _RSTSRC	=	0x00ef
                           0000F0   448 _B	=	0x00f0
                           0000F1   449 _P0MDIN	=	0x00f1
                           0000F2   450 _P1MDIN	=	0x00f2
                           0000F3   451 _P2MDIN	=	0x00f3
                           0000F4   452 _SMB0ADR	=	0x00f4
                           0000F5   453 _SMB0ADM	=	0x00f5
                           0000F6   454 _EIP1	=	0x00f6
                           0000F7   455 _EIP2	=	0x00f7
                           0000F8   456 _SPI0CN	=	0x00f8
                           0000F9   457 _PCA0L	=	0x00f9
                           0000FA   458 _PCA0H	=	0x00fa
                           0000FB   459 _PCA0CPL0	=	0x00fb
                           0000FC   460 _PCA0CPH0	=	0x00fc
                           0000FD   461 _PCA0CPL4	=	0x00fd
                           0000FE   462 _PCA0CPH4	=	0x00fe
                           0000FF   463 _VDM0CN	=	0x00ff
                           008382   464 _DP	=	0x8382
                           008685   465 _TOFF	=	0x8685
                           009392   466 _TMR3RL	=	0x9392
                           009594   467 _TMR3	=	0x9594
                           00BEBD   468 _ADC0	=	0xbebd
                           00C4C3   469 _ADC0GT	=	0xc4c3
                           00C6C5   470 _ADC0LT	=	0xc6c5
                           00CBCA   471 _TMR2RL	=	0xcbca
                           00CDCC   472 _TMR2	=	0xcdcc
                           00D3D2   473 _PCA0CP5	=	0xd3d2
                           00EAE9   474 _PCA0CP1	=	0xeae9
                           00ECEB   475 _PCA0CP2	=	0xeceb
                           00EEED   476 _PCA0CP3	=	0xeeed
                           00FAF9   477 _PCA0	=	0xfaf9
                           00FCFB   478 _PCA0CP0	=	0xfcfb
                           00FEFD   479 _PCA0CP4	=	0xfefd
                                    480 ;--------------------------------------------------------
                                    481 ; special function bits
                                    482 ;--------------------------------------------------------
                                    483 	.area RSEG    (ABS,DATA)
      000000                        484 	.org 0x0000
                           00008F   485 _TF1	=	0x008f
                           00008E   486 _TR1	=	0x008e
                           00008D   487 _TF0	=	0x008d
                           00008C   488 _TR0	=	0x008c
                           00008B   489 _IE1	=	0x008b
                           00008A   490 _IT1	=	0x008a
                           000089   491 _IE0	=	0x0089
                           000088   492 _IT0	=	0x0088
                           000096   493 _CRC0SEL	=	0x0096
                           000095   494 _CRC0INIT	=	0x0095
                           000094   495 _CRC0VAL	=	0x0094
                           00009F   496 _S0MODE	=	0x009f
                           00009D   497 _MCE0	=	0x009d
                           00009C   498 _REN0	=	0x009c
                           00009B   499 _TB80	=	0x009b
                           00009A   500 _RB80	=	0x009a
                           000099   501 _TI0	=	0x0099
                           000098   502 _RI0	=	0x0098
                           0000AF   503 _EA	=	0x00af
                           0000AE   504 _ESPI0	=	0x00ae
                           0000AD   505 _ET2	=	0x00ad
                           0000AC   506 _ES0	=	0x00ac
                           0000AB   507 _ET1	=	0x00ab
                           0000AA   508 _EX1	=	0x00aa
                           0000A9   509 _ET0	=	0x00a9
                           0000A8   510 _EX0	=	0x00a8
                           0000B7   511 _SPIF1	=	0x00b7
                           0000B6   512 _WCOL1	=	0x00b6
                           0000B5   513 _MODF1	=	0x00b5
                           0000B4   514 _RXOVRN1	=	0x00b4
                           0000B3   515 _NSS1MD1	=	0x00b3
                           0000B2   516 _NSS1MD0	=	0x00b2
                           0000B1   517 _TXBMT1	=	0x00b1
                           0000B0   518 _SPI1EN	=	0x00b0
                           0000BE   519 _PSPI0	=	0x00be
                           0000BD   520 _PT2	=	0x00bd
                           0000BC   521 _PS0	=	0x00bc
                           0000BB   522 _PT1	=	0x00bb
                           0000BA   523 _PX1	=	0x00ba
                           0000B9   524 _PT0	=	0x00b9
                           0000B8   525 _PX0	=	0x00b8
                           0000C7   526 _MASTER	=	0x00c7
                           0000C6   527 _TXMODE	=	0x00c6
                           0000C5   528 _STA	=	0x00c5
                           0000C4   529 _STO	=	0x00c4
                           0000C3   530 _ACKRQ	=	0x00c3
                           0000C2   531 _ARBLOST	=	0x00c2
                           0000C1   532 _ACK	=	0x00c1
                           0000C0   533 _SI	=	0x00c0
                           0000CF   534 _TF2H	=	0x00cf
                           0000CE   535 _TF2L	=	0x00ce
                           0000CD   536 _TF2LEN	=	0x00cd
                           0000CC   537 _TF2CEN	=	0x00cc
                           0000CB   538 _T2SPLIT	=	0x00cb
                           0000CA   539 _TR2	=	0x00ca
                           0000C9   540 _T2RCLK	=	0x00c9
                           0000C8   541 _T2XCLK	=	0x00c8
                           0000D7   542 _CY	=	0x00d7
                           0000D6   543 _AC	=	0x00d6
                           0000D5   544 _F0	=	0x00d5
                           0000D4   545 _RS1	=	0x00d4
                           0000D3   546 _RS0	=	0x00d3
                           0000D2   547 _OV	=	0x00d2
                           0000D1   548 _F1	=	0x00d1
                           0000D0   549 _P	=	0x00d0
                           0000DF   550 _CF	=	0x00df
                           0000DE   551 _CR	=	0x00de
                           0000DD   552 _CCF5	=	0x00dd
                           0000DC   553 _CCF4	=	0x00dc
                           0000DB   554 _CCF3	=	0x00db
                           0000DA   555 _CCF2	=	0x00da
                           0000D9   556 _CCF1	=	0x00d9
                           0000D8   557 _CCF0	=	0x00d8
                           0000EF   558 _AD0EN	=	0x00ef
                           0000EE   559 _BURSTEN	=	0x00ee
                           0000ED   560 _AD0INT	=	0x00ed
                           0000EC   561 _AD0BUSY	=	0x00ec
                           0000EB   562 _AD0WINT	=	0x00eb
                           0000EA   563 _AD0CM2	=	0x00ea
                           0000E9   564 _AD0CM1	=	0x00e9
                           0000E8   565 _AD0CM0	=	0x00e8
                           0000FF   566 _SPIF0	=	0x00ff
                           0000FE   567 _WCOL0	=	0x00fe
                           0000FD   568 _MODF0	=	0x00fd
                           0000FC   569 _RXOVRN0	=	0x00fc
                           0000FB   570 _NSS0MD1	=	0x00fb
                           0000FA   571 _NSS0MD0	=	0x00fa
                           0000F9   572 _TXBMT0	=	0x00f9
                           0000F8   573 _SPI0EN	=	0x00f8
                           0000A0   574 _LED_RED	=	0x00a0
                           0000A5   575 _LED_GREEN	=	0x00a5
                           000086   576 _BUTTON_ENTER	=	0x0086
                           000095   577 _BUTTON_UP	=	0x0095
                           000096   578 _BUTTON_DOWN	=	0x0096
                           000087   579 _IRQ	=	0x0087
                           000094   580 _NSS1	=	0x0094
                           0000A6   581 _SDN	=	0x00a6
                                    582 ;--------------------------------------------------------
                                    583 ; overlayable register banks
                                    584 ;--------------------------------------------------------
                                    585 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        586 	.ds 8
                                    587 ;--------------------------------------------------------
                                    588 ; internal ram data
                                    589 ;--------------------------------------------------------
                                    590 	.area DSEG    (DATA)
      000000                        591 _tdm_show_rssi_sloc0_1_0:
      000000                        592 	.ds 2
      000002                        593 _tdm_show_rssi_sloc1_1_0:
      000002                        594 	.ds 2
      000004                        595 _tdm_show_rssi_sloc2_1_0:
      000004                        596 	.ds 2
      000006                        597 _tdm_show_rssi_sloc3_1_0:
      000006                        598 	.ds 2
      000008                        599 _tdm_show_rssi_sloc4_1_0:
      000008                        600 	.ds 2
      00000A                        601 _sync_tx_windows_old_state_1_162:
      00000A                        602 	.ds 1
      00000B                        603 _tdm_state_update_sloc0_1_0:
      00000B                        604 	.ds 2
      00000D                        605 _tdm_state_update_sloc1_1_0:
      00000D                        606 	.ds 4
      000011                        607 _tdm_state_update_sloc2_1_0:
      000011                        608 	.ds 4
      000015                        609 _tdm_init_sloc0_1_0:
      000015                        610 	.ds 4
                                    611 ;--------------------------------------------------------
                                    612 ; overlayable items in internal ram 
                                    613 ;--------------------------------------------------------
                                    614 ;--------------------------------------------------------
                                    615 ; indirectly addressable internal ram data
                                    616 ;--------------------------------------------------------
                                    617 	.area ISEG    (DATA)
                           0000FF   618 __canary	=	0x00ff
                                    619 ;--------------------------------------------------------
                                    620 ; absolute internal ram data
                                    621 ;--------------------------------------------------------
                                    622 	.area IABS    (ABS,DATA)
                                    623 	.area IABS    (ABS,DATA)
                                    624 ;--------------------------------------------------------
                                    625 ; bit data
                                    626 ;--------------------------------------------------------
                                    627 	.area BSEG    (BIT)
      000000                        628 _bonus_transmit:
      000000                        629 	.ds 1
      000001                        630 _transmit_yield:
      000001                        631 	.ds 1
      000002                        632 _blink_state:
      000002                        633 	.ds 1
      000003                        634 _received_packet:
      000003                        635 	.ds 1
      000004                        636 _duty_cycle_wait:
      000004                        637 	.ds 1
      000005                        638 _send_statistics:
      000005                        639 	.ds 1
      000006                        640 _send_at_command:
      000006                        641 	.ds 1
      000007                        642 _sync_tx_windows_sloc0_1_0:
      000007                        643 	.ds 1
      000008                        644 _tdm_state_update_sloc3_1_0:
      000008                        645 	.ds 1
      000009                        646 _tdm_serial_loop_sloc0_1_0:
      000009                        647 	.ds 1
                                    648 ;--------------------------------------------------------
                                    649 ; paged external ram data
                                    650 ;--------------------------------------------------------
                                    651 	.area PSEG    (PAG,XDATA)
      000000                        652 _tdm_state:
      000000                        653 	.ds 1
      000001                        654 _tdm_state_remaining:
      000001                        655 	.ds 2
      000003                        656 _tx_window_width:
      000003                        657 	.ds 2
      000005                        658 _max_data_packet_length:
      000005                        659 	.ds 1
      000006                        660 _silence_period:
      000006                        661 	.ds 2
      000008                        662 _packet_latency:
      000008                        663 	.ds 2
      00000A                        664 _ticks_per_byte:
      00000A                        665 	.ds 2
      00000C                        666 _transmit_wait::
      00000C                        667 	.ds 2
      00000E                        668 _duty_cycle::
      00000E                        669 	.ds 1
      00000F                        670 _average_duty_cycle:
      00000F                        671 	.ds 4
      000013                        672 _duty_cycle_offset::
      000013                        673 	.ds 1
      000014                        674 _transmitted_ticks:
      000014                        675 	.ds 2
      000016                        676 _lbt_rssi::
      000016                        677 	.ds 1
      000017                        678 _lbt_listen_time:
      000017                        679 	.ds 2
      000019                        680 _lbt_min_time:
      000019                        681 	.ds 2
      00001B                        682 _lbt_rand:
      00001B                        683 	.ds 2
      00001D                        684 _trailer::
      00001D                        685 	.ds 2
      00001F                        686 _remote_at_cmd:
      00001F                        687 	.ds 17
      000030                        688 _sync_tx_windows_delta_2_169:
      000030                        689 	.ds 2
      000032                        690 _tdm_serial_loop_len_1_213:
      000032                        691 	.ds 1
      000033                        692 _tdm_serial_loop_tdelta_1_213:
      000033                        693 	.ds 2
      000035                        694 _tdm_serial_loop_last_t_1_213:
      000035                        695 	.ds 2
      000037                        696 _tdm_serial_loop_last_link_update_1_213:
      000037                        697 	.ds 2
                                    698 ;--------------------------------------------------------
                                    699 ; external ram data
                                    700 ;--------------------------------------------------------
                                    701 	.area XSEG    (XDATA)
      000000                        702 _pbuf::
      000000                        703 	.ds 252
      0000FC                        704 _test_display::
      0000FC                        705 	.ds 1
      0000FD                        706 _link_update_unlock_count_1_192:
      0000FD                        707 	.ds 1
      0000FE                        708 _link_update_temperature_count_1_192:
      0000FE                        709 	.ds 1
      0000FF                        710 _tdm_init_i_1_253:
      0000FF                        711 	.ds 2
      000101                        712 _tdm_init_window_width_1_253:
      000101                        713 	.ds 4
                                    714 ;--------------------------------------------------------
                                    715 ; absolute external ram data
                                    716 ;--------------------------------------------------------
                                    717 	.area XABS    (ABS,XDATA)
                                    718 ;--------------------------------------------------------
                                    719 ; external initialized ram data
                                    720 ;--------------------------------------------------------
                                    721 	.area XISEG   (XDATA)
                                    722 	.area HOME    (CODE)
                                    723 	.area GSINIT0 (CODE)
                                    724 	.area GSINIT1 (CODE)
                                    725 	.area GSINIT2 (CODE)
                                    726 	.area GSINIT3 (CODE)
                                    727 	.area GSINIT4 (CODE)
                                    728 	.area GSINIT5 (CODE)
                                    729 	.area GSINIT  (CODE)
                                    730 	.area GSFINAL (CODE)
                                    731 	.area CSEG    (CODE)
                                    732 ;--------------------------------------------------------
                                    733 ; global & static initialisations
                                    734 ;--------------------------------------------------------
                                    735 	.area HOME    (CODE)
                                    736 	.area GSINIT  (CODE)
                                    737 	.area GSFINAL (CODE)
                                    738 	.area GSINIT  (CODE)
                                    739 ;------------------------------------------------------------
                                    740 ;Allocation info for local variables in function 'link_update'
                                    741 ;------------------------------------------------------------
                                    742 ;old_remaining             Allocated to registers r6 r7 
                                    743 ;unlock_count              Allocated with name '_link_update_unlock_count_1_192'
                                    744 ;temperature_count         Allocated with name '_link_update_temperature_count_1_192'
                                    745 ;------------------------------------------------------------
                                    746 ;	radio/tdm.c:383: static uint8_t unlock_count = 10, temperature_count;
      000000 90r00rFD         [24]  747 	mov	dptr,#_link_update_unlock_count_1_192
      000003 74 0A            [12]  748 	mov	a,#0x0A
      000005 F0               [24]  749 	movx	@dptr,a
                                    750 ;--------------------------------------------------------
                                    751 ; Home
                                    752 ;--------------------------------------------------------
                                    753 	.area HOME    (CODE)
                                    754 	.area HOME    (CODE)
                                    755 ;--------------------------------------------------------
                                    756 ; code
                                    757 ;--------------------------------------------------------
                                    758 	.area CSEG    (CODE)
                                    759 ;------------------------------------------------------------
                                    760 ;Allocation info for local variables in function 'tdm_show_rssi'
                                    761 ;------------------------------------------------------------
                                    762 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                                    763 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                                    764 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                                    765 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                                    766 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                                    767 ;------------------------------------------------------------
                                    768 ;	radio/tdm.c:162: tdm_show_rssi(void)
                                    769 ;	-----------------------------------------
                                    770 ;	 function tdm_show_rssi
                                    771 ;	-----------------------------------------
      000000                        772 _tdm_show_rssi:
                           000007   773 	ar7 = 0x07
                           000006   774 	ar6 = 0x06
                           000005   775 	ar5 = 0x05
                           000004   776 	ar4 = 0x04
                           000003   777 	ar3 = 0x03
                           000002   778 	ar2 = 0x02
                           000001   779 	ar1 = 0x01
                           000000   780 	ar0 = 0x00
                                    781 ;	radio/tdm.c:164: printf("L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u ",
      000000 78r02            [12]  782 	mov	r0,#(_statistics + 0x0002)
      000002 E2               [24]  783 	movx	a,@r0
      000003 FE               [12]  784 	mov	r6,a
      000004 08               [12]  785 	inc	r0
      000005 E2               [24]  786 	movx	a,@r0
      000006 FF               [12]  787 	mov	r7,a
      000007 78r01            [12]  788 	mov	r0,#(_remote_statistics + 0x0001)
      000009 E2               [24]  789 	movx	a,@r0
      00000A FD               [12]  790 	mov	r5,a
      00000B 7C 00            [12]  791 	mov	r4,#0x00
      00000D 78r01            [12]  792 	mov	r0,#(_statistics + 0x0001)
      00000F E2               [24]  793 	movx	a,@r0
      000010 FB               [12]  794 	mov	r3,a
      000011 8B*00            [24]  795 	mov	_tdm_show_rssi_sloc0_1_0,r3
                                    796 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc0_1_0 + 1),#0x00
      000013 8C*01            [24]  797 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),r4
      000015 78r00            [12]  798 	mov	r0,#_remote_statistics
      000017 E2               [24]  799 	movx	a,@r0
      000018 FB               [12]  800 	mov	r3,a
      000019 8B*02            [24]  801 	mov	_tdm_show_rssi_sloc1_1_0,r3
                                    802 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
      00001B 8C*03            [24]  803 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),r4
      00001D 78r00            [12]  804 	mov	r0,#_statistics
      00001F E2               [24]  805 	movx	a,@r0
      000020 FB               [12]  806 	mov	r3,a
      000021 7A 00            [12]  807 	mov	r2,#0x00
      000023 C0 06            [24]  808 	push	ar6
      000025 C0 07            [24]  809 	push	ar7
      000027 C0 05            [24]  810 	push	ar5
      000029 C0 04            [24]  811 	push	ar4
      00002B C0*00            [24]  812 	push	_tdm_show_rssi_sloc0_1_0
      00002D C0*01            [24]  813 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      00002F C0*02            [24]  814 	push	_tdm_show_rssi_sloc1_1_0
      000031 C0*03            [24]  815 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      000033 C0 03            [24]  816 	push	ar3
      000035 C0 02            [24]  817 	push	ar2
      000037 74r00            [12]  818 	mov	a,#___str_0
      000039 C0 E0            [24]  819 	push	acc
      00003B 74s00            [12]  820 	mov	a,#(___str_0 >> 8)
      00003D C0 E0            [24]  821 	push	acc
      00003F 74 80            [12]  822 	mov	a,#0x80
      000041 C0 E0            [24]  823 	push	acc
      000043 12r00r00         [24]  824 	lcall	_printfl
      000046 E5 81            [12]  825 	mov	a,sp
      000048 24 F3            [12]  826 	add	a,#0xf3
      00004A F5 81            [12]  827 	mov	sp,a
                                    828 ;	radio/tdm.c:173: printf(" txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u\n",
      00004C 78r13            [12]  829 	mov	r0,#_duty_cycle_offset
      00004E E2               [24]  830 	movx	a,@r0
      00004F FE               [12]  831 	mov	r6,a
      000050 7F 00            [12]  832 	mov	r7,#0x00
      000052 C0 07            [24]  833 	push	ar7
      000054 C0 06            [24]  834 	push	ar6
      000056 12r00r00         [24]  835 	lcall	_radio_temperature
      000059 AC 82            [24]  836 	mov	r4,dpl
      00005B AD 83            [24]  837 	mov	r5,dph
      00005D D0 06            [24]  838 	pop	ar6
      00005F D0 07            [24]  839 	pop	ar7
      000061 78r0A            [12]  840 	mov	r0,#(_errors + 0x000a)
      000063 E2               [24]  841 	movx	a,@r0
      000064 F5*02            [12]  842 	mov	_tdm_show_rssi_sloc1_1_0,a
      000066 08               [12]  843 	inc	r0
      000067 E2               [24]  844 	movx	a,@r0
      000068 F5*03            [12]  845 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
      00006A 78r08            [12]  846 	mov	r0,#(_errors + 0x0008)
      00006C E2               [24]  847 	movx	a,@r0
      00006D F5*00            [12]  848 	mov	_tdm_show_rssi_sloc0_1_0,a
      00006F 08               [12]  849 	inc	r0
      000070 E2               [24]  850 	movx	a,@r0
      000071 F5*01            [12]  851 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
      000073 78r06            [12]  852 	mov	r0,#(_errors + 0x0006)
      000075 E2               [24]  853 	movx	a,@r0
      000076 F5*04            [12]  854 	mov	_tdm_show_rssi_sloc2_1_0,a
      000078 08               [12]  855 	inc	r0
      000079 E2               [24]  856 	movx	a,@r0
      00007A F5*05            [12]  857 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
      00007C 78r04            [12]  858 	mov	r0,#(_errors + 0x0004)
      00007E E2               [24]  859 	movx	a,@r0
      00007F F5*06            [12]  860 	mov	_tdm_show_rssi_sloc3_1_0,a
      000081 08               [12]  861 	inc	r0
      000082 E2               [24]  862 	movx	a,@r0
      000083 F5*07            [12]  863 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
      000085 78r00            [12]  864 	mov	r0,#_errors
      000087 E2               [24]  865 	movx	a,@r0
      000088 F5*08            [12]  866 	mov	_tdm_show_rssi_sloc4_1_0,a
      00008A 08               [12]  867 	inc	r0
      00008B E2               [24]  868 	movx	a,@r0
      00008C F5*09            [12]  869 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
      00008E 78r02            [12]  870 	mov	r0,#(_errors + 0x0002)
      000090 E2               [24]  871 	movx	a,@r0
      000091 FA               [12]  872 	mov	r2,a
      000092 08               [12]  873 	inc	r0
      000093 E2               [24]  874 	movx	a,@r0
      000094 FB               [12]  875 	mov	r3,a
      000095 C0 06            [24]  876 	push	ar6
      000097 C0 07            [24]  877 	push	ar7
      000099 C0 04            [24]  878 	push	ar4
      00009B C0 05            [24]  879 	push	ar5
      00009D C0*02            [24]  880 	push	_tdm_show_rssi_sloc1_1_0
      00009F C0*03            [24]  881 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      0000A1 C0*00            [24]  882 	push	_tdm_show_rssi_sloc0_1_0
      0000A3 C0*01            [24]  883 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      0000A5 C0*04            [24]  884 	push	_tdm_show_rssi_sloc2_1_0
      0000A7 C0*05            [24]  885 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
      0000A9 C0*06            [24]  886 	push	_tdm_show_rssi_sloc3_1_0
      0000AB C0*07            [24]  887 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
      0000AD C0*08            [24]  888 	push	_tdm_show_rssi_sloc4_1_0
      0000AF C0*09            [24]  889 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
      0000B1 C0 02            [24]  890 	push	ar2
      0000B3 C0 03            [24]  891 	push	ar3
      0000B5 74r2C            [12]  892 	mov	a,#___str_1
      0000B7 C0 E0            [24]  893 	push	acc
      0000B9 74s00            [12]  894 	mov	a,#(___str_1 >> 8)
      0000BB C0 E0            [24]  895 	push	acc
      0000BD 74 80            [12]  896 	mov	a,#0x80
      0000BF C0 E0            [24]  897 	push	acc
      0000C1 12r00r00         [24]  898 	lcall	_printfl
      0000C4 E5 81            [12]  899 	mov	a,sp
      0000C6 24 ED            [12]  900 	add	a,#0xed
      0000C8 F5 81            [12]  901 	mov	sp,a
                                    902 ;	radio/tdm.c:186: statistics.receive_count = 0;
      0000CA 78r02            [12]  903 	mov	r0,#(_statistics + 0x0002)
      0000CC E4               [12]  904 	clr	a
      0000CD F2               [24]  905 	movx	@r0,a
      0000CE 08               [12]  906 	inc	r0
      0000CF F2               [24]  907 	movx	@r0,a
      0000D0 22               [24]  908 	ret
                                    909 ;------------------------------------------------------------
                                    910 ;Allocation info for local variables in function 'display_test_output'
                                    911 ;------------------------------------------------------------
                                    912 ;	radio/tdm.c:192: display_test_output(void)
                                    913 ;	-----------------------------------------
                                    914 ;	 function display_test_output
                                    915 ;	-----------------------------------------
      0000D1                        916 _display_test_output:
                                    917 ;	radio/tdm.c:194: if (test_display & AT_TEST_RSSI) {
      0000D1 90r00rFC         [24]  918 	mov	dptr,#_test_display
      0000D4 E0               [24]  919 	movx	a,@dptr
      0000D5 FF               [12]  920 	mov	r7,a
      0000D6 30 E0 03         [24]  921 	jnb	acc.0,00103$
                                    922 ;	radio/tdm.c:195: tdm_show_rssi();
      0000D9 02r00r00         [24]  923 	ljmp	_tdm_show_rssi
      0000DC                        924 00103$:
      0000DC 22               [24]  925 	ret
                                    926 ;------------------------------------------------------------
                                    927 ;Allocation info for local variables in function 'flight_time_estimate'
                                    928 ;------------------------------------------------------------
                                    929 ;	radio/tdm.c:205: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                                    930 ;	-----------------------------------------
                                    931 ;	 function flight_time_estimate
                                    932 ;	-----------------------------------------
      0000DD                        933 _flight_time_estimate:
      0000DD AF 82            [24]  934 	mov	r7,dpl
                                    935 ;	radio/tdm.c:207: return packet_latency + (packet_len * ticks_per_byte);
      0000DF 7E 00            [12]  936 	mov	r6,#0x00
      0000E1 78r0A            [12]  937 	mov	r0,#_ticks_per_byte
      0000E3 90r00r00         [24]  938 	mov	dptr,#__mulint_PARM_2
      0000E6 E2               [24]  939 	movx	a,@r0
      0000E7 F0               [24]  940 	movx	@dptr,a
      0000E8 08               [12]  941 	inc	r0
      0000E9 E2               [24]  942 	movx	a,@r0
      0000EA A3               [24]  943 	inc	dptr
      0000EB F0               [24]  944 	movx	@dptr,a
      0000EC 8F 82            [24]  945 	mov	dpl,r7
      0000EE 8E 83            [24]  946 	mov	dph,r6
      0000F0 12r00r00         [24]  947 	lcall	__mulint
      0000F3 AE 82            [24]  948 	mov	r6,dpl
      0000F5 AF 83            [24]  949 	mov	r7,dph
      0000F7 78r08            [12]  950 	mov	r0,#_packet_latency
      0000F9 E2               [24]  951 	movx	a,@r0
      0000FA 2E               [12]  952 	add	a,r6
      0000FB FE               [12]  953 	mov	r6,a
      0000FC 08               [12]  954 	inc	r0
      0000FD E2               [24]  955 	movx	a,@r0
      0000FE 3F               [12]  956 	addc	a,r7
      0000FF 8E 82            [24]  957 	mov	dpl,r6
      000101 F5 83            [12]  958 	mov	dph,a
      000103 22               [24]  959 	ret
                                    960 ;------------------------------------------------------------
                                    961 ;Allocation info for local variables in function 'sync_tx_windows'
                                    962 ;------------------------------------------------------------
                                    963 ;old_state                 Allocated with name '_sync_tx_windows_old_state_1_162'
                                    964 ;------------------------------------------------------------
                                    965 ;	radio/tdm.c:221: sync_tx_windows(__pdata uint8_t packet_length)
                                    966 ;	-----------------------------------------
                                    967 ;	 function sync_tx_windows
                                    968 ;	-----------------------------------------
      000104                        969 _sync_tx_windows:
      000104 AF 82            [24]  970 	mov	r7,dpl
                                    971 ;	radio/tdm.c:223: __data enum tdm_state old_state = tdm_state;
      000106 78r00            [12]  972 	mov	r0,#_tdm_state
      000108 E2               [24]  973 	movx	a,@r0
      000109 F5*0A            [12]  974 	mov	_sync_tx_windows_old_state_1_162,a
                                    975 ;	radio/tdm.c:224: __pdata uint16_t old_remaining = tdm_state_remaining;
      00010B 78r01            [12]  976 	mov	r0,#_tdm_state_remaining
      00010D E2               [24]  977 	movx	a,@r0
      00010E FC               [12]  978 	mov	r4,a
      00010F 08               [12]  979 	inc	r0
      000110 E2               [24]  980 	movx	a,@r0
      000111 FD               [12]  981 	mov	r5,a
                                    982 ;	radio/tdm.c:226: if (trailer.bonus) {
      000112 78r1E            [12]  983 	mov	r0,#(_trailer + 0x0001)
      000114 E2               [24]  984 	movx	a,@r0
      000115 30 E6 46         [24]  985 	jnb	acc.6,00109$
                                    986 ;	radio/tdm.c:229: if (old_state == TDM_SILENCE1) {
      000118 74 01            [12]  987 	mov	a,#0x01
      00011A B5*0A 10         [24]  988 	cjne	a,_sync_tx_windows_old_state_1_162,00106$
                                    989 ;	radio/tdm.c:235: tdm_state_remaining = silence_period;
      00011D 78r06            [12]  990 	mov	r0,#_silence_period
      00011F E2               [24]  991 	movx	a,@r0
      000120 FA               [12]  992 	mov	r2,a
      000121 08               [12]  993 	inc	r0
      000122 E2               [24]  994 	movx	a,@r0
      000123 FB               [12]  995 	mov	r3,a
      000124 78r01            [12]  996 	mov	r0,#_tdm_state_remaining
      000126 EA               [12]  997 	mov	a,r2
      000127 F2               [24]  998 	movx	@r0,a
      000128 08               [12]  999 	inc	r0
      000129 EB               [12] 1000 	mov	a,r3
      00012A F2               [24] 1001 	movx	@r0,a
      00012B 80 46            [24] 1002 	sjmp	00110$
      00012D                       1003 00106$:
                                   1004 ;	radio/tdm.c:236: } else if (old_state == TDM_RECEIVE || old_state == TDM_SILENCE2) {
      00012D 74 02            [12] 1005 	mov	a,#0x02
      00012F B5*0A 02         [24] 1006 	cjne	a,_sync_tx_windows_old_state_1_162,00151$
      000132 80 05            [24] 1007 	sjmp	00101$
      000134                       1008 00151$:
      000134 74 03            [12] 1009 	mov	a,#0x03
      000136 B5*0A 0F         [24] 1010 	cjne	a,_sync_tx_windows_old_state_1_162,00102$
      000139                       1011 00101$:
                                   1012 ;	radio/tdm.c:241: tdm_state = TDM_SILENCE2;
      000139 78r00            [12] 1013 	mov	r0,#_tdm_state
      00013B 74 03            [12] 1014 	mov	a,#0x03
      00013D F2               [24] 1015 	movx	@r0,a
                                   1016 ;	radio/tdm.c:242: tdm_state_remaining = 1;
      00013E 78r01            [12] 1017 	mov	r0,#_tdm_state_remaining
      000140 74 01            [12] 1018 	mov	a,#0x01
      000142 F2               [24] 1019 	movx	@r0,a
      000143 08               [12] 1020 	inc	r0
      000144 E4               [12] 1021 	clr	a
      000145 F2               [24] 1022 	movx	@r0,a
      000146 80 2B            [24] 1023 	sjmp	00110$
      000148                       1024 00102$:
                                   1025 ;	radio/tdm.c:244: tdm_state = TDM_TRANSMIT;
      000148 78r00            [12] 1026 	mov	r0,#_tdm_state
      00014A E4               [12] 1027 	clr	a
      00014B F2               [24] 1028 	movx	@r0,a
                                   1029 ;	radio/tdm.c:245: tdm_state_remaining = trailer.window;
      00014C 78r1D            [12] 1030 	mov	r0,#_trailer
      00014E E2               [24] 1031 	movx	a,@r0
      00014F FA               [12] 1032 	mov	r2,a
      000150 08               [12] 1033 	inc	r0
      000151 E2               [24] 1034 	movx	a,@r0
      000152 54 1F            [12] 1035 	anl	a,#0x1F
      000154 FB               [12] 1036 	mov	r3,a
      000155 78r01            [12] 1037 	mov	r0,#_tdm_state_remaining
      000157 EA               [12] 1038 	mov	a,r2
      000158 F2               [24] 1039 	movx	@r0,a
      000159 08               [12] 1040 	inc	r0
      00015A EB               [12] 1041 	mov	a,r3
      00015B F2               [24] 1042 	movx	@r0,a
      00015C 80 15            [24] 1043 	sjmp	00110$
      00015E                       1044 00109$:
                                   1045 ;	radio/tdm.c:250: tdm_state = TDM_RECEIVE;
      00015E 78r00            [12] 1046 	mov	r0,#_tdm_state
      000160 74 02            [12] 1047 	mov	a,#0x02
      000162 F2               [24] 1048 	movx	@r0,a
                                   1049 ;	radio/tdm.c:251: tdm_state_remaining = trailer.window;
      000163 78r1D            [12] 1050 	mov	r0,#_trailer
      000165 E2               [24] 1051 	movx	a,@r0
      000166 FA               [12] 1052 	mov	r2,a
      000167 08               [12] 1053 	inc	r0
      000168 E2               [24] 1054 	movx	a,@r0
      000169 54 1F            [12] 1055 	anl	a,#0x1F
      00016B FB               [12] 1056 	mov	r3,a
      00016C 78r01            [12] 1057 	mov	r0,#_tdm_state_remaining
      00016E EA               [12] 1058 	mov	a,r2
      00016F F2               [24] 1059 	movx	@r0,a
      000170 08               [12] 1060 	inc	r0
      000171 EB               [12] 1061 	mov	a,r3
      000172 F2               [24] 1062 	movx	@r0,a
      000173                       1063 00110$:
                                   1064 ;	radio/tdm.c:256: bonus_transmit = (tdm_state == TDM_RECEIVE && packet_length==0);
      000173 78r00            [12] 1065 	mov	r0,#_tdm_state
      000175 E2               [24] 1066 	movx	a,@r0
      000176 B4 02 03         [24] 1067 	cjne	a,#0x02,00121$
      000179 EF               [12] 1068 	mov	a,r7
      00017A 60 04            [24] 1069 	jz	00122$
      00017C                       1070 00121$:
      00017C C2*07            [12] 1071 	clr	_sync_tx_windows_sloc0_1_0
      00017E 80 02            [24] 1072 	sjmp	00123$
      000180                       1073 00122$:
      000180 D2*07            [12] 1074 	setb	_sync_tx_windows_sloc0_1_0
      000182                       1075 00123$:
      000182 A2*07            [12] 1076 	mov	c,_sync_tx_windows_sloc0_1_0
      000184 92*00            [24] 1077 	mov	_bonus_transmit,c
                                   1078 ;	radio/tdm.c:259: if (tdm_state != TDM_TRANSMIT) {
      000186 78r00            [12] 1079 	mov	r0,#_tdm_state
      000188 E2               [24] 1080 	movx	a,@r0
      000189 60 02            [24] 1081 	jz	00112$
                                   1082 ;	radio/tdm.c:260: transmit_yield = 0;
      00018B C2*01            [12] 1083 	clr	_transmit_yield
      00018D                       1084 00112$:
                                   1085 ;	radio/tdm.c:263: if (at_testmode & AT_TEST_TDM) {
      00018D 78r00            [12] 1086 	mov	r0,#_at_testmode
      00018F E2               [24] 1087 	movx	a,@r0
      000190 54 02            [12] 1088 	anl	a,#0x02
      000192 70 01            [24] 1089 	jnz	00158$
      000194 22               [24] 1090 	ret
      000195                       1091 00158$:
                                   1092 ;	radio/tdm.c:265: delta = old_remaining - tdm_state_remaining;
      000195 78r01            [12] 1093 	mov	r0,#_tdm_state_remaining
      000197 79r30            [12] 1094 	mov	r1,#_sync_tx_windows_delta_2_169
      000199 D3               [12] 1095 	setb	c
      00019A E2               [24] 1096 	movx	a,@r0
      00019B 9C               [12] 1097 	subb	a,r4
      00019C F4               [12] 1098 	cpl	a
      00019D B3               [12] 1099 	cpl	c
      00019E F3               [24] 1100 	movx	@r1,a
      00019F B3               [12] 1101 	cpl	c
      0001A0 08               [12] 1102 	inc	r0
      0001A1 E2               [24] 1103 	movx	a,@r0
      0001A2 9D               [12] 1104 	subb	a,r5
      0001A3 F4               [12] 1105 	cpl	a
      0001A4 09               [12] 1106 	inc	r1
      0001A5 F3               [24] 1107 	movx	@r1,a
                                   1108 ;	radio/tdm.c:266: if (old_state != tdm_state ||
      0001A6 78r00            [12] 1109 	mov	r0,#_tdm_state
      0001A8 E2               [24] 1110 	movx	a,@r0
      0001A9 B5*0A 6E         [24] 1111 	cjne	a,_sync_tx_windows_old_state_1_162,00113$
                                   1112 ;	radio/tdm.c:267: delta > (int16_t)packet_latency/2 ||
      0001AC C0 07            [24] 1113 	push	ar7
      0001AE 78r08            [12] 1114 	mov	r0,#_packet_latency
      0001B0 E2               [24] 1115 	movx	a,@r0
      0001B1 FA               [12] 1116 	mov	r2,a
      0001B2 08               [12] 1117 	inc	r0
      0001B3 E2               [24] 1118 	movx	a,@r0
      0001B4 FB               [12] 1119 	mov	r3,a
      0001B5 90r00r00         [24] 1120 	mov	dptr,#__divsint_PARM_2
      0001B8 74 02            [12] 1121 	mov	a,#0x02
      0001BA F0               [24] 1122 	movx	@dptr,a
      0001BB E4               [12] 1123 	clr	a
      0001BC A3               [24] 1124 	inc	dptr
      0001BD F0               [24] 1125 	movx	@dptr,a
      0001BE 8A 82            [24] 1126 	mov	dpl,r2
      0001C0 8B 83            [24] 1127 	mov	dph,r3
      0001C2 C0 03            [24] 1128 	push	ar3
      0001C4 C0 02            [24] 1129 	push	ar2
      0001C6 12r00r00         [24] 1130 	lcall	__divsint
      0001C9 AE 82            [24] 1131 	mov	r6,dpl
      0001CB AF 83            [24] 1132 	mov	r7,dph
      0001CD D0 02            [24] 1133 	pop	ar2
      0001CF D0 03            [24] 1134 	pop	ar3
      0001D1 78r30            [12] 1135 	mov	r0,#_sync_tx_windows_delta_2_169
      0001D3 C3               [12] 1136 	clr	c
      0001D4 E2               [24] 1137 	movx	a,@r0
      0001D5 F5 F0            [12] 1138 	mov	b,a
      0001D7 EE               [12] 1139 	mov	a,r6
      0001D8 95 F0            [12] 1140 	subb	a,b
      0001DA 08               [12] 1141 	inc	r0
      0001DB E2               [24] 1142 	movx	a,@r0
      0001DC F5 F0            [12] 1143 	mov	b,a
      0001DE EF               [12] 1144 	mov	a,r7
      0001DF 64 80            [12] 1145 	xrl	a,#0x80
      0001E1 63 F0 80         [24] 1146 	xrl	b,#0x80
      0001E4 95 F0            [12] 1147 	subb	a,b
      0001E6 D0 07            [24] 1148 	pop	ar7
                                   1149 ;	radio/tdm.c:268: delta < -(int16_t)packet_latency/2) {
      0001E8 40 30            [24] 1150 	jc	00113$
      0001EA E4               [12] 1151 	clr	a
      0001EB 9A               [12] 1152 	subb	a,r2
      0001EC FA               [12] 1153 	mov	r2,a
      0001ED E4               [12] 1154 	clr	a
      0001EE 9B               [12] 1155 	subb	a,r3
      0001EF FB               [12] 1156 	mov	r3,a
      0001F0 90r00r00         [24] 1157 	mov	dptr,#__divsint_PARM_2
      0001F3 74 02            [12] 1158 	mov	a,#0x02
      0001F5 F0               [24] 1159 	movx	@dptr,a
      0001F6 E4               [12] 1160 	clr	a
      0001F7 A3               [24] 1161 	inc	dptr
      0001F8 F0               [24] 1162 	movx	@dptr,a
      0001F9 8A 82            [24] 1163 	mov	dpl,r2
      0001FB 8B 83            [24] 1164 	mov	dph,r3
      0001FD C0 07            [24] 1165 	push	ar7
      0001FF 12r00r00         [24] 1166 	lcall	__divsint
      000202 AB 82            [24] 1167 	mov	r3,dpl
      000204 AE 83            [24] 1168 	mov	r6,dph
      000206 D0 07            [24] 1169 	pop	ar7
      000208 78r30            [12] 1170 	mov	r0,#_sync_tx_windows_delta_2_169
      00020A C3               [12] 1171 	clr	c
      00020B E2               [24] 1172 	movx	a,@r0
      00020C 9B               [12] 1173 	subb	a,r3
      00020D 08               [12] 1174 	inc	r0
      00020E E2               [24] 1175 	movx	a,@r0
      00020F 64 80            [12] 1176 	xrl	a,#0x80
      000211 8E F0            [24] 1177 	mov	b,r6
      000213 63 F0 80         [24] 1178 	xrl	b,#0x80
      000216 95 F0            [12] 1179 	subb	a,b
      000218 50 4B            [24] 1180 	jnc	00119$
      00021A                       1181 00113$:
                                   1182 ;	radio/tdm.c:269: printf("TDM: %u/%u len=%u ",
      00021A 7E 00            [12] 1183 	mov	r6,#0x00
      00021C 78r00            [12] 1184 	mov	r0,#_tdm_state
      00021E E2               [24] 1185 	movx	a,@r0
      00021F FA               [12] 1186 	mov	r2,a
      000220 7B 00            [12] 1187 	mov	r3,#0x00
      000222 AC*0A            [24] 1188 	mov	r4,_sync_tx_windows_old_state_1_162
      000224 7D 00            [12] 1189 	mov	r5,#0x00
      000226 C0 07            [24] 1190 	push	ar7
      000228 C0 06            [24] 1191 	push	ar6
      00022A C0 02            [24] 1192 	push	ar2
      00022C C0 03            [24] 1193 	push	ar3
      00022E C0 04            [24] 1194 	push	ar4
      000230 C0 05            [24] 1195 	push	ar5
      000232 74r63            [12] 1196 	mov	a,#___str_2
      000234 C0 E0            [24] 1197 	push	acc
      000236 74s00            [12] 1198 	mov	a,#(___str_2 >> 8)
      000238 C0 E0            [24] 1199 	push	acc
      00023A 74 80            [12] 1200 	mov	a,#0x80
      00023C C0 E0            [24] 1201 	push	acc
      00023E 12r00r00         [24] 1202 	lcall	_printfl
      000241 E5 81            [12] 1203 	mov	a,sp
      000243 24 F7            [12] 1204 	add	a,#0xf7
      000245 F5 81            [12] 1205 	mov	sp,a
                                   1206 ;	radio/tdm.c:273: printf(" delta: %d\n",(int)delta);
      000247 78r30            [12] 1207 	mov	r0,#_sync_tx_windows_delta_2_169
      000249 E2               [24] 1208 	movx	a,@r0
      00024A C0 E0            [24] 1209 	push	acc
      00024C 08               [12] 1210 	inc	r0
      00024D E2               [24] 1211 	movx	a,@r0
      00024E C0 E0            [24] 1212 	push	acc
      000250 74r76            [12] 1213 	mov	a,#___str_3
      000252 C0 E0            [24] 1214 	push	acc
      000254 74s00            [12] 1215 	mov	a,#(___str_3 >> 8)
      000256 C0 E0            [24] 1216 	push	acc
      000258 74 80            [12] 1217 	mov	a,#0x80
      00025A C0 E0            [24] 1218 	push	acc
      00025C 12r00r00         [24] 1219 	lcall	_printfl
      00025F E5 81            [12] 1220 	mov	a,sp
      000261 24 FB            [12] 1221 	add	a,#0xfb
      000263 F5 81            [12] 1222 	mov	sp,a
      000265                       1223 00119$:
      000265 22               [24] 1224 	ret
                                   1225 ;------------------------------------------------------------
                                   1226 ;Allocation info for local variables in function 'tdm_state_update'
                                   1227 ;------------------------------------------------------------
                                   1228 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                                   1229 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                                   1230 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                                   1231 ;------------------------------------------------------------
                                   1232 ;	radio/tdm.c:281: tdm_state_update(__pdata uint16_t tdelta)
                                   1233 ;	-----------------------------------------
                                   1234 ;	 function tdm_state_update
                                   1235 ;	-----------------------------------------
      000266                       1236 _tdm_state_update:
      000266 AE 82            [24] 1237 	mov	r6,dpl
      000268 AF 83            [24] 1238 	mov	r7,dph
                                   1239 ;	radio/tdm.c:285: if (tdelta > transmit_wait) {
      00026A 78r0C            [12] 1240 	mov	r0,#_transmit_wait
      00026C C3               [12] 1241 	clr	c
      00026D E2               [24] 1242 	movx	a,@r0
      00026E 9E               [12] 1243 	subb	a,r6
      00026F 08               [12] 1244 	inc	r0
      000270 E2               [24] 1245 	movx	a,@r0
      000271 9F               [12] 1246 	subb	a,r7
      000272 50 08            [24] 1247 	jnc	00102$
                                   1248 ;	radio/tdm.c:286: transmit_wait = 0;
      000274 78r0C            [12] 1249 	mov	r0,#_transmit_wait
      000276 E4               [12] 1250 	clr	a
      000277 F2               [24] 1251 	movx	@r0,a
      000278 08               [12] 1252 	inc	r0
      000279 F2               [24] 1253 	movx	@r0,a
      00027A 80 0A            [24] 1254 	sjmp	00116$
      00027C                       1255 00102$:
                                   1256 ;	radio/tdm.c:288: transmit_wait -= tdelta;
      00027C 78r0C            [12] 1257 	mov	r0,#_transmit_wait
      00027E E2               [24] 1258 	movx	a,@r0
      00027F C3               [12] 1259 	clr	c
      000280 9E               [12] 1260 	subb	a,r6
      000281 F2               [24] 1261 	movx	@r0,a
      000282 08               [12] 1262 	inc	r0
      000283 E2               [24] 1263 	movx	a,@r0
      000284 9F               [12] 1264 	subb	a,r7
      000285 F2               [24] 1265 	movx	@r0,a
                                   1266 ;	radio/tdm.c:292: while (tdelta >= tdm_state_remaining) {
      000286                       1267 00116$:
      000286 78r01            [12] 1268 	mov	r0,#_tdm_state_remaining
      000288 C3               [12] 1269 	clr	c
      000289 E2               [24] 1270 	movx	a,@r0
      00028A F5 F0            [12] 1271 	mov	b,a
      00028C EE               [12] 1272 	mov	a,r6
      00028D 95 F0            [12] 1273 	subb	a,b
      00028F 08               [12] 1274 	inc	r0
      000290 E2               [24] 1275 	movx	a,@r0
      000291 F5 F0            [12] 1276 	mov	b,a
      000293 EF               [12] 1277 	mov	a,r7
      000294 95 F0            [12] 1278 	subb	a,b
      000296 50 03            [24] 1279 	jnc	00146$
      000298 02r04rD1         [24] 1280 	ljmp	00118$
      00029B                       1281 00146$:
                                   1282 ;	radio/tdm.c:294: tdm_state = (tdm_state+1) % 4;
      00029B 78r00            [12] 1283 	mov	r0,#_tdm_state
      00029D E2               [24] 1284 	movx	a,@r0
      00029E FC               [12] 1285 	mov	r4,a
      00029F 7D 00            [12] 1286 	mov	r5,#0x00
      0002A1 0C               [12] 1287 	inc	r4
      0002A2 BC 00 01         [24] 1288 	cjne	r4,#0x00,00147$
      0002A5 0D               [12] 1289 	inc	r5
      0002A6                       1290 00147$:
      0002A6 90r00r00         [24] 1291 	mov	dptr,#__modsint_PARM_2
      0002A9 74 04            [12] 1292 	mov	a,#0x04
      0002AB F0               [24] 1293 	movx	@dptr,a
      0002AC E4               [12] 1294 	clr	a
      0002AD A3               [24] 1295 	inc	dptr
      0002AE F0               [24] 1296 	movx	@dptr,a
      0002AF 8C 82            [24] 1297 	mov	dpl,r4
      0002B1 8D 83            [24] 1298 	mov	dph,r5
      0002B3 C0 07            [24] 1299 	push	ar7
      0002B5 C0 06            [24] 1300 	push	ar6
      0002B7 12r00r00         [24] 1301 	lcall	__modsint
      0002BA AC 82            [24] 1302 	mov	r4,dpl
      0002BC AD 83            [24] 1303 	mov	r5,dph
      0002BE D0 06            [24] 1304 	pop	ar6
      0002C0 D0 07            [24] 1305 	pop	ar7
      0002C2 78r00            [12] 1306 	mov	r0,#_tdm_state
      0002C4 EC               [12] 1307 	mov	a,r4
      0002C5 F2               [24] 1308 	movx	@r0,a
                                   1309 ;	radio/tdm.c:297: tdelta -= tdm_state_remaining;
      0002C6 78r01            [12] 1310 	mov	r0,#_tdm_state_remaining
      0002C8 D3               [12] 1311 	setb	c
      0002C9 E2               [24] 1312 	movx	a,@r0
      0002CA 9E               [12] 1313 	subb	a,r6
      0002CB F4               [12] 1314 	cpl	a
      0002CC B3               [12] 1315 	cpl	c
      0002CD FE               [12] 1316 	mov	r6,a
      0002CE B3               [12] 1317 	cpl	c
      0002CF 08               [12] 1318 	inc	r0
      0002D0 E2               [24] 1319 	movx	a,@r0
      0002D1 9F               [12] 1320 	subb	a,r7
      0002D2 F4               [12] 1321 	cpl	a
      0002D3 FF               [12] 1322 	mov	r7,a
                                   1323 ;	radio/tdm.c:299: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_RECEIVE) {
      0002D4 78r00            [12] 1324 	mov	r0,#_tdm_state
      0002D6 E2               [24] 1325 	movx	a,@r0
      0002D7 60 06            [24] 1326 	jz	00104$
      0002D9 78r00            [12] 1327 	mov	r0,#_tdm_state
      0002DB E2               [24] 1328 	movx	a,@r0
      0002DC B4 02 10         [24] 1329 	cjne	a,#0x02,00105$
      0002DF                       1330 00104$:
                                   1331 ;	radio/tdm.c:300: tdm_state_remaining = tx_window_width;
      0002DF 78r03            [12] 1332 	mov	r0,#_tx_window_width
      0002E1 E2               [24] 1333 	movx	a,@r0
      0002E2 FC               [12] 1334 	mov	r4,a
      0002E3 08               [12] 1335 	inc	r0
      0002E4 E2               [24] 1336 	movx	a,@r0
      0002E5 FD               [12] 1337 	mov	r5,a
      0002E6 78r01            [12] 1338 	mov	r0,#_tdm_state_remaining
      0002E8 EC               [12] 1339 	mov	a,r4
      0002E9 F2               [24] 1340 	movx	@r0,a
      0002EA 08               [12] 1341 	inc	r0
      0002EB ED               [12] 1342 	mov	a,r5
      0002EC F2               [24] 1343 	movx	@r0,a
      0002ED 80 0E            [24] 1344 	sjmp	00106$
      0002EF                       1345 00105$:
                                   1346 ;	radio/tdm.c:302: tdm_state_remaining = silence_period;
      0002EF 78r06            [12] 1347 	mov	r0,#_silence_period
      0002F1 E2               [24] 1348 	movx	a,@r0
      0002F2 FC               [12] 1349 	mov	r4,a
      0002F3 08               [12] 1350 	inc	r0
      0002F4 E2               [24] 1351 	movx	a,@r0
      0002F5 FD               [12] 1352 	mov	r5,a
      0002F6 78r01            [12] 1353 	mov	r0,#_tdm_state_remaining
      0002F8 EC               [12] 1354 	mov	a,r4
      0002F9 F2               [24] 1355 	movx	@r0,a
      0002FA 08               [12] 1356 	inc	r0
      0002FB ED               [12] 1357 	mov	a,r5
      0002FC F2               [24] 1358 	movx	@r0,a
      0002FD                       1359 00106$:
                                   1360 ;	radio/tdm.c:308: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_SILENCE1) {
      0002FD 78r00            [12] 1361 	mov	r0,#_tdm_state
      0002FF E2               [24] 1362 	movx	a,@r0
      000300 60 06            [24] 1363 	jz	00110$
      000302 78r00            [12] 1364 	mov	r0,#_tdm_state
      000304 E2               [24] 1365 	movx	a,@r0
      000305 B4 01 25         [24] 1366 	cjne	a,#0x01,00111$
      000308                       1367 00110$:
                                   1368 ;	radio/tdm.c:309: fhop_window_change();
      000308 C0 07            [24] 1369 	push	ar7
      00030A C0 06            [24] 1370 	push	ar6
      00030C 12r00r00         [24] 1371 	lcall	_fhop_window_change
                                   1372 ;	radio/tdm.c:310: radio_receiver_on();
      00030F 12r00r00         [24] 1373 	lcall	_radio_receiver_on
      000312 D0 06            [24] 1374 	pop	ar6
      000314 D0 07            [24] 1375 	pop	ar7
                                   1376 ;	radio/tdm.c:312: if (num_fh_channels > 1) {
      000316 78r00            [12] 1377 	mov	r0,#_num_fh_channels
      000318 C3               [12] 1378 	clr	c
      000319 E2               [24] 1379 	movx	a,@r0
      00031A F5 F0            [12] 1380 	mov	b,a
      00031C 74 01            [12] 1381 	mov	a,#0x01
      00031E 95 F0            [12] 1382 	subb	a,b
      000320 50 0B            [24] 1383 	jnc	00111$
                                   1384 ;	radio/tdm.c:314: lbt_listen_time = 0;
      000322 78r17            [12] 1385 	mov	r0,#_lbt_listen_time
      000324 E4               [12] 1386 	clr	a
      000325 F2               [24] 1387 	movx	@r0,a
      000326 08               [12] 1388 	inc	r0
      000327 F2               [24] 1389 	movx	@r0,a
                                   1390 ;	radio/tdm.c:315: lbt_rand = 0;
      000328 78r1B            [12] 1391 	mov	r0,#_lbt_rand
      00032A F2               [24] 1392 	movx	@r0,a
      00032B 08               [12] 1393 	inc	r0
      00032C F2               [24] 1394 	movx	@r0,a
      00032D                       1395 00111$:
                                   1396 ;	radio/tdm.c:319: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
      00032D 78r00            [12] 1397 	mov	r0,#_tdm_state
      00032F E2               [24] 1398 	movx	a,@r0
      000330 60 03            [24] 1399 	jz	00155$
      000332 02r04rC4         [24] 1400 	ljmp	00114$
      000335                       1401 00155$:
      000335 C0 06            [24] 1402 	push	ar6
      000337 C0 07            [24] 1403 	push	ar7
      000339 78r0E            [12] 1404 	mov	r0,#_duty_cycle
      00033B E2               [24] 1405 	movx	a,@r0
      00033C FC               [12] 1406 	mov	r4,a
      00033D 7D 00            [12] 1407 	mov	r5,#0x00
      00033F 78r13            [12] 1408 	mov	r0,#_duty_cycle_offset
      000341 E2               [24] 1409 	movx	a,@r0
      000342 F5*0B            [12] 1410 	mov	_tdm_state_update_sloc0_1_0,a
                                   1411 ;	1-genFromRTrack replaced	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
      000344 8D*0C            [24] 1412 	mov	(_tdm_state_update_sloc0_1_0 + 1),r5
      000346 EC               [12] 1413 	mov	a,r4
      000347 C3               [12] 1414 	clr	c
      000348 95*0B            [12] 1415 	subb	a,_tdm_state_update_sloc0_1_0
      00034A FE               [12] 1416 	mov	r6,a
      00034B ED               [12] 1417 	mov	a,r5
      00034C 95*0C            [12] 1418 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      00034E FF               [12] 1419 	mov	r7,a
      00034F BE 64 0A         [24] 1420 	cjne	r6,#0x64,00156$
      000352 BF 00 07         [24] 1421 	cjne	r7,#0x00,00156$
      000355 D0 07            [24] 1422 	pop	ar7
      000357 D0 06            [24] 1423 	pop	ar6
      000359 02r04rC4         [24] 1424 	ljmp	00114$
      00035C                       1425 00156$:
      00035C D0 07            [24] 1426 	pop	ar7
      00035E D0 06            [24] 1427 	pop	ar6
                                   1428 ;	radio/tdm.c:321: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
      000360 C0 06            [24] 1429 	push	ar6
      000362 C0 07            [24] 1430 	push	ar7
      000364 C0 07            [24] 1431 	push	ar7
      000366 C0 06            [24] 1432 	push	ar6
      000368 C0 05            [24] 1433 	push	ar5
      00036A C0 04            [24] 1434 	push	ar4
      00036C 78r0F            [12] 1435 	mov	r0,#_average_duty_cycle
      00036E E2               [24] 1436 	movx	a,@r0
      00036F C0 E0            [24] 1437 	push	acc
      000371 08               [12] 1438 	inc	r0
      000372 E2               [24] 1439 	movx	a,@r0
      000373 C0 E0            [24] 1440 	push	acc
      000375 08               [12] 1441 	inc	r0
      000376 E2               [24] 1442 	movx	a,@r0
      000377 C0 E0            [24] 1443 	push	acc
      000379 08               [12] 1444 	inc	r0
      00037A E2               [24] 1445 	movx	a,@r0
      00037B C0 E0            [24] 1446 	push	acc
      00037D 90 33 33         [24] 1447 	mov	dptr,#0x3333
      000380 75 F0 73         [24] 1448 	mov	b,#0x73
      000383 74 3F            [12] 1449 	mov	a,#0x3F
      000385 12r00r00         [24] 1450 	lcall	___fsmul
      000388 85 82*0D         [24] 1451 	mov	_tdm_state_update_sloc1_1_0,dpl
      00038B 85 83*0E         [24] 1452 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
      00038E 85 F0*0F         [24] 1453 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
      000391 F5*10            [12] 1454 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
      000393 E5 81            [12] 1455 	mov	a,sp
      000395 24 FC            [12] 1456 	add	a,#0xfc
      000397 F5 81            [12] 1457 	mov	sp,a
      000399 D0 04            [24] 1458 	pop	ar4
      00039B D0 05            [24] 1459 	pop	ar5
      00039D D0 06            [24] 1460 	pop	ar6
      00039F D0 07            [24] 1461 	pop	ar7
      0003A1 78r14            [12] 1462 	mov	r0,#_transmitted_ticks
      0003A3 E2               [24] 1463 	movx	a,@r0
      0003A4 F5 82            [12] 1464 	mov	dpl,a
      0003A6 08               [12] 1465 	inc	r0
      0003A7 E2               [24] 1466 	movx	a,@r0
      0003A8 F5 83            [12] 1467 	mov	dph,a
      0003AA C0 05            [24] 1468 	push	ar5
      0003AC C0 04            [24] 1469 	push	ar4
      0003AE 12r00r00         [24] 1470 	lcall	___uint2fs
      0003B1 AA 82            [24] 1471 	mov	r2,dpl
      0003B3 AB 83            [24] 1472 	mov	r3,dph
      0003B5 AE F0            [24] 1473 	mov	r6,b
      0003B7 FF               [12] 1474 	mov	r7,a
      0003B8 D0 04            [24] 1475 	pop	ar4
      0003BA D0 05            [24] 1476 	pop	ar5
      0003BC C0 07            [24] 1477 	push	ar7
      0003BE C0 06            [24] 1478 	push	ar6
      0003C0 C0 05            [24] 1479 	push	ar5
      0003C2 C0 04            [24] 1480 	push	ar4
      0003C4 C0 02            [24] 1481 	push	ar2
      0003C6 C0 03            [24] 1482 	push	ar3
      0003C8 C0 06            [24] 1483 	push	ar6
      0003CA C0 07            [24] 1484 	push	ar7
      0003CC 90 00 00         [24] 1485 	mov	dptr,#0x0000
      0003CF 75 F0 A0         [24] 1486 	mov	b,#0xA0
      0003D2 74 40            [12] 1487 	mov	a,#0x40
      0003D4 12r00r00         [24] 1488 	lcall	___fsmul
      0003D7 85 82*11         [24] 1489 	mov	_tdm_state_update_sloc2_1_0,dpl
      0003DA 85 83*12         [24] 1490 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
      0003DD 85 F0*13         [24] 1491 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
      0003E0 F5*14            [12] 1492 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
      0003E2 E5 81            [12] 1493 	mov	a,sp
      0003E4 24 FC            [12] 1494 	add	a,#0xfc
      0003E6 F5 81            [12] 1495 	mov	sp,a
      0003E8 D0 04            [24] 1496 	pop	ar4
      0003EA D0 05            [24] 1497 	pop	ar5
      0003EC D0 06            [24] 1498 	pop	ar6
      0003EE D0 07            [24] 1499 	pop	ar7
      0003F0 78r06            [12] 1500 	mov	r0,#_silence_period
      0003F2 79r03            [12] 1501 	mov	r1,#_tx_window_width
      0003F4 E3               [24] 1502 	movx	a,@r1
      0003F5 C5 F0            [12] 1503 	xch	a,b
      0003F7 E2               [24] 1504 	movx	a,@r0
      0003F8 25 F0            [12] 1505 	add	a,b
      0003FA FE               [12] 1506 	mov	r6,a
      0003FB 09               [12] 1507 	inc	r1
      0003FC E3               [24] 1508 	movx	a,@r1
      0003FD C5 F0            [12] 1509 	xch	a,b
      0003FF 08               [12] 1510 	inc	r0
      000400 E2               [24] 1511 	movx	a,@r0
      000401 35 F0            [12] 1512 	addc	a,b
      000403 CE               [12] 1513 	xch	a,r6
      000404 25 E0            [12] 1514 	add	a,acc
      000406 CE               [12] 1515 	xch	a,r6
      000407 33               [12] 1516 	rlc	a
      000408 FF               [12] 1517 	mov	r7,a
      000409 8E 82            [24] 1518 	mov	dpl,r6
      00040B 8F 83            [24] 1519 	mov	dph,r7
      00040D C0 05            [24] 1520 	push	ar5
      00040F C0 04            [24] 1521 	push	ar4
      000411 12r00r00         [24] 1522 	lcall	___uint2fs
      000414 AA 82            [24] 1523 	mov	r2,dpl
      000416 AB 83            [24] 1524 	mov	r3,dph
      000418 AE F0            [24] 1525 	mov	r6,b
      00041A FF               [12] 1526 	mov	r7,a
      00041B C0 02            [24] 1527 	push	ar2
      00041D C0 03            [24] 1528 	push	ar3
      00041F C0 06            [24] 1529 	push	ar6
      000421 C0 07            [24] 1530 	push	ar7
      000423 85*11 82         [24] 1531 	mov	dpl,_tdm_state_update_sloc2_1_0
      000426 85*12 83         [24] 1532 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
      000429 85*13 F0         [24] 1533 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
      00042C E5*14            [12] 1534 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
      00042E 12r00r00         [24] 1535 	lcall	___fsdiv
      000431 AA 82            [24] 1536 	mov	r2,dpl
      000433 AB 83            [24] 1537 	mov	r3,dph
      000435 AE F0            [24] 1538 	mov	r6,b
      000437 FF               [12] 1539 	mov	r7,a
      000438 E5 81            [12] 1540 	mov	a,sp
      00043A 24 FC            [12] 1541 	add	a,#0xfc
      00043C F5 81            [12] 1542 	mov	sp,a
      00043E C0 02            [24] 1543 	push	ar2
      000440 C0 03            [24] 1544 	push	ar3
      000442 C0 06            [24] 1545 	push	ar6
      000444 C0 07            [24] 1546 	push	ar7
      000446 85*0D 82         [24] 1547 	mov	dpl,_tdm_state_update_sloc1_1_0
      000449 85*0E 83         [24] 1548 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
      00044C 85*0F F0         [24] 1549 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
      00044F E5*10            [12] 1550 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
      000451 12r00r00         [24] 1551 	lcall	___fsadd
      000454 AA 82            [24] 1552 	mov	r2,dpl
      000456 AB 83            [24] 1553 	mov	r3,dph
      000458 AE F0            [24] 1554 	mov	r6,b
      00045A FF               [12] 1555 	mov	r7,a
      00045B E5 81            [12] 1556 	mov	a,sp
      00045D 24 FC            [12] 1557 	add	a,#0xfc
      00045F F5 81            [12] 1558 	mov	sp,a
      000461 D0 04            [24] 1559 	pop	ar4
      000463 D0 05            [24] 1560 	pop	ar5
      000465 78r0F            [12] 1561 	mov	r0,#_average_duty_cycle
      000467 EA               [12] 1562 	mov	a,r2
      000468 F2               [24] 1563 	movx	@r0,a
      000469 08               [12] 1564 	inc	r0
      00046A EB               [12] 1565 	mov	a,r3
      00046B F2               [24] 1566 	movx	@r0,a
      00046C 08               [12] 1567 	inc	r0
      00046D EE               [12] 1568 	mov	a,r6
      00046E F2               [24] 1569 	movx	@r0,a
      00046F 08               [12] 1570 	inc	r0
      000470 EF               [12] 1571 	mov	a,r7
      000471 F2               [24] 1572 	movx	@r0,a
                                   1573 ;	radio/tdm.c:322: transmitted_ticks = 0;
      000472 78r14            [12] 1574 	mov	r0,#_transmitted_ticks
      000474 E4               [12] 1575 	clr	a
      000475 F2               [24] 1576 	movx	@r0,a
      000476 08               [12] 1577 	inc	r0
      000477 F2               [24] 1578 	movx	@r0,a
                                   1579 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      000478 EC               [12] 1580 	mov	a,r4
      000479 C3               [12] 1581 	clr	c
      00047A 95*0B            [12] 1582 	subb	a,_tdm_state_update_sloc0_1_0
      00047C FC               [12] 1583 	mov	r4,a
      00047D ED               [12] 1584 	mov	a,r5
      00047E 95*0C            [12] 1585 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      000480 FD               [12] 1586 	mov	r5,a
      000481 8C 82            [24] 1587 	mov	dpl,r4
      000483 8D 83            [24] 1588 	mov	dph,r5
      000485 12r00r00         [24] 1589 	lcall	___sint2fs
      000488 AC 82            [24] 1590 	mov	r4,dpl
      00048A AD 83            [24] 1591 	mov	r5,dph
      00048C AE F0            [24] 1592 	mov	r6,b
      00048E FF               [12] 1593 	mov	r7,a
      00048F C0 07            [24] 1594 	push	ar7
      000491 C0 06            [24] 1595 	push	ar6
      000493 C0 04            [24] 1596 	push	ar4
      000495 C0 05            [24] 1597 	push	ar5
      000497 C0 06            [24] 1598 	push	ar6
      000499 C0 07            [24] 1599 	push	ar7
      00049B 78r0F            [12] 1600 	mov	r0,#_average_duty_cycle
      00049D E2               [24] 1601 	movx	a,@r0
      00049E F5 82            [12] 1602 	mov	dpl,a
      0004A0 08               [12] 1603 	inc	r0
      0004A1 E2               [24] 1604 	movx	a,@r0
      0004A2 F5 83            [12] 1605 	mov	dph,a
      0004A4 08               [12] 1606 	inc	r0
      0004A5 E2               [24] 1607 	movx	a,@r0
      0004A6 F5 F0            [12] 1608 	mov	b,a
      0004A8 08               [12] 1609 	inc	r0
      0004A9 E2               [24] 1610 	movx	a,@r0
      0004AA 12r00r00         [24] 1611 	lcall	___fslt
      0004AD E5 81            [12] 1612 	mov	a,sp
      0004AF 24 FC            [12] 1613 	add	a,#0xfc
      0004B1 F5 81            [12] 1614 	mov	sp,a
      0004B3 D0 06            [24] 1615 	pop	ar6
      0004B5 D0 07            [24] 1616 	pop	ar7
      0004B7 E5 82            [12] 1617 	mov	a,dpl
      0004B9 24 FF            [12] 1618 	add	a,#0xFF
      0004BB 92*08            [24] 1619 	mov  _tdm_state_update_sloc3_1_0,c
      0004BD B3               [12] 1620 	cpl	c
      0004BE 92*04            [24] 1621 	mov	_duty_cycle_wait,c
                                   1622 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004C0 D0 07            [24] 1623 	pop	ar7
      0004C2 D0 06            [24] 1624 	pop	ar6
                                   1625 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      0004C4                       1626 00114$:
                                   1627 ;	radio/tdm.c:327: bonus_transmit = 0;
      0004C4 C2*00            [12] 1628 	clr	_bonus_transmit
                                   1629 ;	radio/tdm.c:330: transmit_yield = 0;
      0004C6 C2*01            [12] 1630 	clr	_transmit_yield
                                   1631 ;	radio/tdm.c:333: transmit_wait = 0;
      0004C8 78r0C            [12] 1632 	mov	r0,#_transmit_wait
      0004CA E4               [12] 1633 	clr	a
      0004CB F2               [24] 1634 	movx	@r0,a
      0004CC 08               [12] 1635 	inc	r0
      0004CD F2               [24] 1636 	movx	@r0,a
      0004CE 02r02r86         [24] 1637 	ljmp	00116$
      0004D1                       1638 00118$:
                                   1639 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004D1 78r01            [12] 1640 	mov	r0,#_tdm_state_remaining
      0004D3 E2               [24] 1641 	movx	a,@r0
      0004D4 C3               [12] 1642 	clr	c
      0004D5 9E               [12] 1643 	subb	a,r6
      0004D6 F2               [24] 1644 	movx	@r0,a
      0004D7 08               [12] 1645 	inc	r0
      0004D8 E2               [24] 1646 	movx	a,@r0
      0004D9 9F               [12] 1647 	subb	a,r7
      0004DA F2               [24] 1648 	movx	@r0,a
      0004DB 22               [24] 1649 	ret
                                   1650 ;------------------------------------------------------------
                                   1651 ;Allocation info for local variables in function 'tdm_change_phase'
                                   1652 ;------------------------------------------------------------
                                   1653 ;	radio/tdm.c:342: tdm_change_phase(void)
                                   1654 ;	-----------------------------------------
                                   1655 ;	 function tdm_change_phase
                                   1656 ;	-----------------------------------------
      0004DC                       1657 _tdm_change_phase:
                                   1658 ;	radio/tdm.c:344: tdm_state = (tdm_state+2) % 4;
      0004DC 78r00            [12] 1659 	mov	r0,#_tdm_state
      0004DE E2               [24] 1660 	movx	a,@r0
      0004DF FE               [12] 1661 	mov	r6,a
      0004E0 7F 00            [12] 1662 	mov	r7,#0x00
      0004E2 74 02            [12] 1663 	mov	a,#0x02
      0004E4 2E               [12] 1664 	add	a,r6
      0004E5 FE               [12] 1665 	mov	r6,a
      0004E6 E4               [12] 1666 	clr	a
      0004E7 3F               [12] 1667 	addc	a,r7
      0004E8 FF               [12] 1668 	mov	r7,a
      0004E9 90r00r00         [24] 1669 	mov	dptr,#__modsint_PARM_2
      0004EC 74 04            [12] 1670 	mov	a,#0x04
      0004EE F0               [24] 1671 	movx	@dptr,a
      0004EF E4               [12] 1672 	clr	a
      0004F0 A3               [24] 1673 	inc	dptr
      0004F1 F0               [24] 1674 	movx	@dptr,a
      0004F2 8E 82            [24] 1675 	mov	dpl,r6
      0004F4 8F 83            [24] 1676 	mov	dph,r7
      0004F6 12r00r00         [24] 1677 	lcall	__modsint
      0004F9 AE 82            [24] 1678 	mov	r6,dpl
      0004FB 78r00            [12] 1679 	mov	r0,#_tdm_state
      0004FD EE               [12] 1680 	mov	a,r6
      0004FE F2               [24] 1681 	movx	@r0,a
      0004FF 22               [24] 1682 	ret
                                   1683 ;------------------------------------------------------------
                                   1684 ;Allocation info for local variables in function 'temperature_update'
                                   1685 ;------------------------------------------------------------
                                   1686 ;diff                      Allocated to registers r6 r7 
                                   1687 ;------------------------------------------------------------
                                   1688 ;	radio/tdm.c:349: static void temperature_update(void)
                                   1689 ;	-----------------------------------------
                                   1690 ;	 function temperature_update
                                   1691 ;	-----------------------------------------
      000500                       1692 _temperature_update:
                                   1693 ;	radio/tdm.c:352: if (radio_get_transmit_power() <= 20) {
      000500 12r00r00         [24] 1694 	lcall	_radio_get_transmit_power
      000503 E5 82            [12] 1695 	mov	a,dpl
      000505 FF               [12] 1696 	mov	r7,a
      000506 24 EB            [12] 1697 	add	a,#0xff - 0x14
      000508 40 05            [24] 1698 	jc	00102$
                                   1699 ;	radio/tdm.c:353: duty_cycle_offset = 0;
      00050A 78r13            [12] 1700 	mov	r0,#_duty_cycle_offset
      00050C E4               [12] 1701 	clr	a
      00050D F2               [24] 1702 	movx	@r0,a
                                   1703 ;	radio/tdm.c:354: return;
      00050E 22               [24] 1704 	ret
      00050F                       1705 00102$:
                                   1706 ;	radio/tdm.c:357: diff = radio_temperature() - MAX_PA_TEMPERATURE;
      00050F 12r00r00         [24] 1707 	lcall	_radio_temperature
      000512 E5 82            [12] 1708 	mov	a,dpl
      000514 85 83 F0         [24] 1709 	mov	b,dph
      000517 24 9C            [12] 1710 	add	a,#0x9C
      000519 FE               [12] 1711 	mov	r6,a
      00051A E5 F0            [12] 1712 	mov	a,b
      00051C 34 FF            [12] 1713 	addc	a,#0xFF
      00051E FF               [12] 1714 	mov	r7,a
                                   1715 ;	radio/tdm.c:358: if (diff <= 0 && duty_cycle_offset > 0) {
      00051F C3               [12] 1716 	clr	c
      000520 E4               [12] 1717 	clr	a
      000521 9E               [12] 1718 	subb	a,r6
      000522 74 80            [12] 1719 	mov	a,#(0x00 ^ 0x80)
      000524 8F F0            [24] 1720 	mov	b,r7
      000526 63 F0 80         [24] 1721 	xrl	b,#0x80
      000529 95 F0            [12] 1722 	subb	a,b
      00052B E4               [12] 1723 	clr	a
      00052C 33               [12] 1724 	rlc	a
      00052D FD               [12] 1725 	mov	r5,a
      00052E 70 0C            [24] 1726 	jnz	00112$
      000530 78r13            [12] 1727 	mov	r0,#_duty_cycle_offset
      000532 E2               [24] 1728 	movx	a,@r0
      000533 60 07            [24] 1729 	jz	00112$
                                   1730 ;	radio/tdm.c:360: duty_cycle_offset -= 1;
      000535 78r13            [12] 1731 	mov	r0,#_duty_cycle_offset
      000537 E2               [24] 1732 	movx	a,@r0
      000538 14               [12] 1733 	dec	a
      000539 F2               [24] 1734 	movx	@r0,a
      00053A 80 37            [24] 1735 	sjmp	00113$
      00053C                       1736 00112$:
                                   1737 ;	radio/tdm.c:361: } else if (diff > 10) {
      00053C C3               [12] 1738 	clr	c
      00053D 74 0A            [12] 1739 	mov	a,#0x0A
      00053F 9E               [12] 1740 	subb	a,r6
      000540 74 80            [12] 1741 	mov	a,#(0x00 ^ 0x80)
      000542 8F F0            [24] 1742 	mov	b,r7
      000544 63 F0 80         [24] 1743 	xrl	b,#0x80
      000547 95 F0            [12] 1744 	subb	a,b
      000549 50 08            [24] 1745 	jnc	00109$
                                   1746 ;	radio/tdm.c:363: duty_cycle_offset += 10;
      00054B 78r13            [12] 1747 	mov	r0,#_duty_cycle_offset
      00054D E2               [24] 1748 	movx	a,@r0
      00054E 24 0A            [12] 1749 	add	a,#0x0A
      000550 F2               [24] 1750 	movx	@r0,a
      000551 80 20            [24] 1751 	sjmp	00113$
      000553                       1752 00109$:
                                   1753 ;	radio/tdm.c:364: } else if (diff > 5) {
      000553 C3               [12] 1754 	clr	c
      000554 74 05            [12] 1755 	mov	a,#0x05
      000556 9E               [12] 1756 	subb	a,r6
      000557 74 80            [12] 1757 	mov	a,#(0x00 ^ 0x80)
      000559 8F F0            [24] 1758 	mov	b,r7
      00055B 63 F0 80         [24] 1759 	xrl	b,#0x80
      00055E 95 F0            [12] 1760 	subb	a,b
      000560 50 08            [24] 1761 	jnc	00106$
                                   1762 ;	radio/tdm.c:366: duty_cycle_offset += 5;
      000562 78r13            [12] 1763 	mov	r0,#_duty_cycle_offset
      000564 E2               [24] 1764 	movx	a,@r0
      000565 24 05            [12] 1765 	add	a,#0x05
      000567 F2               [24] 1766 	movx	@r0,a
      000568 80 09            [24] 1767 	sjmp	00113$
      00056A                       1768 00106$:
                                   1769 ;	radio/tdm.c:367: } else if (diff > 0) {
      00056A ED               [12] 1770 	mov	a,r5
      00056B 60 06            [24] 1771 	jz	00113$
                                   1772 ;	radio/tdm.c:369: duty_cycle_offset += 1;				
      00056D 78r13            [12] 1773 	mov	r0,#_duty_cycle_offset
      00056F E2               [24] 1774 	movx	a,@r0
      000570 24 01            [12] 1775 	add	a,#0x01
      000572 F2               [24] 1776 	movx	@r0,a
      000573                       1777 00113$:
                                   1778 ;	radio/tdm.c:372: if ((duty_cycle-duty_cycle_offset) < 20) {
      000573 78r0E            [12] 1779 	mov	r0,#_duty_cycle
      000575 E2               [24] 1780 	movx	a,@r0
      000576 FE               [12] 1781 	mov	r6,a
      000577 7F 00            [12] 1782 	mov	r7,#0x00
      000579 78r13            [12] 1783 	mov	r0,#_duty_cycle_offset
      00057B E2               [24] 1784 	movx	a,@r0
      00057C FC               [12] 1785 	mov	r4,a
      00057D 7D 00            [12] 1786 	mov	r5,#0x00
      00057F EE               [12] 1787 	mov	a,r6
      000580 C3               [12] 1788 	clr	c
      000581 9C               [12] 1789 	subb	a,r4
      000582 FE               [12] 1790 	mov	r6,a
      000583 EF               [12] 1791 	mov	a,r7
      000584 9D               [12] 1792 	subb	a,r5
      000585 FF               [12] 1793 	mov	r7,a
      000586 C3               [12] 1794 	clr	c
      000587 EE               [12] 1795 	mov	a,r6
      000588 94 14            [12] 1796 	subb	a,#0x14
      00058A EF               [12] 1797 	mov	a,r7
      00058B 64 80            [12] 1798 	xrl	a,#0x80
      00058D 94 80            [12] 1799 	subb	a,#0x80
      00058F 50 08            [24] 1800 	jnc	00117$
                                   1801 ;	radio/tdm.c:373: duty_cycle_offset = duty_cycle - 20;
      000591 78r0E            [12] 1802 	mov	r0,#_duty_cycle
      000593 79r13            [12] 1803 	mov	r1,#_duty_cycle_offset
      000595 E2               [24] 1804 	movx	a,@r0
      000596 24 EC            [12] 1805 	add	a,#0xEC
      000598 F3               [24] 1806 	movx	@r1,a
      000599                       1807 00117$:
      000599 22               [24] 1808 	ret
                                   1809 ;------------------------------------------------------------
                                   1810 ;Allocation info for local variables in function 'link_update'
                                   1811 ;------------------------------------------------------------
                                   1812 ;old_remaining             Allocated to registers r6 r7 
                                   1813 ;unlock_count              Allocated with name '_link_update_unlock_count_1_192'
                                   1814 ;temperature_count         Allocated with name '_link_update_temperature_count_1_192'
                                   1815 ;------------------------------------------------------------
                                   1816 ;	radio/tdm.c:381: link_update(void)
                                   1817 ;	-----------------------------------------
                                   1818 ;	 function link_update
                                   1819 ;	-----------------------------------------
      00059A                       1820 _link_update:
                                   1821 ;	radio/tdm.c:384: if (received_packet) {
      00059A 30*03 09         [24] 1822 	jnb	_received_packet,00102$
                                   1823 ;	radio/tdm.c:385: unlock_count = 0;
      00059D 90r00rFD         [24] 1824 	mov	dptr,#_link_update_unlock_count_1_192
      0005A0 E4               [12] 1825 	clr	a
      0005A1 F0               [24] 1826 	movx	@dptr,a
                                   1827 ;	radio/tdm.c:386: received_packet = false;
      0005A2 C2*03            [12] 1828 	clr	_received_packet
      0005A4 80 07            [24] 1829 	sjmp	00103$
      0005A6                       1830 00102$:
                                   1831 ;	radio/tdm.c:391: unlock_count++;
      0005A6 90r00rFD         [24] 1832 	mov	dptr,#_link_update_unlock_count_1_192
      0005A9 E0               [24] 1833 	movx	a,@dptr
      0005AA 24 01            [12] 1834 	add	a,#0x01
      0005AC F0               [24] 1835 	movx	@dptr,a
      0005AD                       1836 00103$:
                                   1837 ;	radio/tdm.c:394: if (unlock_count < 2) {
      0005AD 90r00rFD         [24] 1838 	mov	dptr,#_link_update_unlock_count_1_192
      0005B0 E0               [24] 1839 	movx	a,@dptr
      0005B1 FF               [12] 1840 	mov	r7,a
      0005B2 BF 02 00         [24] 1841 	cjne	r7,#0x02,00157$
      0005B5                       1842 00157$:
      0005B5 50 04            [24] 1843 	jnc	00105$
                                   1844 ;	radio/tdm.c:395: LED_RADIO = LED_ON;
      0005B7 C2 A5            [12] 1845 	clr	_LED_GREEN
      0005B9 80 06            [24] 1846 	sjmp	00106$
      0005BB                       1847 00105$:
                                   1848 ;	radio/tdm.c:401: LED_RADIO = blink_state;
      0005BB A2*02            [12] 1849 	mov	c,_blink_state
      0005BD 92 A5            [24] 1850 	mov	_LED_GREEN,c
                                   1851 ;	radio/tdm.c:402: blink_state = !blink_state;
      0005BF B2*02            [12] 1852 	cpl	_blink_state
      0005C1                       1853 00106$:
                                   1854 ;	radio/tdm.c:405: if (unlock_count > 40) {
      0005C1 EF               [12] 1855 	mov	a,r7
      0005C2 24 D7            [12] 1856 	add	a,#0xff - 0x28
      0005C4 40 03            [24] 1857 	jc	00159$
      0005C6 02r06r51         [24] 1858 	ljmp	00117$
      0005C9                       1859 00159$:
                                   1860 ;	radio/tdm.c:409: unlock_count = 5;
      0005C9 90r00rFD         [24] 1861 	mov	dptr,#_link_update_unlock_count_1_192
      0005CC 74 05            [12] 1862 	mov	a,#0x05
      0005CE F0               [24] 1863 	movx	@dptr,a
                                   1864 ;	radio/tdm.c:413: if (timer_entropy() & 1) {
      0005CF 12r00r00         [24] 1865 	lcall	_timer_entropy
      0005D2 E5 82            [12] 1866 	mov	a,dpl
      0005D4 30 E0 59         [24] 1867 	jnb	acc.0,00113$
                                   1868 ;	radio/tdm.c:414: register uint16_t old_remaining = tdm_state_remaining;
      0005D7 78r01            [12] 1869 	mov	r0,#_tdm_state_remaining
      0005D9 E2               [24] 1870 	movx	a,@r0
      0005DA FE               [12] 1871 	mov	r6,a
      0005DB 08               [12] 1872 	inc	r0
      0005DC E2               [24] 1873 	movx	a,@r0
      0005DD FF               [12] 1874 	mov	r7,a
                                   1875 ;	radio/tdm.c:415: if (tdm_state_remaining > silence_period) {
      0005DE 78r06            [12] 1876 	mov	r0,#_silence_period
      0005E0 C3               [12] 1877 	clr	c
      0005E1 E2               [24] 1878 	movx	a,@r0
      0005E2 9E               [12] 1879 	subb	a,r6
      0005E3 08               [12] 1880 	inc	r0
      0005E4 E2               [24] 1881 	movx	a,@r0
      0005E5 9F               [12] 1882 	subb	a,r7
      0005E6 50 17            [24] 1883 	jnc	00108$
                                   1884 ;	radio/tdm.c:416: tdm_state_remaining -= packet_latency;
      0005E8 78r08            [12] 1885 	mov	r0,#_packet_latency
      0005EA D3               [12] 1886 	setb	c
      0005EB E2               [24] 1887 	movx	a,@r0
      0005EC 9E               [12] 1888 	subb	a,r6
      0005ED F4               [12] 1889 	cpl	a
      0005EE B3               [12] 1890 	cpl	c
      0005EF FC               [12] 1891 	mov	r4,a
      0005F0 B3               [12] 1892 	cpl	c
      0005F1 08               [12] 1893 	inc	r0
      0005F2 E2               [24] 1894 	movx	a,@r0
      0005F3 9F               [12] 1895 	subb	a,r7
      0005F4 F4               [12] 1896 	cpl	a
      0005F5 FD               [12] 1897 	mov	r5,a
      0005F6 78r01            [12] 1898 	mov	r0,#_tdm_state_remaining
      0005F8 EC               [12] 1899 	mov	a,r4
      0005F9 F2               [24] 1900 	movx	@r0,a
      0005FA 08               [12] 1901 	inc	r0
      0005FB ED               [12] 1902 	mov	a,r5
      0005FC F2               [24] 1903 	movx	@r0,a
      0005FD 80 08            [24] 1904 	sjmp	00109$
      0005FF                       1905 00108$:
                                   1906 ;	radio/tdm.c:418: tdm_state_remaining = 1;
      0005FF 78r01            [12] 1907 	mov	r0,#_tdm_state_remaining
      000601 74 01            [12] 1908 	mov	a,#0x01
      000603 F2               [24] 1909 	movx	@r0,a
      000604 08               [12] 1910 	inc	r0
      000605 E4               [12] 1911 	clr	a
      000606 F2               [24] 1912 	movx	@r0,a
      000607                       1913 00109$:
                                   1914 ;	radio/tdm.c:420: if (at_testmode & AT_TEST_TDM) {
      000607 78r00            [12] 1915 	mov	r0,#_at_testmode
      000609 E2               [24] 1916 	movx	a,@r0
      00060A 54 02            [12] 1917 	anl	a,#0x02
      00060C 60 22            [24] 1918 	jz	00113$
                                   1919 ;	radio/tdm.c:421: printf("TDM: change timing %u/%u\n",
      00060E 78r01            [12] 1920 	mov	r0,#_tdm_state_remaining
      000610 E2               [24] 1921 	movx	a,@r0
      000611 C0 E0            [24] 1922 	push	acc
      000613 08               [12] 1923 	inc	r0
      000614 E2               [24] 1924 	movx	a,@r0
      000615 C0 E0            [24] 1925 	push	acc
      000617 C0 06            [24] 1926 	push	ar6
      000619 C0 07            [24] 1927 	push	ar7
      00061B 74r82            [12] 1928 	mov	a,#___str_4
      00061D C0 E0            [24] 1929 	push	acc
      00061F 74s00            [12] 1930 	mov	a,#(___str_4 >> 8)
      000621 C0 E0            [24] 1931 	push	acc
      000623 74 80            [12] 1932 	mov	a,#0x80
      000625 C0 E0            [24] 1933 	push	acc
      000627 12r00r00         [24] 1934 	lcall	_printfl
      00062A E5 81            [12] 1935 	mov	a,sp
      00062C 24 F9            [12] 1936 	add	a,#0xf9
      00062E F5 81            [12] 1937 	mov	sp,a
      000630                       1938 00113$:
                                   1939 ;	radio/tdm.c:427: if (at_testmode & AT_TEST_TDM) {
      000630 78r00            [12] 1940 	mov	r0,#_at_testmode
      000632 E2               [24] 1941 	movx	a,@r0
      000633 54 02            [12] 1942 	anl	a,#0x02
      000635 60 15            [24] 1943 	jz	00115$
                                   1944 ;	radio/tdm.c:428: printf("TDM: scanning\n");
      000637 74r9C            [12] 1945 	mov	a,#___str_5
      000639 C0 E0            [24] 1946 	push	acc
      00063B 74s00            [12] 1947 	mov	a,#(___str_5 >> 8)
      00063D C0 E0            [24] 1948 	push	acc
      00063F 74 80            [12] 1949 	mov	a,#0x80
      000641 C0 E0            [24] 1950 	push	acc
      000643 12r00r00         [24] 1951 	lcall	_printfl
      000646 15 81            [12] 1952 	dec	sp
      000648 15 81            [12] 1953 	dec	sp
      00064A 15 81            [12] 1954 	dec	sp
      00064C                       1955 00115$:
                                   1956 ;	radio/tdm.c:430: fhop_set_locked(false);
      00064C C2*00            [12] 1957 	clr	_fhop_set_locked_PARM_1
      00064E 12r00r00         [24] 1958 	lcall	_fhop_set_locked
      000651                       1959 00117$:
                                   1960 ;	radio/tdm.c:433: if (unlock_count != 0) {
      000651 90r00rFD         [24] 1961 	mov	dptr,#_link_update_unlock_count_1_192
      000654 E0               [24] 1962 	movx	a,@dptr
      000655 60 3D            [24] 1963 	jz	00119$
                                   1964 ;	radio/tdm.c:434: statistics.average_rssi = (radio_last_rssi() + 3*(uint16_t)statistics.average_rssi)/4;
      000657 12r00r00         [24] 1965 	lcall	_radio_last_rssi
      00065A AF 82            [24] 1966 	mov	r7,dpl
      00065C 7E 00            [12] 1967 	mov	r6,#0x00
      00065E 78r00            [12] 1968 	mov	r0,#_statistics
      000660 E2               [24] 1969 	movx	a,@r0
      000661 90r00r00         [24] 1970 	mov	dptr,#__mulint_PARM_2
      000664 F0               [24] 1971 	movx	@dptr,a
      000665 E4               [12] 1972 	clr	a
      000666 A3               [24] 1973 	inc	dptr
      000667 F0               [24] 1974 	movx	@dptr,a
      000668 90 00 03         [24] 1975 	mov	dptr,#0x0003
      00066B C0 07            [24] 1976 	push	ar7
      00066D C0 06            [24] 1977 	push	ar6
      00066F 12r00r00         [24] 1978 	lcall	__mulint
      000672 AC 82            [24] 1979 	mov	r4,dpl
      000674 AD 83            [24] 1980 	mov	r5,dph
      000676 D0 06            [24] 1981 	pop	ar6
      000678 D0 07            [24] 1982 	pop	ar7
      00067A EC               [12] 1983 	mov	a,r4
      00067B 2F               [12] 1984 	add	a,r7
      00067C FC               [12] 1985 	mov	r4,a
      00067D ED               [12] 1986 	mov	a,r5
      00067E 3E               [12] 1987 	addc	a,r6
      00067F C3               [12] 1988 	clr	c
      000680 13               [12] 1989 	rrc	a
      000681 CC               [12] 1990 	xch	a,r4
      000682 13               [12] 1991 	rrc	a
      000683 CC               [12] 1992 	xch	a,r4
      000684 C3               [12] 1993 	clr	c
      000685 13               [12] 1994 	rrc	a
      000686 CC               [12] 1995 	xch	a,r4
      000687 13               [12] 1996 	rrc	a
      000688 CC               [12] 1997 	xch	a,r4
      000689 FD               [12] 1998 	mov	r5,a
      00068A 78r00            [12] 1999 	mov	r0,#_statistics
      00068C EC               [12] 2000 	mov	a,r4
      00068D F2               [24] 2001 	movx	@r0,a
                                   2002 ;	radio/tdm.c:437: statistics.receive_count = 0;
      00068E 78r02            [12] 2003 	mov	r0,#(_statistics + 0x0002)
      000690 E4               [12] 2004 	clr	a
      000691 F2               [24] 2005 	movx	@r0,a
      000692 08               [12] 2006 	inc	r0
      000693 F2               [24] 2007 	movx	@r0,a
      000694                       2008 00119$:
                                   2009 ;	radio/tdm.c:440: if (unlock_count > 5) {
      000694 90r00rFD         [24] 2010 	mov	dptr,#_link_update_unlock_count_1_192
      000697 E0               [24] 2011 	movx	a,@dptr
      000698 FF               [12] 2012 	mov  r7,a
      000699 24 FA            [12] 2013 	add	a,#0xff - 0x05
      00069B 50 17            [24] 2014 	jnc	00121$
                                   2015 ;	radio/tdm.c:441: memset(&remote_statistics, 0, sizeof(remote_statistics));
      00069D 90r00r00         [24] 2016 	mov	dptr,#_memset_PARM_2
      0006A0 E4               [12] 2017 	clr	a
      0006A1 F0               [24] 2018 	movx	@dptr,a
      0006A2 90r00r00         [24] 2019 	mov	dptr,#_memset_PARM_3
      0006A5 74 04            [12] 2020 	mov	a,#0x04
      0006A7 F0               [24] 2021 	movx	@dptr,a
      0006A8 E4               [12] 2022 	clr	a
      0006A9 A3               [24] 2023 	inc	dptr
      0006AA F0               [24] 2024 	movx	@dptr,a
      0006AB 90r00r00         [24] 2025 	mov	dptr,#_remote_statistics
      0006AE 75 F0 60         [24] 2026 	mov	b,#0x60
      0006B1 12r00r00         [24] 2027 	lcall	_memset
      0006B4                       2028 00121$:
                                   2029 ;	radio/tdm.c:444: test_display = at_testmode;
      0006B4 78r00            [12] 2030 	mov	r0,#_at_testmode
      0006B6 90r00rFC         [24] 2031 	mov	dptr,#_test_display
      0006B9 E2               [24] 2032 	movx	a,@r0
      0006BA F0               [24] 2033 	movx	@dptr,a
                                   2034 ;	radio/tdm.c:445: send_statistics = 1;
      0006BB D2*05            [12] 2035 	setb	_send_statistics
                                   2036 ;	radio/tdm.c:447: temperature_count++;
      0006BD 90r00rFE         [24] 2037 	mov	dptr,#_link_update_temperature_count_1_192
      0006C0 E0               [24] 2038 	movx	a,@dptr
      0006C1 24 01            [12] 2039 	add	a,#0x01
      0006C3 F0               [24] 2040 	movx	@dptr,a
                                   2041 ;	radio/tdm.c:448: if (temperature_count == 4) {
      0006C4 E0               [24] 2042 	movx	a,@dptr
      0006C5 FF               [12] 2043 	mov	r7,a
      0006C6 BF 04 08         [24] 2044 	cjne	r7,#0x04,00124$
                                   2045 ;	radio/tdm.c:450: temperature_update();
      0006C9 12r05r00         [24] 2046 	lcall	_temperature_update
                                   2047 ;	radio/tdm.c:451: temperature_count = 0;
      0006CC 90r00rFE         [24] 2048 	mov	dptr,#_link_update_temperature_count_1_192
      0006CF E4               [12] 2049 	clr	a
      0006D0 F0               [24] 2050 	movx	@dptr,a
      0006D1                       2051 00124$:
      0006D1 22               [24] 2052 	ret
                                   2053 ;------------------------------------------------------------
                                   2054 ;Allocation info for local variables in function 'tdm_remote_at'
                                   2055 ;------------------------------------------------------------
                                   2056 ;	radio/tdm.c:457: tdm_remote_at(void)
                                   2057 ;	-----------------------------------------
                                   2058 ;	 function tdm_remote_at
                                   2059 ;	-----------------------------------------
      0006D2                       2060 _tdm_remote_at:
                                   2061 ;	radio/tdm.c:459: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
      0006D2 90r00r00         [24] 2062 	mov	dptr,#_at_cmd
      0006D5 75 F0 00         [24] 2063 	mov	b,#0x00
      0006D8 12r00r00         [24] 2064 	lcall	_strlen
      0006DB E5 82            [12] 2065 	mov	a,dpl
      0006DD 85 83 F0         [24] 2066 	mov	b,dph
      0006E0 24 01            [12] 2067 	add	a,#0x01
      0006E2 FE               [12] 2068 	mov	r6,a
      0006E3 E4               [12] 2069 	clr	a
      0006E4 35 F0            [12] 2070 	addc	a,b
      0006E6 FF               [12] 2071 	mov	r7,a
      0006E7 90r00r00         [24] 2072 	mov	dptr,#_memcpy_PARM_2
      0006EA 74r00            [12] 2073 	mov	a,#_at_cmd
      0006EC F0               [24] 2074 	movx	@dptr,a
      0006ED 74s00            [12] 2075 	mov	a,#(_at_cmd >> 8)
      0006EF A3               [24] 2076 	inc	dptr
      0006F0 F0               [24] 2077 	movx	@dptr,a
      0006F1 E4               [12] 2078 	clr	a
      0006F2 A3               [24] 2079 	inc	dptr
      0006F3 F0               [24] 2080 	movx	@dptr,a
      0006F4 90r00r00         [24] 2081 	mov	dptr,#_memcpy_PARM_3
      0006F7 EE               [12] 2082 	mov	a,r6
      0006F8 F0               [24] 2083 	movx	@dptr,a
      0006F9 EF               [12] 2084 	mov	a,r7
      0006FA A3               [24] 2085 	inc	dptr
      0006FB F0               [24] 2086 	movx	@dptr,a
      0006FC 90r00r1F         [24] 2087 	mov	dptr,#_remote_at_cmd
      0006FF 75 F0 60         [24] 2088 	mov	b,#0x60
      000702 12r00r00         [24] 2089 	lcall	_memcpy
                                   2090 ;	radio/tdm.c:460: send_at_command = true;
      000705 D2*06            [12] 2091 	setb	_send_at_command
      000707 22               [24] 2092 	ret
                                   2093 ;------------------------------------------------------------
                                   2094 ;Allocation info for local variables in function 'handle_at_command'
                                   2095 ;------------------------------------------------------------
                                   2096 ;	radio/tdm.c:468: handle_at_command(__pdata uint8_t len)
                                   2097 ;	-----------------------------------------
                                   2098 ;	 function handle_at_command
                                   2099 ;	-----------------------------------------
      000708                       2100 _handle_at_command:
      000708 AF 82            [24] 2101 	mov	r7,dpl
                                   2102 ;	radio/tdm.c:470: if (len < 2 || len > AT_CMD_MAXLEN ||
      00070A BF 02 00         [24] 2103 	cjne	r7,#0x02,00122$
      00070D                       2104 00122$:
      00070D 40 17            [24] 2105 	jc	00101$
      00070F EF               [12] 2106 	mov	a,r7
      000710 24 EF            [12] 2107 	add	a,#0xff - 0x10
      000712 40 12            [24] 2108 	jc	00101$
                                   2109 ;	radio/tdm.c:471: pbuf[0] != (uint8_t)'R' ||
      000714 90r00r00         [24] 2110 	mov	dptr,#_pbuf
      000717 E0               [24] 2111 	movx	a,@dptr
      000718 FE               [12] 2112 	mov	r6,a
      000719 BE 52 0A         [24] 2113 	cjne	r6,#0x52,00101$
                                   2114 ;	radio/tdm.c:472: pbuf[1] != (uint8_t)'T') {
      00071C 90r00r01         [24] 2115 	mov	dptr,#(_pbuf + 0x0001)
      00071F E0               [24] 2116 	movx	a,@dptr
      000720 FE               [12] 2117 	mov	r6,a
      000721 BE 54 02         [24] 2118 	cjne	r6,#0x54,00127$
      000724 80 02            [24] 2119 	sjmp	00102$
      000726                       2120 00127$:
      000726                       2121 00101$:
                                   2122 ;	radio/tdm.c:473: return true;
      000726 D3               [12] 2123 	setb	c
      000727 22               [24] 2124 	ret
      000728                       2125 00102$:
                                   2126 ;	radio/tdm.c:477: memcpy(at_cmd, pbuf, len);
      000728 90r00r00         [24] 2127 	mov	dptr,#_memcpy_PARM_2
      00072B 74r00            [12] 2128 	mov	a,#_pbuf
      00072D F0               [24] 2129 	movx	@dptr,a
      00072E 74s00            [12] 2130 	mov	a,#(_pbuf >> 8)
      000730 A3               [24] 2131 	inc	dptr
      000731 F0               [24] 2132 	movx	@dptr,a
      000732 E4               [12] 2133 	clr	a
      000733 A3               [24] 2134 	inc	dptr
      000734 F0               [24] 2135 	movx	@dptr,a
      000735 90r00r00         [24] 2136 	mov	dptr,#_memcpy_PARM_3
      000738 EF               [12] 2137 	mov	a,r7
      000739 F0               [24] 2138 	movx	@dptr,a
      00073A E4               [12] 2139 	clr	a
      00073B A3               [24] 2140 	inc	dptr
      00073C F0               [24] 2141 	movx	@dptr,a
      00073D 90r00r00         [24] 2142 	mov	dptr,#_at_cmd
      000740 75 F0 00         [24] 2143 	mov	b,#0x00
      000743 C0 07            [24] 2144 	push	ar7
      000745 12r00r00         [24] 2145 	lcall	_memcpy
      000748 D0 07            [24] 2146 	pop	ar7
                                   2147 ;	radio/tdm.c:478: at_cmd[len] = 0;
      00074A EF               [12] 2148 	mov	a,r7
      00074B 24r00            [12] 2149 	add	a,#_at_cmd
      00074D F5 82            [12] 2150 	mov	dpl,a
      00074F E4               [12] 2151 	clr	a
      000750 34s00            [12] 2152 	addc	a,#(_at_cmd >> 8)
      000752 F5 83            [12] 2153 	mov	dph,a
      000754 E4               [12] 2154 	clr	a
      000755 F0               [24] 2155 	movx	@dptr,a
                                   2156 ;	radio/tdm.c:479: at_cmd[0] = 'A'; // replace 'R'
      000756 90r00r00         [24] 2157 	mov	dptr,#_at_cmd
      000759 74 41            [12] 2158 	mov	a,#0x41
      00075B F0               [24] 2159 	movx	@dptr,a
                                   2160 ;	radio/tdm.c:480: at_cmd_len = len;
      00075C 78r00            [12] 2161 	mov	r0,#_at_cmd_len
      00075E EF               [12] 2162 	mov	a,r7
      00075F F2               [24] 2163 	movx	@r0,a
                                   2164 ;	radio/tdm.c:481: at_cmd_ready = true;
      000760 D2*00            [12] 2165 	setb	_at_cmd_ready
                                   2166 ;	radio/tdm.c:486: printf_start_capture(pbuf, sizeof(pbuf));
      000762 90r00r00         [24] 2167 	mov	dptr,#_printf_start_capture_PARM_2
      000765 74 FC            [12] 2168 	mov	a,#0xFC
      000767 F0               [24] 2169 	movx	@dptr,a
      000768 90r00r00         [24] 2170 	mov	dptr,#_pbuf
      00076B 12r00r00         [24] 2171 	lcall	_printf_start_capture
                                   2172 ;	radio/tdm.c:487: at_command();
      00076E 12r00r00         [24] 2173 	lcall	_at_command
                                   2174 ;	radio/tdm.c:488: len = printf_end_capture();
      000771 12r00r00         [24] 2175 	lcall	_printf_end_capture
                                   2176 ;	radio/tdm.c:489: if (len > 0) {
      000774 E5 82            [12] 2177 	mov	a,dpl
      000776 FF               [12] 2178 	mov	r7,a
      000777 60 0A            [24] 2179 	jz	00107$
                                   2180 ;	radio/tdm.c:490: packet_inject(pbuf, len);
      000779 78r00            [12] 2181 	mov	r0,#_packet_inject_PARM_2
      00077B EF               [12] 2182 	mov	a,r7
      00077C F2               [24] 2183 	movx	@r0,a
      00077D 90r00r00         [24] 2184 	mov	dptr,#_pbuf
      000780 12r00r00         [24] 2185 	lcall	_packet_inject
      000783                       2186 00107$:
                                   2187 ;	radio/tdm.c:492: return false;
      000783 C3               [12] 2188 	clr	c
      000784 22               [24] 2189 	ret
                                   2190 ;------------------------------------------------------------
                                   2191 ;Allocation info for local variables in function 'tdm_serial_loop'
                                   2192 ;------------------------------------------------------------
                                   2193 ;	radio/tdm.c:501: tdm_serial_loop(void)
                                   2194 ;	-----------------------------------------
                                   2195 ;	 function tdm_serial_loop
                                   2196 ;	-----------------------------------------
      000785                       2197 _tdm_serial_loop:
                                   2198 ;	radio/tdm.c:516: __pdata uint16_t last_t = timer2_tick();
      000785 12r00r00         [24] 2199 	lcall	_timer2_tick
      000788 78r35            [12] 2200 	mov	r0,#_tdm_serial_loop_last_t_1_213
      00078A E5 82            [12] 2201 	mov	a,dpl
      00078C F2               [24] 2202 	movx	@r0,a
      00078D 08               [12] 2203 	inc	r0
      00078E E5 83            [12] 2204 	mov	a,dph
      000790 F2               [24] 2205 	movx	@r0,a
                                   2206 ;	radio/tdm.c:517: __pdata uint16_t last_link_update = last_t;
      000791 78r35            [12] 2207 	mov	r0,#_tdm_serial_loop_last_t_1_213
      000793 79r37            [12] 2208 	mov	r1,#_tdm_serial_loop_last_link_update_1_213
      000795 E2               [24] 2209 	movx	a,@r0
      000796 F3               [24] 2210 	movx	@r1,a
      000797 08               [12] 2211 	inc	r0
      000798 E2               [24] 2212 	movx	a,@r0
      000799 09               [12] 2213 	inc	r1
      00079A F3               [24] 2214 	movx	@r1,a
                                   2215 ;	radio/tdm.c:520: _canary = 42;
      00079B 78 FF            [12] 2216 	mov	r0,#__canary
      00079D 76 2A            [12] 2217 	mov	@r0,#0x2A
      00079F                       2218 00195$:
                                   2219 ;	radio/tdm.c:523: if (_canary != 42) {
      00079F 78 FF            [12] 2220 	mov	r0,#__canary
      0007A1 B6 2A 02         [24] 2221 	cjne	@r0,#0x2A,00345$
      0007A4 80 15            [24] 2222 	sjmp	00102$
      0007A6                       2223 00345$:
                                   2224 ;	radio/tdm.c:524: panic("stack blown\n");
      0007A6 74rAB            [12] 2225 	mov	a,#___str_6
      0007A8 C0 E0            [24] 2226 	push	acc
      0007AA 74s00            [12] 2227 	mov	a,#(___str_6 >> 8)
      0007AC C0 E0            [24] 2228 	push	acc
      0007AE 74 80            [12] 2229 	mov	a,#0x80
      0007B0 C0 E0            [24] 2230 	push	acc
      0007B2 12r00r00         [24] 2231 	lcall	_panic
      0007B5 15 81            [12] 2232 	dec	sp
      0007B7 15 81            [12] 2233 	dec	sp
      0007B9 15 81            [12] 2234 	dec	sp
      0007BB                       2235 00102$:
                                   2236 ;	radio/tdm.c:527: if (pdata_canary != 0x41) {
      0007BB 78r00            [12] 2237 	mov	r0,#_pdata_canary
      0007BD E2               [24] 2238 	movx	a,@r0
      0007BE B4 41 02         [24] 2239 	cjne	a,#0x41,00346$
      0007C1 80 15            [24] 2240 	sjmp	00104$
      0007C3                       2241 00346$:
                                   2242 ;	radio/tdm.c:528: panic("pdata canary changed\n");
      0007C3 74rB8            [12] 2243 	mov	a,#___str_7
      0007C5 C0 E0            [24] 2244 	push	acc
      0007C7 74s00            [12] 2245 	mov	a,#(___str_7 >> 8)
      0007C9 C0 E0            [24] 2246 	push	acc
      0007CB 74 80            [12] 2247 	mov	a,#0x80
      0007CD C0 E0            [24] 2248 	push	acc
      0007CF 12r00r00         [24] 2249 	lcall	_panic
      0007D2 15 81            [12] 2250 	dec	sp
      0007D4 15 81            [12] 2251 	dec	sp
      0007D6 15 81            [12] 2252 	dec	sp
      0007D8                       2253 00104$:
                                   2254 ;	radio/tdm.c:532: at_command();
      0007D8 12r00r00         [24] 2255 	lcall	_at_command
                                   2256 ;	radio/tdm.c:535: if (test_display) {
      0007DB 90r00rFC         [24] 2257 	mov	dptr,#_test_display
      0007DE E0               [24] 2258 	movx	a,@dptr
      0007DF 60 08            [24] 2259 	jz	00106$
                                   2260 ;	radio/tdm.c:536: display_test_output();
      0007E1 12r00rD1         [24] 2261 	lcall	_display_test_output
                                   2262 ;	radio/tdm.c:537: test_display = 0;
      0007E4 90r00rFC         [24] 2263 	mov	dptr,#_test_display
      0007E7 E4               [12] 2264 	clr	a
      0007E8 F0               [24] 2265 	movx	@dptr,a
      0007E9                       2266 00106$:
                                   2267 ;	radio/tdm.c:540: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
      0007E9 30*00 0E         [24] 2268 	jnb	_seen_mavlink,00108$
      0007EC 90r00r00         [24] 2269 	mov	dptr,#_feature_mavlink_framing
      0007EF E0               [24] 2270 	movx	a,@dptr
      0007F0 60 08            [24] 2271 	jz	00108$
      0007F2 20*00 05         [24] 2272 	jb	_at_mode_active,00108$
                                   2273 ;	radio/tdm.c:541: seen_mavlink = false;
      0007F5 C2*00            [12] 2274 	clr	_seen_mavlink
                                   2275 ;	radio/tdm.c:542: MAVLink_report();
      0007F7 12r00r00         [24] 2276 	lcall	_MAVLink_report
      0007FA                       2277 00108$:
                                   2278 ;	radio/tdm.c:546: radio_set_channel(fhop_receive_channel());
      0007FA 12r00r00         [24] 2279 	lcall	_fhop_receive_channel
      0007FD 12r00r00         [24] 2280 	lcall	_radio_set_channel
                                   2281 ;	radio/tdm.c:549: tnow = timer2_tick();
      000800 12r00r00         [24] 2282 	lcall	_timer2_tick
      000803 AA 82            [24] 2283 	mov	r2,dpl
      000805 AB 83            [24] 2284 	mov	r3,dph
                                   2285 ;	radio/tdm.c:552: if (radio_receive_packet(&len, pbuf)) {
      000807 78r00            [12] 2286 	mov	r0,#_radio_receive_packet_PARM_2
      000809 74r00            [12] 2287 	mov	a,#_pbuf
      00080B F2               [24] 2288 	movx	@r0,a
      00080C 08               [12] 2289 	inc	r0
      00080D 74s00            [12] 2290 	mov	a,#(_pbuf >> 8)
      00080F F2               [24] 2291 	movx	@r0,a
      000810 90r00r32         [24] 2292 	mov	dptr,#_tdm_serial_loop_len_1_213
      000813 75 F0 60         [24] 2293 	mov	b,#0x60
      000816 C0 03            [24] 2294 	push	ar3
      000818 C0 02            [24] 2295 	push	ar2
      00081A 12r00r00         [24] 2296 	lcall	_radio_receive_packet
      00081D D0 02            [24] 2297 	pop	ar2
      00081F D0 03            [24] 2298 	pop	ar3
      000821 40 03            [24] 2299 	jc	00351$
      000823 02r09rA5         [24] 2300 	ljmp	00129$
      000826                       2301 00351$:
                                   2302 ;	radio/tdm.c:555: received_packet = true;
      000826 D2*03            [12] 2303 	setb	_received_packet
                                   2304 ;	radio/tdm.c:556: fhop_set_locked(true);
      000828 D2*00            [12] 2305 	setb	_fhop_set_locked_PARM_1
      00082A C0 03            [24] 2306 	push	ar3
      00082C C0 02            [24] 2307 	push	ar2
      00082E 12r00r00         [24] 2308 	lcall	_fhop_set_locked
                                   2309 ;	radio/tdm.c:559: statistics.average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics.average_rssi)/8;
      000831 12r00r00         [24] 2310 	lcall	_radio_last_rssi
      000834 AD 82            [24] 2311 	mov	r5,dpl
      000836 D0 02            [24] 2312 	pop	ar2
      000838 D0 03            [24] 2313 	pop	ar3
      00083A 7C 00            [12] 2314 	mov	r4,#0x00
      00083C 78r00            [12] 2315 	mov	r0,#_statistics
      00083E E2               [24] 2316 	movx	a,@r0
      00083F 90r00r00         [24] 2317 	mov	dptr,#__mulint_PARM_2
      000842 F0               [24] 2318 	movx	@dptr,a
      000843 E4               [12] 2319 	clr	a
      000844 A3               [24] 2320 	inc	dptr
      000845 F0               [24] 2321 	movx	@dptr,a
      000846 90 00 07         [24] 2322 	mov	dptr,#0x0007
      000849 C0 05            [24] 2323 	push	ar5
      00084B C0 04            [24] 2324 	push	ar4
      00084D C0 03            [24] 2325 	push	ar3
      00084F C0 02            [24] 2326 	push	ar2
      000851 12r00r00         [24] 2327 	lcall	__mulint
      000854 AE 82            [24] 2328 	mov	r6,dpl
      000856 AF 83            [24] 2329 	mov	r7,dph
      000858 D0 02            [24] 2330 	pop	ar2
      00085A D0 03            [24] 2331 	pop	ar3
      00085C D0 04            [24] 2332 	pop	ar4
      00085E D0 05            [24] 2333 	pop	ar5
      000860 EE               [12] 2334 	mov	a,r6
      000861 2D               [12] 2335 	add	a,r5
      000862 FE               [12] 2336 	mov	r6,a
      000863 EF               [12] 2337 	mov	a,r7
      000864 3C               [12] 2338 	addc	a,r4
      000865 C4               [12] 2339 	swap	a
      000866 23               [12] 2340 	rl	a
      000867 CE               [12] 2341 	xch	a,r6
      000868 C4               [12] 2342 	swap	a
      000869 23               [12] 2343 	rl	a
      00086A 54 1F            [12] 2344 	anl	a,#0x1F
      00086C 6E               [12] 2345 	xrl	a,r6
      00086D CE               [12] 2346 	xch	a,r6
      00086E 54 1F            [12] 2347 	anl	a,#0x1F
      000870 CE               [12] 2348 	xch	a,r6
      000871 6E               [12] 2349 	xrl	a,r6
      000872 CE               [12] 2350 	xch	a,r6
      000873 78r00            [12] 2351 	mov	r0,#_statistics
      000875 EE               [12] 2352 	mov	a,r6
      000876 F2               [24] 2353 	movx	@r0,a
                                   2354 ;	radio/tdm.c:560: statistics.receive_count++;
      000877 78r02            [12] 2355 	mov	r0,#(_statistics + 0x0002)
      000879 E2               [24] 2356 	movx	a,@r0
      00087A FE               [12] 2357 	mov	r6,a
      00087B 08               [12] 2358 	inc	r0
      00087C E2               [24] 2359 	movx	a,@r0
      00087D FF               [12] 2360 	mov	r7,a
      00087E 0E               [12] 2361 	inc	r6
      00087F BE 00 01         [24] 2362 	cjne	r6,#0x00,00352$
      000882 0F               [12] 2363 	inc	r7
      000883                       2364 00352$:
      000883 78r02            [12] 2365 	mov	r0,#(_statistics + 0x0002)
      000885 EE               [12] 2366 	mov	a,r6
      000886 F2               [24] 2367 	movx	@r0,a
      000887 08               [12] 2368 	inc	r0
      000888 EF               [12] 2369 	mov	a,r7
      000889 F2               [24] 2370 	movx	@r0,a
                                   2371 ;	radio/tdm.c:564: transmit_wait = 0;
      00088A 78r0C            [12] 2372 	mov	r0,#_transmit_wait
      00088C E4               [12] 2373 	clr	a
      00088D F2               [24] 2374 	movx	@r0,a
      00088E 08               [12] 2375 	inc	r0
      00088F F2               [24] 2376 	movx	@r0,a
                                   2377 ;	radio/tdm.c:566: if (len < 2) {
      000890 78r32            [12] 2378 	mov	r0,#_tdm_serial_loop_len_1_213
      000892 E2               [24] 2379 	movx	a,@r0
      000893 B4 02 00         [24] 2380 	cjne	a,#0x02,00353$
      000896                       2381 00353$:
      000896 50 03            [24] 2382 	jnc	00354$
      000898 02r07r9F         [24] 2383 	ljmp	00195$
      00089B                       2384 00354$:
                                   2385 ;	radio/tdm.c:573: memcpy(&trailer, &pbuf[len-sizeof(trailer)], sizeof(trailer));
      00089B 78r32            [12] 2386 	mov	r0,#_tdm_serial_loop_len_1_213
      00089D E2               [24] 2387 	movx	a,@r0
      00089E 24 FE            [12] 2388 	add	a,#0xFE
      0008A0 24r00            [12] 2389 	add	a,#_pbuf
      0008A2 FE               [12] 2390 	mov	r6,a
      0008A3 E4               [12] 2391 	clr	a
      0008A4 34s00            [12] 2392 	addc	a,#(_pbuf >> 8)
      0008A6 FF               [12] 2393 	mov	r7,a
      0008A7 90r00r00         [24] 2394 	mov	dptr,#_memcpy_PARM_2
      0008AA EE               [12] 2395 	mov	a,r6
      0008AB F0               [24] 2396 	movx	@dptr,a
      0008AC EF               [12] 2397 	mov	a,r7
      0008AD A3               [24] 2398 	inc	dptr
      0008AE F0               [24] 2399 	movx	@dptr,a
      0008AF E4               [12] 2400 	clr	a
      0008B0 A3               [24] 2401 	inc	dptr
      0008B1 F0               [24] 2402 	movx	@dptr,a
      0008B2 90r00r00         [24] 2403 	mov	dptr,#_memcpy_PARM_3
      0008B5 74 02            [12] 2404 	mov	a,#0x02
      0008B7 F0               [24] 2405 	movx	@dptr,a
      0008B8 E4               [12] 2406 	clr	a
      0008B9 A3               [24] 2407 	inc	dptr
      0008BA F0               [24] 2408 	movx	@dptr,a
      0008BB 90r00r1D         [24] 2409 	mov	dptr,#_trailer
      0008BE 75 F0 60         [24] 2410 	mov	b,#0x60
      0008C1 C0 03            [24] 2411 	push	ar3
      0008C3 C0 02            [24] 2412 	push	ar2
      0008C5 12r00r00         [24] 2413 	lcall	_memcpy
      0008C8 D0 02            [24] 2414 	pop	ar2
      0008CA D0 03            [24] 2415 	pop	ar3
                                   2416 ;	radio/tdm.c:574: len -= sizeof(trailer);
      0008CC 78r32            [12] 2417 	mov	r0,#_tdm_serial_loop_len_1_213
      0008CE E2               [24] 2418 	movx	a,@r0
      0008CF 14               [12] 2419 	dec	a
      0008D0 14               [12] 2420 	dec	a
      0008D1 F2               [24] 2421 	movx	@r0,a
                                   2422 ;	radio/tdm.c:576: if (trailer.window == 0 && len != 0) {
      0008D2 78r1D            [12] 2423 	mov	r0,#_trailer
      0008D4 E2               [24] 2424 	movx	a,@r0
      0008D5 FE               [12] 2425 	mov	r6,a
      0008D6 08               [12] 2426 	inc	r0
      0008D7 E2               [24] 2427 	movx	a,@r0
      0008D8 54 1F            [12] 2428 	anl	a,#0x1F
      0008DA FF               [12] 2429 	mov	r7,a
      0008DB 4E               [12] 2430 	orl	a,r6
      0008DC 70 41            [24] 2431 	jnz	00125$
      0008DE 78r32            [12] 2432 	mov	r0,#_tdm_serial_loop_len_1_213
      0008E0 E2               [24] 2433 	movx	a,@r0
      0008E1 60 3C            [24] 2434 	jz	00125$
                                   2435 ;	radio/tdm.c:578: if (len == sizeof(struct statistics)) {
      0008E3 78r32            [12] 2436 	mov	r0,#_tdm_serial_loop_len_1_213
      0008E5 E2               [24] 2437 	movx	a,@r0
      0008E6 B4 04 20         [24] 2438 	cjne	a,#0x04,00114$
                                   2439 ;	radio/tdm.c:579: memcpy(&remote_statistics, pbuf, len);
      0008E9 90r00r00         [24] 2440 	mov	dptr,#_memcpy_PARM_2
      0008EC 74r00            [12] 2441 	mov	a,#_pbuf
      0008EE F0               [24] 2442 	movx	@dptr,a
      0008EF 74s00            [12] 2443 	mov	a,#(_pbuf >> 8)
      0008F1 A3               [24] 2444 	inc	dptr
      0008F2 F0               [24] 2445 	movx	@dptr,a
      0008F3 E4               [12] 2446 	clr	a
      0008F4 A3               [24] 2447 	inc	dptr
      0008F5 F0               [24] 2448 	movx	@dptr,a
      0008F6 78r32            [12] 2449 	mov	r0,#_tdm_serial_loop_len_1_213
      0008F8 90r00r00         [24] 2450 	mov	dptr,#_memcpy_PARM_3
      0008FB E2               [24] 2451 	movx	a,@r0
      0008FC F0               [24] 2452 	movx	@dptr,a
      0008FD E4               [12] 2453 	clr	a
      0008FE A3               [24] 2454 	inc	dptr
      0008FF F0               [24] 2455 	movx	@dptr,a
      000900 90r00r00         [24] 2456 	mov	dptr,#_remote_statistics
      000903 75 F0 60         [24] 2457 	mov	b,#0x60
      000906 12r00r00         [24] 2458 	lcall	_memcpy
      000909                       2459 00114$:
                                   2460 ;	radio/tdm.c:583: statistics.receive_count--;
      000909 78r02            [12] 2461 	mov	r0,#(_statistics + 0x0002)
      00090B E2               [24] 2462 	movx	a,@r0
      00090C FE               [12] 2463 	mov	r6,a
      00090D 08               [12] 2464 	inc	r0
      00090E E2               [24] 2465 	movx	a,@r0
      00090F FF               [12] 2466 	mov	r7,a
      000910 1E               [12] 2467 	dec	r6
      000911 BE FF 01         [24] 2468 	cjne	r6,#0xFF,00359$
      000914 1F               [12] 2469 	dec	r7
      000915                       2470 00359$:
      000915 78r02            [12] 2471 	mov	r0,#(_statistics + 0x0002)
      000917 EE               [12] 2472 	mov	a,r6
      000918 F2               [24] 2473 	movx	@r0,a
      000919 08               [12] 2474 	inc	r0
      00091A EF               [12] 2475 	mov	a,r7
      00091B F2               [24] 2476 	movx	@r0,a
      00091C 02r07r9F         [24] 2477 	ljmp	00195$
      00091F                       2478 00125$:
                                   2479 ;	radio/tdm.c:584: } else if (trailer.window != 0) {
      00091F 78r1D            [12] 2480 	mov	r0,#_trailer
      000921 E2               [24] 2481 	movx	a,@r0
      000922 FE               [12] 2482 	mov	r6,a
      000923 08               [12] 2483 	inc	r0
      000924 E2               [24] 2484 	movx	a,@r0
      000925 54 1F            [12] 2485 	anl	a,#0x1F
      000927 FF               [12] 2486 	mov	r7,a
      000928 4E               [12] 2487 	orl	a,r6
      000929 70 03            [24] 2488 	jnz	00360$
      00092B 02r07r9F         [24] 2489 	ljmp	00195$
      00092E                       2490 00360$:
                                   2491 ;	radio/tdm.c:587: sync_tx_windows(len);
      00092E 78r32            [12] 2492 	mov	r0,#_tdm_serial_loop_len_1_213
      000930 E2               [24] 2493 	movx	a,@r0
      000931 F5 82            [12] 2494 	mov	dpl,a
      000933 C0 03            [24] 2495 	push	ar3
      000935 C0 02            [24] 2496 	push	ar2
      000937 12r01r04         [24] 2497 	lcall	_sync_tx_windows
      00093A D0 02            [24] 2498 	pop	ar2
      00093C D0 03            [24] 2499 	pop	ar3
                                   2500 ;	radio/tdm.c:588: last_t = tnow;
      00093E 78r35            [12] 2501 	mov	r0,#_tdm_serial_loop_last_t_1_213
      000940 EA               [12] 2502 	mov	a,r2
      000941 F2               [24] 2503 	movx	@r0,a
      000942 08               [12] 2504 	inc	r0
      000943 EB               [12] 2505 	mov	a,r3
      000944 F2               [24] 2506 	movx	@r0,a
                                   2507 ;	radio/tdm.c:597: if ((trailer.command == 1 && handle_at_command(len)) 
      000945 78r1E            [12] 2508 	mov	r0,#(_trailer + 0x0001)
      000947 E2               [24] 2509 	movx	a,@r0
      000948 C4               [12] 2510 	swap	a
      000949 03               [12] 2511 	rr	a
      00094A 54 01            [12] 2512 	anl	a,#0x01
      00094C FF               [12] 2513 	mov	r7,a
      00094D BF 01 0A         [24] 2514 	cjne	r7,#0x01,00121$
      000950 78r32            [12] 2515 	mov	r0,#_tdm_serial_loop_len_1_213
      000952 E2               [24] 2516 	movx	a,@r0
      000953 F5 82            [12] 2517 	mov	dpl,a
      000955 12r07r08         [24] 2518 	lcall	_handle_at_command
      000958 40 38            [24] 2519 	jc	00115$
      00095A                       2520 00121$:
                                   2521 ;	radio/tdm.c:599: (len != 0 && trailer.command == 0 &&
      00095A 78r32            [12] 2522 	mov	r0,#_tdm_serial_loop_len_1_213
      00095C E2               [24] 2523 	movx	a,@r0
      00095D 70 03            [24] 2524 	jnz	00364$
      00095F 02r07r9F         [24] 2525 	ljmp	00195$
      000962                       2526 00364$:
      000962 78r1E            [12] 2527 	mov	r0,#(_trailer + 0x0001)
      000964 E2               [24] 2528 	movx	a,@r0
      000965 30 E5 03         [24] 2529 	jnb	acc.5,00365$
      000968 02r07r9F         [24] 2530 	ljmp	00195$
      00096B                       2531 00365$:
                                   2532 ;	radio/tdm.c:600: !packet_is_duplicate(len, pbuf, trailer.resend) &&
      00096B 78r1E            [12] 2533 	mov	r0,#(_trailer + 0x0001)
      00096D E2               [24] 2534 	movx	a,@r0
      00096E 23               [12] 2535 	rl	a
      00096F 54 01            [12] 2536 	anl	a,#0x01
      000971 24 FF            [12] 2537 	add	a,#0xff
      000973 92*00            [24] 2538 	mov	_packet_is_duplicate_PARM_3,c
      000975 90r00r00         [24] 2539 	mov	dptr,#_packet_is_duplicate_PARM_2
      000978 74r00            [12] 2540 	mov	a,#_pbuf
      00097A F0               [24] 2541 	movx	@dptr,a
      00097B 74s00            [12] 2542 	mov	a,#(_pbuf >> 8)
      00097D A3               [24] 2543 	inc	dptr
      00097E F0               [24] 2544 	movx	@dptr,a
      00097F 78r32            [12] 2545 	mov	r0,#_tdm_serial_loop_len_1_213
      000981 E2               [24] 2546 	movx	a,@r0
      000982 F5 82            [12] 2547 	mov	dpl,a
      000984 12r00r00         [24] 2548 	lcall	_packet_is_duplicate
      000987 50 03            [24] 2549 	jnc	00366$
      000989 02r07r9F         [24] 2550 	ljmp	00195$
      00098C                       2551 00366$:
                                   2552 ;	radio/tdm.c:601: !at_mode_active
      00098C 30*00 03         [24] 2553 	jnb	_at_mode_active,00367$
      00098F 02r07r9F         [24] 2554 	ljmp	00195$
      000992                       2555 00367$:
      000992                       2556 00115$:
                                   2557 ;	radio/tdm.c:620: LED_ACTIVITY = LED_ON;
      000992 C2 A0            [12] 2558 	clr	_LED_RED
                                   2559 ;	radio/tdm.c:621: serial_write_buf(pbuf, len);
      000994 78r32            [12] 2560 	mov	r0,#_tdm_serial_loop_len_1_213
      000996 79r00            [12] 2561 	mov	r1,#_serial_write_buf_PARM_2
      000998 E2               [24] 2562 	movx	a,@r0
      000999 F3               [24] 2563 	movx	@r1,a
      00099A 90r00r00         [24] 2564 	mov	dptr,#_pbuf
      00099D 12r00r00         [24] 2565 	lcall	_serial_write_buf
                                   2566 ;	radio/tdm.c:622: LED_ACTIVITY = LED_OFF;
      0009A0 D2 A0            [12] 2567 	setb	_LED_RED
                                   2568 ;	radio/tdm.c:627: continue;
      0009A2 02r07r9F         [24] 2569 	ljmp	00195$
      0009A5                       2570 00129$:
                                   2571 ;	radio/tdm.c:633: tnow = timer2_tick();
      0009A5 12r00r00         [24] 2572 	lcall	_timer2_tick
      0009A8 AA 82            [24] 2573 	mov	r2,dpl
      0009AA AB 83            [24] 2574 	mov	r3,dph
                                   2575 ;	radio/tdm.c:634: tdelta = tnow - last_t;
      0009AC 78r35            [12] 2576 	mov	r0,#_tdm_serial_loop_last_t_1_213
      0009AE 79r33            [12] 2577 	mov	r1,#_tdm_serial_loop_tdelta_1_213
      0009B0 D3               [12] 2578 	setb	c
      0009B1 E2               [24] 2579 	movx	a,@r0
      0009B2 9A               [12] 2580 	subb	a,r2
      0009B3 F4               [12] 2581 	cpl	a
      0009B4 B3               [12] 2582 	cpl	c
      0009B5 F3               [24] 2583 	movx	@r1,a
      0009B6 B3               [12] 2584 	cpl	c
      0009B7 08               [12] 2585 	inc	r0
      0009B8 E2               [24] 2586 	movx	a,@r0
      0009B9 9B               [12] 2587 	subb	a,r3
      0009BA F4               [12] 2588 	cpl	a
      0009BB 09               [12] 2589 	inc	r1
      0009BC F3               [24] 2590 	movx	@r1,a
                                   2591 ;	radio/tdm.c:635: tdm_state_update(tdelta);
      0009BD 78r33            [12] 2592 	mov	r0,#_tdm_serial_loop_tdelta_1_213
      0009BF E2               [24] 2593 	movx	a,@r0
      0009C0 F5 82            [12] 2594 	mov	dpl,a
      0009C2 08               [12] 2595 	inc	r0
      0009C3 E2               [24] 2596 	movx	a,@r0
      0009C4 F5 83            [12] 2597 	mov	dph,a
      0009C6 C0 03            [24] 2598 	push	ar3
      0009C8 C0 02            [24] 2599 	push	ar2
      0009CA 12r02r66         [24] 2600 	lcall	_tdm_state_update
      0009CD D0 02            [24] 2601 	pop	ar2
      0009CF D0 03            [24] 2602 	pop	ar3
                                   2603 ;	radio/tdm.c:636: last_t = tnow;
      0009D1 78r35            [12] 2604 	mov	r0,#_tdm_serial_loop_last_t_1_213
      0009D3 EA               [12] 2605 	mov	a,r2
      0009D4 F2               [24] 2606 	movx	@r0,a
      0009D5 08               [12] 2607 	inc	r0
      0009D6 EB               [12] 2608 	mov	a,r3
      0009D7 F2               [24] 2609 	movx	@r0,a
                                   2610 ;	radio/tdm.c:639: if (tnow - last_link_update > 32768) {
      0009D8 78r37            [12] 2611 	mov	r0,#_tdm_serial_loop_last_link_update_1_213
      0009DA D3               [12] 2612 	setb	c
      0009DB E2               [24] 2613 	movx	a,@r0
      0009DC 9A               [12] 2614 	subb	a,r2
      0009DD F4               [12] 2615 	cpl	a
      0009DE B3               [12] 2616 	cpl	c
      0009DF FC               [12] 2617 	mov	r4,a
      0009E0 B3               [12] 2618 	cpl	c
      0009E1 08               [12] 2619 	inc	r0
      0009E2 E2               [24] 2620 	movx	a,@r0
      0009E3 9B               [12] 2621 	subb	a,r3
      0009E4 F4               [12] 2622 	cpl	a
      0009E5 FD               [12] 2623 	mov	r5,a
      0009E6 7E 00            [12] 2624 	mov	r6,#0x00
      0009E8 7F 00            [12] 2625 	mov	r7,#0x00
      0009EA C3               [12] 2626 	clr	c
      0009EB E4               [12] 2627 	clr	a
      0009EC 9C               [12] 2628 	subb	a,r4
      0009ED 74 80            [12] 2629 	mov	a,#0x80
      0009EF 9D               [12] 2630 	subb	a,r5
      0009F0 E4               [12] 2631 	clr	a
      0009F1 9E               [12] 2632 	subb	a,r6
      0009F2 74 80            [12] 2633 	mov	a,#(0x00 ^ 0x80)
      0009F4 8F F0            [24] 2634 	mov	b,r7
      0009F6 63 F0 80         [24] 2635 	xrl	b,#0x80
      0009F9 95 F0            [12] 2636 	subb	a,b
      0009FB 50 12            [24] 2637 	jnc	00131$
                                   2638 ;	radio/tdm.c:640: link_update();
      0009FD C0 03            [24] 2639 	push	ar3
      0009FF C0 02            [24] 2640 	push	ar2
      000A01 12r05r9A         [24] 2641 	lcall	_link_update
      000A04 D0 02            [24] 2642 	pop	ar2
      000A06 D0 03            [24] 2643 	pop	ar3
                                   2644 ;	radio/tdm.c:641: last_link_update = tnow;
      000A08 78r37            [12] 2645 	mov	r0,#_tdm_serial_loop_last_link_update_1_213
      000A0A EA               [12] 2646 	mov	a,r2
      000A0B F2               [24] 2647 	movx	@r0,a
      000A0C 08               [12] 2648 	inc	r0
      000A0D EB               [12] 2649 	mov	a,r3
      000A0E F2               [24] 2650 	movx	@r0,a
      000A0F                       2651 00131$:
                                   2652 ;	radio/tdm.c:645: if (lbt_rssi != 0) {
      000A0F 78r16            [12] 2653 	mov	r0,#_lbt_rssi
      000A11 E2               [24] 2654 	movx	a,@r0
      000A12 70 03            [24] 2655 	jnz	00369$
      000A14 02r0Ar94         [24] 2656 	ljmp	00140$
      000A17                       2657 00369$:
                                   2658 ;	radio/tdm.c:647: if (radio_current_rssi() < lbt_rssi) {
      000A17 12r00r00         [24] 2659 	lcall	_radio_current_rssi
      000A1A AF 82            [24] 2660 	mov	r7,dpl
      000A1C 78r16            [12] 2661 	mov	r0,#_lbt_rssi
      000A1E C3               [12] 2662 	clr	c
      000A1F E2               [24] 2663 	movx	a,@r0
      000A20 F5 F0            [12] 2664 	mov	b,a
      000A22 EF               [12] 2665 	mov	a,r7
      000A23 95 F0            [12] 2666 	subb	a,b
      000A25 50 16            [24] 2667 	jnc	00135$
                                   2668 ;	radio/tdm.c:648: lbt_listen_time += tdelta;
      000A27 78r17            [12] 2669 	mov	r0,#_lbt_listen_time
      000A29 79r33            [12] 2670 	mov	r1,#_tdm_serial_loop_tdelta_1_213
      000A2B E3               [24] 2671 	movx	a,@r1
      000A2C C5 F0            [12] 2672 	xch	a,b
      000A2E E2               [24] 2673 	movx	a,@r0
      000A2F 25 F0            [12] 2674 	add	a,b
      000A31 F2               [24] 2675 	movx	@r0,a
      000A32 09               [12] 2676 	inc	r1
      000A33 E3               [24] 2677 	movx	a,@r1
      000A34 C5 F0            [12] 2678 	xch	a,b
      000A36 08               [12] 2679 	inc	r0
      000A37 E2               [24] 2680 	movx	a,@r0
      000A38 35 F0            [12] 2681 	addc	a,b
      000A3A F2               [24] 2682 	movx	@r0,a
      000A3B 80 36            [24] 2683 	sjmp	00136$
      000A3D                       2684 00135$:
                                   2685 ;	radio/tdm.c:650: lbt_listen_time = 0;
      000A3D 78r17            [12] 2686 	mov	r0,#_lbt_listen_time
      000A3F E4               [12] 2687 	clr	a
      000A40 F2               [24] 2688 	movx	@r0,a
      000A41 08               [12] 2689 	inc	r0
      000A42 F2               [24] 2690 	movx	@r0,a
                                   2691 ;	radio/tdm.c:651: if (lbt_rand == 0) {
      000A43 78r1B            [12] 2692 	mov	r0,#_lbt_rand
      000A45 E2               [24] 2693 	movx	a,@r0
      000A46 F5 F0            [12] 2694 	mov	b,a
      000A48 08               [12] 2695 	inc	r0
      000A49 E2               [24] 2696 	movx	a,@r0
      000A4A 45 F0            [12] 2697 	orl	a,b
      000A4C 70 25            [24] 2698 	jnz	00136$
                                   2699 ;	radio/tdm.c:652: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
      000A4E 12r00r00         [24] 2700 	lcall	_rand
      000A51 AE 82            [24] 2701 	mov	r6,dpl
      000A53 AF 83            [24] 2702 	mov	r7,dph
      000A55 78r19            [12] 2703 	mov	r0,#_lbt_min_time
      000A57 90r00r00         [24] 2704 	mov	dptr,#__moduint_PARM_2
      000A5A E2               [24] 2705 	movx	a,@r0
      000A5B F0               [24] 2706 	movx	@dptr,a
      000A5C 08               [12] 2707 	inc	r0
      000A5D E2               [24] 2708 	movx	a,@r0
      000A5E A3               [24] 2709 	inc	dptr
      000A5F F0               [24] 2710 	movx	@dptr,a
      000A60 8E 82            [24] 2711 	mov	dpl,r6
      000A62 8F 83            [24] 2712 	mov	dph,r7
      000A64 12r00r00         [24] 2713 	lcall	__moduint
      000A67 E5 82            [12] 2714 	mov	a,dpl
      000A69 85 83 F0         [24] 2715 	mov	b,dph
      000A6C 78r1B            [12] 2716 	mov	r0,#_lbt_rand
      000A6E F2               [24] 2717 	movx	@r0,a
      000A6F 08               [12] 2718 	inc	r0
      000A70 E5 F0            [12] 2719 	mov	a,b
      000A72 F2               [24] 2720 	movx	@r0,a
      000A73                       2721 00136$:
                                   2722 ;	radio/tdm.c:655: if (lbt_listen_time < lbt_min_time + lbt_rand) {
      000A73 78r19            [12] 2723 	mov	r0,#_lbt_min_time
      000A75 79r1B            [12] 2724 	mov	r1,#_lbt_rand
      000A77 E3               [24] 2725 	movx	a,@r1
      000A78 C5 F0            [12] 2726 	xch	a,b
      000A7A E2               [24] 2727 	movx	a,@r0
      000A7B 25 F0            [12] 2728 	add	a,b
      000A7D FE               [12] 2729 	mov	r6,a
      000A7E 09               [12] 2730 	inc	r1
      000A7F E3               [24] 2731 	movx	a,@r1
      000A80 C5 F0            [12] 2732 	xch	a,b
      000A82 08               [12] 2733 	inc	r0
      000A83 E2               [24] 2734 	movx	a,@r0
      000A84 35 F0            [12] 2735 	addc	a,b
      000A86 FF               [12] 2736 	mov	r7,a
      000A87 78r17            [12] 2737 	mov	r0,#_lbt_listen_time
      000A89 C3               [12] 2738 	clr	c
      000A8A E2               [24] 2739 	movx	a,@r0
      000A8B 9E               [12] 2740 	subb	a,r6
      000A8C 08               [12] 2741 	inc	r0
      000A8D E2               [24] 2742 	movx	a,@r0
      000A8E 9F               [12] 2743 	subb	a,r7
      000A8F 50 03            [24] 2744 	jnc	00372$
      000A91 02r07r9F         [24] 2745 	ljmp	00195$
      000A94                       2746 00372$:
                                   2747 ;	radio/tdm.c:657: continue;
      000A94                       2748 00140$:
                                   2749 ;	radio/tdm.c:665: if (tdm_state != TDM_TRANSMIT &&
      000A94 78r00            [12] 2750 	mov	r0,#_tdm_state
      000A96 E2               [24] 2751 	movx	a,@r0
      000A97 60 11            [24] 2752 	jz	00142$
                                   2753 ;	radio/tdm.c:666: !(bonus_transmit && tdm_state == TDM_RECEIVE)) {
      000A99 20*00 03         [24] 2754 	jb	_bonus_transmit,00374$
      000A9C 02r07r9F         [24] 2755 	ljmp	00195$
      000A9F                       2756 00374$:
      000A9F 78r00            [12] 2757 	mov	r0,#_tdm_state
      000AA1 E2               [24] 2758 	movx	a,@r0
      000AA2 B4 02 02         [24] 2759 	cjne	a,#0x02,00375$
      000AA5 80 03            [24] 2760 	sjmp	00376$
      000AA7                       2761 00375$:
      000AA7 02r07r9F         [24] 2762 	ljmp	00195$
      000AAA                       2763 00376$:
                                   2764 ;	radio/tdm.c:668: continue;
      000AAA                       2765 00142$:
                                   2766 ;	radio/tdm.c:676: if (transmit_yield != 0) {
      000AAA 30*01 03         [24] 2767 	jnb	_transmit_yield,00377$
      000AAD 02r07r9F         [24] 2768 	ljmp	00195$
      000AB0                       2769 00377$:
                                   2770 ;	radio/tdm.c:681: if (transmit_wait != 0) {
      000AB0 78r0C            [12] 2771 	mov	r0,#_transmit_wait
      000AB2 E2               [24] 2772 	movx	a,@r0
      000AB3 F5 F0            [12] 2773 	mov	b,a
      000AB5 08               [12] 2774 	inc	r0
      000AB6 E2               [24] 2775 	movx	a,@r0
      000AB7 45 F0            [12] 2776 	orl	a,b
      000AB9 60 03            [24] 2777 	jz	00378$
      000ABB 02r07r9F         [24] 2778 	ljmp	00195$
      000ABE                       2779 00378$:
                                   2780 ;	radio/tdm.c:686: if (!received_packet &&
      000ABE 20*03 05         [24] 2781 	jb	_received_packet,00152$
                                   2782 ;	radio/tdm.c:687: radio_preamble_detected() ||
      000AC1 12r00r00         [24] 2783 	lcall	_radio_preamble_detected
      000AC4 40 05            [24] 2784 	jc	00149$
      000AC6                       2785 00152$:
                                   2786 ;	radio/tdm.c:688: radio_receive_in_progress()) {
      000AC6 12r00r00         [24] 2787 	lcall	_radio_receive_in_progress
      000AC9 50 11            [24] 2788 	jnc	00150$
      000ACB                       2789 00149$:
                                   2790 ;	radio/tdm.c:691: transmit_wait = packet_latency;
      000ACB 78r08            [12] 2791 	mov	r0,#_packet_latency
      000ACD E2               [24] 2792 	movx	a,@r0
      000ACE FE               [12] 2793 	mov	r6,a
      000ACF 08               [12] 2794 	inc	r0
      000AD0 E2               [24] 2795 	movx	a,@r0
      000AD1 FF               [12] 2796 	mov	r7,a
      000AD2 78r0C            [12] 2797 	mov	r0,#_transmit_wait
      000AD4 EE               [12] 2798 	mov	a,r6
      000AD5 F2               [24] 2799 	movx	@r0,a
      000AD6 08               [12] 2800 	inc	r0
      000AD7 EF               [12] 2801 	mov	a,r7
      000AD8 F2               [24] 2802 	movx	@r0,a
                                   2803 ;	radio/tdm.c:692: continue;
      000AD9 02r07r9F         [24] 2804 	ljmp	00195$
      000ADC                       2805 00150$:
                                   2806 ;	radio/tdm.c:698: statistics.average_noise = (radio_current_rssi() + 3*(uint16_t)statistics.average_noise)/4;
      000ADC 12r00r00         [24] 2807 	lcall	_radio_current_rssi
      000ADF AF 82            [24] 2808 	mov	r7,dpl
      000AE1 7E 00            [12] 2809 	mov	r6,#0x00
      000AE3 78r01            [12] 2810 	mov	r0,#(_statistics + 0x0001)
      000AE5 E2               [24] 2811 	movx	a,@r0
      000AE6 90r00r00         [24] 2812 	mov	dptr,#__mulint_PARM_2
      000AE9 F0               [24] 2813 	movx	@dptr,a
      000AEA E4               [12] 2814 	clr	a
      000AEB A3               [24] 2815 	inc	dptr
      000AEC F0               [24] 2816 	movx	@dptr,a
      000AED 90 00 03         [24] 2817 	mov	dptr,#0x0003
      000AF0 C0 07            [24] 2818 	push	ar7
      000AF2 C0 06            [24] 2819 	push	ar6
      000AF4 12r00r00         [24] 2820 	lcall	__mulint
      000AF7 AC 82            [24] 2821 	mov	r4,dpl
      000AF9 AD 83            [24] 2822 	mov	r5,dph
      000AFB D0 06            [24] 2823 	pop	ar6
      000AFD D0 07            [24] 2824 	pop	ar7
      000AFF EC               [12] 2825 	mov	a,r4
      000B00 2F               [12] 2826 	add	a,r7
      000B01 FC               [12] 2827 	mov	r4,a
      000B02 ED               [12] 2828 	mov	a,r5
      000B03 3E               [12] 2829 	addc	a,r6
      000B04 C3               [12] 2830 	clr	c
      000B05 13               [12] 2831 	rrc	a
      000B06 CC               [12] 2832 	xch	a,r4
      000B07 13               [12] 2833 	rrc	a
      000B08 CC               [12] 2834 	xch	a,r4
      000B09 C3               [12] 2835 	clr	c
      000B0A 13               [12] 2836 	rrc	a
      000B0B CC               [12] 2837 	xch	a,r4
      000B0C 13               [12] 2838 	rrc	a
      000B0D CC               [12] 2839 	xch	a,r4
      000B0E FD               [12] 2840 	mov	r5,a
      000B0F 78r01            [12] 2841 	mov	r0,#(_statistics + 0x0001)
      000B11 EC               [12] 2842 	mov	a,r4
      000B12 F2               [24] 2843 	movx	@r0,a
                                   2844 ;	radio/tdm.c:700: if (duty_cycle_wait) {
      000B13 30*04 03         [24] 2845 	jnb	_duty_cycle_wait,00382$
      000B16 02r07r9F         [24] 2846 	ljmp	00195$
      000B19                       2847 00382$:
                                   2848 ;	radio/tdm.c:707: if (tdm_state_remaining < packet_latency) {
      000B19 78r01            [12] 2849 	mov	r0,#_tdm_state_remaining
      000B1B 79r08            [12] 2850 	mov	r1,#_packet_latency
      000B1D C3               [12] 2851 	clr	c
      000B1E E3               [24] 2852 	movx	a,@r1
      000B1F F5 F0            [12] 2853 	mov	b,a
      000B21 E2               [24] 2854 	movx	a,@r0
      000B22 95 F0            [12] 2855 	subb	a,b
      000B24 09               [12] 2856 	inc	r1
      000B25 E3               [24] 2857 	movx	a,@r1
      000B26 F5 F0            [12] 2858 	mov	b,a
      000B28 08               [12] 2859 	inc	r0
      000B29 E2               [24] 2860 	movx	a,@r0
      000B2A 95 F0            [12] 2861 	subb	a,b
      000B2C 50 03            [24] 2862 	jnc	00383$
      000B2E 02r07r9F         [24] 2863 	ljmp	00195$
      000B31                       2864 00383$:
                                   2865 ;	radio/tdm.c:711: max_xmit = (tdm_state_remaining - packet_latency) / ticks_per_byte;
      000B31 78r01            [12] 2866 	mov	r0,#_tdm_state_remaining
      000B33 79r08            [12] 2867 	mov	r1,#_packet_latency
      000B35 E3               [24] 2868 	movx	a,@r1
      000B36 F5 F0            [12] 2869 	mov	b,a
      000B38 C3               [12] 2870 	clr	c
      000B39 E2               [24] 2871 	movx	a,@r0
      000B3A 95 F0            [12] 2872 	subb	a,b
      000B3C FE               [12] 2873 	mov	r6,a
      000B3D 09               [12] 2874 	inc	r1
      000B3E E3               [24] 2875 	movx	a,@r1
      000B3F F5 F0            [12] 2876 	mov	b,a
      000B41 08               [12] 2877 	inc	r0
      000B42 E2               [24] 2878 	movx	a,@r0
      000B43 95 F0            [12] 2879 	subb	a,b
      000B45 FF               [12] 2880 	mov	r7,a
      000B46 78r0A            [12] 2881 	mov	r0,#_ticks_per_byte
      000B48 90r00r00         [24] 2882 	mov	dptr,#__divuint_PARM_2
      000B4B E2               [24] 2883 	movx	a,@r0
      000B4C F0               [24] 2884 	movx	@dptr,a
      000B4D 08               [12] 2885 	inc	r0
      000B4E E2               [24] 2886 	movx	a,@r0
      000B4F A3               [24] 2887 	inc	dptr
      000B50 F0               [24] 2888 	movx	@dptr,a
      000B51 8E 82            [24] 2889 	mov	dpl,r6
      000B53 8F 83            [24] 2890 	mov	dph,r7
      000B55 12r00r00         [24] 2891 	lcall	__divuint
      000B58 AE 82            [24] 2892 	mov	r6,dpl
      000B5A AF 83            [24] 2893 	mov	r7,dph
                                   2894 ;	radio/tdm.c:712: if (max_xmit < PACKET_OVERHEAD) {
      000B5C BE 12 00         [24] 2895 	cjne	r6,#0x12,00384$
      000B5F                       2896 00384$:
      000B5F 50 03            [24] 2897 	jnc	00385$
      000B61 02r07r9F         [24] 2898 	ljmp	00195$
      000B64                       2899 00385$:
                                   2900 ;	radio/tdm.c:717: max_xmit -= sizeof(trailer)+1;
      000B64 1E               [12] 2901 	dec	r6
      000B65 1E               [12] 2902 	dec	r6
      000B66 1E               [12] 2903 	dec	r6
                                   2904 ;	radio/tdm.c:731: if (max_xmit > max_data_packet_length) {
      000B67 78r05            [12] 2905 	mov	r0,#_max_data_packet_length
      000B69 C3               [12] 2906 	clr	c
      000B6A E2               [24] 2907 	movx	a,@r0
      000B6B 9E               [12] 2908 	subb	a,r6
      000B6C 50 04            [24] 2909 	jnc	00160$
                                   2910 ;	radio/tdm.c:732: max_xmit = max_data_packet_length;
      000B6E 78r05            [12] 2911 	mov	r0,#_max_data_packet_length
      000B70 E2               [24] 2912 	movx	a,@r0
      000B71 FE               [12] 2913 	mov	r6,a
      000B72                       2914 00160$:
                                   2915 ;	radio/tdm.c:741: if (send_at_command && 
      000B72 30*06 57         [24] 2916 	jnb	_send_at_command,00165$
                                   2917 ;	radio/tdm.c:742: max_xmit >= strlen(remote_at_cmd)) {
      000B75 90r00r1F         [24] 2918 	mov	dptr,#_remote_at_cmd
      000B78 75 F0 60         [24] 2919 	mov	b,#0x60
      000B7B C0 06            [24] 2920 	push	ar6
      000B7D 12r00r00         [24] 2921 	lcall	_strlen
      000B80 AD 82            [24] 2922 	mov	r5,dpl
      000B82 AF 83            [24] 2923 	mov	r7,dph
      000B84 D0 06            [24] 2924 	pop	ar6
      000B86 8E 03            [24] 2925 	mov	ar3,r6
      000B88 7C 00            [12] 2926 	mov	r4,#0x00
      000B8A C3               [12] 2927 	clr	c
      000B8B EB               [12] 2928 	mov	a,r3
      000B8C 9D               [12] 2929 	subb	a,r5
      000B8D EC               [12] 2930 	mov	a,r4
      000B8E 9F               [12] 2931 	subb	a,r7
      000B8F 40 3B            [24] 2932 	jc	00165$
                                   2933 ;	radio/tdm.c:744: len = strlen(remote_at_cmd);
      000B91 90r00r1F         [24] 2934 	mov	dptr,#_remote_at_cmd
      000B94 75 F0 60         [24] 2935 	mov	b,#0x60
      000B97 C0 06            [24] 2936 	push	ar6
      000B99 12r00r00         [24] 2937 	lcall	_strlen
      000B9C AD 82            [24] 2938 	mov	r5,dpl
      000B9E 78r32            [12] 2939 	mov	r0,#_tdm_serial_loop_len_1_213
      000BA0 ED               [12] 2940 	mov	a,r5
      000BA1 F2               [24] 2941 	movx	@r0,a
                                   2942 ;	radio/tdm.c:745: memcpy(pbuf, remote_at_cmd, len);
      000BA2 90r00r00         [24] 2943 	mov	dptr,#_memcpy_PARM_2
      000BA5 74r1F            [12] 2944 	mov	a,#_remote_at_cmd
      000BA7 F0               [24] 2945 	movx	@dptr,a
      000BA8 E4               [12] 2946 	clr	a
      000BA9 A3               [24] 2947 	inc	dptr
      000BAA F0               [24] 2948 	movx	@dptr,a
      000BAB 74 60            [12] 2949 	mov	a,#0x60
      000BAD A3               [24] 2950 	inc	dptr
      000BAE F0               [24] 2951 	movx	@dptr,a
      000BAF 90r00r00         [24] 2952 	mov	dptr,#_memcpy_PARM_3
      000BB2 ED               [12] 2953 	mov	a,r5
      000BB3 F0               [24] 2954 	movx	@dptr,a
      000BB4 E4               [12] 2955 	clr	a
      000BB5 A3               [24] 2956 	inc	dptr
      000BB6 F0               [24] 2957 	movx	@dptr,a
      000BB7 90r00r00         [24] 2958 	mov	dptr,#_pbuf
      000BBA 75 F0 00         [24] 2959 	mov	b,#0x00
      000BBD 12r00r00         [24] 2960 	lcall	_memcpy
      000BC0 D0 06            [24] 2961 	pop	ar6
                                   2962 ;	radio/tdm.c:746: trailer.command = 1;
      000BC2 78r1E            [12] 2963 	mov	r0,#(_trailer + 0x0001)
      000BC4 E2               [24] 2964 	movx	a,@r0
      000BC5 44 20            [12] 2965 	orl	a,#0x20
      000BC7 F2               [24] 2966 	movx	@r0,a
                                   2967 ;	radio/tdm.c:747: send_at_command = false;
      000BC8 C2*06            [12] 2968 	clr	_send_at_command
      000BCA 80 37            [24] 2969 	sjmp	00166$
      000BCC                       2970 00165$:
                                   2971 ;	radio/tdm.c:750: len = packet_get_next(max_xmit, pbuf);
      000BCC 90r00r00         [24] 2972 	mov	dptr,#_packet_get_next_PARM_2
      000BCF 74r00            [12] 2973 	mov	a,#_pbuf
      000BD1 F0               [24] 2974 	movx	@dptr,a
      000BD2 74s00            [12] 2975 	mov	a,#(_pbuf >> 8)
      000BD4 A3               [24] 2976 	inc	dptr
      000BD5 F0               [24] 2977 	movx	@dptr,a
      000BD6 8E 82            [24] 2978 	mov	dpl,r6
      000BD8 C0 06            [24] 2979 	push	ar6
      000BDA 12r00r00         [24] 2980 	lcall	_packet_get_next
      000BDD AF 82            [24] 2981 	mov	r7,dpl
      000BDF D0 06            [24] 2982 	pop	ar6
      000BE1 78r32            [12] 2983 	mov	r0,#_tdm_serial_loop_len_1_213
      000BE3 EF               [12] 2984 	mov	a,r7
      000BE4 F2               [24] 2985 	movx	@r0,a
                                   2986 ;	radio/tdm.c:752: if (len > 0) {
      000BE5 EF               [12] 2987 	mov	a,r7
      000BE6 60 15            [24] 2988 	jz	00162$
                                   2989 ;	radio/tdm.c:753: trailer.command = packet_is_injected();
      000BE8 C0 06            [24] 2990 	push	ar6
      000BEA 12r00r00         [24] 2991 	lcall	_packet_is_injected
      000BED D0 06            [24] 2992 	pop	ar6
      000BEF 92*09            [24] 2993 	mov  _tdm_serial_loop_sloc0_1_0,c
      000BF1 E4               [12] 2994 	clr	a
      000BF2 33               [12] 2995 	rlc	a
      000BF3 FF               [12] 2996 	mov	r7,a
      000BF4 78r1E            [12] 2997 	mov	r0,#(_trailer + 0x0001)
      000BF6 13               [12] 2998 	rrc	a
      000BF7 E2               [24] 2999 	movx	a,@r0
      000BF8 92 E5            [24] 3000 	mov	acc.5,c
      000BFA F2               [24] 3001 	movx	@r0,a
      000BFB 80 06            [24] 3002 	sjmp	00166$
      000BFD                       3003 00162$:
                                   3004 ;	radio/tdm.c:755: trailer.command = 0;
      000BFD 78r1E            [12] 3005 	mov	r0,#(_trailer + 0x0001)
      000BFF E2               [24] 3006 	movx	a,@r0
      000C00 54 DF            [12] 3007 	anl	a,#0xDF
      000C02 F2               [24] 3008 	movx	@r0,a
      000C03                       3009 00166$:
                                   3010 ;	radio/tdm.c:762: if (len > max_data_packet_length) {
      000C03 78r32            [12] 3011 	mov	r0,#_tdm_serial_loop_len_1_213
      000C05 79r05            [12] 3012 	mov	r1,#_max_data_packet_length
      000C07 C3               [12] 3013 	clr	c
      000C08 E2               [24] 3014 	movx	a,@r0
      000C09 F5 F0            [12] 3015 	mov	b,a
      000C0B E3               [24] 3016 	movx	a,@r1
      000C0C 95 F0            [12] 3017 	subb	a,b
      000C0E 50 19            [24] 3018 	jnc	00169$
                                   3019 ;	radio/tdm.c:763: panic("oversized tdm packet");
      000C10 C0 06            [24] 3020 	push	ar6
      000C12 74rCE            [12] 3021 	mov	a,#___str_8
      000C14 C0 E0            [24] 3022 	push	acc
      000C16 74s00            [12] 3023 	mov	a,#(___str_8 >> 8)
      000C18 C0 E0            [24] 3024 	push	acc
      000C1A 74 80            [12] 3025 	mov	a,#0x80
      000C1C C0 E0            [24] 3026 	push	acc
      000C1E 12r00r00         [24] 3027 	lcall	_panic
      000C21 15 81            [12] 3028 	dec	sp
      000C23 15 81            [12] 3029 	dec	sp
      000C25 15 81            [12] 3030 	dec	sp
      000C27 D0 06            [24] 3031 	pop	ar6
      000C29                       3032 00169$:
                                   3033 ;	radio/tdm.c:766: trailer.bonus = (tdm_state == TDM_RECEIVE);
      000C29 78r00            [12] 3034 	mov	r0,#_tdm_state
      000C2B E2               [24] 3035 	movx	a,@r0
      000C2C B4 02 03         [24] 3036 	cjne	a,#0x02,00391$
      000C2F D3               [12] 3037 	setb	c
      000C30 80 01            [24] 3038 	sjmp	00392$
      000C32                       3039 00391$:
      000C32 C3               [12] 3040 	clr	c
      000C33                       3041 00392$:
      000C33 92*09            [24] 3042 	mov  _tdm_serial_loop_sloc0_1_0,c
      000C35 E4               [12] 3043 	clr	a
      000C36 33               [12] 3044 	rlc	a
      000C37 78r1E            [12] 3045 	mov	r0,#(_trailer + 0x0001)
      000C39 13               [12] 3046 	rrc	a
      000C3A E2               [24] 3047 	movx	a,@r0
      000C3B 92 E6            [24] 3048 	mov	acc.6,c
      000C3D F2               [24] 3049 	movx	@r0,a
                                   3050 ;	radio/tdm.c:767: trailer.resend = packet_is_resend();
      000C3E C0 06            [24] 3051 	push	ar6
      000C40 12r00r00         [24] 3052 	lcall	_packet_is_resend
      000C43 D0 06            [24] 3053 	pop	ar6
      000C45 92*09            [24] 3054 	mov  _tdm_serial_loop_sloc0_1_0,c
      000C47 E4               [12] 3055 	clr	a
      000C48 33               [12] 3056 	rlc	a
      000C49 FF               [12] 3057 	mov	r7,a
      000C4A 78r1E            [12] 3058 	mov	r0,#(_trailer + 0x0001)
      000C4C 13               [12] 3059 	rrc	a
      000C4D E2               [24] 3060 	movx	a,@r0
      000C4E 92 E7            [24] 3061 	mov	acc.7,c
      000C50 F2               [24] 3062 	movx	@r0,a
                                   3063 ;	radio/tdm.c:769: if (tdm_state == TDM_TRANSMIT &&
      000C51 78r00            [12] 3064 	mov	r0,#_tdm_state
      000C53 E2               [24] 3065 	movx	a,@r0
      000C54 70 44            [24] 3066 	jnz	00171$
                                   3067 ;	radio/tdm.c:770: len == 0 &&
      000C56 78r32            [12] 3068 	mov	r0,#_tdm_serial_loop_len_1_213
      000C58 E2               [24] 3069 	movx	a,@r0
      000C59 70 3F            [24] 3070 	jnz	00171$
                                   3071 ;	radio/tdm.c:771: send_statistics &&
      000C5B 30*05 3C         [24] 3072 	jnb	_send_statistics,00171$
                                   3073 ;	radio/tdm.c:772: max_xmit >= sizeof(statistics)) {
      000C5E BE 04 00         [24] 3074 	cjne	r6,#0x04,00396$
      000C61                       3075 00396$:
      000C61 40 37            [24] 3076 	jc	00171$
                                   3077 ;	radio/tdm.c:774: send_statistics = 0;
      000C63 C2*05            [12] 3078 	clr	_send_statistics
                                   3079 ;	radio/tdm.c:775: memcpy(pbuf, &statistics, sizeof(statistics));
      000C65 90r00r00         [24] 3080 	mov	dptr,#_memcpy_PARM_2
      000C68 74r00            [12] 3081 	mov	a,#_statistics
      000C6A F0               [24] 3082 	movx	@dptr,a
      000C6B E4               [12] 3083 	clr	a
      000C6C A3               [24] 3084 	inc	dptr
      000C6D F0               [24] 3085 	movx	@dptr,a
      000C6E 74 60            [12] 3086 	mov	a,#0x60
      000C70 A3               [24] 3087 	inc	dptr
      000C71 F0               [24] 3088 	movx	@dptr,a
      000C72 90r00r00         [24] 3089 	mov	dptr,#_memcpy_PARM_3
      000C75 74 04            [12] 3090 	mov	a,#0x04
      000C77 F0               [24] 3091 	movx	@dptr,a
      000C78 E4               [12] 3092 	clr	a
      000C79 A3               [24] 3093 	inc	dptr
      000C7A F0               [24] 3094 	movx	@dptr,a
      000C7B 90r00r00         [24] 3095 	mov	dptr,#_pbuf
      000C7E 75 F0 00         [24] 3096 	mov	b,#0x00
      000C81 12r00r00         [24] 3097 	lcall	_memcpy
                                   3098 ;	radio/tdm.c:776: len = sizeof(statistics);
      000C84 78r32            [12] 3099 	mov	r0,#_tdm_serial_loop_len_1_213
      000C86 74 04            [12] 3100 	mov	a,#0x04
      000C88 F2               [24] 3101 	movx	@r0,a
                                   3102 ;	radio/tdm.c:779: trailer.window = 0;
      000C89 78r1D            [12] 3103 	mov	r0,#_trailer
      000C8B E4               [12] 3104 	clr	a
      000C8C F2               [24] 3105 	movx	@r0,a
      000C8D 08               [12] 3106 	inc	r0
      000C8E E2               [24] 3107 	movx	a,@r0
      000C8F 54 E0            [12] 3108 	anl	a,#0xE0
      000C91 F2               [24] 3109 	movx	@r0,a
                                   3110 ;	radio/tdm.c:780: trailer.resend = 0;
      000C92 78r1E            [12] 3111 	mov	r0,#(_trailer + 0x0001)
      000C94 E2               [24] 3112 	movx	a,@r0
      000C95 54 7F            [12] 3113 	anl	a,#0x7F
      000C97 F2               [24] 3114 	movx	@r0,a
      000C98 80 28            [24] 3115 	sjmp	00172$
      000C9A                       3116 00171$:
                                   3117 ;	radio/tdm.c:794: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));
      000C9A 78r32            [12] 3118 	mov	r0,#_tdm_serial_loop_len_1_213
      000C9C E2               [24] 3119 	movx	a,@r0
      000C9D 24 02            [12] 3120 	add	a,#0x02
      000C9F F5 82            [12] 3121 	mov	dpl,a
      000CA1 12r00rDD         [24] 3122 	lcall	_flight_time_estimate
      000CA4 AE 82            [24] 3123 	mov	r6,dpl
      000CA6 AF 83            [24] 3124 	mov	r7,dph
      000CA8 78r01            [12] 3125 	mov	r0,#_tdm_state_remaining
      000CAA E2               [24] 3126 	movx	a,@r0
      000CAB C3               [12] 3127 	clr	c
      000CAC 9E               [12] 3128 	subb	a,r6
      000CAD FE               [12] 3129 	mov	r6,a
      000CAE 08               [12] 3130 	inc	r0
      000CAF E2               [24] 3131 	movx	a,@r0
      000CB0 9F               [12] 3132 	subb	a,r7
      000CB1 FF               [12] 3133 	mov	r7,a
      000CB2 78r1D            [12] 3134 	mov	r0,#_trailer
      000CB4 EE               [12] 3135 	mov	a,r6
      000CB5 F2               [24] 3136 	movx	@r0,a
      000CB6 08               [12] 3137 	inc	r0
      000CB7 EF               [12] 3138 	mov	a,r7
      000CB8 54 1F            [12] 3139 	anl	a,#0x1F
      000CBA F5 F0            [12] 3140 	mov	b,a
      000CBC E2               [24] 3141 	movx	a,@r0
      000CBD 54 E0            [12] 3142 	anl	a,#0xE0
      000CBF 45 F0            [12] 3143 	orl	a,b
      000CC1 F2               [24] 3144 	movx	@r0,a
      000CC2                       3145 00172$:
                                   3146 ;	radio/tdm.c:799: radio_set_channel(fhop_transmit_channel());
      000CC2 12r00r00         [24] 3147 	lcall	_fhop_transmit_channel
      000CC5 12r00r00         [24] 3148 	lcall	_radio_set_channel
                                   3149 ;	radio/tdm.c:801: memcpy(&pbuf[len], &trailer, sizeof(trailer));
      000CC8 78r32            [12] 3150 	mov	r0,#_tdm_serial_loop_len_1_213
      000CCA E2               [24] 3151 	movx	a,@r0
      000CCB 24r00            [12] 3152 	add	a,#_pbuf
      000CCD FE               [12] 3153 	mov	r6,a
      000CCE E4               [12] 3154 	clr	a
      000CCF 34s00            [12] 3155 	addc	a,#(_pbuf >> 8)
      000CD1 FF               [12] 3156 	mov	r7,a
      000CD2 7D 00            [12] 3157 	mov	r5,#0x00
      000CD4 90r00r00         [24] 3158 	mov	dptr,#_memcpy_PARM_2
      000CD7 74r1D            [12] 3159 	mov	a,#_trailer
      000CD9 F0               [24] 3160 	movx	@dptr,a
      000CDA E4               [12] 3161 	clr	a
      000CDB A3               [24] 3162 	inc	dptr
      000CDC F0               [24] 3163 	movx	@dptr,a
      000CDD 74 60            [12] 3164 	mov	a,#0x60
      000CDF A3               [24] 3165 	inc	dptr
      000CE0 F0               [24] 3166 	movx	@dptr,a
      000CE1 90r00r00         [24] 3167 	mov	dptr,#_memcpy_PARM_3
      000CE4 74 02            [12] 3168 	mov	a,#0x02
      000CE6 F0               [24] 3169 	movx	@dptr,a
      000CE7 E4               [12] 3170 	clr	a
      000CE8 A3               [24] 3171 	inc	dptr
      000CE9 F0               [24] 3172 	movx	@dptr,a
      000CEA 8E 82            [24] 3173 	mov	dpl,r6
      000CEC 8F 83            [24] 3174 	mov	dph,r7
      000CEE 8D F0            [24] 3175 	mov	b,r5
      000CF0 12r00r00         [24] 3176 	lcall	_memcpy
                                   3177 ;	radio/tdm.c:803: if (len != 0 && trailer.window != 0) {
      000CF3 78r32            [12] 3178 	mov	r0,#_tdm_serial_loop_len_1_213
      000CF5 E2               [24] 3179 	movx	a,@r0
      000CF6 60 0E            [24] 3180 	jz	00177$
      000CF8 78r1D            [12] 3181 	mov	r0,#_trailer
      000CFA E2               [24] 3182 	movx	a,@r0
      000CFB FE               [12] 3183 	mov	r6,a
      000CFC 08               [12] 3184 	inc	r0
      000CFD E2               [24] 3185 	movx	a,@r0
      000CFE 54 1F            [12] 3186 	anl	a,#0x1F
      000D00 FF               [12] 3187 	mov	r7,a
      000D01 4E               [12] 3188 	orl	a,r6
      000D02 60 02            [24] 3189 	jz	00177$
                                   3190 ;	radio/tdm.c:805: LED_ACTIVITY = LED_ON;
      000D04 C2 A0            [12] 3191 	clr	_LED_RED
      000D06                       3192 00177$:
                                   3193 ;	radio/tdm.c:808: if (len == 0) {
      000D06 78r32            [12] 3194 	mov	r0,#_tdm_serial_loop_len_1_213
      000D08 E2               [24] 3195 	movx	a,@r0
      000D09 70 02            [24] 3196 	jnz	00180$
                                   3197 ;	radio/tdm.c:812: transmit_yield = 1;
      000D0B D2*01            [12] 3198 	setb	_transmit_yield
      000D0D                       3199 00180$:
                                   3200 ;	radio/tdm.c:818: transmit_wait = packet_latency;
      000D0D 78r08            [12] 3201 	mov	r0,#_packet_latency
      000D0F E2               [24] 3202 	movx	a,@r0
      000D10 FE               [12] 3203 	mov	r6,a
      000D11 08               [12] 3204 	inc	r0
      000D12 E2               [24] 3205 	movx	a,@r0
      000D13 FF               [12] 3206 	mov	r7,a
      000D14 78r0C            [12] 3207 	mov	r0,#_transmit_wait
      000D16 EE               [12] 3208 	mov	a,r6
      000D17 F2               [24] 3209 	movx	@r0,a
      000D18 08               [12] 3210 	inc	r0
      000D19 EF               [12] 3211 	mov	a,r7
      000D1A F2               [24] 3212 	movx	@r0,a
                                   3213 ;	radio/tdm.c:822: if ((duty_cycle - duty_cycle_offset) != 100) {
      000D1B 78r0E            [12] 3214 	mov	r0,#_duty_cycle
      000D1D E2               [24] 3215 	movx	a,@r0
      000D1E FE               [12] 3216 	mov	r6,a
      000D1F 7F 00            [12] 3217 	mov	r7,#0x00
      000D21 78r13            [12] 3218 	mov	r0,#_duty_cycle_offset
      000D23 E2               [24] 3219 	movx	a,@r0
      000D24 FC               [12] 3220 	mov	r4,a
      000D25 7D 00            [12] 3221 	mov	r5,#0x00
      000D27 EE               [12] 3222 	mov	a,r6
      000D28 C3               [12] 3223 	clr	c
      000D29 9C               [12] 3224 	subb	a,r4
      000D2A FE               [12] 3225 	mov	r6,a
      000D2B EF               [12] 3226 	mov	a,r7
      000D2C 9D               [12] 3227 	subb	a,r5
      000D2D FF               [12] 3228 	mov	r7,a
      000D2E BE 64 05         [24] 3229 	cjne	r6,#0x64,00401$
      000D31 BF 00 02         [24] 3230 	cjne	r7,#0x00,00401$
      000D34 80 17            [24] 3231 	sjmp	00182$
      000D36                       3232 00401$:
                                   3233 ;	radio/tdm.c:823: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
      000D36 78r32            [12] 3234 	mov	r0,#_tdm_serial_loop_len_1_213
      000D38 E2               [24] 3235 	movx	a,@r0
      000D39 24 02            [12] 3236 	add	a,#0x02
      000D3B F5 82            [12] 3237 	mov	dpl,a
      000D3D 12r00rDD         [24] 3238 	lcall	_flight_time_estimate
      000D40 AE 82            [24] 3239 	mov	r6,dpl
      000D42 AF 83            [24] 3240 	mov	r7,dph
      000D44 78r14            [12] 3241 	mov	r0,#_transmitted_ticks
      000D46 E2               [24] 3242 	movx	a,@r0
      000D47 2E               [12] 3243 	add	a,r6
      000D48 F2               [24] 3244 	movx	@r0,a
      000D49 08               [12] 3245 	inc	r0
      000D4A E2               [24] 3246 	movx	a,@r0
      000D4B 3F               [12] 3247 	addc	a,r7
      000D4C F2               [24] 3248 	movx	@r0,a
      000D4D                       3249 00182$:
                                   3250 ;	radio/tdm.c:827: if (!radio_transmit(len + sizeof(trailer), pbuf, tdm_state_remaining + (silence_period/2)) &&
      000D4D 78r32            [12] 3251 	mov	r0,#_tdm_serial_loop_len_1_213
      000D4F E2               [24] 3252 	movx	a,@r0
      000D50 24 02            [12] 3253 	add	a,#0x02
      000D52 FF               [12] 3254 	mov	r7,a
      000D53 78r06            [12] 3255 	mov	r0,#_silence_period
      000D55 E2               [24] 3256 	movx	a,@r0
      000D56 FD               [12] 3257 	mov	r5,a
      000D57 08               [12] 3258 	inc	r0
      000D58 E2               [24] 3259 	movx	a,@r0
      000D59 C3               [12] 3260 	clr	c
      000D5A 13               [12] 3261 	rrc	a
      000D5B CD               [12] 3262 	xch	a,r5
      000D5C 13               [12] 3263 	rrc	a
      000D5D CD               [12] 3264 	xch	a,r5
      000D5E FE               [12] 3265 	mov	r6,a
      000D5F 78r01            [12] 3266 	mov	r0,#_tdm_state_remaining
      000D61 E2               [24] 3267 	movx	a,@r0
      000D62 2D               [12] 3268 	add	a,r5
      000D63 FD               [12] 3269 	mov	r5,a
      000D64 08               [12] 3270 	inc	r0
      000D65 E2               [24] 3271 	movx	a,@r0
      000D66 3E               [12] 3272 	addc	a,r6
      000D67 FE               [12] 3273 	mov	r6,a
      000D68 78r00            [12] 3274 	mov	r0,#_radio_transmit_PARM_2
      000D6A 74r00            [12] 3275 	mov	a,#_pbuf
      000D6C F2               [24] 3276 	movx	@r0,a
      000D6D 08               [12] 3277 	inc	r0
      000D6E 74s00            [12] 3278 	mov	a,#(_pbuf >> 8)
      000D70 F2               [24] 3279 	movx	@r0,a
      000D71 78r00            [12] 3280 	mov	r0,#_radio_transmit_PARM_3
      000D73 ED               [12] 3281 	mov	a,r5
      000D74 F2               [24] 3282 	movx	@r0,a
      000D75 08               [12] 3283 	inc	r0
      000D76 EE               [12] 3284 	mov	a,r6
      000D77 F2               [24] 3285 	movx	@r0,a
      000D78 8F 82            [24] 3286 	mov	dpl,r7
      000D7A 12r00r00         [24] 3287 	lcall	_radio_transmit
      000D7D 40 1A            [24] 3288 	jc	00184$
                                   3289 ;	radio/tdm.c:828: len != 0 && trailer.window != 0 && trailer.command == 0) {
      000D7F 78r32            [12] 3290 	mov	r0,#_tdm_serial_loop_len_1_213
      000D81 E2               [24] 3291 	movx	a,@r0
      000D82 60 15            [24] 3292 	jz	00184$
      000D84 78r1D            [12] 3293 	mov	r0,#_trailer
      000D86 E2               [24] 3294 	movx	a,@r0
      000D87 FE               [12] 3295 	mov	r6,a
      000D88 08               [12] 3296 	inc	r0
      000D89 E2               [24] 3297 	movx	a,@r0
      000D8A 54 1F            [12] 3298 	anl	a,#0x1F
      000D8C FF               [12] 3299 	mov	r7,a
      000D8D 4E               [12] 3300 	orl	a,r6
      000D8E 60 09            [24] 3301 	jz	00184$
      000D90 78r1E            [12] 3302 	mov	r0,#(_trailer + 0x0001)
      000D92 E2               [24] 3303 	movx	a,@r0
      000D93 20 E5 03         [24] 3304 	jb	acc.5,00184$
                                   3305 ;	radio/tdm.c:829: packet_force_resend();
      000D96 12r00r00         [24] 3306 	lcall	_packet_force_resend
      000D99                       3307 00184$:
                                   3308 ;	radio/tdm.c:832: if (lbt_rssi != 0) {
      000D99 78r16            [12] 3309 	mov	r0,#_lbt_rssi
      000D9B E2               [24] 3310 	movx	a,@r0
      000D9C 60 0B            [24] 3311 	jz	00189$
                                   3312 ;	radio/tdm.c:834: lbt_listen_time = 0;
      000D9E 78r17            [12] 3313 	mov	r0,#_lbt_listen_time
      000DA0 E4               [12] 3314 	clr	a
      000DA1 F2               [24] 3315 	movx	@r0,a
      000DA2 08               [12] 3316 	inc	r0
      000DA3 F2               [24] 3317 	movx	@r0,a
                                   3318 ;	radio/tdm.c:835: lbt_rand = 0;
      000DA4 78r1B            [12] 3319 	mov	r0,#_lbt_rand
      000DA6 F2               [24] 3320 	movx	@r0,a
      000DA7 08               [12] 3321 	inc	r0
      000DA8 F2               [24] 3322 	movx	@r0,a
      000DA9                       3323 00189$:
                                   3324 ;	radio/tdm.c:838: if (len != 0 && trailer.window != 0) {
      000DA9 78r32            [12] 3325 	mov	r0,#_tdm_serial_loop_len_1_213
      000DAB E2               [24] 3326 	movx	a,@r0
      000DAC 60 0E            [24] 3327 	jz	00191$
      000DAE 78r1D            [12] 3328 	mov	r0,#_trailer
      000DB0 E2               [24] 3329 	movx	a,@r0
      000DB1 FE               [12] 3330 	mov	r6,a
      000DB2 08               [12] 3331 	inc	r0
      000DB3 E2               [24] 3332 	movx	a,@r0
      000DB4 54 1F            [12] 3333 	anl	a,#0x1F
      000DB6 FF               [12] 3334 	mov	r7,a
      000DB7 4E               [12] 3335 	orl	a,r6
      000DB8 60 02            [24] 3336 	jz	00191$
                                   3337 ;	radio/tdm.c:839: LED_ACTIVITY = LED_OFF;
      000DBA D2 A0            [12] 3338 	setb	_LED_RED
      000DBC                       3339 00191$:
                                   3340 ;	radio/tdm.c:860: radio_set_channel(fhop_receive_channel());
      000DBC 12r00r00         [24] 3341 	lcall	_fhop_receive_channel
      000DBF 12r00r00         [24] 3342 	lcall	_radio_set_channel
                                   3343 ;	radio/tdm.c:863: radio_receiver_on();
      000DC2 12r00r00         [24] 3344 	lcall	_radio_receiver_on
      000DC5 02r07r9F         [24] 3345 	ljmp	00195$
                                   3346 ;------------------------------------------------------------
                                   3347 ;Allocation info for local variables in function 'tdm_init'
                                   3348 ;------------------------------------------------------------
                                   3349 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                                   3350 ;i                         Allocated with name '_tdm_init_i_1_253'
                                   3351 ;air_rate                  Allocated with name '_tdm_init_air_rate_1_253'
                                   3352 ;window_width              Allocated with name '_tdm_init_window_width_1_253'
                                   3353 ;------------------------------------------------------------
                                   3354 ;	radio/tdm.c:982: tdm_init(void)
                                   3355 ;	-----------------------------------------
                                   3356 ;	 function tdm_init
                                   3357 ;	-----------------------------------------
      000DC8                       3358 _tdm_init:
                                   3359 ;	radio/tdm.c:985: __xdata uint8_t air_rate = radio_air_rate();
      000DC8 12r00r00         [24] 3360 	lcall	_radio_air_rate
      000DCB AF 82            [24] 3361 	mov	r7,dpl
                                   3362 ;	radio/tdm.c:994: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
      000DCD 90r00r00         [24] 3363 	mov	dptr,#__mullong_PARM_2
      000DD0 EF               [12] 3364 	mov	a,r7
      000DD1 F0               [24] 3365 	movx	@dptr,a
      000DD2 E4               [12] 3366 	clr	a
      000DD3 A3               [24] 3367 	inc	dptr
      000DD4 F0               [24] 3368 	movx	@dptr,a
      000DD5 A3               [24] 3369 	inc	dptr
      000DD6 F0               [24] 3370 	movx	@dptr,a
      000DD7 A3               [24] 3371 	inc	dptr
      000DD8 F0               [24] 3372 	movx	@dptr,a
      000DD9 90 03 E8         [24] 3373 	mov	dptr,#0x03E8
      000DDC E4               [12] 3374 	clr	a
      000DDD F5 F0            [12] 3375 	mov	b,a
      000DDF 12r00r00         [24] 3376 	lcall	__mullong
      000DE2 AC 82            [24] 3377 	mov	r4,dpl
      000DE4 AD 83            [24] 3378 	mov	r5,dph
      000DE6 AE F0            [24] 3379 	mov	r6,b
      000DE8 FF               [12] 3380 	mov	r7,a
      000DE9 90r00r00         [24] 3381 	mov	dptr,#__divulong_PARM_2
      000DEC EC               [12] 3382 	mov	a,r4
      000DED F0               [24] 3383 	movx	@dptr,a
      000DEE ED               [12] 3384 	mov	a,r5
      000DEF A3               [24] 3385 	inc	dptr
      000DF0 F0               [24] 3386 	movx	@dptr,a
      000DF1 EE               [12] 3387 	mov	a,r6
      000DF2 A3               [24] 3388 	inc	dptr
      000DF3 F0               [24] 3389 	movx	@dptr,a
      000DF4 EF               [12] 3390 	mov	a,r7
      000DF5 A3               [24] 3391 	inc	dptr
      000DF6 F0               [24] 3392 	movx	@dptr,a
      000DF7 90 12 00         [24] 3393 	mov	dptr,#0x1200
      000DFA 75 F0 7A         [24] 3394 	mov	b,#0x7A
      000DFD E4               [12] 3395 	clr	a
      000DFE 12r00r00         [24] 3396 	lcall	__divulong
      000E01 AC 82            [24] 3397 	mov	r4,dpl
      000E03 AD 83            [24] 3398 	mov	r5,dph
      000E05 AE F0            [24] 3399 	mov	r6,b
      000E07 FF               [12] 3400 	mov	r7,a
      000E08 74 08            [12] 3401 	mov	a,#0x08
      000E0A 2C               [12] 3402 	add	a,r4
      000E0B FC               [12] 3403 	mov	r4,a
      000E0C E4               [12] 3404 	clr	a
      000E0D 3D               [12] 3405 	addc	a,r5
      000E0E FD               [12] 3406 	mov	r5,a
      000E0F E4               [12] 3407 	clr	a
      000E10 3E               [12] 3408 	addc	a,r6
      000E11 FE               [12] 3409 	mov	r6,a
      000E12 E4               [12] 3410 	clr	a
      000E13 3F               [12] 3411 	addc	a,r7
      000E14 FF               [12] 3412 	mov	r7,a
      000E15 ED               [12] 3413 	mov	a,r5
      000E16 C4               [12] 3414 	swap	a
      000E17 CC               [12] 3415 	xch	a,r4
      000E18 C4               [12] 3416 	swap	a
      000E19 54 0F            [12] 3417 	anl	a,#0x0F
      000E1B 6C               [12] 3418 	xrl	a,r4
      000E1C CC               [12] 3419 	xch	a,r4
      000E1D 54 0F            [12] 3420 	anl	a,#0x0F
      000E1F CC               [12] 3421 	xch	a,r4
      000E20 6C               [12] 3422 	xrl	a,r4
      000E21 CC               [12] 3423 	xch	a,r4
      000E22 FD               [12] 3424 	mov	r5,a
      000E23 EE               [12] 3425 	mov	a,r6
      000E24 C4               [12] 3426 	swap	a
      000E25 54 F0            [12] 3427 	anl	a,#0xF0
      000E27 4D               [12] 3428 	orl	a,r5
      000E28 FD               [12] 3429 	mov	r5,a
      000E29 EF               [12] 3430 	mov	a,r7
      000E2A C4               [12] 3431 	swap	a
      000E2B CE               [12] 3432 	xch	a,r6
      000E2C C4               [12] 3433 	swap	a
      000E2D 54 0F            [12] 3434 	anl	a,#0x0F
      000E2F 6E               [12] 3435 	xrl	a,r6
      000E30 CE               [12] 3436 	xch	a,r6
      000E31 54 0F            [12] 3437 	anl	a,#0x0F
      000E33 CE               [12] 3438 	xch	a,r6
      000E34 6E               [12] 3439 	xrl	a,r6
      000E35 CE               [12] 3440 	xch	a,r6
                                   3441 ;	radio/tdm.c:995: ticks_per_byte++;
      000E36 74 01            [12] 3442 	mov	a,#0x01
      000E38 2C               [12] 3443 	add	a,r4
      000E39 FE               [12] 3444 	mov	r6,a
      000E3A E4               [12] 3445 	clr	a
      000E3B 3D               [12] 3446 	addc	a,r5
      000E3C FF               [12] 3447 	mov	r7,a
      000E3D 78r0A            [12] 3448 	mov	r0,#_ticks_per_byte
      000E3F EE               [12] 3449 	mov	a,r6
      000E40 F2               [24] 3450 	movx	@r0,a
      000E41 08               [12] 3451 	inc	r0
      000E42 EF               [12] 3452 	mov	a,r7
      000E43 F2               [24] 3453 	movx	@r0,a
                                   3454 ;	radio/tdm.c:1002: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
      000E44 90r00r00         [24] 3455 	mov	dptr,#__mulint_PARM_2
      000E47 EE               [12] 3456 	mov	a,r6
      000E48 F0               [24] 3457 	movx	@dptr,a
      000E49 EF               [12] 3458 	mov	a,r7
      000E4A A3               [24] 3459 	inc	dptr
      000E4B F0               [24] 3460 	movx	@dptr,a
      000E4C 90 00 0D         [24] 3461 	mov	dptr,#0x000D
      000E4F C0 07            [24] 3462 	push	ar7
      000E51 C0 06            [24] 3463 	push	ar6
      000E53 12r00r00         [24] 3464 	lcall	__mulint
      000E56 E5 82            [12] 3465 	mov	a,dpl
      000E58 85 83 F0         [24] 3466 	mov	b,dph
      000E5B D0 06            [24] 3467 	pop	ar6
      000E5D D0 07            [24] 3468 	pop	ar7
      000E5F 24 0D            [12] 3469 	add	a,#0x0D
      000E61 FC               [12] 3470 	mov	r4,a
      000E62 E4               [12] 3471 	clr	a
      000E63 35 F0            [12] 3472 	addc	a,b
      000E65 FD               [12] 3473 	mov	r5,a
      000E66 78r08            [12] 3474 	mov	r0,#_packet_latency
      000E68 EC               [12] 3475 	mov	a,r4
      000E69 F2               [24] 3476 	movx	@r0,a
      000E6A 08               [12] 3477 	inc	r0
      000E6B ED               [12] 3478 	mov	a,r5
      000E6C F2               [24] 3479 	movx	@r0,a
                                   3480 ;	radio/tdm.c:1004: if (feature_golay) {
      000E6D 30*00 2E         [24] 3481 	jnb	_feature_golay,00102$
                                   3482 ;	radio/tdm.c:1005: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
      000E70 78r05            [12] 3483 	mov	r0,#_max_data_packet_length
      000E72 74 76            [12] 3484 	mov	a,#0x76
      000E74 F2               [24] 3485 	movx	@r0,a
                                   3486 ;	radio/tdm.c:1008: ticks_per_byte *= 2;
      000E75 EF               [12] 3487 	mov	a,r7
      000E76 CE               [12] 3488 	xch	a,r6
      000E77 25 E0            [12] 3489 	add	a,acc
      000E79 CE               [12] 3490 	xch	a,r6
      000E7A 33               [12] 3491 	rlc	a
      000E7B FF               [12] 3492 	mov	r7,a
      000E7C 78r0A            [12] 3493 	mov	r0,#_ticks_per_byte
      000E7E EE               [12] 3494 	mov	a,r6
      000E7F F2               [24] 3495 	movx	@r0,a
      000E80 08               [12] 3496 	inc	r0
      000E81 EF               [12] 3497 	mov	a,r7
      000E82 F2               [24] 3498 	movx	@r0,a
                                   3499 ;	radio/tdm.c:1011: packet_latency += 4*ticks_per_byte;
      000E83 EF               [12] 3500 	mov	a,r7
      000E84 CE               [12] 3501 	xch	a,r6
      000E85 25 E0            [12] 3502 	add	a,acc
      000E87 CE               [12] 3503 	xch	a,r6
      000E88 33               [12] 3504 	rlc	a
      000E89 CE               [12] 3505 	xch	a,r6
      000E8A 25 E0            [12] 3506 	add	a,acc
      000E8C CE               [12] 3507 	xch	a,r6
      000E8D 33               [12] 3508 	rlc	a
      000E8E FF               [12] 3509 	mov	r7,a
      000E8F EE               [12] 3510 	mov	a,r6
      000E90 2C               [12] 3511 	add	a,r4
      000E91 FC               [12] 3512 	mov	r4,a
      000E92 EF               [12] 3513 	mov	a,r7
      000E93 3D               [12] 3514 	addc	a,r5
      000E94 FD               [12] 3515 	mov	r5,a
      000E95 78r08            [12] 3516 	mov	r0,#_packet_latency
      000E97 EC               [12] 3517 	mov	a,r4
      000E98 F2               [24] 3518 	movx	@r0,a
      000E99 08               [12] 3519 	inc	r0
      000E9A ED               [12] 3520 	mov	a,r5
      000E9B F2               [24] 3521 	movx	@r0,a
      000E9C 80 05            [24] 3522 	sjmp	00103$
      000E9E                       3523 00102$:
                                   3524 ;	radio/tdm.c:1013: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
      000E9E 78r05            [12] 3525 	mov	r0,#_max_data_packet_length
      000EA0 74 FA            [12] 3526 	mov	a,#0xFA
      000EA2 F2               [24] 3527 	movx	@r0,a
      000EA3                       3528 00103$:
                                   3529 ;	radio/tdm.c:1017: silence_period = 2*packet_latency;
      000EA3 78r08            [12] 3530 	mov	r0,#_packet_latency
      000EA5 79r06            [12] 3531 	mov	r1,#_silence_period
      000EA7 E2               [24] 3532 	movx	a,@r0
      000EA8 F3               [24] 3533 	movx	@r1,a
      000EA9 08               [12] 3534 	inc	r0
      000EAA E2               [24] 3535 	movx	a,@r0
      000EAB F5 F0            [12] 3536 	mov	b,a
      000EAD E3               [24] 3537 	movx	a,@r1
      000EAE 25 E0            [12] 3538 	add	a,acc
      000EB0 C5 F0            [12] 3539 	xch	a,b
      000EB2 33               [12] 3540 	rlc	a
      000EB3 C5 F0            [12] 3541 	xch	a,b
      000EB5 F3               [24] 3542 	movx	@r1,a
      000EB6 09               [12] 3543 	inc	r1
      000EB7 E5 F0            [12] 3544 	mov	a,b
      000EB9 F3               [24] 3545 	movx	@r1,a
                                   3546 ;	radio/tdm.c:1020: window_width = 3*(packet_latency+(max_data_packet_length*(uint32_t)ticks_per_byte));
      000EBA 78r0A            [12] 3547 	mov	r0,#_ticks_per_byte
      000EBC 90r00r00         [24] 3548 	mov	dptr,#__mullong_PARM_2
      000EBF E2               [24] 3549 	movx	a,@r0
      000EC0 F0               [24] 3550 	movx	@dptr,a
      000EC1 08               [12] 3551 	inc	r0
      000EC2 E2               [24] 3552 	movx	a,@r0
      000EC3 A3               [24] 3553 	inc	dptr
      000EC4 F0               [24] 3554 	movx	@dptr,a
      000EC5 E4               [12] 3555 	clr	a
      000EC6 A3               [24] 3556 	inc	dptr
      000EC7 F0               [24] 3557 	movx	@dptr,a
      000EC8 A3               [24] 3558 	inc	dptr
      000EC9 F0               [24] 3559 	movx	@dptr,a
      000ECA 78r05            [12] 3560 	mov	r0,#_max_data_packet_length
      000ECC E2               [24] 3561 	movx	a,@r0
      000ECD FC               [12] 3562 	mov	r4,a
      000ECE 7D 00            [12] 3563 	mov	r5,#0x00
      000ED0 7E 00            [12] 3564 	mov	r6,#0x00
      000ED2 7F 00            [12] 3565 	mov	r7,#0x00
      000ED4 8C 82            [24] 3566 	mov	dpl,r4
      000ED6 8D 83            [24] 3567 	mov	dph,r5
      000ED8 8E F0            [24] 3568 	mov	b,r6
      000EDA EF               [12] 3569 	mov	a,r7
      000EDB 12r00r00         [24] 3570 	lcall	__mullong
      000EDE 85 82*15         [24] 3571 	mov	_tdm_init_sloc0_1_0,dpl
      000EE1 85 83*16         [24] 3572 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      000EE4 85 F0*17         [24] 3573 	mov	(_tdm_init_sloc0_1_0 + 2),b
      000EE7 F5*18            [12] 3574 	mov	(_tdm_init_sloc0_1_0 + 3),a
      000EE9 78r08            [12] 3575 	mov	r0,#_packet_latency
      000EEB E2               [24] 3576 	movx	a,@r0
      000EEC FA               [12] 3577 	mov	r2,a
      000EED 08               [12] 3578 	inc	r0
      000EEE E2               [24] 3579 	movx	a,@r0
      000EEF FB               [12] 3580 	mov	r3,a
      000EF0 7E 00            [12] 3581 	mov	r6,#0x00
      000EF2 7F 00            [12] 3582 	mov	r7,#0x00
      000EF4 90r00r00         [24] 3583 	mov	dptr,#__mullong_PARM_2
      000EF7 E5*15            [12] 3584 	mov	a,_tdm_init_sloc0_1_0
      000EF9 2A               [12] 3585 	add	a,r2
      000EFA F0               [24] 3586 	movx	@dptr,a
      000EFB E5*16            [12] 3587 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      000EFD 3B               [12] 3588 	addc	a,r3
      000EFE A3               [24] 3589 	inc	dptr
      000EFF F0               [24] 3590 	movx	@dptr,a
      000F00 E5*17            [12] 3591 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      000F02 3E               [12] 3592 	addc	a,r6
      000F03 A3               [24] 3593 	inc	dptr
      000F04 F0               [24] 3594 	movx	@dptr,a
      000F05 E5*18            [12] 3595 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      000F07 3F               [12] 3596 	addc	a,r7
      000F08 A3               [24] 3597 	inc	dptr
      000F09 F0               [24] 3598 	movx	@dptr,a
      000F0A 90 00 03         [24] 3599 	mov	dptr,#(0x03&0x00ff)
      000F0D E4               [12] 3600 	clr	a
      000F0E F5 F0            [12] 3601 	mov	b,a
      000F10 12r00r00         [24] 3602 	lcall	__mullong
      000F13 AC 82            [24] 3603 	mov	r4,dpl
      000F15 AD 83            [24] 3604 	mov	r5,dph
      000F17 AE F0            [24] 3605 	mov	r6,b
      000F19 FF               [12] 3606 	mov	r7,a
      000F1A 90r01r01         [24] 3607 	mov	dptr,#_tdm_init_window_width_1_253
      000F1D EC               [12] 3608 	mov	a,r4
      000F1E F0               [24] 3609 	movx	@dptr,a
      000F1F ED               [12] 3610 	mov	a,r5
      000F20 A3               [24] 3611 	inc	dptr
      000F21 F0               [24] 3612 	movx	@dptr,a
      000F22 EE               [12] 3613 	mov	a,r6
      000F23 A3               [24] 3614 	inc	dptr
      000F24 F0               [24] 3615 	movx	@dptr,a
      000F25 EF               [12] 3616 	mov	a,r7
      000F26 A3               [24] 3617 	inc	dptr
      000F27 F0               [24] 3618 	movx	@dptr,a
                                   3619 ;	radio/tdm.c:1023: lbt_min_time = LBT_MIN_TIME_USEC/16;
      000F28 78r19            [12] 3620 	mov	r0,#_lbt_min_time
      000F2A 74 38            [12] 3621 	mov	a,#0x38
      000F2C F2               [24] 3622 	movx	@r0,a
      000F2D 08               [12] 3623 	inc	r0
      000F2E 74 01            [12] 3624 	mov	a,#0x01
      000F30 F2               [24] 3625 	movx	@r0,a
                                   3626 ;	radio/tdm.c:1026: if (lbt_rssi != 0) {
      000F31 78r16            [12] 3627 	mov	r0,#_lbt_rssi
      000F33 E2               [24] 3628 	movx	a,@r0
      000F34 60 3A            [24] 3629 	jz	00105$
                                   3630 ;	radio/tdm.c:1027: window_width = constrain(window_width, 3*lbt_min_time, window_width);
      000F36 78r00            [12] 3631 	mov	r0,#_constrain_PARM_2
      000F38 74 A8            [12] 3632 	mov	a,#0xA8
      000F3A F2               [24] 3633 	movx	@r0,a
      000F3B 08               [12] 3634 	inc	r0
      000F3C 74 03            [12] 3635 	mov	a,#0x03
      000F3E F2               [24] 3636 	movx	@r0,a
      000F3F 08               [12] 3637 	inc	r0
      000F40 E4               [12] 3638 	clr	a
      000F41 F2               [24] 3639 	movx	@r0,a
      000F42 08               [12] 3640 	inc	r0
      000F43 F2               [24] 3641 	movx	@r0,a
      000F44 78r00            [12] 3642 	mov	r0,#_constrain_PARM_3
      000F46 EC               [12] 3643 	mov	a,r4
      000F47 F2               [24] 3644 	movx	@r0,a
      000F48 08               [12] 3645 	inc	r0
      000F49 ED               [12] 3646 	mov	a,r5
      000F4A F2               [24] 3647 	movx	@r0,a
      000F4B 08               [12] 3648 	inc	r0
      000F4C EE               [12] 3649 	mov	a,r6
      000F4D F2               [24] 3650 	movx	@r0,a
      000F4E 08               [12] 3651 	inc	r0
      000F4F EF               [12] 3652 	mov	a,r7
      000F50 F2               [24] 3653 	movx	@r0,a
      000F51 8C 82            [24] 3654 	mov	dpl,r4
      000F53 8D 83            [24] 3655 	mov	dph,r5
      000F55 8E F0            [24] 3656 	mov	b,r6
      000F57 EF               [12] 3657 	mov	a,r7
      000F58 12r00r00         [24] 3658 	lcall	_constrain
      000F5B AC 82            [24] 3659 	mov	r4,dpl
      000F5D AD 83            [24] 3660 	mov	r5,dph
      000F5F AE F0            [24] 3661 	mov	r6,b
      000F61 FF               [12] 3662 	mov	r7,a
      000F62 90r01r01         [24] 3663 	mov	dptr,#_tdm_init_window_width_1_253
      000F65 EC               [12] 3664 	mov	a,r4
      000F66 F0               [24] 3665 	movx	@dptr,a
      000F67 ED               [12] 3666 	mov	a,r5
      000F68 A3               [24] 3667 	inc	dptr
      000F69 F0               [24] 3668 	movx	@dptr,a
      000F6A EE               [12] 3669 	mov	a,r6
      000F6B A3               [24] 3670 	inc	dptr
      000F6C F0               [24] 3671 	movx	@dptr,a
      000F6D EF               [12] 3672 	mov	a,r7
      000F6E A3               [24] 3673 	inc	dptr
      000F6F F0               [24] 3674 	movx	@dptr,a
      000F70                       3675 00105$:
                                   3676 ;	radio/tdm.c:1032: if (window_width >= REGULATORY_MAX_WINDOW && num_fh_channels > 1) {
      000F70 90r01r01         [24] 3677 	mov	dptr,#_tdm_init_window_width_1_253
      000F73 E0               [24] 3678 	movx	a,@dptr
      000F74 FC               [12] 3679 	mov	r4,a
      000F75 A3               [24] 3680 	inc	dptr
      000F76 E0               [24] 3681 	movx	a,@dptr
      000F77 FD               [12] 3682 	mov	r5,a
      000F78 A3               [24] 3683 	inc	dptr
      000F79 E0               [24] 3684 	movx	a,@dptr
      000F7A FE               [12] 3685 	mov	r6,a
      000F7B A3               [24] 3686 	inc	dptr
      000F7C E0               [24] 3687 	movx	a,@dptr
      000F7D FF               [12] 3688 	mov	r7,a
      000F7E C3               [12] 3689 	clr	c
      000F7F EC               [12] 3690 	mov	a,r4
      000F80 94 A8            [12] 3691 	subb	a,#0xA8
      000F82 ED               [12] 3692 	mov	a,r5
      000F83 94 61            [12] 3693 	subb	a,#0x61
      000F85 EE               [12] 3694 	mov	a,r6
      000F86 94 00            [12] 3695 	subb	a,#0x00
      000F88 EF               [12] 3696 	mov	a,r7
      000F89 94 00            [12] 3697 	subb	a,#0x00
      000F8B 40 1B            [24] 3698 	jc	00107$
      000F8D 78r00            [12] 3699 	mov	r0,#_num_fh_channels
      000F8F C3               [12] 3700 	clr	c
      000F90 E2               [24] 3701 	movx	a,@r0
      000F91 F5 F0            [12] 3702 	mov	b,a
      000F93 74 01            [12] 3703 	mov	a,#0x01
      000F95 95 F0            [12] 3704 	subb	a,b
      000F97 50 0F            [24] 3705 	jnc	00107$
                                   3706 ;	radio/tdm.c:1033: window_width = REGULATORY_MAX_WINDOW;
      000F99 90r01r01         [24] 3707 	mov	dptr,#_tdm_init_window_width_1_253
      000F9C 74 A8            [12] 3708 	mov	a,#0xA8
      000F9E F0               [24] 3709 	movx	@dptr,a
      000F9F 74 61            [12] 3710 	mov	a,#0x61
      000FA1 A3               [24] 3711 	inc	dptr
      000FA2 F0               [24] 3712 	movx	@dptr,a
      000FA3 E4               [12] 3713 	clr	a
      000FA4 A3               [24] 3714 	inc	dptr
      000FA5 F0               [24] 3715 	movx	@dptr,a
      000FA6 A3               [24] 3716 	inc	dptr
      000FA7 F0               [24] 3717 	movx	@dptr,a
      000FA8                       3718 00107$:
                                   3719 ;	radio/tdm.c:1037: if (window_width > param_get(PARAM_MAX_WINDOW)*(1000/16)) {
      000FA8 75 82 0F         [24] 3720 	mov	dpl,#0x0F
      000FAB 12r00r00         [24] 3721 	lcall	_param_get
      000FAE AC 82            [24] 3722 	mov	r4,dpl
      000FB0 AD 83            [24] 3723 	mov	r5,dph
      000FB2 AE F0            [24] 3724 	mov	r6,b
      000FB4 FF               [12] 3725 	mov	r7,a
      000FB5 90r00r00         [24] 3726 	mov	dptr,#__mullong_PARM_2
      000FB8 EC               [12] 3727 	mov	a,r4
      000FB9 F0               [24] 3728 	movx	@dptr,a
      000FBA ED               [12] 3729 	mov	a,r5
      000FBB A3               [24] 3730 	inc	dptr
      000FBC F0               [24] 3731 	movx	@dptr,a
      000FBD EE               [12] 3732 	mov	a,r6
      000FBE A3               [24] 3733 	inc	dptr
      000FBF F0               [24] 3734 	movx	@dptr,a
      000FC0 EF               [12] 3735 	mov	a,r7
      000FC1 A3               [24] 3736 	inc	dptr
      000FC2 F0               [24] 3737 	movx	@dptr,a
      000FC3 90 00 3E         [24] 3738 	mov	dptr,#(0x3E&0x00ff)
      000FC6 E4               [12] 3739 	clr	a
      000FC7 F5 F0            [12] 3740 	mov	b,a
      000FC9 12r00r00         [24] 3741 	lcall	__mullong
      000FCC 85 82*15         [24] 3742 	mov	_tdm_init_sloc0_1_0,dpl
      000FCF 85 83*16         [24] 3743 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      000FD2 85 F0*17         [24] 3744 	mov	(_tdm_init_sloc0_1_0 + 2),b
      000FD5 F5*18            [12] 3745 	mov	(_tdm_init_sloc0_1_0 + 3),a
      000FD7 90r01r01         [24] 3746 	mov	dptr,#_tdm_init_window_width_1_253
      000FDA E0               [24] 3747 	movx	a,@dptr
      000FDB FA               [12] 3748 	mov	r2,a
      000FDC A3               [24] 3749 	inc	dptr
      000FDD E0               [24] 3750 	movx	a,@dptr
      000FDE FB               [12] 3751 	mov	r3,a
      000FDF A3               [24] 3752 	inc	dptr
      000FE0 E0               [24] 3753 	movx	a,@dptr
      000FE1 FE               [12] 3754 	mov	r6,a
      000FE2 A3               [24] 3755 	inc	dptr
      000FE3 E0               [24] 3756 	movx	a,@dptr
      000FE4 FF               [12] 3757 	mov	r7,a
      000FE5 C3               [12] 3758 	clr	c
      000FE6 E5*15            [12] 3759 	mov	a,_tdm_init_sloc0_1_0
      000FE8 9A               [12] 3760 	subb	a,r2
      000FE9 E5*16            [12] 3761 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      000FEB 9B               [12] 3762 	subb	a,r3
      000FEC E5*17            [12] 3763 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      000FEE 9E               [12] 3764 	subb	a,r6
      000FEF E5*18            [12] 3765 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      000FF1 9F               [12] 3766 	subb	a,r7
      000FF2 50 39            [24] 3767 	jnc	00110$
                                   3768 ;	radio/tdm.c:1038: window_width = param_get(PARAM_MAX_WINDOW)*(1000/16);
      000FF4 75 82 0F         [24] 3769 	mov	dpl,#0x0F
      000FF7 12r00r00         [24] 3770 	lcall	_param_get
      000FFA AC 82            [24] 3771 	mov	r4,dpl
      000FFC AD 83            [24] 3772 	mov	r5,dph
      000FFE AE F0            [24] 3773 	mov	r6,b
      001000 FF               [12] 3774 	mov	r7,a
      001001 90r00r00         [24] 3775 	mov	dptr,#__mullong_PARM_2
      001004 EC               [12] 3776 	mov	a,r4
      001005 F0               [24] 3777 	movx	@dptr,a
      001006 ED               [12] 3778 	mov	a,r5
      001007 A3               [24] 3779 	inc	dptr
      001008 F0               [24] 3780 	movx	@dptr,a
      001009 EE               [12] 3781 	mov	a,r6
      00100A A3               [24] 3782 	inc	dptr
      00100B F0               [24] 3783 	movx	@dptr,a
      00100C EF               [12] 3784 	mov	a,r7
      00100D A3               [24] 3785 	inc	dptr
      00100E F0               [24] 3786 	movx	@dptr,a
      00100F 90 00 3E         [24] 3787 	mov	dptr,#(0x3E&0x00ff)
      001012 E4               [12] 3788 	clr	a
      001013 F5 F0            [12] 3789 	mov	b,a
      001015 12r00r00         [24] 3790 	lcall	__mullong
      001018 AC 82            [24] 3791 	mov	r4,dpl
      00101A AD 83            [24] 3792 	mov	r5,dph
      00101C AE F0            [24] 3793 	mov	r6,b
      00101E FF               [12] 3794 	mov	r7,a
      00101F 90r01r01         [24] 3795 	mov	dptr,#_tdm_init_window_width_1_253
      001022 EC               [12] 3796 	mov	a,r4
      001023 F0               [24] 3797 	movx	@dptr,a
      001024 ED               [12] 3798 	mov	a,r5
      001025 A3               [24] 3799 	inc	dptr
      001026 F0               [24] 3800 	movx	@dptr,a
      001027 EE               [12] 3801 	mov	a,r6
      001028 A3               [24] 3802 	inc	dptr
      001029 F0               [24] 3803 	movx	@dptr,a
      00102A EF               [12] 3804 	mov	a,r7
      00102B A3               [24] 3805 	inc	dptr
      00102C F0               [24] 3806 	movx	@dptr,a
      00102D                       3807 00110$:
                                   3808 ;	radio/tdm.c:1042: if (window_width > 0x1fff) {
      00102D 90r01r01         [24] 3809 	mov	dptr,#_tdm_init_window_width_1_253
      001030 E0               [24] 3810 	movx	a,@dptr
      001031 FC               [12] 3811 	mov	r4,a
      001032 A3               [24] 3812 	inc	dptr
      001033 E0               [24] 3813 	movx	a,@dptr
      001034 FD               [12] 3814 	mov	r5,a
      001035 A3               [24] 3815 	inc	dptr
      001036 E0               [24] 3816 	movx	a,@dptr
      001037 FE               [12] 3817 	mov	r6,a
      001038 A3               [24] 3818 	inc	dptr
      001039 E0               [24] 3819 	movx	a,@dptr
      00103A FF               [12] 3820 	mov	r7,a
      00103B C3               [12] 3821 	clr	c
      00103C 74 FF            [12] 3822 	mov	a,#0xFF
      00103E 9C               [12] 3823 	subb	a,r4
      00103F 74 1F            [12] 3824 	mov	a,#0x1F
      001041 9D               [12] 3825 	subb	a,r5
      001042 E4               [12] 3826 	clr	a
      001043 9E               [12] 3827 	subb	a,r6
      001044 E4               [12] 3828 	clr	a
      001045 9F               [12] 3829 	subb	a,r7
      001046 50 0F            [24] 3830 	jnc	00112$
                                   3831 ;	radio/tdm.c:1043: window_width = 0x1fff;
      001048 90r01r01         [24] 3832 	mov	dptr,#_tdm_init_window_width_1_253
      00104B 74 FF            [12] 3833 	mov	a,#0xFF
      00104D F0               [24] 3834 	movx	@dptr,a
      00104E 74 1F            [12] 3835 	mov	a,#0x1F
      001050 A3               [24] 3836 	inc	dptr
      001051 F0               [24] 3837 	movx	@dptr,a
      001052 E4               [12] 3838 	clr	a
      001053 A3               [24] 3839 	inc	dptr
      001054 F0               [24] 3840 	movx	@dptr,a
      001055 A3               [24] 3841 	inc	dptr
      001056 F0               [24] 3842 	movx	@dptr,a
      001057                       3843 00112$:
                                   3844 ;	radio/tdm.c:1046: tx_window_width = window_width;
      001057 90r01r01         [24] 3845 	mov	dptr,#_tdm_init_window_width_1_253
      00105A E0               [24] 3846 	movx	a,@dptr
      00105B FC               [12] 3847 	mov	r4,a
      00105C A3               [24] 3848 	inc	dptr
      00105D E0               [24] 3849 	movx	a,@dptr
      00105E FD               [12] 3850 	mov	r5,a
      00105F A3               [24] 3851 	inc	dptr
      001060 E0               [24] 3852 	movx	a,@dptr
      001061 A3               [24] 3853 	inc	dptr
      001062 E0               [24] 3854 	movx	a,@dptr
      001063 78r03            [12] 3855 	mov	r0,#_tx_window_width
      001065 EC               [12] 3856 	mov	a,r4
      001066 F2               [24] 3857 	movx	@r0,a
      001067 08               [12] 3858 	inc	r0
      001068 ED               [12] 3859 	mov	a,r5
      001069 F2               [24] 3860 	movx	@r0,a
                                   3861 ;	radio/tdm.c:1051: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
      00106A 78r0B            [12] 3862 	mov	r0,#(_settings + 0x000b)
      00106C E2               [24] 3863 	movx	a,@r0
      00106D 7E 00            [12] 3864 	mov	r6,#0x00
      00106F 24 F6            [12] 3865 	add	a,#0xF6
      001071 FF               [12] 3866 	mov	r7,a
      001072 EE               [12] 3867 	mov	a,r6
      001073 34 FF            [12] 3868 	addc	a,#0xFF
      001075 FE               [12] 3869 	mov	r6,a
      001076 90r00r00         [24] 3870 	mov	dptr,#__divsint_PARM_2
      001079 74 02            [12] 3871 	mov	a,#0x02
      00107B F0               [24] 3872 	movx	@dptr,a
      00107C E4               [12] 3873 	clr	a
      00107D A3               [24] 3874 	inc	dptr
      00107E F0               [24] 3875 	movx	@dptr,a
      00107F 8F 82            [24] 3876 	mov	dpl,r7
      001081 8E 83            [24] 3877 	mov	dph,r6
      001083 C0 05            [24] 3878 	push	ar5
      001085 C0 04            [24] 3879 	push	ar4
      001087 12r00r00         [24] 3880 	lcall	__divsint
      00108A AE 82            [24] 3881 	mov	r6,dpl
      00108C AF 83            [24] 3882 	mov	r7,dph
      00108E 78r0A            [12] 3883 	mov	r0,#_ticks_per_byte
      001090 90r00r00         [24] 3884 	mov	dptr,#__mulint_PARM_2
      001093 E2               [24] 3885 	movx	a,@r0
      001094 F0               [24] 3886 	movx	@dptr,a
      001095 08               [12] 3887 	inc	r0
      001096 E2               [24] 3888 	movx	a,@r0
      001097 A3               [24] 3889 	inc	dptr
      001098 F0               [24] 3890 	movx	@dptr,a
      001099 8E 82            [24] 3891 	mov	dpl,r6
      00109B 8F 83            [24] 3892 	mov	dph,r7
      00109D 12r00r00         [24] 3893 	lcall	__mulint
      0010A0 AE 82            [24] 3894 	mov	r6,dpl
      0010A2 AF 83            [24] 3895 	mov	r7,dph
      0010A4 D0 04            [24] 3896 	pop	ar4
      0010A6 D0 05            [24] 3897 	pop	ar5
      0010A8 78r08            [12] 3898 	mov	r0,#_packet_latency
      0010AA E2               [24] 3899 	movx	a,@r0
      0010AB 2E               [12] 3900 	add	a,r6
      0010AC F2               [24] 3901 	movx	@r0,a
      0010AD 08               [12] 3902 	inc	r0
      0010AE E2               [24] 3903 	movx	a,@r0
      0010AF 3F               [12] 3904 	addc	a,r7
      0010B0 F2               [24] 3905 	movx	@r0,a
                                   3906 ;	radio/tdm.c:1055: i = (tx_window_width - packet_latency) / ticks_per_byte;
      0010B1 78r08            [12] 3907 	mov	r0,#_packet_latency
      0010B3 D3               [12] 3908 	setb	c
      0010B4 E2               [24] 3909 	movx	a,@r0
      0010B5 9C               [12] 3910 	subb	a,r4
      0010B6 F4               [12] 3911 	cpl	a
      0010B7 B3               [12] 3912 	cpl	c
      0010B8 FC               [12] 3913 	mov	r4,a
      0010B9 B3               [12] 3914 	cpl	c
      0010BA 08               [12] 3915 	inc	r0
      0010BB E2               [24] 3916 	movx	a,@r0
      0010BC 9D               [12] 3917 	subb	a,r5
      0010BD F4               [12] 3918 	cpl	a
      0010BE FD               [12] 3919 	mov	r5,a
      0010BF 78r0A            [12] 3920 	mov	r0,#_ticks_per_byte
      0010C1 90r00r00         [24] 3921 	mov	dptr,#__divuint_PARM_2
      0010C4 E2               [24] 3922 	movx	a,@r0
      0010C5 F0               [24] 3923 	movx	@dptr,a
      0010C6 08               [12] 3924 	inc	r0
      0010C7 E2               [24] 3925 	movx	a,@r0
      0010C8 A3               [24] 3926 	inc	dptr
      0010C9 F0               [24] 3927 	movx	@dptr,a
      0010CA 8C 82            [24] 3928 	mov	dpl,r4
      0010CC 8D 83            [24] 3929 	mov	dph,r5
      0010CE 12r00r00         [24] 3930 	lcall	__divuint
      0010D1 AE 82            [24] 3931 	mov	r6,dpl
      0010D3 AF 83            [24] 3932 	mov	r7,dph
      0010D5 90r00rFF         [24] 3933 	mov	dptr,#_tdm_init_i_1_253
      0010D8 EE               [12] 3934 	mov	a,r6
      0010D9 F0               [24] 3935 	movx	@dptr,a
      0010DA EF               [12] 3936 	mov	a,r7
      0010DB A3               [24] 3937 	inc	dptr
      0010DC F0               [24] 3938 	movx	@dptr,a
                                   3939 ;	radio/tdm.c:1056: if (i > max_data_packet_length) {
      0010DD 78r05            [12] 3940 	mov	r0,#_max_data_packet_length
      0010DF E2               [24] 3941 	movx	a,@r0
      0010E0 FC               [12] 3942 	mov	r4,a
      0010E1 7D 00            [12] 3943 	mov	r5,#0x00
      0010E3 C3               [12] 3944 	clr	c
      0010E4 EC               [12] 3945 	mov	a,r4
      0010E5 9E               [12] 3946 	subb	a,r6
      0010E6 ED               [12] 3947 	mov	a,r5
      0010E7 9F               [12] 3948 	subb	a,r7
      0010E8 50 08            [24] 3949 	jnc	00114$
                                   3950 ;	radio/tdm.c:1057: i = max_data_packet_length;
      0010EA 90r00rFF         [24] 3951 	mov	dptr,#_tdm_init_i_1_253
      0010ED EC               [12] 3952 	mov	a,r4
      0010EE F0               [24] 3953 	movx	@dptr,a
      0010EF ED               [12] 3954 	mov	a,r5
      0010F0 A3               [24] 3955 	inc	dptr
      0010F1 F0               [24] 3956 	movx	@dptr,a
      0010F2                       3957 00114$:
                                   3958 ;	radio/tdm.c:1059: packet_set_max_xmit(i);
      0010F2 90r00rFF         [24] 3959 	mov	dptr,#_tdm_init_i_1_253
      0010F5 E0               [24] 3960 	movx	a,@dptr
      0010F6 FE               [12] 3961 	mov	r6,a
      0010F7 A3               [24] 3962 	inc	dptr
      0010F8 E0               [24] 3963 	movx	a,@dptr
      0010F9 8E 82            [24] 3964 	mov	dpl,r6
      0010FB 02r00r00         [24] 3965 	ljmp	_packet_set_max_xmit
                                   3966 ;------------------------------------------------------------
                                   3967 ;Allocation info for local variables in function 'tdm_report_timing'
                                   3968 ;------------------------------------------------------------
                                   3969 ;	radio/tdm.c:1075: tdm_report_timing(void)
                                   3970 ;	-----------------------------------------
                                   3971 ;	 function tdm_report_timing
                                   3972 ;	-----------------------------------------
      0010FE                       3973 _tdm_report_timing:
                                   3974 ;	radio/tdm.c:1077: printf("silence_period: %u\n", (unsigned)silence_period); delay_msec(1);
      0010FE 78r06            [12] 3975 	mov	r0,#_silence_period
      001100 E2               [24] 3976 	movx	a,@r0
      001101 C0 E0            [24] 3977 	push	acc
      001103 08               [12] 3978 	inc	r0
      001104 E2               [24] 3979 	movx	a,@r0
      001105 C0 E0            [24] 3980 	push	acc
      001107 74rE3            [12] 3981 	mov	a,#___str_9
      001109 C0 E0            [24] 3982 	push	acc
      00110B 74s00            [12] 3983 	mov	a,#(___str_9 >> 8)
      00110D C0 E0            [24] 3984 	push	acc
      00110F 74 80            [12] 3985 	mov	a,#0x80
      001111 C0 E0            [24] 3986 	push	acc
      001113 12r00r00         [24] 3987 	lcall	_printfl
      001116 E5 81            [12] 3988 	mov	a,sp
      001118 24 FB            [12] 3989 	add	a,#0xfb
      00111A F5 81            [12] 3990 	mov	sp,a
      00111C 90 00 01         [24] 3991 	mov	dptr,#0x0001
      00111F 12r00r00         [24] 3992 	lcall	_delay_msec
                                   3993 ;	radio/tdm.c:1078: printf("tx_window_width: %u\n", (unsigned)tx_window_width); delay_msec(1);
      001122 78r03            [12] 3994 	mov	r0,#_tx_window_width
      001124 E2               [24] 3995 	movx	a,@r0
      001125 C0 E0            [24] 3996 	push	acc
      001127 08               [12] 3997 	inc	r0
      001128 E2               [24] 3998 	movx	a,@r0
      001129 C0 E0            [24] 3999 	push	acc
      00112B 74rF7            [12] 4000 	mov	a,#___str_10
      00112D C0 E0            [24] 4001 	push	acc
      00112F 74s00            [12] 4002 	mov	a,#(___str_10 >> 8)
      001131 C0 E0            [24] 4003 	push	acc
      001133 74 80            [12] 4004 	mov	a,#0x80
      001135 C0 E0            [24] 4005 	push	acc
      001137 12r00r00         [24] 4006 	lcall	_printfl
      00113A E5 81            [12] 4007 	mov	a,sp
      00113C 24 FB            [12] 4008 	add	a,#0xfb
      00113E F5 81            [12] 4009 	mov	sp,a
      001140 90 00 01         [24] 4010 	mov	dptr,#0x0001
      001143 12r00r00         [24] 4011 	lcall	_delay_msec
                                   4012 ;	radio/tdm.c:1079: printf("max_data_packet_length: %u\n", (unsigned)max_data_packet_length); delay_msec(1);
      001146 78r05            [12] 4013 	mov	r0,#_max_data_packet_length
      001148 E2               [24] 4014 	movx	a,@r0
      001149 FE               [12] 4015 	mov	r6,a
      00114A 7F 00            [12] 4016 	mov	r7,#0x00
      00114C C0 06            [24] 4017 	push	ar6
      00114E C0 07            [24] 4018 	push	ar7
      001150 74r0C            [12] 4019 	mov	a,#___str_11
      001152 C0 E0            [24] 4020 	push	acc
      001154 74s01            [12] 4021 	mov	a,#(___str_11 >> 8)
      001156 C0 E0            [24] 4022 	push	acc
      001158 74 80            [12] 4023 	mov	a,#0x80
      00115A C0 E0            [24] 4024 	push	acc
      00115C 12r00r00         [24] 4025 	lcall	_printfl
      00115F E5 81            [12] 4026 	mov	a,sp
      001161 24 FB            [12] 4027 	add	a,#0xfb
      001163 F5 81            [12] 4028 	mov	sp,a
      001165 90 00 01         [24] 4029 	mov	dptr,#0x0001
      001168 02r00r00         [24] 4030 	ljmp	_delay_msec
                                   4031 	.area CSEG    (CODE)
                                   4032 	.area CONST   (CODE)
      000000                       4033 ___str_0:
      000000 4C 2F 52 20 52 53 53  4034 	.ascii "L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u "
             49 3A 20 25 75 2F 25
             75 20 20 4C 2F 52 20
             6E 6F 69 73 65 3A 20
             25 75 2F 25 75 20 70
             6B 74 73 3A 20 25 75
             20
      00002B 00                    4035 	.db 0x00
      00002C                       4036 ___str_1:
      00002C 20 74 78 65 3D 25 75  4037 	.ascii " txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u"
             20 72 78 65 3D 25 75
             20 73 74 78 3D 25 75
             20 73 72 78 3D 25 75
             20 65 63 63 3D 25 75
             2F 25 75 20 74 65 6D
             70 3D 25 64 20 64 63
             6F 3D 25 75
      000061 0A                    4038 	.db 0x0A
      000062 00                    4039 	.db 0x00
      000063                       4040 ___str_2:
      000063 54 44 4D 3A 20 25 75  4041 	.ascii "TDM: %u/%u len=%u "
             2F 25 75 20 6C 65 6E
             3D 25 75 20
      000075 00                    4042 	.db 0x00
      000076                       4043 ___str_3:
      000076 20 64 65 6C 74 61 3A  4044 	.ascii " delta: %d"
             20 25 64
      000080 0A                    4045 	.db 0x0A
      000081 00                    4046 	.db 0x00
      000082                       4047 ___str_4:
      000082 54 44 4D 3A 20 63 68  4048 	.ascii "TDM: change timing %u/%u"
             61 6E 67 65 20 74 69
             6D 69 6E 67 20 25 75
             2F 25 75
      00009A 0A                    4049 	.db 0x0A
      00009B 00                    4050 	.db 0x00
      00009C                       4051 ___str_5:
      00009C 54 44 4D 3A 20 73 63  4052 	.ascii "TDM: scanning"
             61 6E 6E 69 6E 67
      0000A9 0A                    4053 	.db 0x0A
      0000AA 00                    4054 	.db 0x00
      0000AB                       4055 ___str_6:
      0000AB 73 74 61 63 6B 20 62  4056 	.ascii "stack blown"
             6C 6F 77 6E
      0000B6 0A                    4057 	.db 0x0A
      0000B7 00                    4058 	.db 0x00
      0000B8                       4059 ___str_7:
      0000B8 70 64 61 74 61 20 63  4060 	.ascii "pdata canary changed"
             61 6E 61 72 79 20 63
             68 61 6E 67 65 64
      0000CC 0A                    4061 	.db 0x0A
      0000CD 00                    4062 	.db 0x00
      0000CE                       4063 ___str_8:
      0000CE 6F 76 65 72 73 69 7A  4064 	.ascii "oversized tdm packet"
             65 64 20 74 64 6D 20
             70 61 63 6B 65 74
      0000E2 00                    4065 	.db 0x00
      0000E3                       4066 ___str_9:
      0000E3 73 69 6C 65 6E 63 65  4067 	.ascii "silence_period: %u"
             5F 70 65 72 69 6F 64
             3A 20 25 75
      0000F5 0A                    4068 	.db 0x0A
      0000F6 00                    4069 	.db 0x00
      0000F7                       4070 ___str_10:
      0000F7 74 78 5F 77 69 6E 64  4071 	.ascii "tx_window_width: %u"
             6F 77 5F 77 69 64 74
             68 3A 20 25 75
      00010A 0A                    4072 	.db 0x0A
      00010B 00                    4073 	.db 0x00
      00010C                       4074 ___str_11:
      00010C 6D 61 78 5F 64 61 74  4075 	.ascii "max_data_packet_length: %u"
             61 5F 70 61 63 6B 65
             74 5F 6C 65 6E 67 74
             68 3A 20 25 75
      000126 0A                    4076 	.db 0x0A
      000127 00                    4077 	.db 0x00
                                   4078 	.area XINIT   (CODE)
                                   4079 	.area CABS    (ABS,CODE)
