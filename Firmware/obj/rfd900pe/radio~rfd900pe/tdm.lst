                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Sep  7 2022) (Linux)
                                      4 ; This file was generated Wed Sep  7 10:05:10 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module tdm
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _aes_get_encryption_level
                                     13 	.globl _crc16
                                     14 	.globl _fhop_set_locked
                                     15 	.globl _fhop_window_change
                                     16 	.globl _fhop_receive_channel
                                     17 	.globl _fhop_transmit_channel
                                     18 	.globl _packet_inject
                                     19 	.globl _packet_set_max_xmit
                                     20 	.globl _packet_force_resend
                                     21 	.globl _packet_is_duplicate
                                     22 	.globl _packet_is_injected
                                     23 	.globl _packet_is_resend
                                     24 	.globl _packet_get_next
                                     25 	.globl _timer_entropy
                                     26 	.globl _delay_msec
                                     27 	.globl _timer2_tick
                                     28 	.globl _radio_temperature
                                     29 	.globl _MAVLink_report
                                     30 	.globl _radio_receive_in_progress
                                     31 	.globl _radio_get_transmit_power
                                     32 	.globl _radio_air_rate
                                     33 	.globl _radio_current_rssi
                                     34 	.globl _radio_last_rssi
                                     35 	.globl _radio_set_channel
                                     36 	.globl _radio_receiver_on
                                     37 	.globl _radio_transmit
                                     38 	.globl _radio_preamble_detected
                                     39 	.globl _radio_receive_packet
                                     40 	.globl _printf_end_capture
                                     41 	.globl _printf_start_capture
                                     42 	.globl _printfl
                                     43 	.globl _panic
                                     44 	.globl _at_command
                                     45 	.globl _constrain
                                     46 	.globl _param_get
                                     47 	.globl _decryptPackets
                                     48 	.globl _encrypt_buffer_getting_empty
                                     49 	.globl _encrypt_buffer_getting_full
                                     50 	.globl _serial_decrypt_buf
                                     51 	.globl _strlen
                                     52 	.globl _memset
                                     53 	.globl _memcpy
                                     54 	.globl _rand
                                     55 	.globl _NSS1
                                     56 	.globl _IRQ
                                     57 	.globl _PA_ENABLE
                                     58 	.globl _PIN_ENABLE
                                     59 	.globl _PIN_CONFIG
                                     60 	.globl _LED_GREEN
                                     61 	.globl _LED_RED
                                     62 	.globl _SPI1EN
                                     63 	.globl _TXBMT1
                                     64 	.globl _NSS1MD0
                                     65 	.globl _NSS1MD1
                                     66 	.globl _RXOVRN1
                                     67 	.globl _MODF1
                                     68 	.globl _WCOL1
                                     69 	.globl _SPIF1
                                     70 	.globl _SPI0EN
                                     71 	.globl _TXBMT0
                                     72 	.globl _NSS0MD0
                                     73 	.globl _NSS0MD1
                                     74 	.globl _RXOVRN0
                                     75 	.globl _MODF0
                                     76 	.globl _WCOL0
                                     77 	.globl _SPIF0
                                     78 	.globl _AD0CM0
                                     79 	.globl _AD0CM1
                                     80 	.globl _AD0CM2
                                     81 	.globl _AD0WINT
                                     82 	.globl _AD0BUSY
                                     83 	.globl _AD0INT
                                     84 	.globl _BURSTEN
                                     85 	.globl _AD0EN
                                     86 	.globl _CCF0
                                     87 	.globl _CCF1
                                     88 	.globl _CCF2
                                     89 	.globl _CCF3
                                     90 	.globl _CCF4
                                     91 	.globl _CCF5
                                     92 	.globl _CR
                                     93 	.globl _CF
                                     94 	.globl _P
                                     95 	.globl _F1
                                     96 	.globl _OV
                                     97 	.globl _RS0
                                     98 	.globl _RS1
                                     99 	.globl _F0
                                    100 	.globl _AC
                                    101 	.globl _CY
                                    102 	.globl _T2XCLK
                                    103 	.globl _T2RCLK
                                    104 	.globl _TR2
                                    105 	.globl _T2SPLIT
                                    106 	.globl _TF2CEN
                                    107 	.globl _TF2LEN
                                    108 	.globl _TF2L
                                    109 	.globl _TF2H
                                    110 	.globl _SI
                                    111 	.globl _ACK
                                    112 	.globl _ARBLOST
                                    113 	.globl _ACKRQ
                                    114 	.globl _STO
                                    115 	.globl _STA
                                    116 	.globl _TXMODE
                                    117 	.globl _MASTER
                                    118 	.globl _PX0
                                    119 	.globl _PT0
                                    120 	.globl _PX1
                                    121 	.globl _PT1
                                    122 	.globl _PS0
                                    123 	.globl _PT2
                                    124 	.globl _PSPI0
                                    125 	.globl _EX0
                                    126 	.globl _ET0
                                    127 	.globl _EX1
                                    128 	.globl _ET1
                                    129 	.globl _ES0
                                    130 	.globl _ET2
                                    131 	.globl _ESPI0
                                    132 	.globl _EA
                                    133 	.globl _RI0
                                    134 	.globl _TI0
                                    135 	.globl _RB80
                                    136 	.globl _TB80
                                    137 	.globl _REN0
                                    138 	.globl _MCE0
                                    139 	.globl _S0MODE
                                    140 	.globl _IT0
                                    141 	.globl _IE0
                                    142 	.globl _IT1
                                    143 	.globl _IE1
                                    144 	.globl _TR0
                                    145 	.globl _TF0
                                    146 	.globl _TR1
                                    147 	.globl _TF1
                                    148 	.globl __XPAGE
                                    149 	.globl _PCA0CP4
                                    150 	.globl _PCA0CP0
                                    151 	.globl _PCA0
                                    152 	.globl _PCA0CP3
                                    153 	.globl _PCA0CP2
                                    154 	.globl _PCA0CP1
                                    155 	.globl _PCA0CP5
                                    156 	.globl _TMR2
                                    157 	.globl _TMR2RL
                                    158 	.globl _ADC0LT
                                    159 	.globl _ADC0GT
                                    160 	.globl _ADC0
                                    161 	.globl _TMR3
                                    162 	.globl _TMR3RL
                                    163 	.globl _TOFF
                                    164 	.globl _DP
                                    165 	.globl _PCLKEN
                                    166 	.globl _CLKMODE
                                    167 	.globl _P7MDOUT
                                    168 	.globl _P6MDOUT
                                    169 	.globl _P5MDOUT
                                    170 	.globl _P4MDOUT
                                    171 	.globl _PCLKACT
                                    172 	.globl _P6MDIN
                                    173 	.globl _P5MDIN
                                    174 	.globl _P4MDIN
                                    175 	.globl _P3MDIN
                                    176 	.globl _DEVICEID
                                    177 	.globl _REVID
                                    178 	.globl _HWID
                                    179 	.globl _P7
                                    180 	.globl _P6
                                    181 	.globl _P5
                                    182 	.globl _P4
                                    183 	.globl _TOFFH
                                    184 	.globl _TOFFL
                                    185 	.globl _ADC0TK
                                    186 	.globl _ADC0PWR
                                    187 	.globl _IREF0CF
                                    188 	.globl _FLSCL
                                    189 	.globl _OSCICL
                                    190 	.globl _OSCIFL
                                    191 	.globl _P3MDOUT
                                    192 	.globl _LCD0BUFCF
                                    193 	.globl _P7DRV
                                    194 	.globl _P6DRV
                                    195 	.globl _P2DRV
                                    196 	.globl _P1DRV
                                    197 	.globl _P0DRV
                                    198 	.globl _P5DRV
                                    199 	.globl _P4DRV
                                    200 	.globl _P3DRV
                                    201 	.globl _LCD0BUFCN
                                    202 	.globl _CRC0CNT
                                    203 	.globl _CRC0AUTO
                                    204 	.globl _CRC0FLIP
                                    205 	.globl _CRC0IN
                                    206 	.globl _CRC0CN
                                    207 	.globl _CRC0DAT
                                    208 	.globl _SFRPGCN
                                    209 	.globl _DC0RDY
                                    210 	.globl _PC0INT1
                                    211 	.globl _PC0INT0
                                    212 	.globl _PC0DCH
                                    213 	.globl _PC0DCL
                                    214 	.globl _SPI1CN
                                    215 	.globl _AES0YOUT
                                    216 	.globl _PC0HIST
                                    217 	.globl _PC0CMP1H
                                    218 	.globl _PC0CMP1M
                                    219 	.globl _PC0CMP1L
                                    220 	.globl _AES0KBA
                                    221 	.globl _AES0DBA
                                    222 	.globl _AES0KIN
                                    223 	.globl _AES0XIN
                                    224 	.globl _AES0BIN
                                    225 	.globl _AES0DCFG
                                    226 	.globl _AES0BCFG
                                    227 	.globl _PC0TH
                                    228 	.globl _PC0CMP0H
                                    229 	.globl _PC0CMP0M
                                    230 	.globl _PC0CMP0L
                                    231 	.globl _PC0CTR1H
                                    232 	.globl _PC0CTR1M
                                    233 	.globl _PC0CTR1L
                                    234 	.globl _PC0CTR0H
                                    235 	.globl _PC0CTR0M
                                    236 	.globl _PC0CTR0L
                                    237 	.globl _PC0MD
                                    238 	.globl _PC0PCF
                                    239 	.globl _DMA0NMD
                                    240 	.globl _DMA0BUSY
                                    241 	.globl _DMA0MINT
                                    242 	.globl _DMA0INT
                                    243 	.globl _DMA0EN
                                    244 	.globl _DMA0SEL
                                    245 	.globl _DMA0NSZH
                                    246 	.globl _DMA0NSZL
                                    247 	.globl _DMA0NAOH
                                    248 	.globl _DMA0NAOL
                                    249 	.globl _DMA0NBAH
                                    250 	.globl _DMA0NBAL
                                    251 	.globl _DMA0NCF
                                    252 	.globl _VREGINSDH
                                    253 	.globl _VREGINSDL
                                    254 	.globl _ENC0CN
                                    255 	.globl _ENC0H
                                    256 	.globl _ENC0M
                                    257 	.globl _ENC0L
                                    258 	.globl _PC0STAT
                                    259 	.globl _CRC1CN
                                    260 	.globl _CRC1POLH
                                    261 	.globl _CRC1POLL
                                    262 	.globl _CRC1OUTH
                                    263 	.globl _CRC1OUTL
                                    264 	.globl _CRC1IN
                                    265 	.globl _LCD0BUFMD
                                    266 	.globl _LCD0CHPCN
                                    267 	.globl _DC0MD
                                    268 	.globl _DC0CF
                                    269 	.globl _DC0CN
                                    270 	.globl _LCD0VBMCF
                                    271 	.globl _LCD0CHPMD
                                    272 	.globl _LCD0CHPCF
                                    273 	.globl _LCD0MSCF
                                    274 	.globl _LCD0MSCN
                                    275 	.globl _LCD0CLKDIVH
                                    276 	.globl _LCD0CLKDIVL
                                    277 	.globl _LCD0VBMCN
                                    278 	.globl _LCD0CF
                                    279 	.globl _LCD0PWR
                                    280 	.globl _SPI1DAT
                                    281 	.globl _SPI1CKR
                                    282 	.globl _SPI1CFG
                                    283 	.globl _LCD0TOGR
                                    284 	.globl _LCD0BLINK
                                    285 	.globl _LCD0CN
                                    286 	.globl _LCD0CNTRST
                                    287 	.globl _LCD0DF
                                    288 	.globl _LCD0DE
                                    289 	.globl _LCD0DD
                                    290 	.globl _LCD0DC
                                    291 	.globl _LCD0DB
                                    292 	.globl _LCD0DA
                                    293 	.globl _LCD0D9
                                    294 	.globl _LCD0D8
                                    295 	.globl _LCD0D7
                                    296 	.globl _LCD0D6
                                    297 	.globl _LCD0D5
                                    298 	.globl _LCD0D4
                                    299 	.globl _LCD0D3
                                    300 	.globl _LCD0D2
                                    301 	.globl _LCD0D1
                                    302 	.globl _LCD0D0
                                    303 	.globl _VDM0CN
                                    304 	.globl _PCA0CPH4
                                    305 	.globl _PCA0CPL4
                                    306 	.globl _PCA0CPH0
                                    307 	.globl _PCA0CPL0
                                    308 	.globl _PCA0H
                                    309 	.globl _PCA0L
                                    310 	.globl _SPI0CN
                                    311 	.globl _EIP2
                                    312 	.globl _EIP1
                                    313 	.globl _SMB0ADM
                                    314 	.globl _SMB0ADR
                                    315 	.globl _P2MDIN
                                    316 	.globl _P1MDIN
                                    317 	.globl _P0MDIN
                                    318 	.globl _B
                                    319 	.globl _RSTSRC
                                    320 	.globl _PCA0CPH3
                                    321 	.globl _PCA0CPL3
                                    322 	.globl _PCA0CPH2
                                    323 	.globl _PCA0CPL2
                                    324 	.globl _PCA0CPH1
                                    325 	.globl _PCA0CPL1
                                    326 	.globl _ADC0CN
                                    327 	.globl _EIE2
                                    328 	.globl _EIE1
                                    329 	.globl _FLWR
                                    330 	.globl _IT01CF
                                    331 	.globl _XBR2
                                    332 	.globl _XBR1
                                    333 	.globl _XBR0
                                    334 	.globl _ACC
                                    335 	.globl _PCA0PWM
                                    336 	.globl _PCA0CPM4
                                    337 	.globl _PCA0CPM3
                                    338 	.globl _PCA0CPM2
                                    339 	.globl _PCA0CPM1
                                    340 	.globl _PCA0CPM0
                                    341 	.globl _PCA0MD
                                    342 	.globl _PCA0CN
                                    343 	.globl _P0MAT
                                    344 	.globl _P2SKIP
                                    345 	.globl _P1SKIP
                                    346 	.globl _P0SKIP
                                    347 	.globl _PCA0CPH5
                                    348 	.globl _PCA0CPL5
                                    349 	.globl _REF0CN
                                    350 	.globl _PSW
                                    351 	.globl _P1MAT
                                    352 	.globl _PCA0CPM5
                                    353 	.globl _TMR2H
                                    354 	.globl _TMR2L
                                    355 	.globl _TMR2RLH
                                    356 	.globl _TMR2RLL
                                    357 	.globl _REG0CN
                                    358 	.globl _TMR2CN
                                    359 	.globl _P0MASK
                                    360 	.globl _ADC0LTH
                                    361 	.globl _ADC0LTL
                                    362 	.globl _ADC0GTH
                                    363 	.globl _ADC0GTL
                                    364 	.globl _SMB0DAT
                                    365 	.globl _SMB0CF
                                    366 	.globl _SMB0CN
                                    367 	.globl _P1MASK
                                    368 	.globl _ADC0H
                                    369 	.globl _ADC0L
                                    370 	.globl _ADC0CF
                                    371 	.globl _ADC0MX
                                    372 	.globl _ADC0AC
                                    373 	.globl _IREF0CN
                                    374 	.globl _IP
                                    375 	.globl _FLKEY
                                    376 	.globl _PMU0FL
                                    377 	.globl _PMU0CF
                                    378 	.globl _PMU0MD
                                    379 	.globl _OSCICN
                                    380 	.globl _OSCXCN
                                    381 	.globl _P3
                                    382 	.globl _EMI0TC
                                    383 	.globl _RTC0KEY
                                    384 	.globl _RTC0DAT
                                    385 	.globl _RTC0ADR
                                    386 	.globl _EMI0CF
                                    387 	.globl _EMI0CN
                                    388 	.globl _CLKSEL
                                    389 	.globl _IE
                                    390 	.globl _SFRPAGE
                                    391 	.globl _P2MDOUT
                                    392 	.globl _P1MDOUT
                                    393 	.globl _P0MDOUT
                                    394 	.globl _SPI0DAT
                                    395 	.globl _SPI0CKR
                                    396 	.globl _SPI0CFG
                                    397 	.globl _P2
                                    398 	.globl _CPT0MX
                                    399 	.globl _CPT1MX
                                    400 	.globl _CPT0MD
                                    401 	.globl _CPT1MD
                                    402 	.globl _CPT0CN
                                    403 	.globl _CPT1CN
                                    404 	.globl _SBUF0
                                    405 	.globl _SCON0
                                    406 	.globl _TMR3H
                                    407 	.globl _TMR3L
                                    408 	.globl _TMR3RLH
                                    409 	.globl _TMR3RLL
                                    410 	.globl _TMR3CN
                                    411 	.globl _P1
                                    412 	.globl _PSCTL
                                    413 	.globl _CKCON
                                    414 	.globl _TH1
                                    415 	.globl _TH0
                                    416 	.globl _TL1
                                    417 	.globl _TL0
                                    418 	.globl _TMOD
                                    419 	.globl _TCON
                                    420 	.globl _PCON
                                    421 	.globl _SFRLAST
                                    422 	.globl _SFRNEXT
                                    423 	.globl _PSBANK
                                    424 	.globl _DPH
                                    425 	.globl _DPL
                                    426 	.globl _SP
                                    427 	.globl _P0
                                    428 	.globl _test_display
                                    429 	.globl _pbuf
                                    430 	.globl _trailer
                                    431 	.globl _lbt_rssi
                                    432 	.globl _duty_cycle_offset
                                    433 	.globl _duty_cycle
                                    434 	.globl _transmit_wait
                                    435 	.globl __canary
                                    436 	.globl _tdm_show_rssi
                                    437 	.globl _tdm_change_phase
                                    438 	.globl _tdm_remote_at
                                    439 	.globl _tdm_serial_loop
                                    440 	.globl _tdm_init
                                    441 	.globl _tdm_report_timing
                                    442 ;--------------------------------------------------------
                                    443 ; special function registers
                                    444 ;--------------------------------------------------------
                                    445 	.area RSEG    (ABS,DATA)
      000000                        446 	.org 0x0000
                           000080   447 _P0	=	0x0080
                           000081   448 _SP	=	0x0081
                           000082   449 _DPL	=	0x0082
                           000083   450 _DPH	=	0x0083
                           000084   451 _PSBANK	=	0x0084
                           000085   452 _SFRNEXT	=	0x0085
                           000086   453 _SFRLAST	=	0x0086
                           000087   454 _PCON	=	0x0087
                           000088   455 _TCON	=	0x0088
                           000089   456 _TMOD	=	0x0089
                           00008A   457 _TL0	=	0x008a
                           00008B   458 _TL1	=	0x008b
                           00008C   459 _TH0	=	0x008c
                           00008D   460 _TH1	=	0x008d
                           00008E   461 _CKCON	=	0x008e
                           00008F   462 _PSCTL	=	0x008f
                           000090   463 _P1	=	0x0090
                           000091   464 _TMR3CN	=	0x0091
                           000092   465 _TMR3RLL	=	0x0092
                           000093   466 _TMR3RLH	=	0x0093
                           000094   467 _TMR3L	=	0x0094
                           000095   468 _TMR3H	=	0x0095
                           000098   469 _SCON0	=	0x0098
                           000099   470 _SBUF0	=	0x0099
                           00009A   471 _CPT1CN	=	0x009a
                           00009B   472 _CPT0CN	=	0x009b
                           00009C   473 _CPT1MD	=	0x009c
                           00009D   474 _CPT0MD	=	0x009d
                           00009E   475 _CPT1MX	=	0x009e
                           00009F   476 _CPT0MX	=	0x009f
                           0000A0   477 _P2	=	0x00a0
                           0000A1   478 _SPI0CFG	=	0x00a1
                           0000A2   479 _SPI0CKR	=	0x00a2
                           0000A3   480 _SPI0DAT	=	0x00a3
                           0000A4   481 _P0MDOUT	=	0x00a4
                           0000A5   482 _P1MDOUT	=	0x00a5
                           0000A6   483 _P2MDOUT	=	0x00a6
                           0000A7   484 _SFRPAGE	=	0x00a7
                           0000A8   485 _IE	=	0x00a8
                           0000A9   486 _CLKSEL	=	0x00a9
                           0000AA   487 _EMI0CN	=	0x00aa
                           0000AB   488 _EMI0CF	=	0x00ab
                           0000AC   489 _RTC0ADR	=	0x00ac
                           0000AD   490 _RTC0DAT	=	0x00ad
                           0000AE   491 _RTC0KEY	=	0x00ae
                           0000AF   492 _EMI0TC	=	0x00af
                           0000B0   493 _P3	=	0x00b0
                           0000B1   494 _OSCXCN	=	0x00b1
                           0000B2   495 _OSCICN	=	0x00b2
                           0000B3   496 _PMU0MD	=	0x00b3
                           0000B5   497 _PMU0CF	=	0x00b5
                           0000B6   498 _PMU0FL	=	0x00b6
                           0000B7   499 _FLKEY	=	0x00b7
                           0000B8   500 _IP	=	0x00b8
                           0000B9   501 _IREF0CN	=	0x00b9
                           0000BA   502 _ADC0AC	=	0x00ba
                           0000BB   503 _ADC0MX	=	0x00bb
                           0000BC   504 _ADC0CF	=	0x00bc
                           0000BD   505 _ADC0L	=	0x00bd
                           0000BE   506 _ADC0H	=	0x00be
                           0000BF   507 _P1MASK	=	0x00bf
                           0000C0   508 _SMB0CN	=	0x00c0
                           0000C1   509 _SMB0CF	=	0x00c1
                           0000C2   510 _SMB0DAT	=	0x00c2
                           0000C3   511 _ADC0GTL	=	0x00c3
                           0000C4   512 _ADC0GTH	=	0x00c4
                           0000C5   513 _ADC0LTL	=	0x00c5
                           0000C6   514 _ADC0LTH	=	0x00c6
                           0000C7   515 _P0MASK	=	0x00c7
                           0000C8   516 _TMR2CN	=	0x00c8
                           0000C9   517 _REG0CN	=	0x00c9
                           0000CA   518 _TMR2RLL	=	0x00ca
                           0000CB   519 _TMR2RLH	=	0x00cb
                           0000CC   520 _TMR2L	=	0x00cc
                           0000CD   521 _TMR2H	=	0x00cd
                           0000CE   522 _PCA0CPM5	=	0x00ce
                           0000CF   523 _P1MAT	=	0x00cf
                           0000D0   524 _PSW	=	0x00d0
                           0000D1   525 _REF0CN	=	0x00d1
                           0000D2   526 _PCA0CPL5	=	0x00d2
                           0000D3   527 _PCA0CPH5	=	0x00d3
                           0000D4   528 _P0SKIP	=	0x00d4
                           0000D5   529 _P1SKIP	=	0x00d5
                           0000D6   530 _P2SKIP	=	0x00d6
                           0000D7   531 _P0MAT	=	0x00d7
                           0000D8   532 _PCA0CN	=	0x00d8
                           0000D9   533 _PCA0MD	=	0x00d9
                           0000DA   534 _PCA0CPM0	=	0x00da
                           0000DB   535 _PCA0CPM1	=	0x00db
                           0000DC   536 _PCA0CPM2	=	0x00dc
                           0000DD   537 _PCA0CPM3	=	0x00dd
                           0000DE   538 _PCA0CPM4	=	0x00de
                           0000DF   539 _PCA0PWM	=	0x00df
                           0000E0   540 _ACC	=	0x00e0
                           0000E1   541 _XBR0	=	0x00e1
                           0000E2   542 _XBR1	=	0x00e2
                           0000E3   543 _XBR2	=	0x00e3
                           0000E4   544 _IT01CF	=	0x00e4
                           0000E5   545 _FLWR	=	0x00e5
                           0000E6   546 _EIE1	=	0x00e6
                           0000E7   547 _EIE2	=	0x00e7
                           0000E8   548 _ADC0CN	=	0x00e8
                           0000E9   549 _PCA0CPL1	=	0x00e9
                           0000EA   550 _PCA0CPH1	=	0x00ea
                           0000EB   551 _PCA0CPL2	=	0x00eb
                           0000EC   552 _PCA0CPH2	=	0x00ec
                           0000ED   553 _PCA0CPL3	=	0x00ed
                           0000EE   554 _PCA0CPH3	=	0x00ee
                           0000EF   555 _RSTSRC	=	0x00ef
                           0000F0   556 _B	=	0x00f0
                           0000F1   557 _P0MDIN	=	0x00f1
                           0000F2   558 _P1MDIN	=	0x00f2
                           0000F3   559 _P2MDIN	=	0x00f3
                           0000F4   560 _SMB0ADR	=	0x00f4
                           0000F5   561 _SMB0ADM	=	0x00f5
                           0000F6   562 _EIP1	=	0x00f6
                           0000F7   563 _EIP2	=	0x00f7
                           0000F8   564 _SPI0CN	=	0x00f8
                           0000F9   565 _PCA0L	=	0x00f9
                           0000FA   566 _PCA0H	=	0x00fa
                           0000FB   567 _PCA0CPL0	=	0x00fb
                           0000FC   568 _PCA0CPH0	=	0x00fc
                           0000FD   569 _PCA0CPL4	=	0x00fd
                           0000FE   570 _PCA0CPH4	=	0x00fe
                           0000FF   571 _VDM0CN	=	0x00ff
                           000089   572 _LCD0D0	=	0x0089
                           00008A   573 _LCD0D1	=	0x008a
                           00008B   574 _LCD0D2	=	0x008b
                           00008C   575 _LCD0D3	=	0x008c
                           00008D   576 _LCD0D4	=	0x008d
                           00008E   577 _LCD0D5	=	0x008e
                           000091   578 _LCD0D6	=	0x0091
                           000092   579 _LCD0D7	=	0x0092
                           000093   580 _LCD0D8	=	0x0093
                           000094   581 _LCD0D9	=	0x0094
                           000095   582 _LCD0DA	=	0x0095
                           000096   583 _LCD0DB	=	0x0096
                           000097   584 _LCD0DC	=	0x0097
                           000099   585 _LCD0DD	=	0x0099
                           00009A   586 _LCD0DE	=	0x009a
                           00009B   587 _LCD0DF	=	0x009b
                           00009C   588 _LCD0CNTRST	=	0x009c
                           00009D   589 _LCD0CN	=	0x009d
                           00009E   590 _LCD0BLINK	=	0x009e
                           00009F   591 _LCD0TOGR	=	0x009f
                           0000A1   592 _SPI1CFG	=	0x00a1
                           0000A2   593 _SPI1CKR	=	0x00a2
                           0000A3   594 _SPI1DAT	=	0x00a3
                           0000A4   595 _LCD0PWR	=	0x00a4
                           0000A5   596 _LCD0CF	=	0x00a5
                           0000A6   597 _LCD0VBMCN	=	0x00a6
                           0000A9   598 _LCD0CLKDIVL	=	0x00a9
                           0000AA   599 _LCD0CLKDIVH	=	0x00aa
                           0000AB   600 _LCD0MSCN	=	0x00ab
                           0000AC   601 _LCD0MSCF	=	0x00ac
                           0000AD   602 _LCD0CHPCF	=	0x00ad
                           0000AE   603 _LCD0CHPMD	=	0x00ae
                           0000AF   604 _LCD0VBMCF	=	0x00af
                           0000B1   605 _DC0CN	=	0x00b1
                           0000B2   606 _DC0CF	=	0x00b2
                           0000B3   607 _DC0MD	=	0x00b3
                           0000B5   608 _LCD0CHPCN	=	0x00b5
                           0000B6   609 _LCD0BUFMD	=	0x00b6
                           0000B9   610 _CRC1IN	=	0x00b9
                           0000BA   611 _CRC1OUTL	=	0x00ba
                           0000BB   612 _CRC1OUTH	=	0x00bb
                           0000BC   613 _CRC1POLL	=	0x00bc
                           0000BD   614 _CRC1POLH	=	0x00bd
                           0000BE   615 _CRC1CN	=	0x00be
                           0000C1   616 _PC0STAT	=	0x00c1
                           0000C2   617 _ENC0L	=	0x00c2
                           0000C3   618 _ENC0M	=	0x00c3
                           0000C4   619 _ENC0H	=	0x00c4
                           0000C5   620 _ENC0CN	=	0x00c5
                           0000C6   621 _VREGINSDL	=	0x00c6
                           0000C7   622 _VREGINSDH	=	0x00c7
                           0000C9   623 _DMA0NCF	=	0x00c9
                           0000CA   624 _DMA0NBAL	=	0x00ca
                           0000CB   625 _DMA0NBAH	=	0x00cb
                           0000CC   626 _DMA0NAOL	=	0x00cc
                           0000CD   627 _DMA0NAOH	=	0x00cd
                           0000CE   628 _DMA0NSZL	=	0x00ce
                           0000CF   629 _DMA0NSZH	=	0x00cf
                           0000D1   630 _DMA0SEL	=	0x00d1
                           0000D2   631 _DMA0EN	=	0x00d2
                           0000D3   632 _DMA0INT	=	0x00d3
                           0000D4   633 _DMA0MINT	=	0x00d4
                           0000D5   634 _DMA0BUSY	=	0x00d5
                           0000D6   635 _DMA0NMD	=	0x00d6
                           0000D7   636 _PC0PCF	=	0x00d7
                           0000D9   637 _PC0MD	=	0x00d9
                           0000DA   638 _PC0CTR0L	=	0x00da
                           0000DB   639 _PC0CTR0M	=	0x00db
                           0000DC   640 _PC0CTR0H	=	0x00dc
                           0000DD   641 _PC0CTR1L	=	0x00dd
                           0000DE   642 _PC0CTR1M	=	0x00de
                           0000DF   643 _PC0CTR1H	=	0x00df
                           0000E1   644 _PC0CMP0L	=	0x00e1
                           0000E2   645 _PC0CMP0M	=	0x00e2
                           0000E3   646 _PC0CMP0H	=	0x00e3
                           0000E4   647 _PC0TH	=	0x00e4
                           0000E9   648 _AES0BCFG	=	0x00e9
                           0000EA   649 _AES0DCFG	=	0x00ea
                           0000EB   650 _AES0BIN	=	0x00eb
                           0000EC   651 _AES0XIN	=	0x00ec
                           0000ED   652 _AES0KIN	=	0x00ed
                           0000EE   653 _AES0DBA	=	0x00ee
                           0000EF   654 _AES0KBA	=	0x00ef
                           0000F1   655 _PC0CMP1L	=	0x00f1
                           0000F2   656 _PC0CMP1M	=	0x00f2
                           0000F3   657 _PC0CMP1H	=	0x00f3
                           0000F4   658 _PC0HIST	=	0x00f4
                           0000F5   659 _AES0YOUT	=	0x00f5
                           0000F8   660 _SPI1CN	=	0x00f8
                           0000F9   661 _PC0DCL	=	0x00f9
                           0000FA   662 _PC0DCH	=	0x00fa
                           0000FB   663 _PC0INT0	=	0x00fb
                           0000FC   664 _PC0INT1	=	0x00fc
                           0000FD   665 _DC0RDY	=	0x00fd
                           00008E   666 _SFRPGCN	=	0x008e
                           000091   667 _CRC0DAT	=	0x0091
                           000092   668 _CRC0CN	=	0x0092
                           000093   669 _CRC0IN	=	0x0093
                           000094   670 _CRC0FLIP	=	0x0094
                           000096   671 _CRC0AUTO	=	0x0096
                           000097   672 _CRC0CNT	=	0x0097
                           00009C   673 _LCD0BUFCN	=	0x009c
                           0000A1   674 _P3DRV	=	0x00a1
                           0000A2   675 _P4DRV	=	0x00a2
                           0000A3   676 _P5DRV	=	0x00a3
                           0000A4   677 _P0DRV	=	0x00a4
                           0000A5   678 _P1DRV	=	0x00a5
                           0000A6   679 _P2DRV	=	0x00a6
                           0000AA   680 _P6DRV	=	0x00aa
                           0000AB   681 _P7DRV	=	0x00ab
                           0000AC   682 _LCD0BUFCF	=	0x00ac
                           0000B1   683 _P3MDOUT	=	0x00b1
                           0000B2   684 _OSCIFL	=	0x00b2
                           0000B3   685 _OSCICL	=	0x00b3
                           0000B6   686 _FLSCL	=	0x00b6
                           0000B9   687 _IREF0CF	=	0x00b9
                           0000BB   688 _ADC0PWR	=	0x00bb
                           0000BC   689 _ADC0TK	=	0x00bc
                           0000BD   690 _TOFFL	=	0x00bd
                           0000BE   691 _TOFFH	=	0x00be
                           0000D9   692 _P4	=	0x00d9
                           0000DA   693 _P5	=	0x00da
                           0000DB   694 _P6	=	0x00db
                           0000DC   695 _P7	=	0x00dc
                           0000E9   696 _HWID	=	0x00e9
                           0000EA   697 _REVID	=	0x00ea
                           0000EB   698 _DEVICEID	=	0x00eb
                           0000F1   699 _P3MDIN	=	0x00f1
                           0000F2   700 _P4MDIN	=	0x00f2
                           0000F3   701 _P5MDIN	=	0x00f3
                           0000F4   702 _P6MDIN	=	0x00f4
                           0000F5   703 _PCLKACT	=	0x00f5
                           0000F9   704 _P4MDOUT	=	0x00f9
                           0000FA   705 _P5MDOUT	=	0x00fa
                           0000FB   706 _P6MDOUT	=	0x00fb
                           0000FC   707 _P7MDOUT	=	0x00fc
                           0000FD   708 _CLKMODE	=	0x00fd
                           0000FE   709 _PCLKEN	=	0x00fe
                           008382   710 _DP	=	0x8382
                           008685   711 _TOFF	=	0x8685
                           009392   712 _TMR3RL	=	0x9392
                           009594   713 _TMR3	=	0x9594
                           00BEBD   714 _ADC0	=	0xbebd
                           00C4C3   715 _ADC0GT	=	0xc4c3
                           00C6C5   716 _ADC0LT	=	0xc6c5
                           00CBCA   717 _TMR2RL	=	0xcbca
                           00CDCC   718 _TMR2	=	0xcdcc
                           00D3D2   719 _PCA0CP5	=	0xd3d2
                           00EAE9   720 _PCA0CP1	=	0xeae9
                           00ECEB   721 _PCA0CP2	=	0xeceb
                           00EEED   722 _PCA0CP3	=	0xeeed
                           00FAF9   723 _PCA0	=	0xfaf9
                           00FCFB   724 _PCA0CP0	=	0xfcfb
                           00FEFD   725 _PCA0CP4	=	0xfefd
                           0000AA   726 __XPAGE	=	0x00aa
                                    727 ;--------------------------------------------------------
                                    728 ; special function bits
                                    729 ;--------------------------------------------------------
                                    730 	.area RSEG    (ABS,DATA)
      000000                        731 	.org 0x0000
                           00008F   732 _TF1	=	0x008f
                           00008E   733 _TR1	=	0x008e
                           00008D   734 _TF0	=	0x008d
                           00008C   735 _TR0	=	0x008c
                           00008B   736 _IE1	=	0x008b
                           00008A   737 _IT1	=	0x008a
                           000089   738 _IE0	=	0x0089
                           000088   739 _IT0	=	0x0088
                           00009F   740 _S0MODE	=	0x009f
                           00009D   741 _MCE0	=	0x009d
                           00009C   742 _REN0	=	0x009c
                           00009B   743 _TB80	=	0x009b
                           00009A   744 _RB80	=	0x009a
                           000099   745 _TI0	=	0x0099
                           000098   746 _RI0	=	0x0098
                           0000AF   747 _EA	=	0x00af
                           0000AE   748 _ESPI0	=	0x00ae
                           0000AD   749 _ET2	=	0x00ad
                           0000AC   750 _ES0	=	0x00ac
                           0000AB   751 _ET1	=	0x00ab
                           0000AA   752 _EX1	=	0x00aa
                           0000A9   753 _ET0	=	0x00a9
                           0000A8   754 _EX0	=	0x00a8
                           0000BE   755 _PSPI0	=	0x00be
                           0000BD   756 _PT2	=	0x00bd
                           0000BC   757 _PS0	=	0x00bc
                           0000BB   758 _PT1	=	0x00bb
                           0000BA   759 _PX1	=	0x00ba
                           0000B9   760 _PT0	=	0x00b9
                           0000B8   761 _PX0	=	0x00b8
                           0000C7   762 _MASTER	=	0x00c7
                           0000C6   763 _TXMODE	=	0x00c6
                           0000C5   764 _STA	=	0x00c5
                           0000C4   765 _STO	=	0x00c4
                           0000C3   766 _ACKRQ	=	0x00c3
                           0000C2   767 _ARBLOST	=	0x00c2
                           0000C1   768 _ACK	=	0x00c1
                           0000C0   769 _SI	=	0x00c0
                           0000CF   770 _TF2H	=	0x00cf
                           0000CE   771 _TF2L	=	0x00ce
                           0000CD   772 _TF2LEN	=	0x00cd
                           0000CC   773 _TF2CEN	=	0x00cc
                           0000CB   774 _T2SPLIT	=	0x00cb
                           0000CA   775 _TR2	=	0x00ca
                           0000C9   776 _T2RCLK	=	0x00c9
                           0000C8   777 _T2XCLK	=	0x00c8
                           0000D7   778 _CY	=	0x00d7
                           0000D6   779 _AC	=	0x00d6
                           0000D5   780 _F0	=	0x00d5
                           0000D4   781 _RS1	=	0x00d4
                           0000D3   782 _RS0	=	0x00d3
                           0000D2   783 _OV	=	0x00d2
                           0000D1   784 _F1	=	0x00d1
                           0000D0   785 _P	=	0x00d0
                           0000DF   786 _CF	=	0x00df
                           0000DE   787 _CR	=	0x00de
                           0000DD   788 _CCF5	=	0x00dd
                           0000DC   789 _CCF4	=	0x00dc
                           0000DB   790 _CCF3	=	0x00db
                           0000DA   791 _CCF2	=	0x00da
                           0000D9   792 _CCF1	=	0x00d9
                           0000D8   793 _CCF0	=	0x00d8
                           0000EF   794 _AD0EN	=	0x00ef
                           0000EE   795 _BURSTEN	=	0x00ee
                           0000ED   796 _AD0INT	=	0x00ed
                           0000EC   797 _AD0BUSY	=	0x00ec
                           0000EB   798 _AD0WINT	=	0x00eb
                           0000EA   799 _AD0CM2	=	0x00ea
                           0000E9   800 _AD0CM1	=	0x00e9
                           0000E8   801 _AD0CM0	=	0x00e8
                           0000FF   802 _SPIF0	=	0x00ff
                           0000FE   803 _WCOL0	=	0x00fe
                           0000FD   804 _MODF0	=	0x00fd
                           0000FC   805 _RXOVRN0	=	0x00fc
                           0000FB   806 _NSS0MD1	=	0x00fb
                           0000FA   807 _NSS0MD0	=	0x00fa
                           0000F9   808 _TXBMT0	=	0x00f9
                           0000F8   809 _SPI0EN	=	0x00f8
                           0000FF   810 _SPIF1	=	0x00ff
                           0000FE   811 _WCOL1	=	0x00fe
                           0000FD   812 _MODF1	=	0x00fd
                           0000FC   813 _RXOVRN1	=	0x00fc
                           0000FB   814 _NSS1MD1	=	0x00fb
                           0000FA   815 _NSS1MD0	=	0x00fa
                           0000F9   816 _TXBMT1	=	0x00f9
                           0000F8   817 _SPI1EN	=	0x00f8
                           0000B6   818 _LED_RED	=	0x00b6
                           0000B7   819 _LED_GREEN	=	0x00b7
                           000082   820 _PIN_CONFIG	=	0x0082
                           000083   821 _PIN_ENABLE	=	0x0083
                           0000A5   822 _PA_ENABLE	=	0x00a5
                           000081   823 _IRQ	=	0x0081
                           0000A3   824 _NSS1	=	0x00a3
                                    825 ;--------------------------------------------------------
                                    826 ; overlayable register banks
                                    827 ;--------------------------------------------------------
                                    828 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        829 	.ds 8
                                    830 ;--------------------------------------------------------
                                    831 ; internal ram data
                                    832 ;--------------------------------------------------------
                                    833 	.area DSEG    (DATA)
      000000                        834 _tdm_show_rssi_sloc0_1_0:
      000000                        835 	.ds 2
      000002                        836 _tdm_show_rssi_sloc1_1_0:
      000002                        837 	.ds 2
      000004                        838 _tdm_show_rssi_sloc2_1_0:
      000004                        839 	.ds 2
      000006                        840 _tdm_show_rssi_sloc3_1_0:
      000006                        841 	.ds 2
      000008                        842 _tdm_show_rssi_sloc4_1_0:
      000008                        843 	.ds 2
      00000A                        844 _tdm_show_rssi_sloc5_1_0:
      00000A                        845 	.ds 2
      00000C                        846 _sync_tx_windows_old_state_1_171:
      00000C                        847 	.ds 1
      00000D                        848 _tdm_state_update_sloc0_1_0:
      00000D                        849 	.ds 2
      00000F                        850 _tdm_state_update_sloc1_1_0:
      00000F                        851 	.ds 4
      000013                        852 _tdm_state_update_sloc2_1_0:
      000013                        853 	.ds 4
      000017                        854 _tdm_init_sloc0_1_0:
      000017                        855 	.ds 4
                                    856 ;--------------------------------------------------------
                                    857 ; overlayable items in internal ram 
                                    858 ;--------------------------------------------------------
                                    859 ;--------------------------------------------------------
                                    860 ; indirectly addressable internal ram data
                                    861 ;--------------------------------------------------------
                                    862 	.area ISEG    (DATA)
                           0000FF   863 __canary	=	0x00ff
                                    864 ;--------------------------------------------------------
                                    865 ; absolute internal ram data
                                    866 ;--------------------------------------------------------
                                    867 	.area IABS    (ABS,DATA)
                                    868 	.area IABS    (ABS,DATA)
                                    869 ;--------------------------------------------------------
                                    870 ; bit data
                                    871 ;--------------------------------------------------------
                                    872 	.area BSEG    (BIT)
      000000                        873 _bonus_transmit:
      000000                        874 	.ds 1
      000001                        875 _transmit_yield:
      000001                        876 	.ds 1
      000002                        877 _blink_state:
      000002                        878 	.ds 1
      000003                        879 _received_packet:
      000003                        880 	.ds 1
      000004                        881 _duty_cycle_wait:
      000004                        882 	.ds 1
      000005                        883 _send_statistics:
      000005                        884 	.ds 1
      000006                        885 _send_at_command:
      000006                        886 	.ds 1
      000007                        887 _sync_tx_windows_sloc0_1_0:
      000007                        888 	.ds 1
      000008                        889 _tdm_state_update_sloc3_1_0:
      000008                        890 	.ds 1
      000009                        891 _tdm_serial_loop_sloc0_1_0:
      000009                        892 	.ds 1
                                    893 ;--------------------------------------------------------
                                    894 ; paged external ram data
                                    895 ;--------------------------------------------------------
                                    896 	.area PSEG    (PAG,XDATA)
      000000                        897 _tdm_state:
      000000                        898 	.ds 1
      000001                        899 _tdm_state_remaining:
      000001                        900 	.ds 2
      000003                        901 _tx_window_width:
      000003                        902 	.ds 2
      000005                        903 _max_data_packet_length:
      000005                        904 	.ds 1
      000006                        905 _silence_period:
      000006                        906 	.ds 2
      000008                        907 _packet_latency:
      000008                        908 	.ds 2
      00000A                        909 _ticks_per_byte:
      00000A                        910 	.ds 2
      00000C                        911 _transmit_wait::
      00000C                        912 	.ds 2
      00000E                        913 _duty_cycle::
      00000E                        914 	.ds 1
      00000F                        915 _average_duty_cycle:
      00000F                        916 	.ds 4
      000013                        917 _duty_cycle_offset::
      000013                        918 	.ds 1
      000014                        919 _transmitted_ticks:
      000014                        920 	.ds 2
      000016                        921 _lbt_rssi::
      000016                        922 	.ds 1
      000017                        923 _lbt_listen_time:
      000017                        924 	.ds 2
      000019                        925 _lbt_min_time:
      000019                        926 	.ds 2
      00001B                        927 _lbt_rand:
      00001B                        928 	.ds 2
      00001D                        929 _trailer::
      00001D                        930 	.ds 4
      000021                        931 _remote_at_cmd:
      000021                        932 	.ds 70
      000067                        933 _sync_tx_windows_delta_2_178:
      000067                        934 	.ds 2
      000069                        935 _tdm_serial_loop_len_1_222:
      000069                        936 	.ds 1
      00006A                        937 _tdm_serial_loop_tdelta_1_222:
      00006A                        938 	.ds 2
      00006C                        939 _tdm_serial_loop_last_t_1_222:
      00006C                        940 	.ds 2
      00006E                        941 _tdm_serial_loop_last_link_update_1_222:
      00006E                        942 	.ds 2
                                    943 ;--------------------------------------------------------
                                    944 ; external ram data
                                    945 ;--------------------------------------------------------
                                    946 	.area XSEG    (XDATA)
      000000                        947 _pbuf::
      000000                        948 	.ds 252
      0000FC                        949 _test_display::
      0000FC                        950 	.ds 1
      0000FD                        951 _link_update_unlock_count_1_201:
      0000FD                        952 	.ds 1
      0000FE                        953 _link_update_temperature_count_1_201:
      0000FE                        954 	.ds 1
      0000FF                        955 _tdm_init_i_1_273:
      0000FF                        956 	.ds 2
      000101                        957 _tdm_init_window_width_1_273:
      000101                        958 	.ds 4
                                    959 ;--------------------------------------------------------
                                    960 ; absolute external ram data
                                    961 ;--------------------------------------------------------
                                    962 	.area XABS    (ABS,XDATA)
                                    963 ;--------------------------------------------------------
                                    964 ; external initialized ram data
                                    965 ;--------------------------------------------------------
                                    966 	.area XISEG   (XDATA)
                                    967 	.area HOME    (CODE)
                                    968 	.area GSINIT0 (CODE)
                                    969 	.area GSINIT1 (CODE)
                                    970 	.area GSINIT2 (CODE)
                                    971 	.area GSINIT3 (CODE)
                                    972 	.area GSINIT4 (CODE)
                                    973 	.area GSINIT5 (CODE)
                                    974 	.area GSINIT  (CODE)
                                    975 	.area GSFINAL (CODE)
                                    976 	.area CSEG    (CODE)
                                    977 ;--------------------------------------------------------
                                    978 ; global & static initialisations
                                    979 ;--------------------------------------------------------
                                    980 	.area HOME    (CODE)
                                    981 	.area GSINIT  (CODE)
                                    982 	.area GSFINAL (CODE)
                                    983 	.area GSINIT  (CODE)
                                    984 ;------------------------------------------------------------
                                    985 ;Allocation info for local variables in function 'link_update'
                                    986 ;------------------------------------------------------------
                                    987 ;old_remaining             Allocated to registers r6 r7 
                                    988 ;unlock_count              Allocated with name '_link_update_unlock_count_1_201'
                                    989 ;temperature_count         Allocated with name '_link_update_temperature_count_1_201'
                                    990 ;------------------------------------------------------------
                                    991 ;	radio/tdm.c:383: static uint8_t unlock_count = 10, temperature_count;
      000000 90r00rFD         [24]  992 	mov	dptr,#_link_update_unlock_count_1_201
      000003 74 0A            [12]  993 	mov	a,#0x0A
      000005 F0               [24]  994 	movx	@dptr,a
                                    995 ;--------------------------------------------------------
                                    996 ; Home
                                    997 ;--------------------------------------------------------
                                    998 	.area HOME    (CODE)
                                    999 	.area HOME    (CODE)
                                   1000 ;--------------------------------------------------------
                                   1001 ; code
                                   1002 ;--------------------------------------------------------
                                   1003 	.area CSEG    (CODE)
                                   1004 ;------------------------------------------------------------
                                   1005 ;Allocation info for local variables in function 'tdm_show_rssi'
                                   1006 ;------------------------------------------------------------
                                   1007 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                                   1008 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                                   1009 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                                   1010 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                                   1011 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                                   1012 ;sloc5                     Allocated with name '_tdm_show_rssi_sloc5_1_0'
                                   1013 ;------------------------------------------------------------
                                   1014 ;	radio/tdm.c:162: tdm_show_rssi(void)
                                   1015 ;	-----------------------------------------
                                   1016 ;	 function tdm_show_rssi
                                   1017 ;	-----------------------------------------
      000000                       1018 _tdm_show_rssi:
                           000007  1019 	ar7 = 0x07
                           000006  1020 	ar6 = 0x06
                           000005  1021 	ar5 = 0x05
                           000004  1022 	ar4 = 0x04
                           000003  1023 	ar3 = 0x03
                           000002  1024 	ar2 = 0x02
                           000001  1025 	ar1 = 0x01
                           000000  1026 	ar0 = 0x00
                                   1027 ;	radio/tdm.c:164: printf("L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u ",
      000000 78r02            [12] 1028 	mov	r0,#(_statistics + 0x0002)
      000002 E2               [24] 1029 	movx	a,@r0
      000003 FE               [12] 1030 	mov	r6,a
      000004 08               [12] 1031 	inc	r0
      000005 E2               [24] 1032 	movx	a,@r0
      000006 FF               [12] 1033 	mov	r7,a
      000007 78r01            [12] 1034 	mov	r0,#(_remote_statistics + 0x0001)
      000009 E2               [24] 1035 	movx	a,@r0
      00000A FD               [12] 1036 	mov	r5,a
      00000B 7C 00            [12] 1037 	mov	r4,#0x00
      00000D 78r01            [12] 1038 	mov	r0,#(_statistics + 0x0001)
      00000F E2               [24] 1039 	movx	a,@r0
      000010 FB               [12] 1040 	mov	r3,a
      000011 8B*00            [24] 1041 	mov	_tdm_show_rssi_sloc0_1_0,r3
                                   1042 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc0_1_0 + 1),#0x00
      000013 8C*01            [24] 1043 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),r4
      000015 78r00            [12] 1044 	mov	r0,#_remote_statistics
      000017 E2               [24] 1045 	movx	a,@r0
      000018 FB               [12] 1046 	mov	r3,a
      000019 8B*02            [24] 1047 	mov	_tdm_show_rssi_sloc1_1_0,r3
                                   1048 ;	1-genFromRTrack replaced	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
      00001B 8C*03            [24] 1049 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),r4
      00001D 78r00            [12] 1050 	mov	r0,#_statistics
      00001F E2               [24] 1051 	movx	a,@r0
      000020 FB               [12] 1052 	mov	r3,a
      000021 7A 00            [12] 1053 	mov	r2,#0x00
      000023 C0 06            [24] 1054 	push	ar6
      000025 C0 07            [24] 1055 	push	ar7
      000027 C0 05            [24] 1056 	push	ar5
      000029 C0 04            [24] 1057 	push	ar4
      00002B C0*00            [24] 1058 	push	_tdm_show_rssi_sloc0_1_0
      00002D C0*01            [24] 1059 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      00002F C0*02            [24] 1060 	push	_tdm_show_rssi_sloc1_1_0
      000031 C0*03            [24] 1061 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      000033 C0 03            [24] 1062 	push	ar3
      000035 C0 02            [24] 1063 	push	ar2
      000037 74r00            [12] 1064 	mov	a,#___str_0
      000039 C0 E0            [24] 1065 	push	acc
      00003B 74s00            [12] 1066 	mov	a,#(___str_0 >> 8)
      00003D C0 E0            [24] 1067 	push	acc
      00003F 74 80            [12] 1068 	mov	a,#0x80
      000041 C0 E0            [24] 1069 	push	acc
      000043 12r00r00         [24] 1070 	lcall	_printfl
      000046 E5 81            [12] 1071 	mov	a,sp
      000048 24 F3            [12] 1072 	add	a,#0xf3
      00004A F5 81            [12] 1073 	mov	sp,a
                                   1074 ;	radio/tdm.c:171: printf(" txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u crce=%u temp=%d dco=%u\n",
      00004C 78r13            [12] 1075 	mov	r0,#_duty_cycle_offset
      00004E E2               [24] 1076 	movx	a,@r0
      00004F FE               [12] 1077 	mov	r6,a
      000050 7F 00            [12] 1078 	mov	r7,#0x00
      000052 C0 07            [24] 1079 	push	ar7
      000054 C0 06            [24] 1080 	push	ar6
      000056 12r00r00         [24] 1081 	lcall	_radio_temperature
      000059 AC 82            [24] 1082 	mov	r4,dpl
      00005B AD 83            [24] 1083 	mov	r5,dph
      00005D D0 06            [24] 1084 	pop	ar6
      00005F D0 07            [24] 1085 	pop	ar7
      000061 78r0C            [12] 1086 	mov	r0,#(_errors + 0x000c)
      000063 E2               [24] 1087 	movx	a,@r0
      000064 F5*02            [12] 1088 	mov	_tdm_show_rssi_sloc1_1_0,a
      000066 08               [12] 1089 	inc	r0
      000067 E2               [24] 1090 	movx	a,@r0
      000068 F5*03            [12] 1091 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
      00006A 78r0A            [12] 1092 	mov	r0,#(_errors + 0x000a)
      00006C E2               [24] 1093 	movx	a,@r0
      00006D F5*00            [12] 1094 	mov	_tdm_show_rssi_sloc0_1_0,a
      00006F 08               [12] 1095 	inc	r0
      000070 E2               [24] 1096 	movx	a,@r0
      000071 F5*01            [12] 1097 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
      000073 78r08            [12] 1098 	mov	r0,#(_errors + 0x0008)
      000075 E2               [24] 1099 	movx	a,@r0
      000076 F5*04            [12] 1100 	mov	_tdm_show_rssi_sloc2_1_0,a
      000078 08               [12] 1101 	inc	r0
      000079 E2               [24] 1102 	movx	a,@r0
      00007A F5*05            [12] 1103 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
      00007C 78r06            [12] 1104 	mov	r0,#(_errors + 0x0006)
      00007E E2               [24] 1105 	movx	a,@r0
      00007F F5*06            [12] 1106 	mov	_tdm_show_rssi_sloc3_1_0,a
      000081 08               [12] 1107 	inc	r0
      000082 E2               [24] 1108 	movx	a,@r0
      000083 F5*07            [12] 1109 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
      000085 78r04            [12] 1110 	mov	r0,#(_errors + 0x0004)
      000087 E2               [24] 1111 	movx	a,@r0
      000088 F5*08            [12] 1112 	mov	_tdm_show_rssi_sloc4_1_0,a
      00008A 08               [12] 1113 	inc	r0
      00008B E2               [24] 1114 	movx	a,@r0
      00008C F5*09            [12] 1115 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
      00008E 78r00            [12] 1116 	mov	r0,#_errors
      000090 E2               [24] 1117 	movx	a,@r0
      000091 F5*0A            [12] 1118 	mov	_tdm_show_rssi_sloc5_1_0,a
      000093 08               [12] 1119 	inc	r0
      000094 E2               [24] 1120 	movx	a,@r0
      000095 F5*0B            [12] 1121 	mov	(_tdm_show_rssi_sloc5_1_0 + 1),a
      000097 78r02            [12] 1122 	mov	r0,#(_errors + 0x0002)
      000099 E2               [24] 1123 	movx	a,@r0
      00009A FA               [12] 1124 	mov	r2,a
      00009B 08               [12] 1125 	inc	r0
      00009C E2               [24] 1126 	movx	a,@r0
      00009D FB               [12] 1127 	mov	r3,a
      00009E C0 06            [24] 1128 	push	ar6
      0000A0 C0 07            [24] 1129 	push	ar7
      0000A2 C0 04            [24] 1130 	push	ar4
      0000A4 C0 05            [24] 1131 	push	ar5
      0000A6 C0*02            [24] 1132 	push	_tdm_show_rssi_sloc1_1_0
      0000A8 C0*03            [24] 1133 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
      0000AA C0*00            [24] 1134 	push	_tdm_show_rssi_sloc0_1_0
      0000AC C0*01            [24] 1135 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
      0000AE C0*04            [24] 1136 	push	_tdm_show_rssi_sloc2_1_0
      0000B0 C0*05            [24] 1137 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
      0000B2 C0*06            [24] 1138 	push	_tdm_show_rssi_sloc3_1_0
      0000B4 C0*07            [24] 1139 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
      0000B6 C0*08            [24] 1140 	push	_tdm_show_rssi_sloc4_1_0
      0000B8 C0*09            [24] 1141 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
      0000BA C0*0A            [24] 1142 	push	_tdm_show_rssi_sloc5_1_0
      0000BC C0*0B            [24] 1143 	push	(_tdm_show_rssi_sloc5_1_0 + 1)
      0000BE C0 02            [24] 1144 	push	ar2
      0000C0 C0 03            [24] 1145 	push	ar3
      0000C2 74r2C            [12] 1146 	mov	a,#___str_1
      0000C4 C0 E0            [24] 1147 	push	acc
      0000C6 74s00            [12] 1148 	mov	a,#(___str_1 >> 8)
      0000C8 C0 E0            [24] 1149 	push	acc
      0000CA 74 80            [12] 1150 	mov	a,#0x80
      0000CC C0 E0            [24] 1151 	push	acc
      0000CE 12r00r00         [24] 1152 	lcall	_printfl
      0000D1 E5 81            [12] 1153 	mov	a,sp
      0000D3 24 EB            [12] 1154 	add	a,#0xeb
      0000D5 F5 81            [12] 1155 	mov	sp,a
                                   1156 ;	radio/tdm.c:186: statistics.receive_count = 0;
      0000D7 78r02            [12] 1157 	mov	r0,#(_statistics + 0x0002)
      0000D9 E4               [12] 1158 	clr	a
      0000DA F2               [24] 1159 	movx	@r0,a
      0000DB 08               [12] 1160 	inc	r0
      0000DC F2               [24] 1161 	movx	@r0,a
      0000DD 22               [24] 1162 	ret
                                   1163 ;------------------------------------------------------------
                                   1164 ;Allocation info for local variables in function 'display_test_output'
                                   1165 ;------------------------------------------------------------
                                   1166 ;	radio/tdm.c:192: display_test_output(void)
                                   1167 ;	-----------------------------------------
                                   1168 ;	 function display_test_output
                                   1169 ;	-----------------------------------------
      0000DE                       1170 _display_test_output:
                                   1171 ;	radio/tdm.c:194: if (test_display & AT_TEST_RSSI) {
      0000DE 90r00rFC         [24] 1172 	mov	dptr,#_test_display
      0000E1 E0               [24] 1173 	movx	a,@dptr
      0000E2 FF               [12] 1174 	mov	r7,a
      0000E3 30 E0 03         [24] 1175 	jnb	acc.0,00103$
                                   1176 ;	radio/tdm.c:195: tdm_show_rssi();
      0000E6 02r00r00         [24] 1177 	ljmp	_tdm_show_rssi
      0000E9                       1178 00103$:
      0000E9 22               [24] 1179 	ret
                                   1180 ;------------------------------------------------------------
                                   1181 ;Allocation info for local variables in function 'flight_time_estimate'
                                   1182 ;------------------------------------------------------------
                                   1183 ;	radio/tdm.c:205: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                                   1184 ;	-----------------------------------------
                                   1185 ;	 function flight_time_estimate
                                   1186 ;	-----------------------------------------
      0000EA                       1187 _flight_time_estimate:
      0000EA AF 82            [24] 1188 	mov	r7,dpl
                                   1189 ;	radio/tdm.c:207: return packet_latency + (packet_len * ticks_per_byte);
      0000EC 7E 00            [12] 1190 	mov	r6,#0x00
      0000EE 78r0A            [12] 1191 	mov	r0,#_ticks_per_byte
      0000F0 90r00r00         [24] 1192 	mov	dptr,#__mulint_PARM_2
      0000F3 E2               [24] 1193 	movx	a,@r0
      0000F4 F0               [24] 1194 	movx	@dptr,a
      0000F5 08               [12] 1195 	inc	r0
      0000F6 E2               [24] 1196 	movx	a,@r0
      0000F7 A3               [24] 1197 	inc	dptr
      0000F8 F0               [24] 1198 	movx	@dptr,a
      0000F9 8F 82            [24] 1199 	mov	dpl,r7
      0000FB 8E 83            [24] 1200 	mov	dph,r6
      0000FD 12r00r00         [24] 1201 	lcall	__mulint
      000100 AE 82            [24] 1202 	mov	r6,dpl
      000102 AF 83            [24] 1203 	mov	r7,dph
      000104 78r08            [12] 1204 	mov	r0,#_packet_latency
      000106 E2               [24] 1205 	movx	a,@r0
      000107 2E               [12] 1206 	add	a,r6
      000108 FE               [12] 1207 	mov	r6,a
      000109 08               [12] 1208 	inc	r0
      00010A E2               [24] 1209 	movx	a,@r0
      00010B 3F               [12] 1210 	addc	a,r7
      00010C 8E 82            [24] 1211 	mov	dpl,r6
      00010E F5 83            [12] 1212 	mov	dph,a
      000110 22               [24] 1213 	ret
                                   1214 ;------------------------------------------------------------
                                   1215 ;Allocation info for local variables in function 'sync_tx_windows'
                                   1216 ;------------------------------------------------------------
                                   1217 ;old_state                 Allocated with name '_sync_tx_windows_old_state_1_171'
                                   1218 ;------------------------------------------------------------
                                   1219 ;	radio/tdm.c:221: sync_tx_windows(__pdata uint8_t packet_length)
                                   1220 ;	-----------------------------------------
                                   1221 ;	 function sync_tx_windows
                                   1222 ;	-----------------------------------------
      000111                       1223 _sync_tx_windows:
      000111 AF 82            [24] 1224 	mov	r7,dpl
                                   1225 ;	radio/tdm.c:223: __data enum tdm_state old_state = tdm_state;
      000113 78r00            [12] 1226 	mov	r0,#_tdm_state
      000115 E2               [24] 1227 	movx	a,@r0
      000116 F5*0C            [12] 1228 	mov	_sync_tx_windows_old_state_1_171,a
                                   1229 ;	radio/tdm.c:224: __pdata uint16_t old_remaining = tdm_state_remaining;
      000118 78r01            [12] 1230 	mov	r0,#_tdm_state_remaining
      00011A E2               [24] 1231 	movx	a,@r0
      00011B FC               [12] 1232 	mov	r4,a
      00011C 08               [12] 1233 	inc	r0
      00011D E2               [24] 1234 	movx	a,@r0
      00011E FD               [12] 1235 	mov	r5,a
                                   1236 ;	radio/tdm.c:226: if (trailer.bonus) {
      00011F 78r1E            [12] 1237 	mov	r0,#(_trailer + 0x0001)
      000121 E2               [24] 1238 	movx	a,@r0
      000122 30 E6 46         [24] 1239 	jnb	acc.6,00109$
                                   1240 ;	radio/tdm.c:229: if (old_state == TDM_SILENCE1) {
      000125 74 01            [12] 1241 	mov	a,#0x01
      000127 B5*0C 10         [24] 1242 	cjne	a,_sync_tx_windows_old_state_1_171,00106$
                                   1243 ;	radio/tdm.c:235: tdm_state_remaining = silence_period;
      00012A 78r06            [12] 1244 	mov	r0,#_silence_period
      00012C E2               [24] 1245 	movx	a,@r0
      00012D FA               [12] 1246 	mov	r2,a
      00012E 08               [12] 1247 	inc	r0
      00012F E2               [24] 1248 	movx	a,@r0
      000130 FB               [12] 1249 	mov	r3,a
      000131 78r01            [12] 1250 	mov	r0,#_tdm_state_remaining
      000133 EA               [12] 1251 	mov	a,r2
      000134 F2               [24] 1252 	movx	@r0,a
      000135 08               [12] 1253 	inc	r0
      000136 EB               [12] 1254 	mov	a,r3
      000137 F2               [24] 1255 	movx	@r0,a
      000138 80 46            [24] 1256 	sjmp	00110$
      00013A                       1257 00106$:
                                   1258 ;	radio/tdm.c:236: } else if (old_state == TDM_RECEIVE || old_state == TDM_SILENCE2) {
      00013A 74 02            [12] 1259 	mov	a,#0x02
      00013C B5*0C 02         [24] 1260 	cjne	a,_sync_tx_windows_old_state_1_171,00151$
      00013F 80 05            [24] 1261 	sjmp	00101$
      000141                       1262 00151$:
      000141 74 03            [12] 1263 	mov	a,#0x03
      000143 B5*0C 0F         [24] 1264 	cjne	a,_sync_tx_windows_old_state_1_171,00102$
      000146                       1265 00101$:
                                   1266 ;	radio/tdm.c:241: tdm_state = TDM_SILENCE2;
      000146 78r00            [12] 1267 	mov	r0,#_tdm_state
      000148 74 03            [12] 1268 	mov	a,#0x03
      00014A F2               [24] 1269 	movx	@r0,a
                                   1270 ;	radio/tdm.c:242: tdm_state_remaining = 1;
      00014B 78r01            [12] 1271 	mov	r0,#_tdm_state_remaining
      00014D 74 01            [12] 1272 	mov	a,#0x01
      00014F F2               [24] 1273 	movx	@r0,a
      000150 08               [12] 1274 	inc	r0
      000151 E4               [12] 1275 	clr	a
      000152 F2               [24] 1276 	movx	@r0,a
      000153 80 2B            [24] 1277 	sjmp	00110$
      000155                       1278 00102$:
                                   1279 ;	radio/tdm.c:244: tdm_state = TDM_TRANSMIT;
      000155 78r00            [12] 1280 	mov	r0,#_tdm_state
      000157 E4               [12] 1281 	clr	a
      000158 F2               [24] 1282 	movx	@r0,a
                                   1283 ;	radio/tdm.c:245: tdm_state_remaining = trailer.window;
      000159 78r1D            [12] 1284 	mov	r0,#_trailer
      00015B E2               [24] 1285 	movx	a,@r0
      00015C FA               [12] 1286 	mov	r2,a
      00015D 08               [12] 1287 	inc	r0
      00015E E2               [24] 1288 	movx	a,@r0
      00015F 54 1F            [12] 1289 	anl	a,#0x1F
      000161 FB               [12] 1290 	mov	r3,a
      000162 78r01            [12] 1291 	mov	r0,#_tdm_state_remaining
      000164 EA               [12] 1292 	mov	a,r2
      000165 F2               [24] 1293 	movx	@r0,a
      000166 08               [12] 1294 	inc	r0
      000167 EB               [12] 1295 	mov	a,r3
      000168 F2               [24] 1296 	movx	@r0,a
      000169 80 15            [24] 1297 	sjmp	00110$
      00016B                       1298 00109$:
                                   1299 ;	radio/tdm.c:250: tdm_state = TDM_RECEIVE;
      00016B 78r00            [12] 1300 	mov	r0,#_tdm_state
      00016D 74 02            [12] 1301 	mov	a,#0x02
      00016F F2               [24] 1302 	movx	@r0,a
                                   1303 ;	radio/tdm.c:251: tdm_state_remaining = trailer.window;
      000170 78r1D            [12] 1304 	mov	r0,#_trailer
      000172 E2               [24] 1305 	movx	a,@r0
      000173 FA               [12] 1306 	mov	r2,a
      000174 08               [12] 1307 	inc	r0
      000175 E2               [24] 1308 	movx	a,@r0
      000176 54 1F            [12] 1309 	anl	a,#0x1F
      000178 FB               [12] 1310 	mov	r3,a
      000179 78r01            [12] 1311 	mov	r0,#_tdm_state_remaining
      00017B EA               [12] 1312 	mov	a,r2
      00017C F2               [24] 1313 	movx	@r0,a
      00017D 08               [12] 1314 	inc	r0
      00017E EB               [12] 1315 	mov	a,r3
      00017F F2               [24] 1316 	movx	@r0,a
      000180                       1317 00110$:
                                   1318 ;	radio/tdm.c:256: bonus_transmit = (tdm_state == TDM_RECEIVE && packet_length==0);
      000180 78r00            [12] 1319 	mov	r0,#_tdm_state
      000182 E2               [24] 1320 	movx	a,@r0
      000183 B4 02 03         [24] 1321 	cjne	a,#0x02,00121$
      000186 EF               [12] 1322 	mov	a,r7
      000187 60 04            [24] 1323 	jz	00122$
      000189                       1324 00121$:
      000189 C2*07            [12] 1325 	clr	_sync_tx_windows_sloc0_1_0
      00018B 80 02            [24] 1326 	sjmp	00123$
      00018D                       1327 00122$:
      00018D D2*07            [12] 1328 	setb	_sync_tx_windows_sloc0_1_0
      00018F                       1329 00123$:
      00018F A2*07            [12] 1330 	mov	c,_sync_tx_windows_sloc0_1_0
      000191 92*00            [24] 1331 	mov	_bonus_transmit,c
                                   1332 ;	radio/tdm.c:259: if (tdm_state != TDM_TRANSMIT) {
      000193 78r00            [12] 1333 	mov	r0,#_tdm_state
      000195 E2               [24] 1334 	movx	a,@r0
      000196 60 02            [24] 1335 	jz	00112$
                                   1336 ;	radio/tdm.c:260: transmit_yield = 0;
      000198 C2*01            [12] 1337 	clr	_transmit_yield
      00019A                       1338 00112$:
                                   1339 ;	radio/tdm.c:263: if (at_testmode & AT_TEST_TDM) {
      00019A 78r00            [12] 1340 	mov	r0,#_at_testmode
      00019C E2               [24] 1341 	movx	a,@r0
      00019D 54 02            [12] 1342 	anl	a,#0x02
      00019F 70 01            [24] 1343 	jnz	00158$
      0001A1 22               [24] 1344 	ret
      0001A2                       1345 00158$:
                                   1346 ;	radio/tdm.c:265: delta = old_remaining - tdm_state_remaining;
      0001A2 78r01            [12] 1347 	mov	r0,#_tdm_state_remaining
      0001A4 79r67            [12] 1348 	mov	r1,#_sync_tx_windows_delta_2_178
      0001A6 D3               [12] 1349 	setb	c
      0001A7 E2               [24] 1350 	movx	a,@r0
      0001A8 9C               [12] 1351 	subb	a,r4
      0001A9 F4               [12] 1352 	cpl	a
      0001AA B3               [12] 1353 	cpl	c
      0001AB F3               [24] 1354 	movx	@r1,a
      0001AC B3               [12] 1355 	cpl	c
      0001AD 08               [12] 1356 	inc	r0
      0001AE E2               [24] 1357 	movx	a,@r0
      0001AF 9D               [12] 1358 	subb	a,r5
      0001B0 F4               [12] 1359 	cpl	a
      0001B1 09               [12] 1360 	inc	r1
      0001B2 F3               [24] 1361 	movx	@r1,a
                                   1362 ;	radio/tdm.c:266: if (old_state != tdm_state ||
      0001B3 78r00            [12] 1363 	mov	r0,#_tdm_state
      0001B5 E2               [24] 1364 	movx	a,@r0
      0001B6 B5*0C 6E         [24] 1365 	cjne	a,_sync_tx_windows_old_state_1_171,00113$
                                   1366 ;	radio/tdm.c:267: delta > (int16_t)packet_latency/2 ||
      0001B9 C0 07            [24] 1367 	push	ar7
      0001BB 78r08            [12] 1368 	mov	r0,#_packet_latency
      0001BD E2               [24] 1369 	movx	a,@r0
      0001BE FA               [12] 1370 	mov	r2,a
      0001BF 08               [12] 1371 	inc	r0
      0001C0 E2               [24] 1372 	movx	a,@r0
      0001C1 FB               [12] 1373 	mov	r3,a
      0001C2 90r00r00         [24] 1374 	mov	dptr,#__divsint_PARM_2
      0001C5 74 02            [12] 1375 	mov	a,#0x02
      0001C7 F0               [24] 1376 	movx	@dptr,a
      0001C8 E4               [12] 1377 	clr	a
      0001C9 A3               [24] 1378 	inc	dptr
      0001CA F0               [24] 1379 	movx	@dptr,a
      0001CB 8A 82            [24] 1380 	mov	dpl,r2
      0001CD 8B 83            [24] 1381 	mov	dph,r3
      0001CF C0 03            [24] 1382 	push	ar3
      0001D1 C0 02            [24] 1383 	push	ar2
      0001D3 12r00r00         [24] 1384 	lcall	__divsint
      0001D6 AE 82            [24] 1385 	mov	r6,dpl
      0001D8 AF 83            [24] 1386 	mov	r7,dph
      0001DA D0 02            [24] 1387 	pop	ar2
      0001DC D0 03            [24] 1388 	pop	ar3
      0001DE 78r67            [12] 1389 	mov	r0,#_sync_tx_windows_delta_2_178
      0001E0 C3               [12] 1390 	clr	c
      0001E1 E2               [24] 1391 	movx	a,@r0
      0001E2 F5 F0            [12] 1392 	mov	b,a
      0001E4 EE               [12] 1393 	mov	a,r6
      0001E5 95 F0            [12] 1394 	subb	a,b
      0001E7 08               [12] 1395 	inc	r0
      0001E8 E2               [24] 1396 	movx	a,@r0
      0001E9 F5 F0            [12] 1397 	mov	b,a
      0001EB EF               [12] 1398 	mov	a,r7
      0001EC 64 80            [12] 1399 	xrl	a,#0x80
      0001EE 63 F0 80         [24] 1400 	xrl	b,#0x80
      0001F1 95 F0            [12] 1401 	subb	a,b
      0001F3 D0 07            [24] 1402 	pop	ar7
                                   1403 ;	radio/tdm.c:268: delta < -(int16_t)packet_latency/2) {
      0001F5 40 30            [24] 1404 	jc	00113$
      0001F7 E4               [12] 1405 	clr	a
      0001F8 9A               [12] 1406 	subb	a,r2
      0001F9 FA               [12] 1407 	mov	r2,a
      0001FA E4               [12] 1408 	clr	a
      0001FB 9B               [12] 1409 	subb	a,r3
      0001FC FB               [12] 1410 	mov	r3,a
      0001FD 90r00r00         [24] 1411 	mov	dptr,#__divsint_PARM_2
      000200 74 02            [12] 1412 	mov	a,#0x02
      000202 F0               [24] 1413 	movx	@dptr,a
      000203 E4               [12] 1414 	clr	a
      000204 A3               [24] 1415 	inc	dptr
      000205 F0               [24] 1416 	movx	@dptr,a
      000206 8A 82            [24] 1417 	mov	dpl,r2
      000208 8B 83            [24] 1418 	mov	dph,r3
      00020A C0 07            [24] 1419 	push	ar7
      00020C 12r00r00         [24] 1420 	lcall	__divsint
      00020F AB 82            [24] 1421 	mov	r3,dpl
      000211 AE 83            [24] 1422 	mov	r6,dph
      000213 D0 07            [24] 1423 	pop	ar7
      000215 78r67            [12] 1424 	mov	r0,#_sync_tx_windows_delta_2_178
      000217 C3               [12] 1425 	clr	c
      000218 E2               [24] 1426 	movx	a,@r0
      000219 9B               [12] 1427 	subb	a,r3
      00021A 08               [12] 1428 	inc	r0
      00021B E2               [24] 1429 	movx	a,@r0
      00021C 64 80            [12] 1430 	xrl	a,#0x80
      00021E 8E F0            [24] 1431 	mov	b,r6
      000220 63 F0 80         [24] 1432 	xrl	b,#0x80
      000223 95 F0            [12] 1433 	subb	a,b
      000225 50 4B            [24] 1434 	jnc	00119$
      000227                       1435 00113$:
                                   1436 ;	radio/tdm.c:269: printf("TDM: %u/%u len=%u ",
      000227 7E 00            [12] 1437 	mov	r6,#0x00
      000229 78r00            [12] 1438 	mov	r0,#_tdm_state
      00022B E2               [24] 1439 	movx	a,@r0
      00022C FA               [12] 1440 	mov	r2,a
      00022D 7B 00            [12] 1441 	mov	r3,#0x00
      00022F AC*0C            [24] 1442 	mov	r4,_sync_tx_windows_old_state_1_171
      000231 7D 00            [12] 1443 	mov	r5,#0x00
      000233 C0 07            [24] 1444 	push	ar7
      000235 C0 06            [24] 1445 	push	ar6
      000237 C0 02            [24] 1446 	push	ar2
      000239 C0 03            [24] 1447 	push	ar3
      00023B C0 04            [24] 1448 	push	ar4
      00023D C0 05            [24] 1449 	push	ar5
      00023F 74r6B            [12] 1450 	mov	a,#___str_2
      000241 C0 E0            [24] 1451 	push	acc
      000243 74s00            [12] 1452 	mov	a,#(___str_2 >> 8)
      000245 C0 E0            [24] 1453 	push	acc
      000247 74 80            [12] 1454 	mov	a,#0x80
      000249 C0 E0            [24] 1455 	push	acc
      00024B 12r00r00         [24] 1456 	lcall	_printfl
      00024E E5 81            [12] 1457 	mov	a,sp
      000250 24 F7            [12] 1458 	add	a,#0xf7
      000252 F5 81            [12] 1459 	mov	sp,a
                                   1460 ;	radio/tdm.c:273: printf(" delta: %d\n",(int)delta);
      000254 78r67            [12] 1461 	mov	r0,#_sync_tx_windows_delta_2_178
      000256 E2               [24] 1462 	movx	a,@r0
      000257 C0 E0            [24] 1463 	push	acc
      000259 08               [12] 1464 	inc	r0
      00025A E2               [24] 1465 	movx	a,@r0
      00025B C0 E0            [24] 1466 	push	acc
      00025D 74r7E            [12] 1467 	mov	a,#___str_3
      00025F C0 E0            [24] 1468 	push	acc
      000261 74s00            [12] 1469 	mov	a,#(___str_3 >> 8)
      000263 C0 E0            [24] 1470 	push	acc
      000265 74 80            [12] 1471 	mov	a,#0x80
      000267 C0 E0            [24] 1472 	push	acc
      000269 12r00r00         [24] 1473 	lcall	_printfl
      00026C E5 81            [12] 1474 	mov	a,sp
      00026E 24 FB            [12] 1475 	add	a,#0xfb
      000270 F5 81            [12] 1476 	mov	sp,a
      000272                       1477 00119$:
      000272 22               [24] 1478 	ret
                                   1479 ;------------------------------------------------------------
                                   1480 ;Allocation info for local variables in function 'tdm_state_update'
                                   1481 ;------------------------------------------------------------
                                   1482 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                                   1483 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                                   1484 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                                   1485 ;------------------------------------------------------------
                                   1486 ;	radio/tdm.c:281: tdm_state_update(__pdata uint16_t tdelta)
                                   1487 ;	-----------------------------------------
                                   1488 ;	 function tdm_state_update
                                   1489 ;	-----------------------------------------
      000273                       1490 _tdm_state_update:
      000273 AE 82            [24] 1491 	mov	r6,dpl
      000275 AF 83            [24] 1492 	mov	r7,dph
                                   1493 ;	radio/tdm.c:285: if (tdelta > transmit_wait) {
      000277 78r0C            [12] 1494 	mov	r0,#_transmit_wait
      000279 C3               [12] 1495 	clr	c
      00027A E2               [24] 1496 	movx	a,@r0
      00027B 9E               [12] 1497 	subb	a,r6
      00027C 08               [12] 1498 	inc	r0
      00027D E2               [24] 1499 	movx	a,@r0
      00027E 9F               [12] 1500 	subb	a,r7
      00027F 50 08            [24] 1501 	jnc	00102$
                                   1502 ;	radio/tdm.c:286: transmit_wait = 0;
      000281 78r0C            [12] 1503 	mov	r0,#_transmit_wait
      000283 E4               [12] 1504 	clr	a
      000284 F2               [24] 1505 	movx	@r0,a
      000285 08               [12] 1506 	inc	r0
      000286 F2               [24] 1507 	movx	@r0,a
      000287 80 0A            [24] 1508 	sjmp	00116$
      000289                       1509 00102$:
                                   1510 ;	radio/tdm.c:288: transmit_wait -= tdelta;
      000289 78r0C            [12] 1511 	mov	r0,#_transmit_wait
      00028B E2               [24] 1512 	movx	a,@r0
      00028C C3               [12] 1513 	clr	c
      00028D 9E               [12] 1514 	subb	a,r6
      00028E F2               [24] 1515 	movx	@r0,a
      00028F 08               [12] 1516 	inc	r0
      000290 E2               [24] 1517 	movx	a,@r0
      000291 9F               [12] 1518 	subb	a,r7
      000292 F2               [24] 1519 	movx	@r0,a
                                   1520 ;	radio/tdm.c:292: while (tdelta >= tdm_state_remaining) {
      000293                       1521 00116$:
      000293 78r01            [12] 1522 	mov	r0,#_tdm_state_remaining
      000295 C3               [12] 1523 	clr	c
      000296 E2               [24] 1524 	movx	a,@r0
      000297 F5 F0            [12] 1525 	mov	b,a
      000299 EE               [12] 1526 	mov	a,r6
      00029A 95 F0            [12] 1527 	subb	a,b
      00029C 08               [12] 1528 	inc	r0
      00029D E2               [24] 1529 	movx	a,@r0
      00029E F5 F0            [12] 1530 	mov	b,a
      0002A0 EF               [12] 1531 	mov	a,r7
      0002A1 95 F0            [12] 1532 	subb	a,b
      0002A3 50 03            [24] 1533 	jnc	00146$
      0002A5 02r04rDE         [24] 1534 	ljmp	00118$
      0002A8                       1535 00146$:
                                   1536 ;	radio/tdm.c:294: tdm_state = (tdm_state+1) % 4;
      0002A8 78r00            [12] 1537 	mov	r0,#_tdm_state
      0002AA E2               [24] 1538 	movx	a,@r0
      0002AB FC               [12] 1539 	mov	r4,a
      0002AC 7D 00            [12] 1540 	mov	r5,#0x00
      0002AE 0C               [12] 1541 	inc	r4
      0002AF BC 00 01         [24] 1542 	cjne	r4,#0x00,00147$
      0002B2 0D               [12] 1543 	inc	r5
      0002B3                       1544 00147$:
      0002B3 90r00r00         [24] 1545 	mov	dptr,#__modsint_PARM_2
      0002B6 74 04            [12] 1546 	mov	a,#0x04
      0002B8 F0               [24] 1547 	movx	@dptr,a
      0002B9 E4               [12] 1548 	clr	a
      0002BA A3               [24] 1549 	inc	dptr
      0002BB F0               [24] 1550 	movx	@dptr,a
      0002BC 8C 82            [24] 1551 	mov	dpl,r4
      0002BE 8D 83            [24] 1552 	mov	dph,r5
      0002C0 C0 07            [24] 1553 	push	ar7
      0002C2 C0 06            [24] 1554 	push	ar6
      0002C4 12r00r00         [24] 1555 	lcall	__modsint
      0002C7 AC 82            [24] 1556 	mov	r4,dpl
      0002C9 AD 83            [24] 1557 	mov	r5,dph
      0002CB D0 06            [24] 1558 	pop	ar6
      0002CD D0 07            [24] 1559 	pop	ar7
      0002CF 78r00            [12] 1560 	mov	r0,#_tdm_state
      0002D1 EC               [12] 1561 	mov	a,r4
      0002D2 F2               [24] 1562 	movx	@r0,a
                                   1563 ;	radio/tdm.c:297: tdelta -= tdm_state_remaining;
      0002D3 78r01            [12] 1564 	mov	r0,#_tdm_state_remaining
      0002D5 D3               [12] 1565 	setb	c
      0002D6 E2               [24] 1566 	movx	a,@r0
      0002D7 9E               [12] 1567 	subb	a,r6
      0002D8 F4               [12] 1568 	cpl	a
      0002D9 B3               [12] 1569 	cpl	c
      0002DA FE               [12] 1570 	mov	r6,a
      0002DB B3               [12] 1571 	cpl	c
      0002DC 08               [12] 1572 	inc	r0
      0002DD E2               [24] 1573 	movx	a,@r0
      0002DE 9F               [12] 1574 	subb	a,r7
      0002DF F4               [12] 1575 	cpl	a
      0002E0 FF               [12] 1576 	mov	r7,a
                                   1577 ;	radio/tdm.c:299: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_RECEIVE) {
      0002E1 78r00            [12] 1578 	mov	r0,#_tdm_state
      0002E3 E2               [24] 1579 	movx	a,@r0
      0002E4 60 06            [24] 1580 	jz	00104$
      0002E6 78r00            [12] 1581 	mov	r0,#_tdm_state
      0002E8 E2               [24] 1582 	movx	a,@r0
      0002E9 B4 02 10         [24] 1583 	cjne	a,#0x02,00105$
      0002EC                       1584 00104$:
                                   1585 ;	radio/tdm.c:300: tdm_state_remaining = tx_window_width;
      0002EC 78r03            [12] 1586 	mov	r0,#_tx_window_width
      0002EE E2               [24] 1587 	movx	a,@r0
      0002EF FC               [12] 1588 	mov	r4,a
      0002F0 08               [12] 1589 	inc	r0
      0002F1 E2               [24] 1590 	movx	a,@r0
      0002F2 FD               [12] 1591 	mov	r5,a
      0002F3 78r01            [12] 1592 	mov	r0,#_tdm_state_remaining
      0002F5 EC               [12] 1593 	mov	a,r4
      0002F6 F2               [24] 1594 	movx	@r0,a
      0002F7 08               [12] 1595 	inc	r0
      0002F8 ED               [12] 1596 	mov	a,r5
      0002F9 F2               [24] 1597 	movx	@r0,a
      0002FA 80 0E            [24] 1598 	sjmp	00106$
      0002FC                       1599 00105$:
                                   1600 ;	radio/tdm.c:302: tdm_state_remaining = silence_period;
      0002FC 78r06            [12] 1601 	mov	r0,#_silence_period
      0002FE E2               [24] 1602 	movx	a,@r0
      0002FF FC               [12] 1603 	mov	r4,a
      000300 08               [12] 1604 	inc	r0
      000301 E2               [24] 1605 	movx	a,@r0
      000302 FD               [12] 1606 	mov	r5,a
      000303 78r01            [12] 1607 	mov	r0,#_tdm_state_remaining
      000305 EC               [12] 1608 	mov	a,r4
      000306 F2               [24] 1609 	movx	@r0,a
      000307 08               [12] 1610 	inc	r0
      000308 ED               [12] 1611 	mov	a,r5
      000309 F2               [24] 1612 	movx	@r0,a
      00030A                       1613 00106$:
                                   1614 ;	radio/tdm.c:308: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_SILENCE1) {
      00030A 78r00            [12] 1615 	mov	r0,#_tdm_state
      00030C E2               [24] 1616 	movx	a,@r0
      00030D 60 06            [24] 1617 	jz	00110$
      00030F 78r00            [12] 1618 	mov	r0,#_tdm_state
      000311 E2               [24] 1619 	movx	a,@r0
      000312 B4 01 25         [24] 1620 	cjne	a,#0x01,00111$
      000315                       1621 00110$:
                                   1622 ;	radio/tdm.c:309: fhop_window_change();
      000315 C0 07            [24] 1623 	push	ar7
      000317 C0 06            [24] 1624 	push	ar6
      000319 12r00r00         [24] 1625 	lcall	_fhop_window_change
                                   1626 ;	radio/tdm.c:310: radio_receiver_on();
      00031C 12r00r00         [24] 1627 	lcall	_radio_receiver_on
      00031F D0 06            [24] 1628 	pop	ar6
      000321 D0 07            [24] 1629 	pop	ar7
                                   1630 ;	radio/tdm.c:312: if (num_fh_channels > 1) {
      000323 78r00            [12] 1631 	mov	r0,#_num_fh_channels
      000325 C3               [12] 1632 	clr	c
      000326 E2               [24] 1633 	movx	a,@r0
      000327 F5 F0            [12] 1634 	mov	b,a
      000329 74 01            [12] 1635 	mov	a,#0x01
      00032B 95 F0            [12] 1636 	subb	a,b
      00032D 50 0B            [24] 1637 	jnc	00111$
                                   1638 ;	radio/tdm.c:314: lbt_listen_time = 0;
      00032F 78r17            [12] 1639 	mov	r0,#_lbt_listen_time
      000331 E4               [12] 1640 	clr	a
      000332 F2               [24] 1641 	movx	@r0,a
      000333 08               [12] 1642 	inc	r0
      000334 F2               [24] 1643 	movx	@r0,a
                                   1644 ;	radio/tdm.c:315: lbt_rand = 0;
      000335 78r1B            [12] 1645 	mov	r0,#_lbt_rand
      000337 F2               [24] 1646 	movx	@r0,a
      000338 08               [12] 1647 	inc	r0
      000339 F2               [24] 1648 	movx	@r0,a
      00033A                       1649 00111$:
                                   1650 ;	radio/tdm.c:319: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
      00033A 78r00            [12] 1651 	mov	r0,#_tdm_state
      00033C E2               [24] 1652 	movx	a,@r0
      00033D 60 03            [24] 1653 	jz	00155$
      00033F 02r04rD1         [24] 1654 	ljmp	00114$
      000342                       1655 00155$:
      000342 C0 06            [24] 1656 	push	ar6
      000344 C0 07            [24] 1657 	push	ar7
      000346 78r0E            [12] 1658 	mov	r0,#_duty_cycle
      000348 E2               [24] 1659 	movx	a,@r0
      000349 FC               [12] 1660 	mov	r4,a
      00034A 7D 00            [12] 1661 	mov	r5,#0x00
      00034C 78r13            [12] 1662 	mov	r0,#_duty_cycle_offset
      00034E E2               [24] 1663 	movx	a,@r0
      00034F F5*0D            [12] 1664 	mov	_tdm_state_update_sloc0_1_0,a
                                   1665 ;	1-genFromRTrack replaced	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
      000351 8D*0E            [24] 1666 	mov	(_tdm_state_update_sloc0_1_0 + 1),r5
      000353 EC               [12] 1667 	mov	a,r4
      000354 C3               [12] 1668 	clr	c
      000355 95*0D            [12] 1669 	subb	a,_tdm_state_update_sloc0_1_0
      000357 FE               [12] 1670 	mov	r6,a
      000358 ED               [12] 1671 	mov	a,r5
      000359 95*0E            [12] 1672 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      00035B FF               [12] 1673 	mov	r7,a
      00035C BE 64 0A         [24] 1674 	cjne	r6,#0x64,00156$
      00035F BF 00 07         [24] 1675 	cjne	r7,#0x00,00156$
      000362 D0 07            [24] 1676 	pop	ar7
      000364 D0 06            [24] 1677 	pop	ar6
      000366 02r04rD1         [24] 1678 	ljmp	00114$
      000369                       1679 00156$:
      000369 D0 07            [24] 1680 	pop	ar7
      00036B D0 06            [24] 1681 	pop	ar6
                                   1682 ;	radio/tdm.c:321: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
      00036D C0 06            [24] 1683 	push	ar6
      00036F C0 07            [24] 1684 	push	ar7
      000371 C0 07            [24] 1685 	push	ar7
      000373 C0 06            [24] 1686 	push	ar6
      000375 C0 05            [24] 1687 	push	ar5
      000377 C0 04            [24] 1688 	push	ar4
      000379 78r0F            [12] 1689 	mov	r0,#_average_duty_cycle
      00037B E2               [24] 1690 	movx	a,@r0
      00037C C0 E0            [24] 1691 	push	acc
      00037E 08               [12] 1692 	inc	r0
      00037F E2               [24] 1693 	movx	a,@r0
      000380 C0 E0            [24] 1694 	push	acc
      000382 08               [12] 1695 	inc	r0
      000383 E2               [24] 1696 	movx	a,@r0
      000384 C0 E0            [24] 1697 	push	acc
      000386 08               [12] 1698 	inc	r0
      000387 E2               [24] 1699 	movx	a,@r0
      000388 C0 E0            [24] 1700 	push	acc
      00038A 90 33 33         [24] 1701 	mov	dptr,#0x3333
      00038D 75 F0 73         [24] 1702 	mov	b,#0x73
      000390 74 3F            [12] 1703 	mov	a,#0x3F
      000392 12r00r00         [24] 1704 	lcall	___fsmul
      000395 85 82*0F         [24] 1705 	mov	_tdm_state_update_sloc1_1_0,dpl
      000398 85 83*10         [24] 1706 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
      00039B 85 F0*11         [24] 1707 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
      00039E F5*12            [12] 1708 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
      0003A0 E5 81            [12] 1709 	mov	a,sp
      0003A2 24 FC            [12] 1710 	add	a,#0xfc
      0003A4 F5 81            [12] 1711 	mov	sp,a
      0003A6 D0 04            [24] 1712 	pop	ar4
      0003A8 D0 05            [24] 1713 	pop	ar5
      0003AA D0 06            [24] 1714 	pop	ar6
      0003AC D0 07            [24] 1715 	pop	ar7
      0003AE 78r14            [12] 1716 	mov	r0,#_transmitted_ticks
      0003B0 E2               [24] 1717 	movx	a,@r0
      0003B1 F5 82            [12] 1718 	mov	dpl,a
      0003B3 08               [12] 1719 	inc	r0
      0003B4 E2               [24] 1720 	movx	a,@r0
      0003B5 F5 83            [12] 1721 	mov	dph,a
      0003B7 C0 05            [24] 1722 	push	ar5
      0003B9 C0 04            [24] 1723 	push	ar4
      0003BB 12r00r00         [24] 1724 	lcall	___uint2fs
      0003BE AA 82            [24] 1725 	mov	r2,dpl
      0003C0 AB 83            [24] 1726 	mov	r3,dph
      0003C2 AE F0            [24] 1727 	mov	r6,b
      0003C4 FF               [12] 1728 	mov	r7,a
      0003C5 D0 04            [24] 1729 	pop	ar4
      0003C7 D0 05            [24] 1730 	pop	ar5
      0003C9 C0 07            [24] 1731 	push	ar7
      0003CB C0 06            [24] 1732 	push	ar6
      0003CD C0 05            [24] 1733 	push	ar5
      0003CF C0 04            [24] 1734 	push	ar4
      0003D1 C0 02            [24] 1735 	push	ar2
      0003D3 C0 03            [24] 1736 	push	ar3
      0003D5 C0 06            [24] 1737 	push	ar6
      0003D7 C0 07            [24] 1738 	push	ar7
      0003D9 90 00 00         [24] 1739 	mov	dptr,#0x0000
      0003DC 75 F0 A0         [24] 1740 	mov	b,#0xA0
      0003DF 74 40            [12] 1741 	mov	a,#0x40
      0003E1 12r00r00         [24] 1742 	lcall	___fsmul
      0003E4 85 82*13         [24] 1743 	mov	_tdm_state_update_sloc2_1_0,dpl
      0003E7 85 83*14         [24] 1744 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
      0003EA 85 F0*15         [24] 1745 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
      0003ED F5*16            [12] 1746 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
      0003EF E5 81            [12] 1747 	mov	a,sp
      0003F1 24 FC            [12] 1748 	add	a,#0xfc
      0003F3 F5 81            [12] 1749 	mov	sp,a
      0003F5 D0 04            [24] 1750 	pop	ar4
      0003F7 D0 05            [24] 1751 	pop	ar5
      0003F9 D0 06            [24] 1752 	pop	ar6
      0003FB D0 07            [24] 1753 	pop	ar7
      0003FD 78r06            [12] 1754 	mov	r0,#_silence_period
      0003FF 79r03            [12] 1755 	mov	r1,#_tx_window_width
      000401 E3               [24] 1756 	movx	a,@r1
      000402 C5 F0            [12] 1757 	xch	a,b
      000404 E2               [24] 1758 	movx	a,@r0
      000405 25 F0            [12] 1759 	add	a,b
      000407 FE               [12] 1760 	mov	r6,a
      000408 09               [12] 1761 	inc	r1
      000409 E3               [24] 1762 	movx	a,@r1
      00040A C5 F0            [12] 1763 	xch	a,b
      00040C 08               [12] 1764 	inc	r0
      00040D E2               [24] 1765 	movx	a,@r0
      00040E 35 F0            [12] 1766 	addc	a,b
      000410 CE               [12] 1767 	xch	a,r6
      000411 25 E0            [12] 1768 	add	a,acc
      000413 CE               [12] 1769 	xch	a,r6
      000414 33               [12] 1770 	rlc	a
      000415 FF               [12] 1771 	mov	r7,a
      000416 8E 82            [24] 1772 	mov	dpl,r6
      000418 8F 83            [24] 1773 	mov	dph,r7
      00041A C0 05            [24] 1774 	push	ar5
      00041C C0 04            [24] 1775 	push	ar4
      00041E 12r00r00         [24] 1776 	lcall	___uint2fs
      000421 AA 82            [24] 1777 	mov	r2,dpl
      000423 AB 83            [24] 1778 	mov	r3,dph
      000425 AE F0            [24] 1779 	mov	r6,b
      000427 FF               [12] 1780 	mov	r7,a
      000428 C0 02            [24] 1781 	push	ar2
      00042A C0 03            [24] 1782 	push	ar3
      00042C C0 06            [24] 1783 	push	ar6
      00042E C0 07            [24] 1784 	push	ar7
      000430 85*13 82         [24] 1785 	mov	dpl,_tdm_state_update_sloc2_1_0
      000433 85*14 83         [24] 1786 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
      000436 85*15 F0         [24] 1787 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
      000439 E5*16            [12] 1788 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
      00043B 12r00r00         [24] 1789 	lcall	___fsdiv
      00043E AA 82            [24] 1790 	mov	r2,dpl
      000440 AB 83            [24] 1791 	mov	r3,dph
      000442 AE F0            [24] 1792 	mov	r6,b
      000444 FF               [12] 1793 	mov	r7,a
      000445 E5 81            [12] 1794 	mov	a,sp
      000447 24 FC            [12] 1795 	add	a,#0xfc
      000449 F5 81            [12] 1796 	mov	sp,a
      00044B C0 02            [24] 1797 	push	ar2
      00044D C0 03            [24] 1798 	push	ar3
      00044F C0 06            [24] 1799 	push	ar6
      000451 C0 07            [24] 1800 	push	ar7
      000453 85*0F 82         [24] 1801 	mov	dpl,_tdm_state_update_sloc1_1_0
      000456 85*10 83         [24] 1802 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
      000459 85*11 F0         [24] 1803 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
      00045C E5*12            [12] 1804 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
      00045E 12r00r00         [24] 1805 	lcall	___fsadd
      000461 AA 82            [24] 1806 	mov	r2,dpl
      000463 AB 83            [24] 1807 	mov	r3,dph
      000465 AE F0            [24] 1808 	mov	r6,b
      000467 FF               [12] 1809 	mov	r7,a
      000468 E5 81            [12] 1810 	mov	a,sp
      00046A 24 FC            [12] 1811 	add	a,#0xfc
      00046C F5 81            [12] 1812 	mov	sp,a
      00046E D0 04            [24] 1813 	pop	ar4
      000470 D0 05            [24] 1814 	pop	ar5
      000472 78r0F            [12] 1815 	mov	r0,#_average_duty_cycle
      000474 EA               [12] 1816 	mov	a,r2
      000475 F2               [24] 1817 	movx	@r0,a
      000476 08               [12] 1818 	inc	r0
      000477 EB               [12] 1819 	mov	a,r3
      000478 F2               [24] 1820 	movx	@r0,a
      000479 08               [12] 1821 	inc	r0
      00047A EE               [12] 1822 	mov	a,r6
      00047B F2               [24] 1823 	movx	@r0,a
      00047C 08               [12] 1824 	inc	r0
      00047D EF               [12] 1825 	mov	a,r7
      00047E F2               [24] 1826 	movx	@r0,a
                                   1827 ;	radio/tdm.c:322: transmitted_ticks = 0;
      00047F 78r14            [12] 1828 	mov	r0,#_transmitted_ticks
      000481 E4               [12] 1829 	clr	a
      000482 F2               [24] 1830 	movx	@r0,a
      000483 08               [12] 1831 	inc	r0
      000484 F2               [24] 1832 	movx	@r0,a
                                   1833 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      000485 EC               [12] 1834 	mov	a,r4
      000486 C3               [12] 1835 	clr	c
      000487 95*0D            [12] 1836 	subb	a,_tdm_state_update_sloc0_1_0
      000489 FC               [12] 1837 	mov	r4,a
      00048A ED               [12] 1838 	mov	a,r5
      00048B 95*0E            [12] 1839 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
      00048D FD               [12] 1840 	mov	r5,a
      00048E 8C 82            [24] 1841 	mov	dpl,r4
      000490 8D 83            [24] 1842 	mov	dph,r5
      000492 12r00r00         [24] 1843 	lcall	___sint2fs
      000495 AC 82            [24] 1844 	mov	r4,dpl
      000497 AD 83            [24] 1845 	mov	r5,dph
      000499 AE F0            [24] 1846 	mov	r6,b
      00049B FF               [12] 1847 	mov	r7,a
      00049C C0 07            [24] 1848 	push	ar7
      00049E C0 06            [24] 1849 	push	ar6
      0004A0 C0 04            [24] 1850 	push	ar4
      0004A2 C0 05            [24] 1851 	push	ar5
      0004A4 C0 06            [24] 1852 	push	ar6
      0004A6 C0 07            [24] 1853 	push	ar7
      0004A8 78r0F            [12] 1854 	mov	r0,#_average_duty_cycle
      0004AA E2               [24] 1855 	movx	a,@r0
      0004AB F5 82            [12] 1856 	mov	dpl,a
      0004AD 08               [12] 1857 	inc	r0
      0004AE E2               [24] 1858 	movx	a,@r0
      0004AF F5 83            [12] 1859 	mov	dph,a
      0004B1 08               [12] 1860 	inc	r0
      0004B2 E2               [24] 1861 	movx	a,@r0
      0004B3 F5 F0            [12] 1862 	mov	b,a
      0004B5 08               [12] 1863 	inc	r0
      0004B6 E2               [24] 1864 	movx	a,@r0
      0004B7 12r00r00         [24] 1865 	lcall	___fslt
      0004BA E5 81            [12] 1866 	mov	a,sp
      0004BC 24 FC            [12] 1867 	add	a,#0xfc
      0004BE F5 81            [12] 1868 	mov	sp,a
      0004C0 D0 06            [24] 1869 	pop	ar6
      0004C2 D0 07            [24] 1870 	pop	ar7
      0004C4 E5 82            [12] 1871 	mov	a,dpl
      0004C6 24 FF            [12] 1872 	add	a,#0xFF
      0004C8 92*08            [24] 1873 	mov  _tdm_state_update_sloc3_1_0,c
      0004CA B3               [12] 1874 	cpl	c
      0004CB 92*04            [24] 1875 	mov	_duty_cycle_wait,c
                                   1876 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004CD D0 07            [24] 1877 	pop	ar7
      0004CF D0 06            [24] 1878 	pop	ar6
                                   1879 ;	radio/tdm.c:323: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
      0004D1                       1880 00114$:
                                   1881 ;	radio/tdm.c:327: bonus_transmit = 0;
      0004D1 C2*00            [12] 1882 	clr	_bonus_transmit
                                   1883 ;	radio/tdm.c:330: transmit_yield = 0;
      0004D3 C2*01            [12] 1884 	clr	_transmit_yield
                                   1885 ;	radio/tdm.c:333: transmit_wait = 0;
      0004D5 78r0C            [12] 1886 	mov	r0,#_transmit_wait
      0004D7 E4               [12] 1887 	clr	a
      0004D8 F2               [24] 1888 	movx	@r0,a
      0004D9 08               [12] 1889 	inc	r0
      0004DA F2               [24] 1890 	movx	@r0,a
      0004DB 02r02r93         [24] 1891 	ljmp	00116$
      0004DE                       1892 00118$:
                                   1893 ;	radio/tdm.c:336: tdm_state_remaining -= tdelta;
      0004DE 78r01            [12] 1894 	mov	r0,#_tdm_state_remaining
      0004E0 E2               [24] 1895 	movx	a,@r0
      0004E1 C3               [12] 1896 	clr	c
      0004E2 9E               [12] 1897 	subb	a,r6
      0004E3 F2               [24] 1898 	movx	@r0,a
      0004E4 08               [12] 1899 	inc	r0
      0004E5 E2               [24] 1900 	movx	a,@r0
      0004E6 9F               [12] 1901 	subb	a,r7
      0004E7 F2               [24] 1902 	movx	@r0,a
      0004E8 22               [24] 1903 	ret
                                   1904 ;------------------------------------------------------------
                                   1905 ;Allocation info for local variables in function 'tdm_change_phase'
                                   1906 ;------------------------------------------------------------
                                   1907 ;	radio/tdm.c:342: tdm_change_phase(void)
                                   1908 ;	-----------------------------------------
                                   1909 ;	 function tdm_change_phase
                                   1910 ;	-----------------------------------------
      0004E9                       1911 _tdm_change_phase:
                                   1912 ;	radio/tdm.c:344: tdm_state = (tdm_state+2) % 4;
      0004E9 78r00            [12] 1913 	mov	r0,#_tdm_state
      0004EB E2               [24] 1914 	movx	a,@r0
      0004EC FE               [12] 1915 	mov	r6,a
      0004ED 7F 00            [12] 1916 	mov	r7,#0x00
      0004EF 74 02            [12] 1917 	mov	a,#0x02
      0004F1 2E               [12] 1918 	add	a,r6
      0004F2 FE               [12] 1919 	mov	r6,a
      0004F3 E4               [12] 1920 	clr	a
      0004F4 3F               [12] 1921 	addc	a,r7
      0004F5 FF               [12] 1922 	mov	r7,a
      0004F6 90r00r00         [24] 1923 	mov	dptr,#__modsint_PARM_2
      0004F9 74 04            [12] 1924 	mov	a,#0x04
      0004FB F0               [24] 1925 	movx	@dptr,a
      0004FC E4               [12] 1926 	clr	a
      0004FD A3               [24] 1927 	inc	dptr
      0004FE F0               [24] 1928 	movx	@dptr,a
      0004FF 8E 82            [24] 1929 	mov	dpl,r6
      000501 8F 83            [24] 1930 	mov	dph,r7
      000503 12r00r00         [24] 1931 	lcall	__modsint
      000506 AE 82            [24] 1932 	mov	r6,dpl
      000508 78r00            [12] 1933 	mov	r0,#_tdm_state
      00050A EE               [12] 1934 	mov	a,r6
      00050B F2               [24] 1935 	movx	@r0,a
      00050C 22               [24] 1936 	ret
                                   1937 ;------------------------------------------------------------
                                   1938 ;Allocation info for local variables in function 'temperature_update'
                                   1939 ;------------------------------------------------------------
                                   1940 ;diff                      Allocated to registers r6 r7 
                                   1941 ;------------------------------------------------------------
                                   1942 ;	radio/tdm.c:349: static void temperature_update(void)
                                   1943 ;	-----------------------------------------
                                   1944 ;	 function temperature_update
                                   1945 ;	-----------------------------------------
      00050D                       1946 _temperature_update:
                                   1947 ;	radio/tdm.c:352: if (radio_get_transmit_power() <= 20) {
      00050D 12r00r00         [24] 1948 	lcall	_radio_get_transmit_power
      000510 E5 82            [12] 1949 	mov	a,dpl
      000512 FF               [12] 1950 	mov	r7,a
      000513 24 EB            [12] 1951 	add	a,#0xff - 0x14
      000515 40 05            [24] 1952 	jc	00102$
                                   1953 ;	radio/tdm.c:353: duty_cycle_offset = 0;
      000517 78r13            [12] 1954 	mov	r0,#_duty_cycle_offset
      000519 E4               [12] 1955 	clr	a
      00051A F2               [24] 1956 	movx	@r0,a
                                   1957 ;	radio/tdm.c:354: return;
      00051B 22               [24] 1958 	ret
      00051C                       1959 00102$:
                                   1960 ;	radio/tdm.c:357: diff = radio_temperature() - MAX_PA_TEMPERATURE;
      00051C 12r00r00         [24] 1961 	lcall	_radio_temperature
      00051F E5 82            [12] 1962 	mov	a,dpl
      000521 85 83 F0         [24] 1963 	mov	b,dph
      000524 24 9C            [12] 1964 	add	a,#0x9C
      000526 FE               [12] 1965 	mov	r6,a
      000527 E5 F0            [12] 1966 	mov	a,b
      000529 34 FF            [12] 1967 	addc	a,#0xFF
      00052B FF               [12] 1968 	mov	r7,a
                                   1969 ;	radio/tdm.c:358: if (diff <= 0 && duty_cycle_offset > 0) {
      00052C C3               [12] 1970 	clr	c
      00052D E4               [12] 1971 	clr	a
      00052E 9E               [12] 1972 	subb	a,r6
      00052F 74 80            [12] 1973 	mov	a,#(0x00 ^ 0x80)
      000531 8F F0            [24] 1974 	mov	b,r7
      000533 63 F0 80         [24] 1975 	xrl	b,#0x80
      000536 95 F0            [12] 1976 	subb	a,b
      000538 E4               [12] 1977 	clr	a
      000539 33               [12] 1978 	rlc	a
      00053A FD               [12] 1979 	mov	r5,a
      00053B 70 0C            [24] 1980 	jnz	00112$
      00053D 78r13            [12] 1981 	mov	r0,#_duty_cycle_offset
      00053F E2               [24] 1982 	movx	a,@r0
      000540 60 07            [24] 1983 	jz	00112$
                                   1984 ;	radio/tdm.c:360: duty_cycle_offset -= 1;
      000542 78r13            [12] 1985 	mov	r0,#_duty_cycle_offset
      000544 E2               [24] 1986 	movx	a,@r0
      000545 14               [12] 1987 	dec	a
      000546 F2               [24] 1988 	movx	@r0,a
      000547 80 37            [24] 1989 	sjmp	00113$
      000549                       1990 00112$:
                                   1991 ;	radio/tdm.c:361: } else if (diff > 10) {
      000549 C3               [12] 1992 	clr	c
      00054A 74 0A            [12] 1993 	mov	a,#0x0A
      00054C 9E               [12] 1994 	subb	a,r6
      00054D 74 80            [12] 1995 	mov	a,#(0x00 ^ 0x80)
      00054F 8F F0            [24] 1996 	mov	b,r7
      000551 63 F0 80         [24] 1997 	xrl	b,#0x80
      000554 95 F0            [12] 1998 	subb	a,b
      000556 50 08            [24] 1999 	jnc	00109$
                                   2000 ;	radio/tdm.c:363: duty_cycle_offset += 10;
      000558 78r13            [12] 2001 	mov	r0,#_duty_cycle_offset
      00055A E2               [24] 2002 	movx	a,@r0
      00055B 24 0A            [12] 2003 	add	a,#0x0A
      00055D F2               [24] 2004 	movx	@r0,a
      00055E 80 20            [24] 2005 	sjmp	00113$
      000560                       2006 00109$:
                                   2007 ;	radio/tdm.c:364: } else if (diff > 5) {
      000560 C3               [12] 2008 	clr	c
      000561 74 05            [12] 2009 	mov	a,#0x05
      000563 9E               [12] 2010 	subb	a,r6
      000564 74 80            [12] 2011 	mov	a,#(0x00 ^ 0x80)
      000566 8F F0            [24] 2012 	mov	b,r7
      000568 63 F0 80         [24] 2013 	xrl	b,#0x80
      00056B 95 F0            [12] 2014 	subb	a,b
      00056D 50 08            [24] 2015 	jnc	00106$
                                   2016 ;	radio/tdm.c:366: duty_cycle_offset += 5;
      00056F 78r13            [12] 2017 	mov	r0,#_duty_cycle_offset
      000571 E2               [24] 2018 	movx	a,@r0
      000572 24 05            [12] 2019 	add	a,#0x05
      000574 F2               [24] 2020 	movx	@r0,a
      000575 80 09            [24] 2021 	sjmp	00113$
      000577                       2022 00106$:
                                   2023 ;	radio/tdm.c:367: } else if (diff > 0) {
      000577 ED               [12] 2024 	mov	a,r5
      000578 60 06            [24] 2025 	jz	00113$
                                   2026 ;	radio/tdm.c:369: duty_cycle_offset += 1;				
      00057A 78r13            [12] 2027 	mov	r0,#_duty_cycle_offset
      00057C E2               [24] 2028 	movx	a,@r0
      00057D 24 01            [12] 2029 	add	a,#0x01
      00057F F2               [24] 2030 	movx	@r0,a
      000580                       2031 00113$:
                                   2032 ;	radio/tdm.c:372: if ((duty_cycle-duty_cycle_offset) < 20) {
      000580 78r0E            [12] 2033 	mov	r0,#_duty_cycle
      000582 E2               [24] 2034 	movx	a,@r0
      000583 FE               [12] 2035 	mov	r6,a
      000584 7F 00            [12] 2036 	mov	r7,#0x00
      000586 78r13            [12] 2037 	mov	r0,#_duty_cycle_offset
      000588 E2               [24] 2038 	movx	a,@r0
      000589 FC               [12] 2039 	mov	r4,a
      00058A 7D 00            [12] 2040 	mov	r5,#0x00
      00058C EE               [12] 2041 	mov	a,r6
      00058D C3               [12] 2042 	clr	c
      00058E 9C               [12] 2043 	subb	a,r4
      00058F FE               [12] 2044 	mov	r6,a
      000590 EF               [12] 2045 	mov	a,r7
      000591 9D               [12] 2046 	subb	a,r5
      000592 FF               [12] 2047 	mov	r7,a
      000593 C3               [12] 2048 	clr	c
      000594 EE               [12] 2049 	mov	a,r6
      000595 94 14            [12] 2050 	subb	a,#0x14
      000597 EF               [12] 2051 	mov	a,r7
      000598 64 80            [12] 2052 	xrl	a,#0x80
      00059A 94 80            [12] 2053 	subb	a,#0x80
      00059C 50 08            [24] 2054 	jnc	00117$
                                   2055 ;	radio/tdm.c:373: duty_cycle_offset = duty_cycle - 20;
      00059E 78r0E            [12] 2056 	mov	r0,#_duty_cycle
      0005A0 79r13            [12] 2057 	mov	r1,#_duty_cycle_offset
      0005A2 E2               [24] 2058 	movx	a,@r0
      0005A3 24 EC            [12] 2059 	add	a,#0xEC
      0005A5 F3               [24] 2060 	movx	@r1,a
      0005A6                       2061 00117$:
      0005A6 22               [24] 2062 	ret
                                   2063 ;------------------------------------------------------------
                                   2064 ;Allocation info for local variables in function 'link_update'
                                   2065 ;------------------------------------------------------------
                                   2066 ;old_remaining             Allocated to registers r6 r7 
                                   2067 ;unlock_count              Allocated with name '_link_update_unlock_count_1_201'
                                   2068 ;temperature_count         Allocated with name '_link_update_temperature_count_1_201'
                                   2069 ;------------------------------------------------------------
                                   2070 ;	radio/tdm.c:381: link_update(void)
                                   2071 ;	-----------------------------------------
                                   2072 ;	 function link_update
                                   2073 ;	-----------------------------------------
      0005A7                       2074 _link_update:
                                   2075 ;	radio/tdm.c:384: if (received_packet) {
      0005A7 30*03 09         [24] 2076 	jnb	_received_packet,00102$
                                   2077 ;	radio/tdm.c:385: unlock_count = 0;
      0005AA 90r00rFD         [24] 2078 	mov	dptr,#_link_update_unlock_count_1_201
      0005AD E4               [12] 2079 	clr	a
      0005AE F0               [24] 2080 	movx	@dptr,a
                                   2081 ;	radio/tdm.c:386: received_packet = false;
      0005AF C2*03            [12] 2082 	clr	_received_packet
      0005B1 80 07            [24] 2083 	sjmp	00103$
      0005B3                       2084 00102$:
                                   2085 ;	radio/tdm.c:391: unlock_count++;
      0005B3 90r00rFD         [24] 2086 	mov	dptr,#_link_update_unlock_count_1_201
      0005B6 E0               [24] 2087 	movx	a,@dptr
      0005B7 24 01            [12] 2088 	add	a,#0x01
      0005B9 F0               [24] 2089 	movx	@dptr,a
      0005BA                       2090 00103$:
                                   2091 ;	radio/tdm.c:394: if (unlock_count < 2) {
      0005BA 90r00rFD         [24] 2092 	mov	dptr,#_link_update_unlock_count_1_201
      0005BD E0               [24] 2093 	movx	a,@dptr
      0005BE FF               [12] 2094 	mov	r7,a
      0005BF BF 02 00         [24] 2095 	cjne	r7,#0x02,00157$
      0005C2                       2096 00157$:
      0005C2 50 04            [24] 2097 	jnc	00105$
                                   2098 ;	radio/tdm.c:395: LED_RADIO = LED_ON;
      0005C4 D2 B7            [12] 2099 	setb	_LED_GREEN
      0005C6 80 06            [24] 2100 	sjmp	00106$
      0005C8                       2101 00105$:
                                   2102 ;	radio/tdm.c:401: LED_RADIO = blink_state;
      0005C8 A2*02            [12] 2103 	mov	c,_blink_state
      0005CA 92 B7            [24] 2104 	mov	_LED_GREEN,c
                                   2105 ;	radio/tdm.c:402: blink_state = !blink_state;
      0005CC B2*02            [12] 2106 	cpl	_blink_state
      0005CE                       2107 00106$:
                                   2108 ;	radio/tdm.c:405: if (unlock_count > 40) {
      0005CE EF               [12] 2109 	mov	a,r7
      0005CF 24 D7            [12] 2110 	add	a,#0xff - 0x28
      0005D1 40 03            [24] 2111 	jc	00159$
      0005D3 02r06r5E         [24] 2112 	ljmp	00117$
      0005D6                       2113 00159$:
                                   2114 ;	radio/tdm.c:409: unlock_count = 5;
      0005D6 90r00rFD         [24] 2115 	mov	dptr,#_link_update_unlock_count_1_201
      0005D9 74 05            [12] 2116 	mov	a,#0x05
      0005DB F0               [24] 2117 	movx	@dptr,a
                                   2118 ;	radio/tdm.c:413: if (timer_entropy() & 1) {
      0005DC 12r00r00         [24] 2119 	lcall	_timer_entropy
      0005DF E5 82            [12] 2120 	mov	a,dpl
      0005E1 30 E0 59         [24] 2121 	jnb	acc.0,00113$
                                   2122 ;	radio/tdm.c:414: register uint16_t old_remaining = tdm_state_remaining;
      0005E4 78r01            [12] 2123 	mov	r0,#_tdm_state_remaining
      0005E6 E2               [24] 2124 	movx	a,@r0
      0005E7 FE               [12] 2125 	mov	r6,a
      0005E8 08               [12] 2126 	inc	r0
      0005E9 E2               [24] 2127 	movx	a,@r0
      0005EA FF               [12] 2128 	mov	r7,a
                                   2129 ;	radio/tdm.c:415: if (tdm_state_remaining > silence_period) {
      0005EB 78r06            [12] 2130 	mov	r0,#_silence_period
      0005ED C3               [12] 2131 	clr	c
      0005EE E2               [24] 2132 	movx	a,@r0
      0005EF 9E               [12] 2133 	subb	a,r6
      0005F0 08               [12] 2134 	inc	r0
      0005F1 E2               [24] 2135 	movx	a,@r0
      0005F2 9F               [12] 2136 	subb	a,r7
      0005F3 50 17            [24] 2137 	jnc	00108$
                                   2138 ;	radio/tdm.c:416: tdm_state_remaining -= packet_latency;
      0005F5 78r08            [12] 2139 	mov	r0,#_packet_latency
      0005F7 D3               [12] 2140 	setb	c
      0005F8 E2               [24] 2141 	movx	a,@r0
      0005F9 9E               [12] 2142 	subb	a,r6
      0005FA F4               [12] 2143 	cpl	a
      0005FB B3               [12] 2144 	cpl	c
      0005FC FC               [12] 2145 	mov	r4,a
      0005FD B3               [12] 2146 	cpl	c
      0005FE 08               [12] 2147 	inc	r0
      0005FF E2               [24] 2148 	movx	a,@r0
      000600 9F               [12] 2149 	subb	a,r7
      000601 F4               [12] 2150 	cpl	a
      000602 FD               [12] 2151 	mov	r5,a
      000603 78r01            [12] 2152 	mov	r0,#_tdm_state_remaining
      000605 EC               [12] 2153 	mov	a,r4
      000606 F2               [24] 2154 	movx	@r0,a
      000607 08               [12] 2155 	inc	r0
      000608 ED               [12] 2156 	mov	a,r5
      000609 F2               [24] 2157 	movx	@r0,a
      00060A 80 08            [24] 2158 	sjmp	00109$
      00060C                       2159 00108$:
                                   2160 ;	radio/tdm.c:418: tdm_state_remaining = 1;
      00060C 78r01            [12] 2161 	mov	r0,#_tdm_state_remaining
      00060E 74 01            [12] 2162 	mov	a,#0x01
      000610 F2               [24] 2163 	movx	@r0,a
      000611 08               [12] 2164 	inc	r0
      000612 E4               [12] 2165 	clr	a
      000613 F2               [24] 2166 	movx	@r0,a
      000614                       2167 00109$:
                                   2168 ;	radio/tdm.c:420: if (at_testmode & AT_TEST_TDM) {
      000614 78r00            [12] 2169 	mov	r0,#_at_testmode
      000616 E2               [24] 2170 	movx	a,@r0
      000617 54 02            [12] 2171 	anl	a,#0x02
      000619 60 22            [24] 2172 	jz	00113$
                                   2173 ;	radio/tdm.c:421: printf("TDM: change timing %u/%u\n",
      00061B 78r01            [12] 2174 	mov	r0,#_tdm_state_remaining
      00061D E2               [24] 2175 	movx	a,@r0
      00061E C0 E0            [24] 2176 	push	acc
      000620 08               [12] 2177 	inc	r0
      000621 E2               [24] 2178 	movx	a,@r0
      000622 C0 E0            [24] 2179 	push	acc
      000624 C0 06            [24] 2180 	push	ar6
      000626 C0 07            [24] 2181 	push	ar7
      000628 74r8A            [12] 2182 	mov	a,#___str_4
      00062A C0 E0            [24] 2183 	push	acc
      00062C 74s00            [12] 2184 	mov	a,#(___str_4 >> 8)
      00062E C0 E0            [24] 2185 	push	acc
      000630 74 80            [12] 2186 	mov	a,#0x80
      000632 C0 E0            [24] 2187 	push	acc
      000634 12r00r00         [24] 2188 	lcall	_printfl
      000637 E5 81            [12] 2189 	mov	a,sp
      000639 24 F9            [12] 2190 	add	a,#0xf9
      00063B F5 81            [12] 2191 	mov	sp,a
      00063D                       2192 00113$:
                                   2193 ;	radio/tdm.c:427: if (at_testmode & AT_TEST_TDM) {
      00063D 78r00            [12] 2194 	mov	r0,#_at_testmode
      00063F E2               [24] 2195 	movx	a,@r0
      000640 54 02            [12] 2196 	anl	a,#0x02
      000642 60 15            [24] 2197 	jz	00115$
                                   2198 ;	radio/tdm.c:428: printf("TDM: scanning\n");
      000644 74rA4            [12] 2199 	mov	a,#___str_5
      000646 C0 E0            [24] 2200 	push	acc
      000648 74s00            [12] 2201 	mov	a,#(___str_5 >> 8)
      00064A C0 E0            [24] 2202 	push	acc
      00064C 74 80            [12] 2203 	mov	a,#0x80
      00064E C0 E0            [24] 2204 	push	acc
      000650 12r00r00         [24] 2205 	lcall	_printfl
      000653 15 81            [12] 2206 	dec	sp
      000655 15 81            [12] 2207 	dec	sp
      000657 15 81            [12] 2208 	dec	sp
      000659                       2209 00115$:
                                   2210 ;	radio/tdm.c:430: fhop_set_locked(false);
      000659 C2*00            [12] 2211 	clr	_fhop_set_locked_PARM_1
      00065B 12r00r00         [24] 2212 	lcall	_fhop_set_locked
      00065E                       2213 00117$:
                                   2214 ;	radio/tdm.c:433: if (unlock_count != 0) {
      00065E 90r00rFD         [24] 2215 	mov	dptr,#_link_update_unlock_count_1_201
      000661 E0               [24] 2216 	movx	a,@dptr
      000662 60 3D            [24] 2217 	jz	00119$
                                   2218 ;	radio/tdm.c:434: statistics.average_rssi = (radio_last_rssi() + 3*(uint16_t)statistics.average_rssi)/4;
      000664 12r00r00         [24] 2219 	lcall	_radio_last_rssi
      000667 AF 82            [24] 2220 	mov	r7,dpl
      000669 7E 00            [12] 2221 	mov	r6,#0x00
      00066B 78r00            [12] 2222 	mov	r0,#_statistics
      00066D E2               [24] 2223 	movx	a,@r0
      00066E 90r00r00         [24] 2224 	mov	dptr,#__mulint_PARM_2
      000671 F0               [24] 2225 	movx	@dptr,a
      000672 E4               [12] 2226 	clr	a
      000673 A3               [24] 2227 	inc	dptr
      000674 F0               [24] 2228 	movx	@dptr,a
      000675 90 00 03         [24] 2229 	mov	dptr,#0x0003
      000678 C0 07            [24] 2230 	push	ar7
      00067A C0 06            [24] 2231 	push	ar6
      00067C 12r00r00         [24] 2232 	lcall	__mulint
      00067F AC 82            [24] 2233 	mov	r4,dpl
      000681 AD 83            [24] 2234 	mov	r5,dph
      000683 D0 06            [24] 2235 	pop	ar6
      000685 D0 07            [24] 2236 	pop	ar7
      000687 EC               [12] 2237 	mov	a,r4
      000688 2F               [12] 2238 	add	a,r7
      000689 FC               [12] 2239 	mov	r4,a
      00068A ED               [12] 2240 	mov	a,r5
      00068B 3E               [12] 2241 	addc	a,r6
      00068C C3               [12] 2242 	clr	c
      00068D 13               [12] 2243 	rrc	a
      00068E CC               [12] 2244 	xch	a,r4
      00068F 13               [12] 2245 	rrc	a
      000690 CC               [12] 2246 	xch	a,r4
      000691 C3               [12] 2247 	clr	c
      000692 13               [12] 2248 	rrc	a
      000693 CC               [12] 2249 	xch	a,r4
      000694 13               [12] 2250 	rrc	a
      000695 CC               [12] 2251 	xch	a,r4
      000696 FD               [12] 2252 	mov	r5,a
      000697 78r00            [12] 2253 	mov	r0,#_statistics
      000699 EC               [12] 2254 	mov	a,r4
      00069A F2               [24] 2255 	movx	@r0,a
                                   2256 ;	radio/tdm.c:437: statistics.receive_count = 0;
      00069B 78r02            [12] 2257 	mov	r0,#(_statistics + 0x0002)
      00069D E4               [12] 2258 	clr	a
      00069E F2               [24] 2259 	movx	@r0,a
      00069F 08               [12] 2260 	inc	r0
      0006A0 F2               [24] 2261 	movx	@r0,a
      0006A1                       2262 00119$:
                                   2263 ;	radio/tdm.c:440: if (unlock_count > 5) {
      0006A1 90r00rFD         [24] 2264 	mov	dptr,#_link_update_unlock_count_1_201
      0006A4 E0               [24] 2265 	movx	a,@dptr
      0006A5 FF               [12] 2266 	mov  r7,a
      0006A6 24 FA            [12] 2267 	add	a,#0xff - 0x05
      0006A8 50 17            [24] 2268 	jnc	00121$
                                   2269 ;	radio/tdm.c:441: memset(&remote_statistics, 0, sizeof(remote_statistics));
      0006AA 90r00r00         [24] 2270 	mov	dptr,#_memset_PARM_2
      0006AD E4               [12] 2271 	clr	a
      0006AE F0               [24] 2272 	movx	@dptr,a
      0006AF 90r00r00         [24] 2273 	mov	dptr,#_memset_PARM_3
      0006B2 74 04            [12] 2274 	mov	a,#0x04
      0006B4 F0               [24] 2275 	movx	@dptr,a
      0006B5 E4               [12] 2276 	clr	a
      0006B6 A3               [24] 2277 	inc	dptr
      0006B7 F0               [24] 2278 	movx	@dptr,a
      0006B8 90r00r00         [24] 2279 	mov	dptr,#_remote_statistics
      0006BB 75 F0 60         [24] 2280 	mov	b,#0x60
      0006BE 12r00r00         [24] 2281 	lcall	_memset
      0006C1                       2282 00121$:
                                   2283 ;	radio/tdm.c:444: test_display = at_testmode;
      0006C1 78r00            [12] 2284 	mov	r0,#_at_testmode
      0006C3 90r00rFC         [24] 2285 	mov	dptr,#_test_display
      0006C6 E2               [24] 2286 	movx	a,@r0
      0006C7 F0               [24] 2287 	movx	@dptr,a
                                   2288 ;	radio/tdm.c:445: send_statistics = 1;
      0006C8 D2*05            [12] 2289 	setb	_send_statistics
                                   2290 ;	radio/tdm.c:447: temperature_count++;
      0006CA 90r00rFE         [24] 2291 	mov	dptr,#_link_update_temperature_count_1_201
      0006CD E0               [24] 2292 	movx	a,@dptr
      0006CE 24 01            [12] 2293 	add	a,#0x01
      0006D0 F0               [24] 2294 	movx	@dptr,a
                                   2295 ;	radio/tdm.c:448: if (temperature_count == 4) {
      0006D1 E0               [24] 2296 	movx	a,@dptr
      0006D2 FF               [12] 2297 	mov	r7,a
      0006D3 BF 04 08         [24] 2298 	cjne	r7,#0x04,00124$
                                   2299 ;	radio/tdm.c:450: temperature_update();
      0006D6 12r05r0D         [24] 2300 	lcall	_temperature_update
                                   2301 ;	radio/tdm.c:451: temperature_count = 0;
      0006D9 90r00rFE         [24] 2302 	mov	dptr,#_link_update_temperature_count_1_201
      0006DC E4               [12] 2303 	clr	a
      0006DD F0               [24] 2304 	movx	@dptr,a
      0006DE                       2305 00124$:
      0006DE 22               [24] 2306 	ret
                                   2307 ;------------------------------------------------------------
                                   2308 ;Allocation info for local variables in function 'tdm_remote_at'
                                   2309 ;------------------------------------------------------------
                                   2310 ;	radio/tdm.c:457: tdm_remote_at(void)
                                   2311 ;	-----------------------------------------
                                   2312 ;	 function tdm_remote_at
                                   2313 ;	-----------------------------------------
      0006DF                       2314 _tdm_remote_at:
                                   2315 ;	radio/tdm.c:459: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
      0006DF 90r00r00         [24] 2316 	mov	dptr,#_at_cmd
      0006E2 75 F0 00         [24] 2317 	mov	b,#0x00
      0006E5 12r00r00         [24] 2318 	lcall	_strlen
      0006E8 E5 82            [12] 2319 	mov	a,dpl
      0006EA 85 83 F0         [24] 2320 	mov	b,dph
      0006ED 24 01            [12] 2321 	add	a,#0x01
      0006EF FE               [12] 2322 	mov	r6,a
      0006F0 E4               [12] 2323 	clr	a
      0006F1 35 F0            [12] 2324 	addc	a,b
      0006F3 FF               [12] 2325 	mov	r7,a
      0006F4 90r00r00         [24] 2326 	mov	dptr,#_memcpy_PARM_2
      0006F7 74r00            [12] 2327 	mov	a,#_at_cmd
      0006F9 F0               [24] 2328 	movx	@dptr,a
      0006FA 74s00            [12] 2329 	mov	a,#(_at_cmd >> 8)
      0006FC A3               [24] 2330 	inc	dptr
      0006FD F0               [24] 2331 	movx	@dptr,a
      0006FE E4               [12] 2332 	clr	a
      0006FF A3               [24] 2333 	inc	dptr
      000700 F0               [24] 2334 	movx	@dptr,a
      000701 90r00r00         [24] 2335 	mov	dptr,#_memcpy_PARM_3
      000704 EE               [12] 2336 	mov	a,r6
      000705 F0               [24] 2337 	movx	@dptr,a
      000706 EF               [12] 2338 	mov	a,r7
      000707 A3               [24] 2339 	inc	dptr
      000708 F0               [24] 2340 	movx	@dptr,a
      000709 90r00r21         [24] 2341 	mov	dptr,#_remote_at_cmd
      00070C 75 F0 60         [24] 2342 	mov	b,#0x60
      00070F 12r00r00         [24] 2343 	lcall	_memcpy
                                   2344 ;	radio/tdm.c:460: send_at_command = true;
      000712 D2*06            [12] 2345 	setb	_send_at_command
      000714 22               [24] 2346 	ret
                                   2347 ;------------------------------------------------------------
                                   2348 ;Allocation info for local variables in function 'handle_at_command'
                                   2349 ;------------------------------------------------------------
                                   2350 ;	radio/tdm.c:468: handle_at_command(__pdata uint8_t len)
                                   2351 ;	-----------------------------------------
                                   2352 ;	 function handle_at_command
                                   2353 ;	-----------------------------------------
      000715                       2354 _handle_at_command:
      000715 AF 82            [24] 2355 	mov	r7,dpl
                                   2356 ;	radio/tdm.c:470: if (len < 2 || len > AT_CMD_MAXLEN ||
      000717 BF 02 00         [24] 2357 	cjne	r7,#0x02,00122$
      00071A                       2358 00122$:
      00071A 40 17            [24] 2359 	jc	00101$
      00071C EF               [12] 2360 	mov	a,r7
      00071D 24 BA            [12] 2361 	add	a,#0xff - 0x45
      00071F 40 12            [24] 2362 	jc	00101$
                                   2363 ;	radio/tdm.c:471: pbuf[0] != (uint8_t)'R' ||
      000721 90r00r00         [24] 2364 	mov	dptr,#_pbuf
      000724 E0               [24] 2365 	movx	a,@dptr
      000725 FE               [12] 2366 	mov	r6,a
      000726 BE 52 0A         [24] 2367 	cjne	r6,#0x52,00101$
                                   2368 ;	radio/tdm.c:472: pbuf[1] != (uint8_t)'T') {
      000729 90r00r01         [24] 2369 	mov	dptr,#(_pbuf + 0x0001)
      00072C E0               [24] 2370 	movx	a,@dptr
      00072D FE               [12] 2371 	mov	r6,a
      00072E BE 54 02         [24] 2372 	cjne	r6,#0x54,00127$
      000731 80 02            [24] 2373 	sjmp	00102$
      000733                       2374 00127$:
      000733                       2375 00101$:
                                   2376 ;	radio/tdm.c:473: return true;
      000733 D3               [12] 2377 	setb	c
      000734 22               [24] 2378 	ret
      000735                       2379 00102$:
                                   2380 ;	radio/tdm.c:477: memcpy(at_cmd, pbuf, len);
      000735 90r00r00         [24] 2381 	mov	dptr,#_memcpy_PARM_2
      000738 74r00            [12] 2382 	mov	a,#_pbuf
      00073A F0               [24] 2383 	movx	@dptr,a
      00073B 74s00            [12] 2384 	mov	a,#(_pbuf >> 8)
      00073D A3               [24] 2385 	inc	dptr
      00073E F0               [24] 2386 	movx	@dptr,a
      00073F E4               [12] 2387 	clr	a
      000740 A3               [24] 2388 	inc	dptr
      000741 F0               [24] 2389 	movx	@dptr,a
      000742 90r00r00         [24] 2390 	mov	dptr,#_memcpy_PARM_3
      000745 EF               [12] 2391 	mov	a,r7
      000746 F0               [24] 2392 	movx	@dptr,a
      000747 E4               [12] 2393 	clr	a
      000748 A3               [24] 2394 	inc	dptr
      000749 F0               [24] 2395 	movx	@dptr,a
      00074A 90r00r00         [24] 2396 	mov	dptr,#_at_cmd
      00074D 75 F0 00         [24] 2397 	mov	b,#0x00
      000750 C0 07            [24] 2398 	push	ar7
      000752 12r00r00         [24] 2399 	lcall	_memcpy
      000755 D0 07            [24] 2400 	pop	ar7
                                   2401 ;	radio/tdm.c:478: at_cmd[len] = 0;
      000757 EF               [12] 2402 	mov	a,r7
      000758 24r00            [12] 2403 	add	a,#_at_cmd
      00075A F5 82            [12] 2404 	mov	dpl,a
      00075C E4               [12] 2405 	clr	a
      00075D 34s00            [12] 2406 	addc	a,#(_at_cmd >> 8)
      00075F F5 83            [12] 2407 	mov	dph,a
      000761 E4               [12] 2408 	clr	a
      000762 F0               [24] 2409 	movx	@dptr,a
                                   2410 ;	radio/tdm.c:479: at_cmd[0] = 'A'; // replace 'R'
      000763 90r00r00         [24] 2411 	mov	dptr,#_at_cmd
      000766 74 41            [12] 2412 	mov	a,#0x41
      000768 F0               [24] 2413 	movx	@dptr,a
                                   2414 ;	radio/tdm.c:480: at_cmd_len = len;
      000769 78r00            [12] 2415 	mov	r0,#_at_cmd_len
      00076B EF               [12] 2416 	mov	a,r7
      00076C F2               [24] 2417 	movx	@r0,a
                                   2418 ;	radio/tdm.c:481: at_cmd_ready = true;
      00076D D2*00            [12] 2419 	setb	_at_cmd_ready
                                   2420 ;	radio/tdm.c:486: printf_start_capture(pbuf, sizeof(pbuf));
      00076F 90r00r00         [24] 2421 	mov	dptr,#_printf_start_capture_PARM_2
      000772 74 FC            [12] 2422 	mov	a,#0xFC
      000774 F0               [24] 2423 	movx	@dptr,a
      000775 90r00r00         [24] 2424 	mov	dptr,#_pbuf
      000778 12r00r00         [24] 2425 	lcall	_printf_start_capture
                                   2426 ;	radio/tdm.c:487: at_command();
      00077B 12r00r00         [24] 2427 	lcall	_at_command
                                   2428 ;	radio/tdm.c:488: len = printf_end_capture();
      00077E 12r00r00         [24] 2429 	lcall	_printf_end_capture
                                   2430 ;	radio/tdm.c:489: if (len > 0) {
      000781 E5 82            [12] 2431 	mov	a,dpl
      000783 FF               [12] 2432 	mov	r7,a
      000784 60 0A            [24] 2433 	jz	00107$
                                   2434 ;	radio/tdm.c:490: packet_inject(pbuf, len);
      000786 78r00            [12] 2435 	mov	r0,#_packet_inject_PARM_2
      000788 EF               [12] 2436 	mov	a,r7
      000789 F2               [24] 2437 	movx	@r0,a
      00078A 90r00r00         [24] 2438 	mov	dptr,#_pbuf
      00078D 12r00r00         [24] 2439 	lcall	_packet_inject
      000790                       2440 00107$:
                                   2441 ;	radio/tdm.c:492: return false;
      000790 C3               [12] 2442 	clr	c
      000791 22               [24] 2443 	ret
                                   2444 ;------------------------------------------------------------
                                   2445 ;Allocation info for local variables in function 'tdm_serial_loop'
                                   2446 ;------------------------------------------------------------
                                   2447 ;	radio/tdm.c:501: tdm_serial_loop(void)
                                   2448 ;	-----------------------------------------
                                   2449 ;	 function tdm_serial_loop
                                   2450 ;	-----------------------------------------
      000792                       2451 _tdm_serial_loop:
                                   2452 ;	radio/tdm.c:516: __pdata uint16_t last_t = timer2_tick();
      000792 12r00r00         [24] 2453 	lcall	_timer2_tick
      000795 78r6C            [12] 2454 	mov	r0,#_tdm_serial_loop_last_t_1_222
      000797 E5 82            [12] 2455 	mov	a,dpl
      000799 F2               [24] 2456 	movx	@r0,a
      00079A 08               [12] 2457 	inc	r0
      00079B E5 83            [12] 2458 	mov	a,dph
      00079D F2               [24] 2459 	movx	@r0,a
                                   2460 ;	radio/tdm.c:517: __pdata uint16_t last_link_update = last_t;
      00079E 78r6C            [12] 2461 	mov	r0,#_tdm_serial_loop_last_t_1_222
      0007A0 79r6E            [12] 2462 	mov	r1,#_tdm_serial_loop_last_link_update_1_222
      0007A2 E2               [24] 2463 	movx	a,@r0
      0007A3 F3               [24] 2464 	movx	@r1,a
      0007A4 08               [12] 2465 	inc	r0
      0007A5 E2               [24] 2466 	movx	a,@r0
      0007A6 09               [12] 2467 	inc	r1
      0007A7 F3               [24] 2468 	movx	@r1,a
                                   2469 ;	radio/tdm.c:520: _canary = 42;
      0007A8 78 FF            [12] 2470 	mov	r0,#__canary
      0007AA 76 2A            [12] 2471 	mov	@r0,#0x2A
      0007AC                       2472 00215$:
                                   2473 ;	radio/tdm.c:523: if (_canary != 42) {
      0007AC 78 FF            [12] 2474 	mov	r0,#__canary
      0007AE B6 2A 02         [24] 2475 	cjne	@r0,#0x2A,00389$
      0007B1 80 15            [24] 2476 	sjmp	00102$
      0007B3                       2477 00389$:
                                   2478 ;	radio/tdm.c:524: panic("stack blown\n");
      0007B3 74rB3            [12] 2479 	mov	a,#___str_6
      0007B5 C0 E0            [24] 2480 	push	acc
      0007B7 74s00            [12] 2481 	mov	a,#(___str_6 >> 8)
      0007B9 C0 E0            [24] 2482 	push	acc
      0007BB 74 80            [12] 2483 	mov	a,#0x80
      0007BD C0 E0            [24] 2484 	push	acc
      0007BF 12r00r00         [24] 2485 	lcall	_panic
      0007C2 15 81            [12] 2486 	dec	sp
      0007C4 15 81            [12] 2487 	dec	sp
      0007C6 15 81            [12] 2488 	dec	sp
      0007C8                       2489 00102$:
                                   2490 ;	radio/tdm.c:527: if (pdata_canary != 0x41) {
      0007C8 78r00            [12] 2491 	mov	r0,#_pdata_canary
      0007CA E2               [24] 2492 	movx	a,@r0
      0007CB B4 41 02         [24] 2493 	cjne	a,#0x41,00390$
      0007CE 80 15            [24] 2494 	sjmp	00104$
      0007D0                       2495 00390$:
                                   2496 ;	radio/tdm.c:528: panic("pdata canary changed\n");
      0007D0 74rC0            [12] 2497 	mov	a,#___str_7
      0007D2 C0 E0            [24] 2498 	push	acc
      0007D4 74s00            [12] 2499 	mov	a,#(___str_7 >> 8)
      0007D6 C0 E0            [24] 2500 	push	acc
      0007D8 74 80            [12] 2501 	mov	a,#0x80
      0007DA C0 E0            [24] 2502 	push	acc
      0007DC 12r00r00         [24] 2503 	lcall	_panic
      0007DF 15 81            [12] 2504 	dec	sp
      0007E1 15 81            [12] 2505 	dec	sp
      0007E3 15 81            [12] 2506 	dec	sp
      0007E5                       2507 00104$:
                                   2508 ;	radio/tdm.c:532: at_command();
      0007E5 12r00r00         [24] 2509 	lcall	_at_command
                                   2510 ;	radio/tdm.c:535: if (test_display) {
      0007E8 90r00rFC         [24] 2511 	mov	dptr,#_test_display
      0007EB E0               [24] 2512 	movx	a,@dptr
      0007EC 60 08            [24] 2513 	jz	00106$
                                   2514 ;	radio/tdm.c:536: display_test_output();
      0007EE 12r00rDE         [24] 2515 	lcall	_display_test_output
                                   2516 ;	radio/tdm.c:537: test_display = 0;
      0007F1 90r00rFC         [24] 2517 	mov	dptr,#_test_display
      0007F4 E4               [12] 2518 	clr	a
      0007F5 F0               [24] 2519 	movx	@dptr,a
      0007F6                       2520 00106$:
                                   2521 ;	radio/tdm.c:540: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
      0007F6 30*00 0E         [24] 2522 	jnb	_seen_mavlink,00108$
      0007F9 90r00r00         [24] 2523 	mov	dptr,#_feature_mavlink_framing
      0007FC E0               [24] 2524 	movx	a,@dptr
      0007FD 60 08            [24] 2525 	jz	00108$
      0007FF 20*00 05         [24] 2526 	jb	_at_mode_active,00108$
                                   2527 ;	radio/tdm.c:541: seen_mavlink = false;
      000802 C2*00            [12] 2528 	clr	_seen_mavlink
                                   2529 ;	radio/tdm.c:542: MAVLink_report();
      000804 12r00r00         [24] 2530 	lcall	_MAVLink_report
      000807                       2531 00108$:
                                   2532 ;	radio/tdm.c:546: radio_set_channel(fhop_receive_channel());
      000807 12r00r00         [24] 2533 	lcall	_fhop_receive_channel
      00080A 12r00r00         [24] 2534 	lcall	_radio_set_channel
                                   2535 ;	radio/tdm.c:549: tnow = timer2_tick();
      00080D 12r00r00         [24] 2536 	lcall	_timer2_tick
      000810 AA 82            [24] 2537 	mov	r2,dpl
      000812 AB 83            [24] 2538 	mov	r3,dph
                                   2539 ;	radio/tdm.c:552: if (radio_receive_packet(&len, pbuf)) {
      000814 78r00            [12] 2540 	mov	r0,#_radio_receive_packet_PARM_2
      000816 74r00            [12] 2541 	mov	a,#_pbuf
      000818 F2               [24] 2542 	movx	@r0,a
      000819 08               [12] 2543 	inc	r0
      00081A 74s00            [12] 2544 	mov	a,#(_pbuf >> 8)
      00081C F2               [24] 2545 	movx	@r0,a
      00081D 90r00r69         [24] 2546 	mov	dptr,#_tdm_serial_loop_len_1_222
      000820 75 F0 60         [24] 2547 	mov	b,#0x60
      000823 C0 03            [24] 2548 	push	ar3
      000825 C0 02            [24] 2549 	push	ar2
      000827 12r00r00         [24] 2550 	lcall	_radio_receive_packet
      00082A D0 02            [24] 2551 	pop	ar2
      00082C D0 03            [24] 2552 	pop	ar3
      00082E 40 03            [24] 2553 	jc	00395$
      000830 02r09rFB         [24] 2554 	ljmp	00134$
      000833                       2555 00395$:
                                   2556 ;	radio/tdm.c:555: received_packet = true;
      000833 D2*03            [12] 2557 	setb	_received_packet
                                   2558 ;	radio/tdm.c:556: fhop_set_locked(true);
      000835 D2*00            [12] 2559 	setb	_fhop_set_locked_PARM_1
      000837 C0 03            [24] 2560 	push	ar3
      000839 C0 02            [24] 2561 	push	ar2
      00083B 12r00r00         [24] 2562 	lcall	_fhop_set_locked
                                   2563 ;	radio/tdm.c:559: statistics.average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics.average_rssi)/8;
      00083E 12r00r00         [24] 2564 	lcall	_radio_last_rssi
      000841 AD 82            [24] 2565 	mov	r5,dpl
      000843 D0 02            [24] 2566 	pop	ar2
      000845 D0 03            [24] 2567 	pop	ar3
      000847 7C 00            [12] 2568 	mov	r4,#0x00
      000849 78r00            [12] 2569 	mov	r0,#_statistics
      00084B E2               [24] 2570 	movx	a,@r0
      00084C 90r00r00         [24] 2571 	mov	dptr,#__mulint_PARM_2
      00084F F0               [24] 2572 	movx	@dptr,a
      000850 E4               [12] 2573 	clr	a
      000851 A3               [24] 2574 	inc	dptr
      000852 F0               [24] 2575 	movx	@dptr,a
      000853 90 00 07         [24] 2576 	mov	dptr,#0x0007
      000856 C0 05            [24] 2577 	push	ar5
      000858 C0 04            [24] 2578 	push	ar4
      00085A C0 03            [24] 2579 	push	ar3
      00085C C0 02            [24] 2580 	push	ar2
      00085E 12r00r00         [24] 2581 	lcall	__mulint
      000861 AE 82            [24] 2582 	mov	r6,dpl
      000863 AF 83            [24] 2583 	mov	r7,dph
      000865 D0 02            [24] 2584 	pop	ar2
      000867 D0 03            [24] 2585 	pop	ar3
      000869 D0 04            [24] 2586 	pop	ar4
      00086B D0 05            [24] 2587 	pop	ar5
      00086D EE               [12] 2588 	mov	a,r6
      00086E 2D               [12] 2589 	add	a,r5
      00086F FE               [12] 2590 	mov	r6,a
      000870 EF               [12] 2591 	mov	a,r7
      000871 3C               [12] 2592 	addc	a,r4
      000872 C4               [12] 2593 	swap	a
      000873 23               [12] 2594 	rl	a
      000874 CE               [12] 2595 	xch	a,r6
      000875 C4               [12] 2596 	swap	a
      000876 23               [12] 2597 	rl	a
      000877 54 1F            [12] 2598 	anl	a,#0x1F
      000879 6E               [12] 2599 	xrl	a,r6
      00087A CE               [12] 2600 	xch	a,r6
      00087B 54 1F            [12] 2601 	anl	a,#0x1F
      00087D CE               [12] 2602 	xch	a,r6
      00087E 6E               [12] 2603 	xrl	a,r6
      00087F CE               [12] 2604 	xch	a,r6
      000880 78r00            [12] 2605 	mov	r0,#_statistics
      000882 EE               [12] 2606 	mov	a,r6
      000883 F2               [24] 2607 	movx	@r0,a
                                   2608 ;	radio/tdm.c:560: statistics.receive_count++;
      000884 78r02            [12] 2609 	mov	r0,#(_statistics + 0x0002)
      000886 E2               [24] 2610 	movx	a,@r0
      000887 FE               [12] 2611 	mov	r6,a
      000888 08               [12] 2612 	inc	r0
      000889 E2               [24] 2613 	movx	a,@r0
      00088A FF               [12] 2614 	mov	r7,a
      00088B 0E               [12] 2615 	inc	r6
      00088C BE 00 01         [24] 2616 	cjne	r6,#0x00,00396$
      00088F 0F               [12] 2617 	inc	r7
      000890                       2618 00396$:
      000890 78r02            [12] 2619 	mov	r0,#(_statistics + 0x0002)
      000892 EE               [12] 2620 	mov	a,r6
      000893 F2               [24] 2621 	movx	@r0,a
      000894 08               [12] 2622 	inc	r0
      000895 EF               [12] 2623 	mov	a,r7
      000896 F2               [24] 2624 	movx	@r0,a
                                   2625 ;	radio/tdm.c:564: transmit_wait = 0;
      000897 78r0C            [12] 2626 	mov	r0,#_transmit_wait
      000899 E4               [12] 2627 	clr	a
      00089A F2               [24] 2628 	movx	@r0,a
      00089B 08               [12] 2629 	inc	r0
      00089C F2               [24] 2630 	movx	@r0,a
                                   2631 ;	radio/tdm.c:566: if (len < 2) {
      00089D 78r69            [12] 2632 	mov	r0,#_tdm_serial_loop_len_1_222
      00089F E2               [24] 2633 	movx	a,@r0
      0008A0 B4 02 00         [24] 2634 	cjne	a,#0x02,00397$
      0008A3                       2635 00397$:
      0008A3 50 03            [24] 2636 	jnc	00398$
      0008A5 02r07rAC         [24] 2637 	ljmp	00215$
      0008A8                       2638 00398$:
                                   2639 ;	radio/tdm.c:573: memcpy(&trailer, &pbuf[len-sizeof(trailer)], sizeof(trailer));
      0008A8 78r69            [12] 2640 	mov	r0,#_tdm_serial_loop_len_1_222
      0008AA E2               [24] 2641 	movx	a,@r0
      0008AB 24 FC            [12] 2642 	add	a,#0xFC
      0008AD 24r00            [12] 2643 	add	a,#_pbuf
      0008AF FE               [12] 2644 	mov	r6,a
      0008B0 E4               [12] 2645 	clr	a
      0008B1 34s00            [12] 2646 	addc	a,#(_pbuf >> 8)
      0008B3 FF               [12] 2647 	mov	r7,a
      0008B4 90r00r00         [24] 2648 	mov	dptr,#_memcpy_PARM_2
      0008B7 EE               [12] 2649 	mov	a,r6
      0008B8 F0               [24] 2650 	movx	@dptr,a
      0008B9 EF               [12] 2651 	mov	a,r7
      0008BA A3               [24] 2652 	inc	dptr
      0008BB F0               [24] 2653 	movx	@dptr,a
      0008BC E4               [12] 2654 	clr	a
      0008BD A3               [24] 2655 	inc	dptr
      0008BE F0               [24] 2656 	movx	@dptr,a
      0008BF 90r00r00         [24] 2657 	mov	dptr,#_memcpy_PARM_3
      0008C2 74 04            [12] 2658 	mov	a,#0x04
      0008C4 F0               [24] 2659 	movx	@dptr,a
      0008C5 E4               [12] 2660 	clr	a
      0008C6 A3               [24] 2661 	inc	dptr
      0008C7 F0               [24] 2662 	movx	@dptr,a
      0008C8 90r00r1D         [24] 2663 	mov	dptr,#_trailer
      0008CB 75 F0 60         [24] 2664 	mov	b,#0x60
      0008CE C0 03            [24] 2665 	push	ar3
      0008D0 C0 02            [24] 2666 	push	ar2
      0008D2 12r00r00         [24] 2667 	lcall	_memcpy
      0008D5 D0 02            [24] 2668 	pop	ar2
      0008D7 D0 03            [24] 2669 	pop	ar3
                                   2670 ;	radio/tdm.c:574: len -= sizeof(trailer);
      0008D9 78r69            [12] 2671 	mov	r0,#_tdm_serial_loop_len_1_222
      0008DB E2               [24] 2672 	movx	a,@r0
      0008DC 14               [12] 2673 	dec	a
      0008DD 14               [12] 2674 	dec	a
      0008DE 14               [12] 2675 	dec	a
      0008DF 14               [12] 2676 	dec	a
      0008E0 F2               [24] 2677 	movx	@r0,a
                                   2678 ;	radio/tdm.c:576: if (trailer.window == 0 && len != 0) {
      0008E1 78r1D            [12] 2679 	mov	r0,#_trailer
      0008E3 E2               [24] 2680 	movx	a,@r0
      0008E4 FE               [12] 2681 	mov	r6,a
      0008E5 08               [12] 2682 	inc	r0
      0008E6 E2               [24] 2683 	movx	a,@r0
      0008E7 54 1F            [12] 2684 	anl	a,#0x1F
      0008E9 FF               [12] 2685 	mov	r7,a
      0008EA 4E               [12] 2686 	orl	a,r6
      0008EB 70 41            [24] 2687 	jnz	00130$
      0008ED 78r69            [12] 2688 	mov	r0,#_tdm_serial_loop_len_1_222
      0008EF E2               [24] 2689 	movx	a,@r0
      0008F0 60 3C            [24] 2690 	jz	00130$
                                   2691 ;	radio/tdm.c:578: if (len == sizeof(struct statistics)) {
      0008F2 78r69            [12] 2692 	mov	r0,#_tdm_serial_loop_len_1_222
      0008F4 E2               [24] 2693 	movx	a,@r0
      0008F5 B4 04 20         [24] 2694 	cjne	a,#0x04,00114$
                                   2695 ;	radio/tdm.c:579: memcpy(&remote_statistics, pbuf, len);
      0008F8 90r00r00         [24] 2696 	mov	dptr,#_memcpy_PARM_2
      0008FB 74r00            [12] 2697 	mov	a,#_pbuf
      0008FD F0               [24] 2698 	movx	@dptr,a
      0008FE 74s00            [12] 2699 	mov	a,#(_pbuf >> 8)
      000900 A3               [24] 2700 	inc	dptr
      000901 F0               [24] 2701 	movx	@dptr,a
      000902 E4               [12] 2702 	clr	a
      000903 A3               [24] 2703 	inc	dptr
      000904 F0               [24] 2704 	movx	@dptr,a
      000905 78r69            [12] 2705 	mov	r0,#_tdm_serial_loop_len_1_222
      000907 90r00r00         [24] 2706 	mov	dptr,#_memcpy_PARM_3
      00090A E2               [24] 2707 	movx	a,@r0
      00090B F0               [24] 2708 	movx	@dptr,a
      00090C E4               [12] 2709 	clr	a
      00090D A3               [24] 2710 	inc	dptr
      00090E F0               [24] 2711 	movx	@dptr,a
      00090F 90r00r00         [24] 2712 	mov	dptr,#_remote_statistics
      000912 75 F0 60         [24] 2713 	mov	b,#0x60
      000915 12r00r00         [24] 2714 	lcall	_memcpy
      000918                       2715 00114$:
                                   2716 ;	radio/tdm.c:583: statistics.receive_count--;
      000918 78r02            [12] 2717 	mov	r0,#(_statistics + 0x0002)
      00091A E2               [24] 2718 	movx	a,@r0
      00091B FE               [12] 2719 	mov	r6,a
      00091C 08               [12] 2720 	inc	r0
      00091D E2               [24] 2721 	movx	a,@r0
      00091E FF               [12] 2722 	mov	r7,a
      00091F 1E               [12] 2723 	dec	r6
      000920 BE FF 01         [24] 2724 	cjne	r6,#0xFF,00403$
      000923 1F               [12] 2725 	dec	r7
      000924                       2726 00403$:
      000924 78r02            [12] 2727 	mov	r0,#(_statistics + 0x0002)
      000926 EE               [12] 2728 	mov	a,r6
      000927 F2               [24] 2729 	movx	@r0,a
      000928 08               [12] 2730 	inc	r0
      000929 EF               [12] 2731 	mov	a,r7
      00092A F2               [24] 2732 	movx	@r0,a
      00092B 02r07rAC         [24] 2733 	ljmp	00215$
      00092E                       2734 00130$:
                                   2735 ;	radio/tdm.c:584: } else if (trailer.window != 0) {
      00092E 78r1D            [12] 2736 	mov	r0,#_trailer
      000930 E2               [24] 2737 	movx	a,@r0
      000931 FE               [12] 2738 	mov	r6,a
      000932 08               [12] 2739 	inc	r0
      000933 E2               [24] 2740 	movx	a,@r0
      000934 54 1F            [12] 2741 	anl	a,#0x1F
      000936 FF               [12] 2742 	mov	r7,a
      000937 4E               [12] 2743 	orl	a,r6
      000938 70 03            [24] 2744 	jnz	00404$
      00093A 02r07rAC         [24] 2745 	ljmp	00215$
      00093D                       2746 00404$:
                                   2747 ;	radio/tdm.c:587: sync_tx_windows(len);
      00093D 78r69            [12] 2748 	mov	r0,#_tdm_serial_loop_len_1_222
      00093F E2               [24] 2749 	movx	a,@r0
      000940 F5 82            [12] 2750 	mov	dpl,a
      000942 C0 03            [24] 2751 	push	ar3
      000944 C0 02            [24] 2752 	push	ar2
      000946 12r01r11         [24] 2753 	lcall	_sync_tx_windows
      000949 D0 02            [24] 2754 	pop	ar2
      00094B D0 03            [24] 2755 	pop	ar3
                                   2756 ;	radio/tdm.c:588: last_t = tnow;
      00094D 78r6C            [12] 2757 	mov	r0,#_tdm_serial_loop_last_t_1_222
      00094F EA               [12] 2758 	mov	a,r2
      000950 F2               [24] 2759 	movx	@r0,a
      000951 08               [12] 2760 	inc	r0
      000952 EB               [12] 2761 	mov	a,r3
      000953 F2               [24] 2762 	movx	@r0,a
                                   2763 ;	radio/tdm.c:597: if ((trailer.command == 1 && handle_at_command(len)) 
      000954 78r1E            [12] 2764 	mov	r0,#(_trailer + 0x0001)
      000956 E2               [24] 2765 	movx	a,@r0
      000957 C4               [12] 2766 	swap	a
      000958 03               [12] 2767 	rr	a
      000959 54 01            [12] 2768 	anl	a,#0x01
      00095B FF               [12] 2769 	mov	r7,a
      00095C BF 01 0A         [24] 2770 	cjne	r7,#0x01,00126$
      00095F 78r69            [12] 2771 	mov	r0,#_tdm_serial_loop_len_1_222
      000961 E2               [24] 2772 	movx	a,@r0
      000962 F5 82            [12] 2773 	mov	dpl,a
      000964 12r07r15         [24] 2774 	lcall	_handle_at_command
      000967 40 38            [24] 2775 	jc	00120$
      000969                       2776 00126$:
                                   2777 ;	radio/tdm.c:599: (len != 0 && trailer.command == 0 &&
      000969 78r69            [12] 2778 	mov	r0,#_tdm_serial_loop_len_1_222
      00096B E2               [24] 2779 	movx	a,@r0
      00096C 70 03            [24] 2780 	jnz	00408$
      00096E 02r07rAC         [24] 2781 	ljmp	00215$
      000971                       2782 00408$:
      000971 78r1E            [12] 2783 	mov	r0,#(_trailer + 0x0001)
      000973 E2               [24] 2784 	movx	a,@r0
      000974 30 E5 03         [24] 2785 	jnb	acc.5,00409$
      000977 02r07rAC         [24] 2786 	ljmp	00215$
      00097A                       2787 00409$:
                                   2788 ;	radio/tdm.c:600: !packet_is_duplicate(len, pbuf, trailer.resend) &&
      00097A 78r1E            [12] 2789 	mov	r0,#(_trailer + 0x0001)
      00097C E2               [24] 2790 	movx	a,@r0
      00097D 23               [12] 2791 	rl	a
      00097E 54 01            [12] 2792 	anl	a,#0x01
      000980 24 FF            [12] 2793 	add	a,#0xff
      000982 92*00            [24] 2794 	mov	_packet_is_duplicate_PARM_3,c
      000984 90r00r00         [24] 2795 	mov	dptr,#_packet_is_duplicate_PARM_2
      000987 74r00            [12] 2796 	mov	a,#_pbuf
      000989 F0               [24] 2797 	movx	@dptr,a
      00098A 74s00            [12] 2798 	mov	a,#(_pbuf >> 8)
      00098C A3               [24] 2799 	inc	dptr
      00098D F0               [24] 2800 	movx	@dptr,a
      00098E 78r69            [12] 2801 	mov	r0,#_tdm_serial_loop_len_1_222
      000990 E2               [24] 2802 	movx	a,@r0
      000991 F5 82            [12] 2803 	mov	dpl,a
      000993 12r00r00         [24] 2804 	lcall	_packet_is_duplicate
      000996 50 03            [24] 2805 	jnc	00410$
      000998 02r07rAC         [24] 2806 	ljmp	00215$
      00099B                       2807 00410$:
                                   2808 ;	radio/tdm.c:601: !at_mode_active
      00099B 30*00 03         [24] 2809 	jnb	_at_mode_active,00411$
      00099E 02r07rAC         [24] 2810 	ljmp	00215$
      0009A1                       2811 00411$:
      0009A1                       2812 00120$:
                                   2813 ;	radio/tdm.c:607: crc = crc16(len, pbuf);
      0009A1 75*00r00         [24] 2814 	mov	_crc16_PARM_2,#_pbuf
      0009A4 75*01s00         [24] 2815 	mov	(_crc16_PARM_2 + 1),#(_pbuf >> 8)
      0009A7 78r69            [12] 2816 	mov	r0,#_tdm_serial_loop_len_1_222
      0009A9 E2               [24] 2817 	movx	a,@r0
      0009AA F5 82            [12] 2818 	mov	dpl,a
      0009AC 12r00r00         [24] 2819 	lcall	_crc16
      0009AF AE 82            [24] 2820 	mov	r6,dpl
      0009B1 AF 83            [24] 2821 	mov	r7,dph
                                   2822 ;	radio/tdm.c:610: if (crc == trailer.crc) {
      0009B3 78r1F            [12] 2823 	mov	r0,#(_trailer + 0x0002)
      0009B5 E2               [24] 2824 	movx	a,@r0
      0009B6 FC               [12] 2825 	mov	r4,a
      0009B7 08               [12] 2826 	inc	r0
      0009B8 E2               [24] 2827 	movx	a,@r0
      0009B9 FD               [12] 2828 	mov	r5,a
      0009BA EE               [12] 2829 	mov	a,r6
      0009BB B5 04 17         [24] 2830 	cjne	a,ar4,00118$
      0009BE EF               [12] 2831 	mov	a,r7
      0009BF B5 05 13         [24] 2832 	cjne	a,ar5,00118$
                                   2833 ;	radio/tdm.c:611: LED_ACTIVITY = LED_ON;
      0009C2 D2 B6            [12] 2834 	setb	_LED_RED
                                   2835 ;	radio/tdm.c:612: serial_decrypt_buf(pbuf, len);
      0009C4 78r69            [12] 2836 	mov	r0,#_tdm_serial_loop_len_1_222
      0009C6 79r00            [12] 2837 	mov	r1,#_serial_decrypt_buf_PARM_2
      0009C8 E2               [24] 2838 	movx	a,@r0
      0009C9 F3               [24] 2839 	movx	@r1,a
      0009CA 90r00r00         [24] 2840 	mov	dptr,#_pbuf
      0009CD 12r00r00         [24] 2841 	lcall	_serial_decrypt_buf
                                   2842 ;	radio/tdm.c:613: LED_ACTIVITY = LED_OFF;
      0009D0 C2 B6            [12] 2843 	clr	_LED_RED
      0009D2 02r07rAC         [24] 2844 	ljmp	00215$
      0009D5                       2845 00118$:
                                   2846 ;	radio/tdm.c:615: if (errors.crc_errors != 0xFFFF) {
      0009D5 78r0C            [12] 2847 	mov	r0,#(_errors + 0x000c)
      0009D7 E2               [24] 2848 	movx	a,@r0
      0009D8 FE               [12] 2849 	mov	r6,a
      0009D9 08               [12] 2850 	inc	r0
      0009DA E2               [24] 2851 	movx	a,@r0
      0009DB FF               [12] 2852 	mov	r7,a
      0009DC BE FF 06         [24] 2853 	cjne	r6,#0xFF,00414$
      0009DF BF FF 03         [24] 2854 	cjne	r7,#0xFF,00414$
      0009E2 02r07rAC         [24] 2855 	ljmp	00215$
      0009E5                       2856 00414$:
                                   2857 ;	radio/tdm.c:616: errors.crc_errors++; 
      0009E5 78r0C            [12] 2858 	mov	r0,#(_errors + 0x000c)
      0009E7 E2               [24] 2859 	movx	a,@r0
      0009E8 FE               [12] 2860 	mov	r6,a
      0009E9 08               [12] 2861 	inc	r0
      0009EA E2               [24] 2862 	movx	a,@r0
      0009EB FF               [12] 2863 	mov	r7,a
      0009EC 0E               [12] 2864 	inc	r6
      0009ED BE 00 01         [24] 2865 	cjne	r6,#0x00,00415$
      0009F0 0F               [12] 2866 	inc	r7
      0009F1                       2867 00415$:
      0009F1 78r0C            [12] 2868 	mov	r0,#(_errors + 0x000c)
      0009F3 EE               [12] 2869 	mov	a,r6
      0009F4 F2               [24] 2870 	movx	@r0,a
      0009F5 08               [12] 2871 	inc	r0
      0009F6 EF               [12] 2872 	mov	a,r7
      0009F7 F2               [24] 2873 	movx	@r0,a
                                   2874 ;	radio/tdm.c:627: continue;
      0009F8 02r07rAC         [24] 2875 	ljmp	00215$
      0009FB                       2876 00134$:
                                   2877 ;	radio/tdm.c:633: tnow = timer2_tick();
      0009FB 12r00r00         [24] 2878 	lcall	_timer2_tick
      0009FE AA 82            [24] 2879 	mov	r2,dpl
      000A00 AB 83            [24] 2880 	mov	r3,dph
                                   2881 ;	radio/tdm.c:634: tdelta = tnow - last_t;
      000A02 78r6C            [12] 2882 	mov	r0,#_tdm_serial_loop_last_t_1_222
      000A04 79r6A            [12] 2883 	mov	r1,#_tdm_serial_loop_tdelta_1_222
      000A06 D3               [12] 2884 	setb	c
      000A07 E2               [24] 2885 	movx	a,@r0
      000A08 9A               [12] 2886 	subb	a,r2
      000A09 F4               [12] 2887 	cpl	a
      000A0A B3               [12] 2888 	cpl	c
      000A0B F3               [24] 2889 	movx	@r1,a
      000A0C B3               [12] 2890 	cpl	c
      000A0D 08               [12] 2891 	inc	r0
      000A0E E2               [24] 2892 	movx	a,@r0
      000A0F 9B               [12] 2893 	subb	a,r3
      000A10 F4               [12] 2894 	cpl	a
      000A11 09               [12] 2895 	inc	r1
      000A12 F3               [24] 2896 	movx	@r1,a
                                   2897 ;	radio/tdm.c:635: tdm_state_update(tdelta);
      000A13 78r6A            [12] 2898 	mov	r0,#_tdm_serial_loop_tdelta_1_222
      000A15 E2               [24] 2899 	movx	a,@r0
      000A16 F5 82            [12] 2900 	mov	dpl,a
      000A18 08               [12] 2901 	inc	r0
      000A19 E2               [24] 2902 	movx	a,@r0
      000A1A F5 83            [12] 2903 	mov	dph,a
      000A1C C0 03            [24] 2904 	push	ar3
      000A1E C0 02            [24] 2905 	push	ar2
      000A20 12r02r73         [24] 2906 	lcall	_tdm_state_update
      000A23 D0 02            [24] 2907 	pop	ar2
      000A25 D0 03            [24] 2908 	pop	ar3
                                   2909 ;	radio/tdm.c:636: last_t = tnow;
      000A27 78r6C            [12] 2910 	mov	r0,#_tdm_serial_loop_last_t_1_222
      000A29 EA               [12] 2911 	mov	a,r2
      000A2A F2               [24] 2912 	movx	@r0,a
      000A2B 08               [12] 2913 	inc	r0
      000A2C EB               [12] 2914 	mov	a,r3
      000A2D F2               [24] 2915 	movx	@r0,a
                                   2916 ;	radio/tdm.c:639: if (tnow - last_link_update > 32768) {
      000A2E 78r6E            [12] 2917 	mov	r0,#_tdm_serial_loop_last_link_update_1_222
      000A30 D3               [12] 2918 	setb	c
      000A31 E2               [24] 2919 	movx	a,@r0
      000A32 9A               [12] 2920 	subb	a,r2
      000A33 F4               [12] 2921 	cpl	a
      000A34 B3               [12] 2922 	cpl	c
      000A35 FC               [12] 2923 	mov	r4,a
      000A36 B3               [12] 2924 	cpl	c
      000A37 08               [12] 2925 	inc	r0
      000A38 E2               [24] 2926 	movx	a,@r0
      000A39 9B               [12] 2927 	subb	a,r3
      000A3A F4               [12] 2928 	cpl	a
      000A3B FD               [12] 2929 	mov	r5,a
      000A3C 7E 00            [12] 2930 	mov	r6,#0x00
      000A3E 7F 00            [12] 2931 	mov	r7,#0x00
      000A40 C3               [12] 2932 	clr	c
      000A41 E4               [12] 2933 	clr	a
      000A42 9C               [12] 2934 	subb	a,r4
      000A43 74 80            [12] 2935 	mov	a,#0x80
      000A45 9D               [12] 2936 	subb	a,r5
      000A46 E4               [12] 2937 	clr	a
      000A47 9E               [12] 2938 	subb	a,r6
      000A48 74 80            [12] 2939 	mov	a,#(0x00 ^ 0x80)
      000A4A 8F F0            [24] 2940 	mov	b,r7
      000A4C 63 F0 80         [24] 2941 	xrl	b,#0x80
      000A4F 95 F0            [12] 2942 	subb	a,b
      000A51 50 12            [24] 2943 	jnc	00136$
                                   2944 ;	radio/tdm.c:640: link_update();
      000A53 C0 03            [24] 2945 	push	ar3
      000A55 C0 02            [24] 2946 	push	ar2
      000A57 12r05rA7         [24] 2947 	lcall	_link_update
      000A5A D0 02            [24] 2948 	pop	ar2
      000A5C D0 03            [24] 2949 	pop	ar3
                                   2950 ;	radio/tdm.c:641: last_link_update = tnow;
      000A5E 78r6E            [12] 2951 	mov	r0,#_tdm_serial_loop_last_link_update_1_222
      000A60 EA               [12] 2952 	mov	a,r2
      000A61 F2               [24] 2953 	movx	@r0,a
      000A62 08               [12] 2954 	inc	r0
      000A63 EB               [12] 2955 	mov	a,r3
      000A64 F2               [24] 2956 	movx	@r0,a
      000A65                       2957 00136$:
                                   2958 ;	radio/tdm.c:645: if (lbt_rssi != 0) {
      000A65 78r16            [12] 2959 	mov	r0,#_lbt_rssi
      000A67 E2               [24] 2960 	movx	a,@r0
      000A68 70 03            [24] 2961 	jnz	00417$
      000A6A 02r0ArEA         [24] 2962 	ljmp	00145$
      000A6D                       2963 00417$:
                                   2964 ;	radio/tdm.c:647: if (radio_current_rssi() < lbt_rssi) {
      000A6D 12r00r00         [24] 2965 	lcall	_radio_current_rssi
      000A70 AF 82            [24] 2966 	mov	r7,dpl
      000A72 78r16            [12] 2967 	mov	r0,#_lbt_rssi
      000A74 C3               [12] 2968 	clr	c
      000A75 E2               [24] 2969 	movx	a,@r0
      000A76 F5 F0            [12] 2970 	mov	b,a
      000A78 EF               [12] 2971 	mov	a,r7
      000A79 95 F0            [12] 2972 	subb	a,b
      000A7B 50 16            [24] 2973 	jnc	00140$
                                   2974 ;	radio/tdm.c:648: lbt_listen_time += tdelta;
      000A7D 78r17            [12] 2975 	mov	r0,#_lbt_listen_time
      000A7F 79r6A            [12] 2976 	mov	r1,#_tdm_serial_loop_tdelta_1_222
      000A81 E3               [24] 2977 	movx	a,@r1
      000A82 C5 F0            [12] 2978 	xch	a,b
      000A84 E2               [24] 2979 	movx	a,@r0
      000A85 25 F0            [12] 2980 	add	a,b
      000A87 F2               [24] 2981 	movx	@r0,a
      000A88 09               [12] 2982 	inc	r1
      000A89 E3               [24] 2983 	movx	a,@r1
      000A8A C5 F0            [12] 2984 	xch	a,b
      000A8C 08               [12] 2985 	inc	r0
      000A8D E2               [24] 2986 	movx	a,@r0
      000A8E 35 F0            [12] 2987 	addc	a,b
      000A90 F2               [24] 2988 	movx	@r0,a
      000A91 80 36            [24] 2989 	sjmp	00141$
      000A93                       2990 00140$:
                                   2991 ;	radio/tdm.c:650: lbt_listen_time = 0;
      000A93 78r17            [12] 2992 	mov	r0,#_lbt_listen_time
      000A95 E4               [12] 2993 	clr	a
      000A96 F2               [24] 2994 	movx	@r0,a
      000A97 08               [12] 2995 	inc	r0
      000A98 F2               [24] 2996 	movx	@r0,a
                                   2997 ;	radio/tdm.c:651: if (lbt_rand == 0) {
      000A99 78r1B            [12] 2998 	mov	r0,#_lbt_rand
      000A9B E2               [24] 2999 	movx	a,@r0
      000A9C F5 F0            [12] 3000 	mov	b,a
      000A9E 08               [12] 3001 	inc	r0
      000A9F E2               [24] 3002 	movx	a,@r0
      000AA0 45 F0            [12] 3003 	orl	a,b
      000AA2 70 25            [24] 3004 	jnz	00141$
                                   3005 ;	radio/tdm.c:652: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
      000AA4 12r00r00         [24] 3006 	lcall	_rand
      000AA7 AE 82            [24] 3007 	mov	r6,dpl
      000AA9 AF 83            [24] 3008 	mov	r7,dph
      000AAB 78r19            [12] 3009 	mov	r0,#_lbt_min_time
      000AAD 90r00r00         [24] 3010 	mov	dptr,#__moduint_PARM_2
      000AB0 E2               [24] 3011 	movx	a,@r0
      000AB1 F0               [24] 3012 	movx	@dptr,a
      000AB2 08               [12] 3013 	inc	r0
      000AB3 E2               [24] 3014 	movx	a,@r0
      000AB4 A3               [24] 3015 	inc	dptr
      000AB5 F0               [24] 3016 	movx	@dptr,a
      000AB6 8E 82            [24] 3017 	mov	dpl,r6
      000AB8 8F 83            [24] 3018 	mov	dph,r7
      000ABA 12r00r00         [24] 3019 	lcall	__moduint
      000ABD E5 82            [12] 3020 	mov	a,dpl
      000ABF 85 83 F0         [24] 3021 	mov	b,dph
      000AC2 78r1B            [12] 3022 	mov	r0,#_lbt_rand
      000AC4 F2               [24] 3023 	movx	@r0,a
      000AC5 08               [12] 3024 	inc	r0
      000AC6 E5 F0            [12] 3025 	mov	a,b
      000AC8 F2               [24] 3026 	movx	@r0,a
      000AC9                       3027 00141$:
                                   3028 ;	radio/tdm.c:655: if (lbt_listen_time < lbt_min_time + lbt_rand) {
      000AC9 78r19            [12] 3029 	mov	r0,#_lbt_min_time
      000ACB 79r1B            [12] 3030 	mov	r1,#_lbt_rand
      000ACD E3               [24] 3031 	movx	a,@r1
      000ACE C5 F0            [12] 3032 	xch	a,b
      000AD0 E2               [24] 3033 	movx	a,@r0
      000AD1 25 F0            [12] 3034 	add	a,b
      000AD3 FE               [12] 3035 	mov	r6,a
      000AD4 09               [12] 3036 	inc	r1
      000AD5 E3               [24] 3037 	movx	a,@r1
      000AD6 C5 F0            [12] 3038 	xch	a,b
      000AD8 08               [12] 3039 	inc	r0
      000AD9 E2               [24] 3040 	movx	a,@r0
      000ADA 35 F0            [12] 3041 	addc	a,b
      000ADC FF               [12] 3042 	mov	r7,a
      000ADD 78r17            [12] 3043 	mov	r0,#_lbt_listen_time
      000ADF C3               [12] 3044 	clr	c
      000AE0 E2               [24] 3045 	movx	a,@r0
      000AE1 9E               [12] 3046 	subb	a,r6
      000AE2 08               [12] 3047 	inc	r0
      000AE3 E2               [24] 3048 	movx	a,@r0
      000AE4 9F               [12] 3049 	subb	a,r7
      000AE5 50 03            [24] 3050 	jnc	00420$
      000AE7 02r07rAC         [24] 3051 	ljmp	00215$
      000AEA                       3052 00420$:
                                   3053 ;	radio/tdm.c:657: continue;
      000AEA                       3054 00145$:
                                   3055 ;	radio/tdm.c:665: if (tdm_state != TDM_TRANSMIT &&
      000AEA 78r00            [12] 3056 	mov	r0,#_tdm_state
      000AEC E2               [24] 3057 	movx	a,@r0
      000AED 60 11            [24] 3058 	jz	00147$
                                   3059 ;	radio/tdm.c:666: !(bonus_transmit && tdm_state == TDM_RECEIVE)) {
      000AEF 20*00 03         [24] 3060 	jb	_bonus_transmit,00422$
      000AF2 02r07rAC         [24] 3061 	ljmp	00215$
      000AF5                       3062 00422$:
      000AF5 78r00            [12] 3063 	mov	r0,#_tdm_state
      000AF7 E2               [24] 3064 	movx	a,@r0
      000AF8 B4 02 02         [24] 3065 	cjne	a,#0x02,00423$
      000AFB 80 03            [24] 3066 	sjmp	00424$
      000AFD                       3067 00423$:
      000AFD 02r07rAC         [24] 3068 	ljmp	00215$
      000B00                       3069 00424$:
                                   3070 ;	radio/tdm.c:668: continue;
      000B00                       3071 00147$:
                                   3072 ;	radio/tdm.c:676: if (transmit_yield != 0) {
      000B00 30*01 03         [24] 3073 	jnb	_transmit_yield,00425$
      000B03 02r07rAC         [24] 3074 	ljmp	00215$
      000B06                       3075 00425$:
                                   3076 ;	radio/tdm.c:681: if (transmit_wait != 0) {
      000B06 78r0C            [12] 3077 	mov	r0,#_transmit_wait
      000B08 E2               [24] 3078 	movx	a,@r0
      000B09 F5 F0            [12] 3079 	mov	b,a
      000B0B 08               [12] 3080 	inc	r0
      000B0C E2               [24] 3081 	movx	a,@r0
      000B0D 45 F0            [12] 3082 	orl	a,b
      000B0F 60 03            [24] 3083 	jz	00426$
      000B11 02r07rAC         [24] 3084 	ljmp	00215$
      000B14                       3085 00426$:
                                   3086 ;	radio/tdm.c:686: if (!received_packet &&
      000B14 20*03 05         [24] 3087 	jb	_received_packet,00157$
                                   3088 ;	radio/tdm.c:687: radio_preamble_detected() ||
      000B17 12r00r00         [24] 3089 	lcall	_radio_preamble_detected
      000B1A 40 05            [24] 3090 	jc	00154$
      000B1C                       3091 00157$:
                                   3092 ;	radio/tdm.c:688: radio_receive_in_progress()) {
      000B1C 12r00r00         [24] 3093 	lcall	_radio_receive_in_progress
      000B1F 50 11            [24] 3094 	jnc	00155$
      000B21                       3095 00154$:
                                   3096 ;	radio/tdm.c:691: transmit_wait = packet_latency;
      000B21 78r08            [12] 3097 	mov	r0,#_packet_latency
      000B23 E2               [24] 3098 	movx	a,@r0
      000B24 FE               [12] 3099 	mov	r6,a
      000B25 08               [12] 3100 	inc	r0
      000B26 E2               [24] 3101 	movx	a,@r0
      000B27 FF               [12] 3102 	mov	r7,a
      000B28 78r0C            [12] 3103 	mov	r0,#_transmit_wait
      000B2A EE               [12] 3104 	mov	a,r6
      000B2B F2               [24] 3105 	movx	@r0,a
      000B2C 08               [12] 3106 	inc	r0
      000B2D EF               [12] 3107 	mov	a,r7
      000B2E F2               [24] 3108 	movx	@r0,a
                                   3109 ;	radio/tdm.c:692: continue;
      000B2F 02r07rAC         [24] 3110 	ljmp	00215$
      000B32                       3111 00155$:
                                   3112 ;	radio/tdm.c:698: statistics.average_noise = (radio_current_rssi() + 3*(uint16_t)statistics.average_noise)/4;
      000B32 12r00r00         [24] 3113 	lcall	_radio_current_rssi
      000B35 AF 82            [24] 3114 	mov	r7,dpl
      000B37 7E 00            [12] 3115 	mov	r6,#0x00
      000B39 78r01            [12] 3116 	mov	r0,#(_statistics + 0x0001)
      000B3B E2               [24] 3117 	movx	a,@r0
      000B3C 90r00r00         [24] 3118 	mov	dptr,#__mulint_PARM_2
      000B3F F0               [24] 3119 	movx	@dptr,a
      000B40 E4               [12] 3120 	clr	a
      000B41 A3               [24] 3121 	inc	dptr
      000B42 F0               [24] 3122 	movx	@dptr,a
      000B43 90 00 03         [24] 3123 	mov	dptr,#0x0003
      000B46 C0 07            [24] 3124 	push	ar7
      000B48 C0 06            [24] 3125 	push	ar6
      000B4A 12r00r00         [24] 3126 	lcall	__mulint
      000B4D AC 82            [24] 3127 	mov	r4,dpl
      000B4F AD 83            [24] 3128 	mov	r5,dph
      000B51 D0 06            [24] 3129 	pop	ar6
      000B53 D0 07            [24] 3130 	pop	ar7
      000B55 EC               [12] 3131 	mov	a,r4
      000B56 2F               [12] 3132 	add	a,r7
      000B57 FC               [12] 3133 	mov	r4,a
      000B58 ED               [12] 3134 	mov	a,r5
      000B59 3E               [12] 3135 	addc	a,r6
      000B5A C3               [12] 3136 	clr	c
      000B5B 13               [12] 3137 	rrc	a
      000B5C CC               [12] 3138 	xch	a,r4
      000B5D 13               [12] 3139 	rrc	a
      000B5E CC               [12] 3140 	xch	a,r4
      000B5F C3               [12] 3141 	clr	c
      000B60 13               [12] 3142 	rrc	a
      000B61 CC               [12] 3143 	xch	a,r4
      000B62 13               [12] 3144 	rrc	a
      000B63 CC               [12] 3145 	xch	a,r4
      000B64 FD               [12] 3146 	mov	r5,a
      000B65 78r01            [12] 3147 	mov	r0,#(_statistics + 0x0001)
      000B67 EC               [12] 3148 	mov	a,r4
      000B68 F2               [24] 3149 	movx	@r0,a
                                   3150 ;	radio/tdm.c:700: if (duty_cycle_wait) {
      000B69 30*04 03         [24] 3151 	jnb	_duty_cycle_wait,00430$
      000B6C 02r07rAC         [24] 3152 	ljmp	00215$
      000B6F                       3153 00430$:
                                   3154 ;	radio/tdm.c:707: if (tdm_state_remaining < packet_latency) {
      000B6F 78r01            [12] 3155 	mov	r0,#_tdm_state_remaining
      000B71 79r08            [12] 3156 	mov	r1,#_packet_latency
      000B73 C3               [12] 3157 	clr	c
      000B74 E3               [24] 3158 	movx	a,@r1
      000B75 F5 F0            [12] 3159 	mov	b,a
      000B77 E2               [24] 3160 	movx	a,@r0
      000B78 95 F0            [12] 3161 	subb	a,b
      000B7A 09               [12] 3162 	inc	r1
      000B7B E3               [24] 3163 	movx	a,@r1
      000B7C F5 F0            [12] 3164 	mov	b,a
      000B7E 08               [12] 3165 	inc	r0
      000B7F E2               [24] 3166 	movx	a,@r0
      000B80 95 F0            [12] 3167 	subb	a,b
      000B82 50 03            [24] 3168 	jnc	00431$
      000B84 02r07rAC         [24] 3169 	ljmp	00215$
      000B87                       3170 00431$:
                                   3171 ;	radio/tdm.c:711: max_xmit = (tdm_state_remaining - packet_latency) / ticks_per_byte;
      000B87 78r01            [12] 3172 	mov	r0,#_tdm_state_remaining
      000B89 79r08            [12] 3173 	mov	r1,#_packet_latency
      000B8B E3               [24] 3174 	movx	a,@r1
      000B8C F5 F0            [12] 3175 	mov	b,a
      000B8E C3               [12] 3176 	clr	c
      000B8F E2               [24] 3177 	movx	a,@r0
      000B90 95 F0            [12] 3178 	subb	a,b
      000B92 FE               [12] 3179 	mov	r6,a
      000B93 09               [12] 3180 	inc	r1
      000B94 E3               [24] 3181 	movx	a,@r1
      000B95 F5 F0            [12] 3182 	mov	b,a
      000B97 08               [12] 3183 	inc	r0
      000B98 E2               [24] 3184 	movx	a,@r0
      000B99 95 F0            [12] 3185 	subb	a,b
      000B9B FF               [12] 3186 	mov	r7,a
      000B9C 78r0A            [12] 3187 	mov	r0,#_ticks_per_byte
      000B9E 90r00r00         [24] 3188 	mov	dptr,#__divuint_PARM_2
      000BA1 E2               [24] 3189 	movx	a,@r0
      000BA2 F0               [24] 3190 	movx	@dptr,a
      000BA3 08               [12] 3191 	inc	r0
      000BA4 E2               [24] 3192 	movx	a,@r0
      000BA5 A3               [24] 3193 	inc	dptr
      000BA6 F0               [24] 3194 	movx	@dptr,a
      000BA7 8E 82            [24] 3195 	mov	dpl,r6
      000BA9 8F 83            [24] 3196 	mov	dph,r7
      000BAB 12r00r00         [24] 3197 	lcall	__divuint
      000BAE AE 82            [24] 3198 	mov	r6,dpl
      000BB0 AF 83            [24] 3199 	mov	r7,dph
                                   3200 ;	radio/tdm.c:712: if (max_xmit < PACKET_OVERHEAD) {
      000BB2 BE 14 00         [24] 3201 	cjne	r6,#0x14,00432$
      000BB5                       3202 00432$:
      000BB5 50 03            [24] 3203 	jnc	00433$
      000BB7 02r07rAC         [24] 3204 	ljmp	00215$
      000BBA                       3205 00433$:
                                   3206 ;	radio/tdm.c:717: max_xmit -= sizeof(trailer)+1;
      000BBA EE               [12] 3207 	mov	a,r6
      000BBB 24 FB            [12] 3208 	add	a,#0xFB
      000BBD FE               [12] 3209 	mov	r6,a
                                   3210 ;	radio/tdm.c:720: if (aes_get_encryption_level() > 0) {
      000BBE C0 06            [24] 3211 	push	ar6
      000BC0 12r00r00         [24] 3212 	lcall	_aes_get_encryption_level
      000BC3 E5 82            [12] 3213 	mov	a,dpl
      000BC5 D0 06            [24] 3214 	pop	ar6
      000BC7 60 0C            [24] 3215 	jz	00167$
                                   3216 ;	radio/tdm.c:721: if (max_xmit < 16) {
      000BC9 BE 10 00         [24] 3217 	cjne	r6,#0x10,00435$
      000BCC                       3218 00435$:
      000BCC 50 03            [24] 3219 	jnc	00436$
      000BCE 02r07rAC         [24] 3220 	ljmp	00215$
      000BD1                       3221 00436$:
                                   3222 ;	radio/tdm.c:727: max_xmit -= 16;
      000BD1 EE               [12] 3223 	mov	a,r6
      000BD2 24 F0            [12] 3224 	add	a,#0xF0
      000BD4 FE               [12] 3225 	mov	r6,a
      000BD5                       3226 00167$:
                                   3227 ;	radio/tdm.c:731: if (max_xmit > max_data_packet_length) {
      000BD5 78r05            [12] 3228 	mov	r0,#_max_data_packet_length
      000BD7 C3               [12] 3229 	clr	c
      000BD8 E2               [24] 3230 	movx	a,@r0
      000BD9 9E               [12] 3231 	subb	a,r6
      000BDA 50 04            [24] 3232 	jnc	00169$
                                   3233 ;	radio/tdm.c:732: max_xmit = max_data_packet_length;
      000BDC 78r05            [12] 3234 	mov	r0,#_max_data_packet_length
      000BDE E2               [24] 3235 	movx	a,@r0
      000BDF FE               [12] 3236 	mov	r6,a
      000BE0                       3237 00169$:
                                   3238 ;	radio/tdm.c:741: if (send_at_command && 
      000BE0 30*06 57         [24] 3239 	jnb	_send_at_command,00174$
                                   3240 ;	radio/tdm.c:742: max_xmit >= strlen(remote_at_cmd)) {
      000BE3 90r00r21         [24] 3241 	mov	dptr,#_remote_at_cmd
      000BE6 75 F0 60         [24] 3242 	mov	b,#0x60
      000BE9 C0 06            [24] 3243 	push	ar6
      000BEB 12r00r00         [24] 3244 	lcall	_strlen
      000BEE AD 82            [24] 3245 	mov	r5,dpl
      000BF0 AF 83            [24] 3246 	mov	r7,dph
      000BF2 D0 06            [24] 3247 	pop	ar6
      000BF4 8E 03            [24] 3248 	mov	ar3,r6
      000BF6 7C 00            [12] 3249 	mov	r4,#0x00
      000BF8 C3               [12] 3250 	clr	c
      000BF9 EB               [12] 3251 	mov	a,r3
      000BFA 9D               [12] 3252 	subb	a,r5
      000BFB EC               [12] 3253 	mov	a,r4
      000BFC 9F               [12] 3254 	subb	a,r7
      000BFD 40 3B            [24] 3255 	jc	00174$
                                   3256 ;	radio/tdm.c:744: len = strlen(remote_at_cmd);
      000BFF 90r00r21         [24] 3257 	mov	dptr,#_remote_at_cmd
      000C02 75 F0 60         [24] 3258 	mov	b,#0x60
      000C05 C0 06            [24] 3259 	push	ar6
      000C07 12r00r00         [24] 3260 	lcall	_strlen
      000C0A AD 82            [24] 3261 	mov	r5,dpl
      000C0C 78r69            [12] 3262 	mov	r0,#_tdm_serial_loop_len_1_222
      000C0E ED               [12] 3263 	mov	a,r5
      000C0F F2               [24] 3264 	movx	@r0,a
                                   3265 ;	radio/tdm.c:745: memcpy(pbuf, remote_at_cmd, len);
      000C10 90r00r00         [24] 3266 	mov	dptr,#_memcpy_PARM_2
      000C13 74r21            [12] 3267 	mov	a,#_remote_at_cmd
      000C15 F0               [24] 3268 	movx	@dptr,a
      000C16 E4               [12] 3269 	clr	a
      000C17 A3               [24] 3270 	inc	dptr
      000C18 F0               [24] 3271 	movx	@dptr,a
      000C19 74 60            [12] 3272 	mov	a,#0x60
      000C1B A3               [24] 3273 	inc	dptr
      000C1C F0               [24] 3274 	movx	@dptr,a
      000C1D 90r00r00         [24] 3275 	mov	dptr,#_memcpy_PARM_3
      000C20 ED               [12] 3276 	mov	a,r5
      000C21 F0               [24] 3277 	movx	@dptr,a
      000C22 E4               [12] 3278 	clr	a
      000C23 A3               [24] 3279 	inc	dptr
      000C24 F0               [24] 3280 	movx	@dptr,a
      000C25 90r00r00         [24] 3281 	mov	dptr,#_pbuf
      000C28 75 F0 00         [24] 3282 	mov	b,#0x00
      000C2B 12r00r00         [24] 3283 	lcall	_memcpy
      000C2E D0 06            [24] 3284 	pop	ar6
                                   3285 ;	radio/tdm.c:746: trailer.command = 1;
      000C30 78r1E            [12] 3286 	mov	r0,#(_trailer + 0x0001)
      000C32 E2               [24] 3287 	movx	a,@r0
      000C33 44 20            [12] 3288 	orl	a,#0x20
      000C35 F2               [24] 3289 	movx	@r0,a
                                   3290 ;	radio/tdm.c:747: send_at_command = false;
      000C36 C2*06            [12] 3291 	clr	_send_at_command
      000C38 80 55            [24] 3292 	sjmp	00175$
      000C3A                       3293 00174$:
                                   3294 ;	radio/tdm.c:750: len = packet_get_next(max_xmit, pbuf);
      000C3A 90r00r00         [24] 3295 	mov	dptr,#_packet_get_next_PARM_2
      000C3D 74r00            [12] 3296 	mov	a,#_pbuf
      000C3F F0               [24] 3297 	movx	@dptr,a
      000C40 74s00            [12] 3298 	mov	a,#(_pbuf >> 8)
      000C42 A3               [24] 3299 	inc	dptr
      000C43 F0               [24] 3300 	movx	@dptr,a
      000C44 8E 82            [24] 3301 	mov	dpl,r6
      000C46 C0 06            [24] 3302 	push	ar6
      000C48 12r00r00         [24] 3303 	lcall	_packet_get_next
      000C4B AF 82            [24] 3304 	mov	r7,dpl
      000C4D D0 06            [24] 3305 	pop	ar6
      000C4F 78r69            [12] 3306 	mov	r0,#_tdm_serial_loop_len_1_222
      000C51 EF               [12] 3307 	mov	a,r7
      000C52 F2               [24] 3308 	movx	@r0,a
                                   3309 ;	radio/tdm.c:752: if (len > 0) {
      000C53 EF               [12] 3310 	mov	a,r7
      000C54 60 19            [24] 3311 	jz	00171$
                                   3312 ;	radio/tdm.c:753: trailer.command = packet_is_injected();
      000C56 C0 07            [24] 3313 	push	ar7
      000C58 C0 06            [24] 3314 	push	ar6
      000C5A 12r00r00         [24] 3315 	lcall	_packet_is_injected
      000C5D D0 06            [24] 3316 	pop	ar6
      000C5F D0 07            [24] 3317 	pop	ar7
      000C61 92*09            [24] 3318 	mov  _tdm_serial_loop_sloc0_1_0,c
      000C63 E4               [12] 3319 	clr	a
      000C64 33               [12] 3320 	rlc	a
      000C65 FD               [12] 3321 	mov	r5,a
      000C66 78r1E            [12] 3322 	mov	r0,#(_trailer + 0x0001)
      000C68 13               [12] 3323 	rrc	a
      000C69 E2               [24] 3324 	movx	a,@r0
      000C6A 92 E5            [24] 3325 	mov	acc.5,c
      000C6C F2               [24] 3326 	movx	@r0,a
      000C6D 80 06            [24] 3327 	sjmp	00172$
      000C6F                       3328 00171$:
                                   3329 ;	radio/tdm.c:755: trailer.command = 0;
      000C6F 78r1E            [12] 3330 	mov	r0,#(_trailer + 0x0001)
      000C71 E2               [24] 3331 	movx	a,@r0
      000C72 54 DF            [12] 3332 	anl	a,#0xDF
      000C74 F2               [24] 3333 	movx	@r0,a
      000C75                       3334 00172$:
                                   3335 ;	radio/tdm.c:758: trailer.crc = crc16(len, pbuf);
      000C75 75*00r00         [24] 3336 	mov	_crc16_PARM_2,#_pbuf
      000C78 75*01s00         [24] 3337 	mov	(_crc16_PARM_2 + 1),#(_pbuf >> 8)
      000C7B 8F 82            [24] 3338 	mov	dpl,r7
      000C7D C0 06            [24] 3339 	push	ar6
      000C7F 12r00r00         [24] 3340 	lcall	_crc16
      000C82 AD 82            [24] 3341 	mov	r5,dpl
      000C84 AF 83            [24] 3342 	mov	r7,dph
      000C86 D0 06            [24] 3343 	pop	ar6
      000C88 78r1F            [12] 3344 	mov	r0,#(_trailer + 0x0002)
      000C8A ED               [12] 3345 	mov	a,r5
      000C8B F2               [24] 3346 	movx	@r0,a
      000C8C 08               [12] 3347 	inc	r0
      000C8D EF               [12] 3348 	mov	a,r7
      000C8E F2               [24] 3349 	movx	@r0,a
      000C8F                       3350 00175$:
                                   3351 ;	radio/tdm.c:762: if (len > max_data_packet_length) {
      000C8F 78r69            [12] 3352 	mov	r0,#_tdm_serial_loop_len_1_222
      000C91 79r05            [12] 3353 	mov	r1,#_max_data_packet_length
      000C93 C3               [12] 3354 	clr	c
      000C94 E2               [24] 3355 	movx	a,@r0
      000C95 F5 F0            [12] 3356 	mov	b,a
      000C97 E3               [24] 3357 	movx	a,@r1
      000C98 95 F0            [12] 3358 	subb	a,b
      000C9A 50 19            [24] 3359 	jnc	00178$
                                   3360 ;	radio/tdm.c:763: panic("oversized tdm packet");
      000C9C C0 06            [24] 3361 	push	ar6
      000C9E 74rD6            [12] 3362 	mov	a,#___str_8
      000CA0 C0 E0            [24] 3363 	push	acc
      000CA2 74s00            [12] 3364 	mov	a,#(___str_8 >> 8)
      000CA4 C0 E0            [24] 3365 	push	acc
      000CA6 74 80            [12] 3366 	mov	a,#0x80
      000CA8 C0 E0            [24] 3367 	push	acc
      000CAA 12r00r00         [24] 3368 	lcall	_panic
      000CAD 15 81            [12] 3369 	dec	sp
      000CAF 15 81            [12] 3370 	dec	sp
      000CB1 15 81            [12] 3371 	dec	sp
      000CB3 D0 06            [24] 3372 	pop	ar6
      000CB5                       3373 00178$:
                                   3374 ;	radio/tdm.c:766: trailer.bonus = (tdm_state == TDM_RECEIVE);
      000CB5 78r00            [12] 3375 	mov	r0,#_tdm_state
      000CB7 E2               [24] 3376 	movx	a,@r0
      000CB8 B4 02 03         [24] 3377 	cjne	a,#0x02,00442$
      000CBB D3               [12] 3378 	setb	c
      000CBC 80 01            [24] 3379 	sjmp	00443$
      000CBE                       3380 00442$:
      000CBE C3               [12] 3381 	clr	c
      000CBF                       3382 00443$:
      000CBF 92*09            [24] 3383 	mov  _tdm_serial_loop_sloc0_1_0,c
      000CC1 E4               [12] 3384 	clr	a
      000CC2 33               [12] 3385 	rlc	a
      000CC3 78r1E            [12] 3386 	mov	r0,#(_trailer + 0x0001)
      000CC5 13               [12] 3387 	rrc	a
      000CC6 E2               [24] 3388 	movx	a,@r0
      000CC7 92 E6            [24] 3389 	mov	acc.6,c
      000CC9 F2               [24] 3390 	movx	@r0,a
                                   3391 ;	radio/tdm.c:767: trailer.resend = packet_is_resend();
      000CCA C0 06            [24] 3392 	push	ar6
      000CCC 12r00r00         [24] 3393 	lcall	_packet_is_resend
      000CCF D0 06            [24] 3394 	pop	ar6
      000CD1 92*09            [24] 3395 	mov  _tdm_serial_loop_sloc0_1_0,c
      000CD3 E4               [12] 3396 	clr	a
      000CD4 33               [12] 3397 	rlc	a
      000CD5 FF               [12] 3398 	mov	r7,a
      000CD6 78r1E            [12] 3399 	mov	r0,#(_trailer + 0x0001)
      000CD8 13               [12] 3400 	rrc	a
      000CD9 E2               [24] 3401 	movx	a,@r0
      000CDA 92 E7            [24] 3402 	mov	acc.7,c
      000CDC F2               [24] 3403 	movx	@r0,a
                                   3404 ;	radio/tdm.c:769: if (tdm_state == TDM_TRANSMIT &&
      000CDD 78r00            [12] 3405 	mov	r0,#_tdm_state
      000CDF E2               [24] 3406 	movx	a,@r0
      000CE0 70 44            [24] 3407 	jnz	00183$
                                   3408 ;	radio/tdm.c:770: len == 0 &&
      000CE2 78r69            [12] 3409 	mov	r0,#_tdm_serial_loop_len_1_222
      000CE4 E2               [24] 3410 	movx	a,@r0
      000CE5 70 3F            [24] 3411 	jnz	00183$
                                   3412 ;	radio/tdm.c:771: send_statistics &&
      000CE7 30*05 3C         [24] 3413 	jnb	_send_statistics,00183$
                                   3414 ;	radio/tdm.c:772: max_xmit >= sizeof(statistics)) {
      000CEA BE 04 00         [24] 3415 	cjne	r6,#0x04,00447$
      000CED                       3416 00447$:
      000CED 40 37            [24] 3417 	jc	00183$
                                   3418 ;	radio/tdm.c:774: send_statistics = 0;
      000CEF C2*05            [12] 3419 	clr	_send_statistics
                                   3420 ;	radio/tdm.c:775: memcpy(pbuf, &statistics, sizeof(statistics));
      000CF1 90r00r00         [24] 3421 	mov	dptr,#_memcpy_PARM_2
      000CF4 74r00            [12] 3422 	mov	a,#_statistics
      000CF6 F0               [24] 3423 	movx	@dptr,a
      000CF7 E4               [12] 3424 	clr	a
      000CF8 A3               [24] 3425 	inc	dptr
      000CF9 F0               [24] 3426 	movx	@dptr,a
      000CFA 74 60            [12] 3427 	mov	a,#0x60
      000CFC A3               [24] 3428 	inc	dptr
      000CFD F0               [24] 3429 	movx	@dptr,a
      000CFE 90r00r00         [24] 3430 	mov	dptr,#_memcpy_PARM_3
      000D01 74 04            [12] 3431 	mov	a,#0x04
      000D03 F0               [24] 3432 	movx	@dptr,a
      000D04 E4               [12] 3433 	clr	a
      000D05 A3               [24] 3434 	inc	dptr
      000D06 F0               [24] 3435 	movx	@dptr,a
      000D07 90r00r00         [24] 3436 	mov	dptr,#_pbuf
      000D0A 75 F0 00         [24] 3437 	mov	b,#0x00
      000D0D 12r00r00         [24] 3438 	lcall	_memcpy
                                   3439 ;	radio/tdm.c:776: len = sizeof(statistics);
      000D10 78r69            [12] 3440 	mov	r0,#_tdm_serial_loop_len_1_222
      000D12 74 04            [12] 3441 	mov	a,#0x04
      000D14 F2               [24] 3442 	movx	@r0,a
                                   3443 ;	radio/tdm.c:779: trailer.window = 0;
      000D15 78r1D            [12] 3444 	mov	r0,#_trailer
      000D17 E4               [12] 3445 	clr	a
      000D18 F2               [24] 3446 	movx	@r0,a
      000D19 08               [12] 3447 	inc	r0
      000D1A E2               [24] 3448 	movx	a,@r0
      000D1B 54 E0            [12] 3449 	anl	a,#0xE0
      000D1D F2               [24] 3450 	movx	@r0,a
                                   3451 ;	radio/tdm.c:780: trailer.resend = 0;
      000D1E 78r1E            [12] 3452 	mov	r0,#(_trailer + 0x0001)
      000D20 E2               [24] 3453 	movx	a,@r0
      000D21 54 7F            [12] 3454 	anl	a,#0x7F
      000D23 F2               [24] 3455 	movx	@r0,a
      000D24 80 77            [24] 3456 	sjmp	00184$
      000D26                       3457 00183$:
                                   3458 ;	radio/tdm.c:787: if (aes_get_encryption_level() > 0) {
      000D26 12r00r00         [24] 3459 	lcall	_aes_get_encryption_level
      000D29 E5 82            [12] 3460 	mov	a,dpl
      000D2B 60 48            [24] 3461 	jz	00180$
                                   3462 ;	radio/tdm.c:789: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(16 * (1 + (len+sizeof(trailer)>>4))));
      000D2D 78r69            [12] 3463 	mov	r0,#_tdm_serial_loop_len_1_222
      000D2F E2               [24] 3464 	movx	a,@r0
      000D30 FE               [12] 3465 	mov	r6,a
      000D31 7F 00            [12] 3466 	mov	r7,#0x00
      000D33 74 04            [12] 3467 	mov	a,#0x04
      000D35 2E               [12] 3468 	add	a,r6
      000D36 FE               [12] 3469 	mov	r6,a
      000D37 E4               [12] 3470 	clr	a
      000D38 3F               [12] 3471 	addc	a,r7
      000D39 FF               [12] 3472 	mov	r7,a
      000D3A C4               [12] 3473 	swap	a
      000D3B CE               [12] 3474 	xch	a,r6
      000D3C C4               [12] 3475 	swap	a
      000D3D 54 0F            [12] 3476 	anl	a,#0x0F
      000D3F 6E               [12] 3477 	xrl	a,r6
      000D40 CE               [12] 3478 	xch	a,r6
      000D41 54 0F            [12] 3479 	anl	a,#0x0F
      000D43 CE               [12] 3480 	xch	a,r6
      000D44 6E               [12] 3481 	xrl	a,r6
      000D45 CE               [12] 3482 	xch	a,r6
      000D46 30 E3 02         [24] 3483 	jnb	acc.3,00450$
      000D49 44 F0            [12] 3484 	orl	a,#0xF0
      000D4B                       3485 00450$:
      000D4B 0E               [12] 3486 	inc	r6
      000D4C EE               [12] 3487 	mov	a,r6
      000D4D C4               [12] 3488 	swap	a
      000D4E 54 F0            [12] 3489 	anl	a,#0xF0
      000D50 F5 82            [12] 3490 	mov	dpl,a
      000D52 12r00rEA         [24] 3491 	lcall	_flight_time_estimate
      000D55 AE 82            [24] 3492 	mov	r6,dpl
      000D57 AF 83            [24] 3493 	mov	r7,dph
      000D59 78r01            [12] 3494 	mov	r0,#_tdm_state_remaining
      000D5B E2               [24] 3495 	movx	a,@r0
      000D5C C3               [12] 3496 	clr	c
      000D5D 9E               [12] 3497 	subb	a,r6
      000D5E FE               [12] 3498 	mov	r6,a
      000D5F 08               [12] 3499 	inc	r0
      000D60 E2               [24] 3500 	movx	a,@r0
      000D61 9F               [12] 3501 	subb	a,r7
      000D62 FF               [12] 3502 	mov	r7,a
      000D63 78r1D            [12] 3503 	mov	r0,#_trailer
      000D65 EE               [12] 3504 	mov	a,r6
      000D66 F2               [24] 3505 	movx	@r0,a
      000D67 08               [12] 3506 	inc	r0
      000D68 EF               [12] 3507 	mov	a,r7
      000D69 54 1F            [12] 3508 	anl	a,#0x1F
      000D6B F5 F0            [12] 3509 	mov	b,a
      000D6D E2               [24] 3510 	movx	a,@r0
      000D6E 54 E0            [12] 3511 	anl	a,#0xE0
      000D70 45 F0            [12] 3512 	orl	a,b
      000D72 F2               [24] 3513 	movx	@r0,a
      000D73 80 28            [24] 3514 	sjmp	00184$
      000D75                       3515 00180$:
                                   3516 ;	radio/tdm.c:791: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));		
      000D75 78r69            [12] 3517 	mov	r0,#_tdm_serial_loop_len_1_222
      000D77 E2               [24] 3518 	movx	a,@r0
      000D78 24 04            [12] 3519 	add	a,#0x04
      000D7A F5 82            [12] 3520 	mov	dpl,a
      000D7C 12r00rEA         [24] 3521 	lcall	_flight_time_estimate
      000D7F AE 82            [24] 3522 	mov	r6,dpl
      000D81 AF 83            [24] 3523 	mov	r7,dph
      000D83 78r01            [12] 3524 	mov	r0,#_tdm_state_remaining
      000D85 E2               [24] 3525 	movx	a,@r0
      000D86 C3               [12] 3526 	clr	c
      000D87 9E               [12] 3527 	subb	a,r6
      000D88 FE               [12] 3528 	mov	r6,a
      000D89 08               [12] 3529 	inc	r0
      000D8A E2               [24] 3530 	movx	a,@r0
      000D8B 9F               [12] 3531 	subb	a,r7
      000D8C FF               [12] 3532 	mov	r7,a
      000D8D 78r1D            [12] 3533 	mov	r0,#_trailer
      000D8F EE               [12] 3534 	mov	a,r6
      000D90 F2               [24] 3535 	movx	@r0,a
      000D91 08               [12] 3536 	inc	r0
      000D92 EF               [12] 3537 	mov	a,r7
      000D93 54 1F            [12] 3538 	anl	a,#0x1F
      000D95 F5 F0            [12] 3539 	mov	b,a
      000D97 E2               [24] 3540 	movx	a,@r0
      000D98 54 E0            [12] 3541 	anl	a,#0xE0
      000D9A 45 F0            [12] 3542 	orl	a,b
      000D9C F2               [24] 3543 	movx	@r0,a
      000D9D                       3544 00184$:
                                   3545 ;	radio/tdm.c:799: radio_set_channel(fhop_transmit_channel());
      000D9D 12r00r00         [24] 3546 	lcall	_fhop_transmit_channel
      000DA0 12r00r00         [24] 3547 	lcall	_radio_set_channel
                                   3548 ;	radio/tdm.c:801: memcpy(&pbuf[len], &trailer, sizeof(trailer));
      000DA3 78r69            [12] 3549 	mov	r0,#_tdm_serial_loop_len_1_222
      000DA5 E2               [24] 3550 	movx	a,@r0
      000DA6 24r00            [12] 3551 	add	a,#_pbuf
      000DA8 FE               [12] 3552 	mov	r6,a
      000DA9 E4               [12] 3553 	clr	a
      000DAA 34s00            [12] 3554 	addc	a,#(_pbuf >> 8)
      000DAC FF               [12] 3555 	mov	r7,a
      000DAD 7D 00            [12] 3556 	mov	r5,#0x00
      000DAF 90r00r00         [24] 3557 	mov	dptr,#_memcpy_PARM_2
      000DB2 74r1D            [12] 3558 	mov	a,#_trailer
      000DB4 F0               [24] 3559 	movx	@dptr,a
      000DB5 E4               [12] 3560 	clr	a
      000DB6 A3               [24] 3561 	inc	dptr
      000DB7 F0               [24] 3562 	movx	@dptr,a
      000DB8 74 60            [12] 3563 	mov	a,#0x60
      000DBA A3               [24] 3564 	inc	dptr
      000DBB F0               [24] 3565 	movx	@dptr,a
      000DBC 90r00r00         [24] 3566 	mov	dptr,#_memcpy_PARM_3
      000DBF 74 04            [12] 3567 	mov	a,#0x04
      000DC1 F0               [24] 3568 	movx	@dptr,a
      000DC2 E4               [12] 3569 	clr	a
      000DC3 A3               [24] 3570 	inc	dptr
      000DC4 F0               [24] 3571 	movx	@dptr,a
      000DC5 8E 82            [24] 3572 	mov	dpl,r6
      000DC7 8F 83            [24] 3573 	mov	dph,r7
      000DC9 8D F0            [24] 3574 	mov	b,r5
      000DCB 12r00r00         [24] 3575 	lcall	_memcpy
                                   3576 ;	radio/tdm.c:803: if (len != 0 && trailer.window != 0) {
      000DCE 78r69            [12] 3577 	mov	r0,#_tdm_serial_loop_len_1_222
      000DD0 E2               [24] 3578 	movx	a,@r0
      000DD1 60 0E            [24] 3579 	jz	00189$
      000DD3 78r1D            [12] 3580 	mov	r0,#_trailer
      000DD5 E2               [24] 3581 	movx	a,@r0
      000DD6 FE               [12] 3582 	mov	r6,a
      000DD7 08               [12] 3583 	inc	r0
      000DD8 E2               [24] 3584 	movx	a,@r0
      000DD9 54 1F            [12] 3585 	anl	a,#0x1F
      000DDB FF               [12] 3586 	mov	r7,a
      000DDC 4E               [12] 3587 	orl	a,r6
      000DDD 60 02            [24] 3588 	jz	00189$
                                   3589 ;	radio/tdm.c:805: LED_ACTIVITY = LED_ON;
      000DDF D2 B6            [12] 3590 	setb	_LED_RED
      000DE1                       3591 00189$:
                                   3592 ;	radio/tdm.c:808: if (len == 0) {
      000DE1 78r69            [12] 3593 	mov	r0,#_tdm_serial_loop_len_1_222
      000DE3 E2               [24] 3594 	movx	a,@r0
      000DE4 70 02            [24] 3595 	jnz	00192$
                                   3596 ;	radio/tdm.c:812: transmit_yield = 1;
      000DE6 D2*01            [12] 3597 	setb	_transmit_yield
      000DE8                       3598 00192$:
                                   3599 ;	radio/tdm.c:818: transmit_wait = packet_latency;
      000DE8 78r08            [12] 3600 	mov	r0,#_packet_latency
      000DEA E2               [24] 3601 	movx	a,@r0
      000DEB FE               [12] 3602 	mov	r6,a
      000DEC 08               [12] 3603 	inc	r0
      000DED E2               [24] 3604 	movx	a,@r0
      000DEE FF               [12] 3605 	mov	r7,a
      000DEF 78r0C            [12] 3606 	mov	r0,#_transmit_wait
      000DF1 EE               [12] 3607 	mov	a,r6
      000DF2 F2               [24] 3608 	movx	@r0,a
      000DF3 08               [12] 3609 	inc	r0
      000DF4 EF               [12] 3610 	mov	a,r7
      000DF5 F2               [24] 3611 	movx	@r0,a
                                   3612 ;	radio/tdm.c:822: if ((duty_cycle - duty_cycle_offset) != 100) {
      000DF6 78r0E            [12] 3613 	mov	r0,#_duty_cycle
      000DF8 E2               [24] 3614 	movx	a,@r0
      000DF9 FE               [12] 3615 	mov	r6,a
      000DFA 7F 00            [12] 3616 	mov	r7,#0x00
      000DFC 78r13            [12] 3617 	mov	r0,#_duty_cycle_offset
      000DFE E2               [24] 3618 	movx	a,@r0
      000DFF FC               [12] 3619 	mov	r4,a
      000E00 7D 00            [12] 3620 	mov	r5,#0x00
      000E02 EE               [12] 3621 	mov	a,r6
      000E03 C3               [12] 3622 	clr	c
      000E04 9C               [12] 3623 	subb	a,r4
      000E05 FE               [12] 3624 	mov	r6,a
      000E06 EF               [12] 3625 	mov	a,r7
      000E07 9D               [12] 3626 	subb	a,r5
      000E08 FF               [12] 3627 	mov	r7,a
      000E09 BE 64 05         [24] 3628 	cjne	r6,#0x64,00454$
      000E0C BF 00 02         [24] 3629 	cjne	r7,#0x00,00454$
      000E0F 80 17            [24] 3630 	sjmp	00194$
      000E11                       3631 00454$:
                                   3632 ;	radio/tdm.c:823: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
      000E11 78r69            [12] 3633 	mov	r0,#_tdm_serial_loop_len_1_222
      000E13 E2               [24] 3634 	movx	a,@r0
      000E14 24 04            [12] 3635 	add	a,#0x04
      000E16 F5 82            [12] 3636 	mov	dpl,a
      000E18 12r00rEA         [24] 3637 	lcall	_flight_time_estimate
      000E1B AE 82            [24] 3638 	mov	r6,dpl
      000E1D AF 83            [24] 3639 	mov	r7,dph
      000E1F 78r14            [12] 3640 	mov	r0,#_transmitted_ticks
      000E21 E2               [24] 3641 	movx	a,@r0
      000E22 2E               [12] 3642 	add	a,r6
      000E23 F2               [24] 3643 	movx	@r0,a
      000E24 08               [12] 3644 	inc	r0
      000E25 E2               [24] 3645 	movx	a,@r0
      000E26 3F               [12] 3646 	addc	a,r7
      000E27 F2               [24] 3647 	movx	@r0,a
      000E28                       3648 00194$:
                                   3649 ;	radio/tdm.c:827: if (!radio_transmit(len + sizeof(trailer), pbuf, tdm_state_remaining + (silence_period/2)) &&
      000E28 78r69            [12] 3650 	mov	r0,#_tdm_serial_loop_len_1_222
      000E2A E2               [24] 3651 	movx	a,@r0
      000E2B 24 04            [12] 3652 	add	a,#0x04
      000E2D FF               [12] 3653 	mov	r7,a
      000E2E 78r06            [12] 3654 	mov	r0,#_silence_period
      000E30 E2               [24] 3655 	movx	a,@r0
      000E31 FD               [12] 3656 	mov	r5,a
      000E32 08               [12] 3657 	inc	r0
      000E33 E2               [24] 3658 	movx	a,@r0
      000E34 C3               [12] 3659 	clr	c
      000E35 13               [12] 3660 	rrc	a
      000E36 CD               [12] 3661 	xch	a,r5
      000E37 13               [12] 3662 	rrc	a
      000E38 CD               [12] 3663 	xch	a,r5
      000E39 FE               [12] 3664 	mov	r6,a
      000E3A 78r01            [12] 3665 	mov	r0,#_tdm_state_remaining
      000E3C E2               [24] 3666 	movx	a,@r0
      000E3D 2D               [12] 3667 	add	a,r5
      000E3E FD               [12] 3668 	mov	r5,a
      000E3F 08               [12] 3669 	inc	r0
      000E40 E2               [24] 3670 	movx	a,@r0
      000E41 3E               [12] 3671 	addc	a,r6
      000E42 FE               [12] 3672 	mov	r6,a
      000E43 78r00            [12] 3673 	mov	r0,#_radio_transmit_PARM_2
      000E45 74r00            [12] 3674 	mov	a,#_pbuf
      000E47 F2               [24] 3675 	movx	@r0,a
      000E48 08               [12] 3676 	inc	r0
      000E49 74s00            [12] 3677 	mov	a,#(_pbuf >> 8)
      000E4B F2               [24] 3678 	movx	@r0,a
      000E4C 78r00            [12] 3679 	mov	r0,#_radio_transmit_PARM_3
      000E4E ED               [12] 3680 	mov	a,r5
      000E4F F2               [24] 3681 	movx	@r0,a
      000E50 08               [12] 3682 	inc	r0
      000E51 EE               [12] 3683 	mov	a,r6
      000E52 F2               [24] 3684 	movx	@r0,a
      000E53 8F 82            [24] 3685 	mov	dpl,r7
      000E55 12r00r00         [24] 3686 	lcall	_radio_transmit
      000E58 40 1A            [24] 3687 	jc	00196$
                                   3688 ;	radio/tdm.c:828: len != 0 && trailer.window != 0 && trailer.command == 0) {
      000E5A 78r69            [12] 3689 	mov	r0,#_tdm_serial_loop_len_1_222
      000E5C E2               [24] 3690 	movx	a,@r0
      000E5D 60 15            [24] 3691 	jz	00196$
      000E5F 78r1D            [12] 3692 	mov	r0,#_trailer
      000E61 E2               [24] 3693 	movx	a,@r0
      000E62 FE               [12] 3694 	mov	r6,a
      000E63 08               [12] 3695 	inc	r0
      000E64 E2               [24] 3696 	movx	a,@r0
      000E65 54 1F            [12] 3697 	anl	a,#0x1F
      000E67 FF               [12] 3698 	mov	r7,a
      000E68 4E               [12] 3699 	orl	a,r6
      000E69 60 09            [24] 3700 	jz	00196$
      000E6B 78r1E            [12] 3701 	mov	r0,#(_trailer + 0x0001)
      000E6D E2               [24] 3702 	movx	a,@r0
      000E6E 20 E5 03         [24] 3703 	jb	acc.5,00196$
                                   3704 ;	radio/tdm.c:829: packet_force_resend();
      000E71 12r00r00         [24] 3705 	lcall	_packet_force_resend
      000E74                       3706 00196$:
                                   3707 ;	radio/tdm.c:832: if (lbt_rssi != 0) {
      000E74 78r16            [12] 3708 	mov	r0,#_lbt_rssi
      000E76 E2               [24] 3709 	movx	a,@r0
      000E77 60 0B            [24] 3710 	jz	00201$
                                   3711 ;	radio/tdm.c:834: lbt_listen_time = 0;
      000E79 78r17            [12] 3712 	mov	r0,#_lbt_listen_time
      000E7B E4               [12] 3713 	clr	a
      000E7C F2               [24] 3714 	movx	@r0,a
      000E7D 08               [12] 3715 	inc	r0
      000E7E F2               [24] 3716 	movx	@r0,a
                                   3717 ;	radio/tdm.c:835: lbt_rand = 0;
      000E7F 78r1B            [12] 3718 	mov	r0,#_lbt_rand
      000E81 F2               [24] 3719 	movx	@r0,a
      000E82 08               [12] 3720 	inc	r0
      000E83 F2               [24] 3721 	movx	@r0,a
      000E84                       3722 00201$:
                                   3723 ;	radio/tdm.c:838: if (len != 0 && trailer.window != 0) {
      000E84 78r69            [12] 3724 	mov	r0,#_tdm_serial_loop_len_1_222
      000E86 E2               [24] 3725 	movx	a,@r0
      000E87 60 0E            [24] 3726 	jz	00203$
      000E89 78r1D            [12] 3727 	mov	r0,#_trailer
      000E8B E2               [24] 3728 	movx	a,@r0
      000E8C FE               [12] 3729 	mov	r6,a
      000E8D 08               [12] 3730 	inc	r0
      000E8E E2               [24] 3731 	movx	a,@r0
      000E8F 54 1F            [12] 3732 	anl	a,#0x1F
      000E91 FF               [12] 3733 	mov	r7,a
      000E92 4E               [12] 3734 	orl	a,r6
      000E93 60 02            [24] 3735 	jz	00203$
                                   3736 ;	radio/tdm.c:839: LED_ACTIVITY = LED_OFF;
      000E95 C2 B6            [12] 3737 	clr	_LED_RED
      000E97                       3738 00203$:
                                   3739 ;	radio/tdm.c:844: if(tdm_state_remaining > tx_window_width/2)
      000E97 78r03            [12] 3740 	mov	r0,#_tx_window_width
      000E99 E2               [24] 3741 	movx	a,@r0
      000E9A FE               [12] 3742 	mov	r6,a
      000E9B 08               [12] 3743 	inc	r0
      000E9C E2               [24] 3744 	movx	a,@r0
      000E9D C3               [12] 3745 	clr	c
      000E9E 13               [12] 3746 	rrc	a
      000E9F CE               [12] 3747 	xch	a,r6
      000EA0 13               [12] 3748 	rrc	a
      000EA1 CE               [12] 3749 	xch	a,r6
      000EA2 FF               [12] 3750 	mov	r7,a
      000EA3 78r01            [12] 3751 	mov	r0,#_tdm_state_remaining
      000EA5 C3               [12] 3752 	clr	c
      000EA6 E2               [24] 3753 	movx	a,@r0
      000EA7 F5 F0            [12] 3754 	mov	b,a
      000EA9 EE               [12] 3755 	mov	a,r6
      000EAA 95 F0            [12] 3756 	subb	a,b
      000EAC 08               [12] 3757 	inc	r0
      000EAD E2               [24] 3758 	movx	a,@r0
      000EAE F5 F0            [12] 3759 	mov	b,a
      000EB0 EF               [12] 3760 	mov	a,r7
      000EB1 95 F0            [12] 3761 	subb	a,b
      000EB3 50 12            [24] 3762 	jnc	00212$
                                   3763 ;	radio/tdm.c:848: if (encrypt_buffer_getting_full()) {
      000EB5 12r00r00         [24] 3764 	lcall	_encrypt_buffer_getting_full
      000EB8 50 0A            [24] 3765 	jnc	00209$
                                   3766 ;	radio/tdm.c:849: while (!encrypt_buffer_getting_empty()) {
      000EBA                       3767 00205$:
      000EBA 12r00r00         [24] 3768 	lcall	_encrypt_buffer_getting_empty
      000EBD 40 08            [24] 3769 	jc	00212$
                                   3770 ;	radio/tdm.c:850: decryptPackets();
      000EBF 12r00r00         [24] 3771 	lcall	_decryptPackets
      000EC2 80 F6            [24] 3772 	sjmp	00205$
      000EC4                       3773 00209$:
                                   3774 ;	radio/tdm.c:853: decryptPackets();
      000EC4 12r00r00         [24] 3775 	lcall	_decryptPackets
      000EC7                       3776 00212$:
                                   3777 ;	radio/tdm.c:860: radio_set_channel(fhop_receive_channel());
      000EC7 12r00r00         [24] 3778 	lcall	_fhop_receive_channel
      000ECA 12r00r00         [24] 3779 	lcall	_radio_set_channel
                                   3780 ;	radio/tdm.c:863: radio_receiver_on();
      000ECD 12r00r00         [24] 3781 	lcall	_radio_receiver_on
      000ED0 02r07rAC         [24] 3782 	ljmp	00215$
                                   3783 ;------------------------------------------------------------
                                   3784 ;Allocation info for local variables in function 'tdm_init'
                                   3785 ;------------------------------------------------------------
                                   3786 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                                   3787 ;i                         Allocated with name '_tdm_init_i_1_273'
                                   3788 ;air_rate                  Allocated with name '_tdm_init_air_rate_1_273'
                                   3789 ;window_width              Allocated with name '_tdm_init_window_width_1_273'
                                   3790 ;------------------------------------------------------------
                                   3791 ;	radio/tdm.c:982: tdm_init(void)
                                   3792 ;	-----------------------------------------
                                   3793 ;	 function tdm_init
                                   3794 ;	-----------------------------------------
      000ED3                       3795 _tdm_init:
                                   3796 ;	radio/tdm.c:985: __xdata uint8_t air_rate = radio_air_rate();
      000ED3 12r00r00         [24] 3797 	lcall	_radio_air_rate
      000ED6 AF 82            [24] 3798 	mov	r7,dpl
                                   3799 ;	radio/tdm.c:994: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
      000ED8 90r00r00         [24] 3800 	mov	dptr,#__mullong_PARM_2
      000EDB EF               [12] 3801 	mov	a,r7
      000EDC F0               [24] 3802 	movx	@dptr,a
      000EDD E4               [12] 3803 	clr	a
      000EDE A3               [24] 3804 	inc	dptr
      000EDF F0               [24] 3805 	movx	@dptr,a
      000EE0 A3               [24] 3806 	inc	dptr
      000EE1 F0               [24] 3807 	movx	@dptr,a
      000EE2 A3               [24] 3808 	inc	dptr
      000EE3 F0               [24] 3809 	movx	@dptr,a
      000EE4 90 03 E8         [24] 3810 	mov	dptr,#0x03E8
      000EE7 E4               [12] 3811 	clr	a
      000EE8 F5 F0            [12] 3812 	mov	b,a
      000EEA 12r00r00         [24] 3813 	lcall	__mullong
      000EED AC 82            [24] 3814 	mov	r4,dpl
      000EEF AD 83            [24] 3815 	mov	r5,dph
      000EF1 AE F0            [24] 3816 	mov	r6,b
      000EF3 FF               [12] 3817 	mov	r7,a
      000EF4 90r00r00         [24] 3818 	mov	dptr,#__divulong_PARM_2
      000EF7 EC               [12] 3819 	mov	a,r4
      000EF8 F0               [24] 3820 	movx	@dptr,a
      000EF9 ED               [12] 3821 	mov	a,r5
      000EFA A3               [24] 3822 	inc	dptr
      000EFB F0               [24] 3823 	movx	@dptr,a
      000EFC EE               [12] 3824 	mov	a,r6
      000EFD A3               [24] 3825 	inc	dptr
      000EFE F0               [24] 3826 	movx	@dptr,a
      000EFF EF               [12] 3827 	mov	a,r7
      000F00 A3               [24] 3828 	inc	dptr
      000F01 F0               [24] 3829 	movx	@dptr,a
      000F02 90 12 00         [24] 3830 	mov	dptr,#0x1200
      000F05 75 F0 7A         [24] 3831 	mov	b,#0x7A
      000F08 E4               [12] 3832 	clr	a
      000F09 12r00r00         [24] 3833 	lcall	__divulong
      000F0C AC 82            [24] 3834 	mov	r4,dpl
      000F0E AD 83            [24] 3835 	mov	r5,dph
      000F10 AE F0            [24] 3836 	mov	r6,b
      000F12 FF               [12] 3837 	mov	r7,a
      000F13 74 08            [12] 3838 	mov	a,#0x08
      000F15 2C               [12] 3839 	add	a,r4
      000F16 FC               [12] 3840 	mov	r4,a
      000F17 E4               [12] 3841 	clr	a
      000F18 3D               [12] 3842 	addc	a,r5
      000F19 FD               [12] 3843 	mov	r5,a
      000F1A E4               [12] 3844 	clr	a
      000F1B 3E               [12] 3845 	addc	a,r6
      000F1C FE               [12] 3846 	mov	r6,a
      000F1D E4               [12] 3847 	clr	a
      000F1E 3F               [12] 3848 	addc	a,r7
      000F1F FF               [12] 3849 	mov	r7,a
      000F20 ED               [12] 3850 	mov	a,r5
      000F21 C4               [12] 3851 	swap	a
      000F22 CC               [12] 3852 	xch	a,r4
      000F23 C4               [12] 3853 	swap	a
      000F24 54 0F            [12] 3854 	anl	a,#0x0F
      000F26 6C               [12] 3855 	xrl	a,r4
      000F27 CC               [12] 3856 	xch	a,r4
      000F28 54 0F            [12] 3857 	anl	a,#0x0F
      000F2A CC               [12] 3858 	xch	a,r4
      000F2B 6C               [12] 3859 	xrl	a,r4
      000F2C CC               [12] 3860 	xch	a,r4
      000F2D FD               [12] 3861 	mov	r5,a
      000F2E EE               [12] 3862 	mov	a,r6
      000F2F C4               [12] 3863 	swap	a
      000F30 54 F0            [12] 3864 	anl	a,#0xF0
      000F32 4D               [12] 3865 	orl	a,r5
      000F33 FD               [12] 3866 	mov	r5,a
      000F34 EF               [12] 3867 	mov	a,r7
      000F35 C4               [12] 3868 	swap	a
      000F36 CE               [12] 3869 	xch	a,r6
      000F37 C4               [12] 3870 	swap	a
      000F38 54 0F            [12] 3871 	anl	a,#0x0F
      000F3A 6E               [12] 3872 	xrl	a,r6
      000F3B CE               [12] 3873 	xch	a,r6
      000F3C 54 0F            [12] 3874 	anl	a,#0x0F
      000F3E CE               [12] 3875 	xch	a,r6
      000F3F 6E               [12] 3876 	xrl	a,r6
      000F40 CE               [12] 3877 	xch	a,r6
                                   3878 ;	radio/tdm.c:995: ticks_per_byte++;
      000F41 74 01            [12] 3879 	mov	a,#0x01
      000F43 2C               [12] 3880 	add	a,r4
      000F44 FE               [12] 3881 	mov	r6,a
      000F45 E4               [12] 3882 	clr	a
      000F46 3D               [12] 3883 	addc	a,r5
      000F47 FF               [12] 3884 	mov	r7,a
      000F48 78r0A            [12] 3885 	mov	r0,#_ticks_per_byte
      000F4A EE               [12] 3886 	mov	a,r6
      000F4B F2               [24] 3887 	movx	@r0,a
      000F4C 08               [12] 3888 	inc	r0
      000F4D EF               [12] 3889 	mov	a,r7
      000F4E F2               [24] 3890 	movx	@r0,a
                                   3891 ;	radio/tdm.c:1002: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
      000F4F 90r00r00         [24] 3892 	mov	dptr,#__mulint_PARM_2
      000F52 EE               [12] 3893 	mov	a,r6
      000F53 F0               [24] 3894 	movx	@dptr,a
      000F54 EF               [12] 3895 	mov	a,r7
      000F55 A3               [24] 3896 	inc	dptr
      000F56 F0               [24] 3897 	movx	@dptr,a
      000F57 90 00 0D         [24] 3898 	mov	dptr,#0x000D
      000F5A C0 07            [24] 3899 	push	ar7
      000F5C C0 06            [24] 3900 	push	ar6
      000F5E 12r00r00         [24] 3901 	lcall	__mulint
      000F61 E5 82            [12] 3902 	mov	a,dpl
      000F63 85 83 F0         [24] 3903 	mov	b,dph
      000F66 D0 06            [24] 3904 	pop	ar6
      000F68 D0 07            [24] 3905 	pop	ar7
      000F6A 24 0D            [12] 3906 	add	a,#0x0D
      000F6C FC               [12] 3907 	mov	r4,a
      000F6D E4               [12] 3908 	clr	a
      000F6E 35 F0            [12] 3909 	addc	a,b
      000F70 FD               [12] 3910 	mov	r5,a
      000F71 78r08            [12] 3911 	mov	r0,#_packet_latency
      000F73 EC               [12] 3912 	mov	a,r4
      000F74 F2               [24] 3913 	movx	@r0,a
      000F75 08               [12] 3914 	inc	r0
      000F76 ED               [12] 3915 	mov	a,r5
      000F77 F2               [24] 3916 	movx	@r0,a
                                   3917 ;	radio/tdm.c:1004: if (feature_golay) {
      000F78 30*00 2E         [24] 3918 	jnb	_feature_golay,00102$
                                   3919 ;	radio/tdm.c:1005: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
      000F7B 78r05            [12] 3920 	mov	r0,#_max_data_packet_length
      000F7D 74 74            [12] 3921 	mov	a,#0x74
      000F7F F2               [24] 3922 	movx	@r0,a
                                   3923 ;	radio/tdm.c:1008: ticks_per_byte *= 2;
      000F80 EF               [12] 3924 	mov	a,r7
      000F81 CE               [12] 3925 	xch	a,r6
      000F82 25 E0            [12] 3926 	add	a,acc
      000F84 CE               [12] 3927 	xch	a,r6
      000F85 33               [12] 3928 	rlc	a
      000F86 FF               [12] 3929 	mov	r7,a
      000F87 78r0A            [12] 3930 	mov	r0,#_ticks_per_byte
      000F89 EE               [12] 3931 	mov	a,r6
      000F8A F2               [24] 3932 	movx	@r0,a
      000F8B 08               [12] 3933 	inc	r0
      000F8C EF               [12] 3934 	mov	a,r7
      000F8D F2               [24] 3935 	movx	@r0,a
                                   3936 ;	radio/tdm.c:1011: packet_latency += 4*ticks_per_byte;
      000F8E EF               [12] 3937 	mov	a,r7
      000F8F CE               [12] 3938 	xch	a,r6
      000F90 25 E0            [12] 3939 	add	a,acc
      000F92 CE               [12] 3940 	xch	a,r6
      000F93 33               [12] 3941 	rlc	a
      000F94 CE               [12] 3942 	xch	a,r6
      000F95 25 E0            [12] 3943 	add	a,acc
      000F97 CE               [12] 3944 	xch	a,r6
      000F98 33               [12] 3945 	rlc	a
      000F99 FF               [12] 3946 	mov	r7,a
      000F9A EE               [12] 3947 	mov	a,r6
      000F9B 2C               [12] 3948 	add	a,r4
      000F9C FC               [12] 3949 	mov	r4,a
      000F9D EF               [12] 3950 	mov	a,r7
      000F9E 3D               [12] 3951 	addc	a,r5
      000F9F FD               [12] 3952 	mov	r5,a
      000FA0 78r08            [12] 3953 	mov	r0,#_packet_latency
      000FA2 EC               [12] 3954 	mov	a,r4
      000FA3 F2               [24] 3955 	movx	@r0,a
      000FA4 08               [12] 3956 	inc	r0
      000FA5 ED               [12] 3957 	mov	a,r5
      000FA6 F2               [24] 3958 	movx	@r0,a
      000FA7 80 05            [24] 3959 	sjmp	00103$
      000FA9                       3960 00102$:
                                   3961 ;	radio/tdm.c:1013: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
      000FA9 78r05            [12] 3962 	mov	r0,#_max_data_packet_length
      000FAB 74 F8            [12] 3963 	mov	a,#0xF8
      000FAD F2               [24] 3964 	movx	@r0,a
      000FAE                       3965 00103$:
                                   3966 ;	radio/tdm.c:1017: silence_period = 2*packet_latency;
      000FAE 78r08            [12] 3967 	mov	r0,#_packet_latency
      000FB0 79r06            [12] 3968 	mov	r1,#_silence_period
      000FB2 E2               [24] 3969 	movx	a,@r0
      000FB3 F3               [24] 3970 	movx	@r1,a
      000FB4 08               [12] 3971 	inc	r0
      000FB5 E2               [24] 3972 	movx	a,@r0
      000FB6 F5 F0            [12] 3973 	mov	b,a
      000FB8 E3               [24] 3974 	movx	a,@r1
      000FB9 25 E0            [12] 3975 	add	a,acc
      000FBB C5 F0            [12] 3976 	xch	a,b
      000FBD 33               [12] 3977 	rlc	a
      000FBE C5 F0            [12] 3978 	xch	a,b
      000FC0 F3               [24] 3979 	movx	@r1,a
      000FC1 09               [12] 3980 	inc	r1
      000FC2 E5 F0            [12] 3981 	mov	a,b
      000FC4 F3               [24] 3982 	movx	@r1,a
                                   3983 ;	radio/tdm.c:1020: window_width = 3*(packet_latency+(max_data_packet_length*(uint32_t)ticks_per_byte));
      000FC5 78r0A            [12] 3984 	mov	r0,#_ticks_per_byte
      000FC7 90r00r00         [24] 3985 	mov	dptr,#__mullong_PARM_2
      000FCA E2               [24] 3986 	movx	a,@r0
      000FCB F0               [24] 3987 	movx	@dptr,a
      000FCC 08               [12] 3988 	inc	r0
      000FCD E2               [24] 3989 	movx	a,@r0
      000FCE A3               [24] 3990 	inc	dptr
      000FCF F0               [24] 3991 	movx	@dptr,a
      000FD0 E4               [12] 3992 	clr	a
      000FD1 A3               [24] 3993 	inc	dptr
      000FD2 F0               [24] 3994 	movx	@dptr,a
      000FD3 A3               [24] 3995 	inc	dptr
      000FD4 F0               [24] 3996 	movx	@dptr,a
      000FD5 78r05            [12] 3997 	mov	r0,#_max_data_packet_length
      000FD7 E2               [24] 3998 	movx	a,@r0
      000FD8 FC               [12] 3999 	mov	r4,a
      000FD9 7D 00            [12] 4000 	mov	r5,#0x00
      000FDB 7E 00            [12] 4001 	mov	r6,#0x00
      000FDD 7F 00            [12] 4002 	mov	r7,#0x00
      000FDF 8C 82            [24] 4003 	mov	dpl,r4
      000FE1 8D 83            [24] 4004 	mov	dph,r5
      000FE3 8E F0            [24] 4005 	mov	b,r6
      000FE5 EF               [12] 4006 	mov	a,r7
      000FE6 12r00r00         [24] 4007 	lcall	__mullong
      000FE9 85 82*17         [24] 4008 	mov	_tdm_init_sloc0_1_0,dpl
      000FEC 85 83*18         [24] 4009 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      000FEF 85 F0*19         [24] 4010 	mov	(_tdm_init_sloc0_1_0 + 2),b
      000FF2 F5*1A            [12] 4011 	mov	(_tdm_init_sloc0_1_0 + 3),a
      000FF4 78r08            [12] 4012 	mov	r0,#_packet_latency
      000FF6 E2               [24] 4013 	movx	a,@r0
      000FF7 FA               [12] 4014 	mov	r2,a
      000FF8 08               [12] 4015 	inc	r0
      000FF9 E2               [24] 4016 	movx	a,@r0
      000FFA FB               [12] 4017 	mov	r3,a
      000FFB 7E 00            [12] 4018 	mov	r6,#0x00
      000FFD 7F 00            [12] 4019 	mov	r7,#0x00
      000FFF 90r00r00         [24] 4020 	mov	dptr,#__mullong_PARM_2
      001002 E5*17            [12] 4021 	mov	a,_tdm_init_sloc0_1_0
      001004 2A               [12] 4022 	add	a,r2
      001005 F0               [24] 4023 	movx	@dptr,a
      001006 E5*18            [12] 4024 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      001008 3B               [12] 4025 	addc	a,r3
      001009 A3               [24] 4026 	inc	dptr
      00100A F0               [24] 4027 	movx	@dptr,a
      00100B E5*19            [12] 4028 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      00100D 3E               [12] 4029 	addc	a,r6
      00100E A3               [24] 4030 	inc	dptr
      00100F F0               [24] 4031 	movx	@dptr,a
      001010 E5*1A            [12] 4032 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      001012 3F               [12] 4033 	addc	a,r7
      001013 A3               [24] 4034 	inc	dptr
      001014 F0               [24] 4035 	movx	@dptr,a
      001015 90 00 03         [24] 4036 	mov	dptr,#(0x03&0x00ff)
      001018 E4               [12] 4037 	clr	a
      001019 F5 F0            [12] 4038 	mov	b,a
      00101B 12r00r00         [24] 4039 	lcall	__mullong
      00101E AC 82            [24] 4040 	mov	r4,dpl
      001020 AD 83            [24] 4041 	mov	r5,dph
      001022 AE F0            [24] 4042 	mov	r6,b
      001024 FF               [12] 4043 	mov	r7,a
      001025 90r01r01         [24] 4044 	mov	dptr,#_tdm_init_window_width_1_273
      001028 EC               [12] 4045 	mov	a,r4
      001029 F0               [24] 4046 	movx	@dptr,a
      00102A ED               [12] 4047 	mov	a,r5
      00102B A3               [24] 4048 	inc	dptr
      00102C F0               [24] 4049 	movx	@dptr,a
      00102D EE               [12] 4050 	mov	a,r6
      00102E A3               [24] 4051 	inc	dptr
      00102F F0               [24] 4052 	movx	@dptr,a
      001030 EF               [12] 4053 	mov	a,r7
      001031 A3               [24] 4054 	inc	dptr
      001032 F0               [24] 4055 	movx	@dptr,a
                                   4056 ;	radio/tdm.c:1023: lbt_min_time = LBT_MIN_TIME_USEC/16;
      001033 78r19            [12] 4057 	mov	r0,#_lbt_min_time
      001035 74 38            [12] 4058 	mov	a,#0x38
      001037 F2               [24] 4059 	movx	@r0,a
      001038 08               [12] 4060 	inc	r0
      001039 74 01            [12] 4061 	mov	a,#0x01
      00103B F2               [24] 4062 	movx	@r0,a
                                   4063 ;	radio/tdm.c:1026: if (lbt_rssi != 0) {
      00103C 78r16            [12] 4064 	mov	r0,#_lbt_rssi
      00103E E2               [24] 4065 	movx	a,@r0
      00103F 60 3A            [24] 4066 	jz	00105$
                                   4067 ;	radio/tdm.c:1027: window_width = constrain(window_width, 3*lbt_min_time, window_width);
      001041 78r00            [12] 4068 	mov	r0,#_constrain_PARM_2
      001043 74 A8            [12] 4069 	mov	a,#0xA8
      001045 F2               [24] 4070 	movx	@r0,a
      001046 08               [12] 4071 	inc	r0
      001047 74 03            [12] 4072 	mov	a,#0x03
      001049 F2               [24] 4073 	movx	@r0,a
      00104A 08               [12] 4074 	inc	r0
      00104B E4               [12] 4075 	clr	a
      00104C F2               [24] 4076 	movx	@r0,a
      00104D 08               [12] 4077 	inc	r0
      00104E F2               [24] 4078 	movx	@r0,a
      00104F 78r00            [12] 4079 	mov	r0,#_constrain_PARM_3
      001051 EC               [12] 4080 	mov	a,r4
      001052 F2               [24] 4081 	movx	@r0,a
      001053 08               [12] 4082 	inc	r0
      001054 ED               [12] 4083 	mov	a,r5
      001055 F2               [24] 4084 	movx	@r0,a
      001056 08               [12] 4085 	inc	r0
      001057 EE               [12] 4086 	mov	a,r6
      001058 F2               [24] 4087 	movx	@r0,a
      001059 08               [12] 4088 	inc	r0
      00105A EF               [12] 4089 	mov	a,r7
      00105B F2               [24] 4090 	movx	@r0,a
      00105C 8C 82            [24] 4091 	mov	dpl,r4
      00105E 8D 83            [24] 4092 	mov	dph,r5
      001060 8E F0            [24] 4093 	mov	b,r6
      001062 EF               [12] 4094 	mov	a,r7
      001063 12r00r00         [24] 4095 	lcall	_constrain
      001066 AC 82            [24] 4096 	mov	r4,dpl
      001068 AD 83            [24] 4097 	mov	r5,dph
      00106A AE F0            [24] 4098 	mov	r6,b
      00106C FF               [12] 4099 	mov	r7,a
      00106D 90r01r01         [24] 4100 	mov	dptr,#_tdm_init_window_width_1_273
      001070 EC               [12] 4101 	mov	a,r4
      001071 F0               [24] 4102 	movx	@dptr,a
      001072 ED               [12] 4103 	mov	a,r5
      001073 A3               [24] 4104 	inc	dptr
      001074 F0               [24] 4105 	movx	@dptr,a
      001075 EE               [12] 4106 	mov	a,r6
      001076 A3               [24] 4107 	inc	dptr
      001077 F0               [24] 4108 	movx	@dptr,a
      001078 EF               [12] 4109 	mov	a,r7
      001079 A3               [24] 4110 	inc	dptr
      00107A F0               [24] 4111 	movx	@dptr,a
      00107B                       4112 00105$:
                                   4113 ;	radio/tdm.c:1032: if (window_width >= REGULATORY_MAX_WINDOW && num_fh_channels > 1) {
      00107B 90r01r01         [24] 4114 	mov	dptr,#_tdm_init_window_width_1_273
      00107E E0               [24] 4115 	movx	a,@dptr
      00107F FC               [12] 4116 	mov	r4,a
      001080 A3               [24] 4117 	inc	dptr
      001081 E0               [24] 4118 	movx	a,@dptr
      001082 FD               [12] 4119 	mov	r5,a
      001083 A3               [24] 4120 	inc	dptr
      001084 E0               [24] 4121 	movx	a,@dptr
      001085 FE               [12] 4122 	mov	r6,a
      001086 A3               [24] 4123 	inc	dptr
      001087 E0               [24] 4124 	movx	a,@dptr
      001088 FF               [12] 4125 	mov	r7,a
      001089 C3               [12] 4126 	clr	c
      00108A EC               [12] 4127 	mov	a,r4
      00108B 94 A8            [12] 4128 	subb	a,#0xA8
      00108D ED               [12] 4129 	mov	a,r5
      00108E 94 61            [12] 4130 	subb	a,#0x61
      001090 EE               [12] 4131 	mov	a,r6
      001091 94 00            [12] 4132 	subb	a,#0x00
      001093 EF               [12] 4133 	mov	a,r7
      001094 94 00            [12] 4134 	subb	a,#0x00
      001096 40 1B            [24] 4135 	jc	00107$
      001098 78r00            [12] 4136 	mov	r0,#_num_fh_channels
      00109A C3               [12] 4137 	clr	c
      00109B E2               [24] 4138 	movx	a,@r0
      00109C F5 F0            [12] 4139 	mov	b,a
      00109E 74 01            [12] 4140 	mov	a,#0x01
      0010A0 95 F0            [12] 4141 	subb	a,b
      0010A2 50 0F            [24] 4142 	jnc	00107$
                                   4143 ;	radio/tdm.c:1033: window_width = REGULATORY_MAX_WINDOW;
      0010A4 90r01r01         [24] 4144 	mov	dptr,#_tdm_init_window_width_1_273
      0010A7 74 A8            [12] 4145 	mov	a,#0xA8
      0010A9 F0               [24] 4146 	movx	@dptr,a
      0010AA 74 61            [12] 4147 	mov	a,#0x61
      0010AC A3               [24] 4148 	inc	dptr
      0010AD F0               [24] 4149 	movx	@dptr,a
      0010AE E4               [12] 4150 	clr	a
      0010AF A3               [24] 4151 	inc	dptr
      0010B0 F0               [24] 4152 	movx	@dptr,a
      0010B1 A3               [24] 4153 	inc	dptr
      0010B2 F0               [24] 4154 	movx	@dptr,a
      0010B3                       4155 00107$:
                                   4156 ;	radio/tdm.c:1037: if (window_width > param_get(PARAM_MAX_WINDOW)*(1000/16)) {
      0010B3 75 82 0F         [24] 4157 	mov	dpl,#0x0F
      0010B6 12r00r00         [24] 4158 	lcall	_param_get
      0010B9 AC 82            [24] 4159 	mov	r4,dpl
      0010BB AD 83            [24] 4160 	mov	r5,dph
      0010BD AE F0            [24] 4161 	mov	r6,b
      0010BF FF               [12] 4162 	mov	r7,a
      0010C0 90r00r00         [24] 4163 	mov	dptr,#__mullong_PARM_2
      0010C3 EC               [12] 4164 	mov	a,r4
      0010C4 F0               [24] 4165 	movx	@dptr,a
      0010C5 ED               [12] 4166 	mov	a,r5
      0010C6 A3               [24] 4167 	inc	dptr
      0010C7 F0               [24] 4168 	movx	@dptr,a
      0010C8 EE               [12] 4169 	mov	a,r6
      0010C9 A3               [24] 4170 	inc	dptr
      0010CA F0               [24] 4171 	movx	@dptr,a
      0010CB EF               [12] 4172 	mov	a,r7
      0010CC A3               [24] 4173 	inc	dptr
      0010CD F0               [24] 4174 	movx	@dptr,a
      0010CE 90 00 3E         [24] 4175 	mov	dptr,#(0x3E&0x00ff)
      0010D1 E4               [12] 4176 	clr	a
      0010D2 F5 F0            [12] 4177 	mov	b,a
      0010D4 12r00r00         [24] 4178 	lcall	__mullong
      0010D7 85 82*17         [24] 4179 	mov	_tdm_init_sloc0_1_0,dpl
      0010DA 85 83*18         [24] 4180 	mov	(_tdm_init_sloc0_1_0 + 1),dph
      0010DD 85 F0*19         [24] 4181 	mov	(_tdm_init_sloc0_1_0 + 2),b
      0010E0 F5*1A            [12] 4182 	mov	(_tdm_init_sloc0_1_0 + 3),a
      0010E2 90r01r01         [24] 4183 	mov	dptr,#_tdm_init_window_width_1_273
      0010E5 E0               [24] 4184 	movx	a,@dptr
      0010E6 FA               [12] 4185 	mov	r2,a
      0010E7 A3               [24] 4186 	inc	dptr
      0010E8 E0               [24] 4187 	movx	a,@dptr
      0010E9 FB               [12] 4188 	mov	r3,a
      0010EA A3               [24] 4189 	inc	dptr
      0010EB E0               [24] 4190 	movx	a,@dptr
      0010EC FE               [12] 4191 	mov	r6,a
      0010ED A3               [24] 4192 	inc	dptr
      0010EE E0               [24] 4193 	movx	a,@dptr
      0010EF FF               [12] 4194 	mov	r7,a
      0010F0 C3               [12] 4195 	clr	c
      0010F1 E5*17            [12] 4196 	mov	a,_tdm_init_sloc0_1_0
      0010F3 9A               [12] 4197 	subb	a,r2
      0010F4 E5*18            [12] 4198 	mov	a,(_tdm_init_sloc0_1_0 + 1)
      0010F6 9B               [12] 4199 	subb	a,r3
      0010F7 E5*19            [12] 4200 	mov	a,(_tdm_init_sloc0_1_0 + 2)
      0010F9 9E               [12] 4201 	subb	a,r6
      0010FA E5*1A            [12] 4202 	mov	a,(_tdm_init_sloc0_1_0 + 3)
      0010FC 9F               [12] 4203 	subb	a,r7
      0010FD 50 39            [24] 4204 	jnc	00110$
                                   4205 ;	radio/tdm.c:1038: window_width = param_get(PARAM_MAX_WINDOW)*(1000/16);
      0010FF 75 82 0F         [24] 4206 	mov	dpl,#0x0F
      001102 12r00r00         [24] 4207 	lcall	_param_get
      001105 AC 82            [24] 4208 	mov	r4,dpl
      001107 AD 83            [24] 4209 	mov	r5,dph
      001109 AE F0            [24] 4210 	mov	r6,b
      00110B FF               [12] 4211 	mov	r7,a
      00110C 90r00r00         [24] 4212 	mov	dptr,#__mullong_PARM_2
      00110F EC               [12] 4213 	mov	a,r4
      001110 F0               [24] 4214 	movx	@dptr,a
      001111 ED               [12] 4215 	mov	a,r5
      001112 A3               [24] 4216 	inc	dptr
      001113 F0               [24] 4217 	movx	@dptr,a
      001114 EE               [12] 4218 	mov	a,r6
      001115 A3               [24] 4219 	inc	dptr
      001116 F0               [24] 4220 	movx	@dptr,a
      001117 EF               [12] 4221 	mov	a,r7
      001118 A3               [24] 4222 	inc	dptr
      001119 F0               [24] 4223 	movx	@dptr,a
      00111A 90 00 3E         [24] 4224 	mov	dptr,#(0x3E&0x00ff)
      00111D E4               [12] 4225 	clr	a
      00111E F5 F0            [12] 4226 	mov	b,a
      001120 12r00r00         [24] 4227 	lcall	__mullong
      001123 AC 82            [24] 4228 	mov	r4,dpl
      001125 AD 83            [24] 4229 	mov	r5,dph
      001127 AE F0            [24] 4230 	mov	r6,b
      001129 FF               [12] 4231 	mov	r7,a
      00112A 90r01r01         [24] 4232 	mov	dptr,#_tdm_init_window_width_1_273
      00112D EC               [12] 4233 	mov	a,r4
      00112E F0               [24] 4234 	movx	@dptr,a
      00112F ED               [12] 4235 	mov	a,r5
      001130 A3               [24] 4236 	inc	dptr
      001131 F0               [24] 4237 	movx	@dptr,a
      001132 EE               [12] 4238 	mov	a,r6
      001133 A3               [24] 4239 	inc	dptr
      001134 F0               [24] 4240 	movx	@dptr,a
      001135 EF               [12] 4241 	mov	a,r7
      001136 A3               [24] 4242 	inc	dptr
      001137 F0               [24] 4243 	movx	@dptr,a
      001138                       4244 00110$:
                                   4245 ;	radio/tdm.c:1042: if (window_width > 0x1fff) {
      001138 90r01r01         [24] 4246 	mov	dptr,#_tdm_init_window_width_1_273
      00113B E0               [24] 4247 	movx	a,@dptr
      00113C FC               [12] 4248 	mov	r4,a
      00113D A3               [24] 4249 	inc	dptr
      00113E E0               [24] 4250 	movx	a,@dptr
      00113F FD               [12] 4251 	mov	r5,a
      001140 A3               [24] 4252 	inc	dptr
      001141 E0               [24] 4253 	movx	a,@dptr
      001142 FE               [12] 4254 	mov	r6,a
      001143 A3               [24] 4255 	inc	dptr
      001144 E0               [24] 4256 	movx	a,@dptr
      001145 FF               [12] 4257 	mov	r7,a
      001146 C3               [12] 4258 	clr	c
      001147 74 FF            [12] 4259 	mov	a,#0xFF
      001149 9C               [12] 4260 	subb	a,r4
      00114A 74 1F            [12] 4261 	mov	a,#0x1F
      00114C 9D               [12] 4262 	subb	a,r5
      00114D E4               [12] 4263 	clr	a
      00114E 9E               [12] 4264 	subb	a,r6
      00114F E4               [12] 4265 	clr	a
      001150 9F               [12] 4266 	subb	a,r7
      001151 50 0F            [24] 4267 	jnc	00112$
                                   4268 ;	radio/tdm.c:1043: window_width = 0x1fff;
      001153 90r01r01         [24] 4269 	mov	dptr,#_tdm_init_window_width_1_273
      001156 74 FF            [12] 4270 	mov	a,#0xFF
      001158 F0               [24] 4271 	movx	@dptr,a
      001159 74 1F            [12] 4272 	mov	a,#0x1F
      00115B A3               [24] 4273 	inc	dptr
      00115C F0               [24] 4274 	movx	@dptr,a
      00115D E4               [12] 4275 	clr	a
      00115E A3               [24] 4276 	inc	dptr
      00115F F0               [24] 4277 	movx	@dptr,a
      001160 A3               [24] 4278 	inc	dptr
      001161 F0               [24] 4279 	movx	@dptr,a
      001162                       4280 00112$:
                                   4281 ;	radio/tdm.c:1046: tx_window_width = window_width;
      001162 90r01r01         [24] 4282 	mov	dptr,#_tdm_init_window_width_1_273
      001165 E0               [24] 4283 	movx	a,@dptr
      001166 FC               [12] 4284 	mov	r4,a
      001167 A3               [24] 4285 	inc	dptr
      001168 E0               [24] 4286 	movx	a,@dptr
      001169 FD               [12] 4287 	mov	r5,a
      00116A A3               [24] 4288 	inc	dptr
      00116B E0               [24] 4289 	movx	a,@dptr
      00116C A3               [24] 4290 	inc	dptr
      00116D E0               [24] 4291 	movx	a,@dptr
      00116E 78r03            [12] 4292 	mov	r0,#_tx_window_width
      001170 EC               [12] 4293 	mov	a,r4
      001171 F2               [24] 4294 	movx	@r0,a
      001172 08               [12] 4295 	inc	r0
      001173 ED               [12] 4296 	mov	a,r5
      001174 F2               [24] 4297 	movx	@r0,a
                                   4298 ;	radio/tdm.c:1051: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
      001175 78r0B            [12] 4299 	mov	r0,#(_settings + 0x000b)
      001177 E2               [24] 4300 	movx	a,@r0
      001178 7E 00            [12] 4301 	mov	r6,#0x00
      00117A 24 F6            [12] 4302 	add	a,#0xF6
      00117C FF               [12] 4303 	mov	r7,a
      00117D EE               [12] 4304 	mov	a,r6
      00117E 34 FF            [12] 4305 	addc	a,#0xFF
      001180 FE               [12] 4306 	mov	r6,a
      001181 90r00r00         [24] 4307 	mov	dptr,#__divsint_PARM_2
      001184 74 02            [12] 4308 	mov	a,#0x02
      001186 F0               [24] 4309 	movx	@dptr,a
      001187 E4               [12] 4310 	clr	a
      001188 A3               [24] 4311 	inc	dptr
      001189 F0               [24] 4312 	movx	@dptr,a
      00118A 8F 82            [24] 4313 	mov	dpl,r7
      00118C 8E 83            [24] 4314 	mov	dph,r6
      00118E C0 05            [24] 4315 	push	ar5
      001190 C0 04            [24] 4316 	push	ar4
      001192 12r00r00         [24] 4317 	lcall	__divsint
      001195 AE 82            [24] 4318 	mov	r6,dpl
      001197 AF 83            [24] 4319 	mov	r7,dph
      001199 78r0A            [12] 4320 	mov	r0,#_ticks_per_byte
      00119B 90r00r00         [24] 4321 	mov	dptr,#__mulint_PARM_2
      00119E E2               [24] 4322 	movx	a,@r0
      00119F F0               [24] 4323 	movx	@dptr,a
      0011A0 08               [12] 4324 	inc	r0
      0011A1 E2               [24] 4325 	movx	a,@r0
      0011A2 A3               [24] 4326 	inc	dptr
      0011A3 F0               [24] 4327 	movx	@dptr,a
      0011A4 8E 82            [24] 4328 	mov	dpl,r6
      0011A6 8F 83            [24] 4329 	mov	dph,r7
      0011A8 12r00r00         [24] 4330 	lcall	__mulint
      0011AB AE 82            [24] 4331 	mov	r6,dpl
      0011AD AF 83            [24] 4332 	mov	r7,dph
      0011AF D0 04            [24] 4333 	pop	ar4
      0011B1 D0 05            [24] 4334 	pop	ar5
      0011B3 78r08            [12] 4335 	mov	r0,#_packet_latency
      0011B5 E2               [24] 4336 	movx	a,@r0
      0011B6 2E               [12] 4337 	add	a,r6
      0011B7 F2               [24] 4338 	movx	@r0,a
      0011B8 08               [12] 4339 	inc	r0
      0011B9 E2               [24] 4340 	movx	a,@r0
      0011BA 3F               [12] 4341 	addc	a,r7
      0011BB F2               [24] 4342 	movx	@r0,a
                                   4343 ;	radio/tdm.c:1055: i = (tx_window_width - packet_latency) / ticks_per_byte;
      0011BC 78r08            [12] 4344 	mov	r0,#_packet_latency
      0011BE D3               [12] 4345 	setb	c
      0011BF E2               [24] 4346 	movx	a,@r0
      0011C0 9C               [12] 4347 	subb	a,r4
      0011C1 F4               [12] 4348 	cpl	a
      0011C2 B3               [12] 4349 	cpl	c
      0011C3 FC               [12] 4350 	mov	r4,a
      0011C4 B3               [12] 4351 	cpl	c
      0011C5 08               [12] 4352 	inc	r0
      0011C6 E2               [24] 4353 	movx	a,@r0
      0011C7 9D               [12] 4354 	subb	a,r5
      0011C8 F4               [12] 4355 	cpl	a
      0011C9 FD               [12] 4356 	mov	r5,a
      0011CA 78r0A            [12] 4357 	mov	r0,#_ticks_per_byte
      0011CC 90r00r00         [24] 4358 	mov	dptr,#__divuint_PARM_2
      0011CF E2               [24] 4359 	movx	a,@r0
      0011D0 F0               [24] 4360 	movx	@dptr,a
      0011D1 08               [12] 4361 	inc	r0
      0011D2 E2               [24] 4362 	movx	a,@r0
      0011D3 A3               [24] 4363 	inc	dptr
      0011D4 F0               [24] 4364 	movx	@dptr,a
      0011D5 8C 82            [24] 4365 	mov	dpl,r4
      0011D7 8D 83            [24] 4366 	mov	dph,r5
      0011D9 12r00r00         [24] 4367 	lcall	__divuint
      0011DC AE 82            [24] 4368 	mov	r6,dpl
      0011DE AF 83            [24] 4369 	mov	r7,dph
      0011E0 90r00rFF         [24] 4370 	mov	dptr,#_tdm_init_i_1_273
      0011E3 EE               [12] 4371 	mov	a,r6
      0011E4 F0               [24] 4372 	movx	@dptr,a
      0011E5 EF               [12] 4373 	mov	a,r7
      0011E6 A3               [24] 4374 	inc	dptr
      0011E7 F0               [24] 4375 	movx	@dptr,a
                                   4376 ;	radio/tdm.c:1056: if (i > max_data_packet_length) {
      0011E8 78r05            [12] 4377 	mov	r0,#_max_data_packet_length
      0011EA E2               [24] 4378 	movx	a,@r0
      0011EB FC               [12] 4379 	mov	r4,a
      0011EC 7D 00            [12] 4380 	mov	r5,#0x00
      0011EE C3               [12] 4381 	clr	c
      0011EF EC               [12] 4382 	mov	a,r4
      0011F0 9E               [12] 4383 	subb	a,r6
      0011F1 ED               [12] 4384 	mov	a,r5
      0011F2 9F               [12] 4385 	subb	a,r7
      0011F3 50 08            [24] 4386 	jnc	00114$
                                   4387 ;	radio/tdm.c:1057: i = max_data_packet_length;
      0011F5 90r00rFF         [24] 4388 	mov	dptr,#_tdm_init_i_1_273
      0011F8 EC               [12] 4389 	mov	a,r4
      0011F9 F0               [24] 4390 	movx	@dptr,a
      0011FA ED               [12] 4391 	mov	a,r5
      0011FB A3               [24] 4392 	inc	dptr
      0011FC F0               [24] 4393 	movx	@dptr,a
      0011FD                       4394 00114$:
                                   4395 ;	radio/tdm.c:1059: packet_set_max_xmit(i);
      0011FD 90r00rFF         [24] 4396 	mov	dptr,#_tdm_init_i_1_273
      001200 E0               [24] 4397 	movx	a,@dptr
      001201 FE               [12] 4398 	mov	r6,a
      001202 A3               [24] 4399 	inc	dptr
      001203 E0               [24] 4400 	movx	a,@dptr
      001204 8E 82            [24] 4401 	mov	dpl,r6
      001206 02r00r00         [24] 4402 	ljmp	_packet_set_max_xmit
                                   4403 ;------------------------------------------------------------
                                   4404 ;Allocation info for local variables in function 'tdm_report_timing'
                                   4405 ;------------------------------------------------------------
                                   4406 ;	radio/tdm.c:1075: tdm_report_timing(void)
                                   4407 ;	-----------------------------------------
                                   4408 ;	 function tdm_report_timing
                                   4409 ;	-----------------------------------------
      001209                       4410 _tdm_report_timing:
                                   4411 ;	radio/tdm.c:1077: printf("silence_period: %u\n", (unsigned)silence_period); delay_msec(1);
      001209 78r06            [12] 4412 	mov	r0,#_silence_period
      00120B E2               [24] 4413 	movx	a,@r0
      00120C C0 E0            [24] 4414 	push	acc
      00120E 08               [12] 4415 	inc	r0
      00120F E2               [24] 4416 	movx	a,@r0
      001210 C0 E0            [24] 4417 	push	acc
      001212 74rEB            [12] 4418 	mov	a,#___str_9
      001214 C0 E0            [24] 4419 	push	acc
      001216 74s00            [12] 4420 	mov	a,#(___str_9 >> 8)
      001218 C0 E0            [24] 4421 	push	acc
      00121A 74 80            [12] 4422 	mov	a,#0x80
      00121C C0 E0            [24] 4423 	push	acc
      00121E 12r00r00         [24] 4424 	lcall	_printfl
      001221 E5 81            [12] 4425 	mov	a,sp
      001223 24 FB            [12] 4426 	add	a,#0xfb
      001225 F5 81            [12] 4427 	mov	sp,a
      001227 90 00 01         [24] 4428 	mov	dptr,#0x0001
      00122A 12r00r00         [24] 4429 	lcall	_delay_msec
                                   4430 ;	radio/tdm.c:1078: printf("tx_window_width: %u\n", (unsigned)tx_window_width); delay_msec(1);
      00122D 78r03            [12] 4431 	mov	r0,#_tx_window_width
      00122F E2               [24] 4432 	movx	a,@r0
      001230 C0 E0            [24] 4433 	push	acc
      001232 08               [12] 4434 	inc	r0
      001233 E2               [24] 4435 	movx	a,@r0
      001234 C0 E0            [24] 4436 	push	acc
      001236 74rFF            [12] 4437 	mov	a,#___str_10
      001238 C0 E0            [24] 4438 	push	acc
      00123A 74s00            [12] 4439 	mov	a,#(___str_10 >> 8)
      00123C C0 E0            [24] 4440 	push	acc
      00123E 74 80            [12] 4441 	mov	a,#0x80
      001240 C0 E0            [24] 4442 	push	acc
      001242 12r00r00         [24] 4443 	lcall	_printfl
      001245 E5 81            [12] 4444 	mov	a,sp
      001247 24 FB            [12] 4445 	add	a,#0xfb
      001249 F5 81            [12] 4446 	mov	sp,a
      00124B 90 00 01         [24] 4447 	mov	dptr,#0x0001
      00124E 12r00r00         [24] 4448 	lcall	_delay_msec
                                   4449 ;	radio/tdm.c:1079: printf("max_data_packet_length: %u\n", (unsigned)max_data_packet_length); delay_msec(1);
      001251 78r05            [12] 4450 	mov	r0,#_max_data_packet_length
      001253 E2               [24] 4451 	movx	a,@r0
      001254 FE               [12] 4452 	mov	r6,a
      001255 7F 00            [12] 4453 	mov	r7,#0x00
      001257 C0 06            [24] 4454 	push	ar6
      001259 C0 07            [24] 4455 	push	ar7
      00125B 74r14            [12] 4456 	mov	a,#___str_11
      00125D C0 E0            [24] 4457 	push	acc
      00125F 74s01            [12] 4458 	mov	a,#(___str_11 >> 8)
      001261 C0 E0            [24] 4459 	push	acc
      001263 74 80            [12] 4460 	mov	a,#0x80
      001265 C0 E0            [24] 4461 	push	acc
      001267 12r00r00         [24] 4462 	lcall	_printfl
      00126A E5 81            [12] 4463 	mov	a,sp
      00126C 24 FB            [12] 4464 	add	a,#0xfb
      00126E F5 81            [12] 4465 	mov	sp,a
      001270 90 00 01         [24] 4466 	mov	dptr,#0x0001
      001273 02r00r00         [24] 4467 	ljmp	_delay_msec
                                   4468 	.area CSEG    (CODE)
                                   4469 	.area CONST   (CODE)
      000000                       4470 ___str_0:
      000000 4C 2F 52 20 52 53 53  4471 	.ascii "L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u "
             49 3A 20 25 75 2F 25
             75 20 20 4C 2F 52 20
             6E 6F 69 73 65 3A 20
             25 75 2F 25 75 20 70
             6B 74 73 3A 20 25 75
             20
      00002B 00                    4472 	.db 0x00
      00002C                       4473 ___str_1:
      00002C 20 74 78 65 3D 25 75  4474 	.ascii " txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u crce=%u temp=%d dco=%"
             20 72 78 65 3D 25 75
             20 73 74 78 3D 25 75
             20 73 72 78 3D 25 75
             20 65 63 63 3D 25 75
             2F 25 75 20 63 72 63
             65 3D 25 75 20 74 65
             6D 70 3D 25 64 20 64
             63 6F 3D 25
      000068 75                    4475 	.ascii "u"
      000069 0A                    4476 	.db 0x0A
      00006A 00                    4477 	.db 0x00
      00006B                       4478 ___str_2:
      00006B 54 44 4D 3A 20 25 75  4479 	.ascii "TDM: %u/%u len=%u "
             2F 25 75 20 6C 65 6E
             3D 25 75 20
      00007D 00                    4480 	.db 0x00
      00007E                       4481 ___str_3:
      00007E 20 64 65 6C 74 61 3A  4482 	.ascii " delta: %d"
             20 25 64
      000088 0A                    4483 	.db 0x0A
      000089 00                    4484 	.db 0x00
      00008A                       4485 ___str_4:
      00008A 54 44 4D 3A 20 63 68  4486 	.ascii "TDM: change timing %u/%u"
             61 6E 67 65 20 74 69
             6D 69 6E 67 20 25 75
             2F 25 75
      0000A2 0A                    4487 	.db 0x0A
      0000A3 00                    4488 	.db 0x00
      0000A4                       4489 ___str_5:
      0000A4 54 44 4D 3A 20 73 63  4490 	.ascii "TDM: scanning"
             61 6E 6E 69 6E 67
      0000B1 0A                    4491 	.db 0x0A
      0000B2 00                    4492 	.db 0x00
      0000B3                       4493 ___str_6:
      0000B3 73 74 61 63 6B 20 62  4494 	.ascii "stack blown"
             6C 6F 77 6E
      0000BE 0A                    4495 	.db 0x0A
      0000BF 00                    4496 	.db 0x00
      0000C0                       4497 ___str_7:
      0000C0 70 64 61 74 61 20 63  4498 	.ascii "pdata canary changed"
             61 6E 61 72 79 20 63
             68 61 6E 67 65 64
      0000D4 0A                    4499 	.db 0x0A
      0000D5 00                    4500 	.db 0x00
      0000D6                       4501 ___str_8:
      0000D6 6F 76 65 72 73 69 7A  4502 	.ascii "oversized tdm packet"
             65 64 20 74 64 6D 20
             70 61 63 6B 65 74
      0000EA 00                    4503 	.db 0x00
      0000EB                       4504 ___str_9:
      0000EB 73 69 6C 65 6E 63 65  4505 	.ascii "silence_period: %u"
             5F 70 65 72 69 6F 64
             3A 20 25 75
      0000FD 0A                    4506 	.db 0x0A
      0000FE 00                    4507 	.db 0x00
      0000FF                       4508 ___str_10:
      0000FF 74 78 5F 77 69 6E 64  4509 	.ascii "tx_window_width: %u"
             6F 77 5F 77 69 64 74
             68 3A 20 25 75
      000112 0A                    4510 	.db 0x0A
      000113 00                    4511 	.db 0x00
      000114                       4512 ___str_11:
      000114 6D 61 78 5F 64 61 74  4513 	.ascii "max_data_packet_length: %u"
             61 5F 70 61 63 6B 65
             74 5F 6C 65 6E 67 74
             68 3A 20 25 75
      00012E 0A                    4514 	.db 0x0A
      00012F 00                    4515 	.db 0x00
                                   4516 	.area XINIT   (CODE)
                                   4517 	.area CABS    (ABS,CODE)
