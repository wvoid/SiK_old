                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Sep  7 2022) (Linux)
                                      4 ; This file was generated Wed Sep  7 10:05:11 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module radio
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _Receiver_ISR
                                     13 	.globl _delay_msec
                                     14 	.globl _delay_expired
                                     15 	.globl _delay_set
                                     16 	.globl _timer2_tick
                                     17 	.globl _panic
                                     18 	.globl _calibration_get
                                     19 	.globl _param_get
                                     20 	.globl _memcpy
                                     21 	.globl _NSS1
                                     22 	.globl _IRQ
                                     23 	.globl _PA_ENABLE
                                     24 	.globl _PIN_ENABLE
                                     25 	.globl _PIN_CONFIG
                                     26 	.globl _LED_GREEN
                                     27 	.globl _LED_RED
                                     28 	.globl _SPI1EN
                                     29 	.globl _TXBMT1
                                     30 	.globl _NSS1MD0
                                     31 	.globl _NSS1MD1
                                     32 	.globl _RXOVRN1
                                     33 	.globl _MODF1
                                     34 	.globl _WCOL1
                                     35 	.globl _SPIF1
                                     36 	.globl _SPI0EN
                                     37 	.globl _TXBMT0
                                     38 	.globl _NSS0MD0
                                     39 	.globl _NSS0MD1
                                     40 	.globl _RXOVRN0
                                     41 	.globl _MODF0
                                     42 	.globl _WCOL0
                                     43 	.globl _SPIF0
                                     44 	.globl _AD0CM0
                                     45 	.globl _AD0CM1
                                     46 	.globl _AD0CM2
                                     47 	.globl _AD0WINT
                                     48 	.globl _AD0BUSY
                                     49 	.globl _AD0INT
                                     50 	.globl _BURSTEN
                                     51 	.globl _AD0EN
                                     52 	.globl _CCF0
                                     53 	.globl _CCF1
                                     54 	.globl _CCF2
                                     55 	.globl _CCF3
                                     56 	.globl _CCF4
                                     57 	.globl _CCF5
                                     58 	.globl _CR
                                     59 	.globl _CF
                                     60 	.globl _P
                                     61 	.globl _F1
                                     62 	.globl _OV
                                     63 	.globl _RS0
                                     64 	.globl _RS1
                                     65 	.globl _F0
                                     66 	.globl _AC
                                     67 	.globl _CY
                                     68 	.globl _T2XCLK
                                     69 	.globl _T2RCLK
                                     70 	.globl _TR2
                                     71 	.globl _T2SPLIT
                                     72 	.globl _TF2CEN
                                     73 	.globl _TF2LEN
                                     74 	.globl _TF2L
                                     75 	.globl _TF2H
                                     76 	.globl _SI
                                     77 	.globl _ACK
                                     78 	.globl _ARBLOST
                                     79 	.globl _ACKRQ
                                     80 	.globl _STO
                                     81 	.globl _STA
                                     82 	.globl _TXMODE
                                     83 	.globl _MASTER
                                     84 	.globl _PX0
                                     85 	.globl _PT0
                                     86 	.globl _PX1
                                     87 	.globl _PT1
                                     88 	.globl _PS0
                                     89 	.globl _PT2
                                     90 	.globl _PSPI0
                                     91 	.globl _EX0
                                     92 	.globl _ET0
                                     93 	.globl _EX1
                                     94 	.globl _ET1
                                     95 	.globl _ES0
                                     96 	.globl _ET2
                                     97 	.globl _ESPI0
                                     98 	.globl _EA
                                     99 	.globl _RI0
                                    100 	.globl _TI0
                                    101 	.globl _RB80
                                    102 	.globl _TB80
                                    103 	.globl _REN0
                                    104 	.globl _MCE0
                                    105 	.globl _S0MODE
                                    106 	.globl _IT0
                                    107 	.globl _IE0
                                    108 	.globl _IT1
                                    109 	.globl _IE1
                                    110 	.globl _TR0
                                    111 	.globl _TF0
                                    112 	.globl _TR1
                                    113 	.globl _TF1
                                    114 	.globl __XPAGE
                                    115 	.globl _PCA0CP4
                                    116 	.globl _PCA0CP0
                                    117 	.globl _PCA0
                                    118 	.globl _PCA0CP3
                                    119 	.globl _PCA0CP2
                                    120 	.globl _PCA0CP1
                                    121 	.globl _PCA0CP5
                                    122 	.globl _TMR2
                                    123 	.globl _TMR2RL
                                    124 	.globl _ADC0LT
                                    125 	.globl _ADC0GT
                                    126 	.globl _ADC0
                                    127 	.globl _TMR3
                                    128 	.globl _TMR3RL
                                    129 	.globl _TOFF
                                    130 	.globl _DP
                                    131 	.globl _PCLKEN
                                    132 	.globl _CLKMODE
                                    133 	.globl _P7MDOUT
                                    134 	.globl _P6MDOUT
                                    135 	.globl _P5MDOUT
                                    136 	.globl _P4MDOUT
                                    137 	.globl _PCLKACT
                                    138 	.globl _P6MDIN
                                    139 	.globl _P5MDIN
                                    140 	.globl _P4MDIN
                                    141 	.globl _P3MDIN
                                    142 	.globl _DEVICEID
                                    143 	.globl _REVID
                                    144 	.globl _HWID
                                    145 	.globl _P7
                                    146 	.globl _P6
                                    147 	.globl _P5
                                    148 	.globl _P4
                                    149 	.globl _TOFFH
                                    150 	.globl _TOFFL
                                    151 	.globl _ADC0TK
                                    152 	.globl _ADC0PWR
                                    153 	.globl _IREF0CF
                                    154 	.globl _FLSCL
                                    155 	.globl _OSCICL
                                    156 	.globl _OSCIFL
                                    157 	.globl _P3MDOUT
                                    158 	.globl _LCD0BUFCF
                                    159 	.globl _P7DRV
                                    160 	.globl _P6DRV
                                    161 	.globl _P2DRV
                                    162 	.globl _P1DRV
                                    163 	.globl _P0DRV
                                    164 	.globl _P5DRV
                                    165 	.globl _P4DRV
                                    166 	.globl _P3DRV
                                    167 	.globl _LCD0BUFCN
                                    168 	.globl _CRC0CNT
                                    169 	.globl _CRC0AUTO
                                    170 	.globl _CRC0FLIP
                                    171 	.globl _CRC0IN
                                    172 	.globl _CRC0CN
                                    173 	.globl _CRC0DAT
                                    174 	.globl _SFRPGCN
                                    175 	.globl _DC0RDY
                                    176 	.globl _PC0INT1
                                    177 	.globl _PC0INT0
                                    178 	.globl _PC0DCH
                                    179 	.globl _PC0DCL
                                    180 	.globl _SPI1CN
                                    181 	.globl _AES0YOUT
                                    182 	.globl _PC0HIST
                                    183 	.globl _PC0CMP1H
                                    184 	.globl _PC0CMP1M
                                    185 	.globl _PC0CMP1L
                                    186 	.globl _AES0KBA
                                    187 	.globl _AES0DBA
                                    188 	.globl _AES0KIN
                                    189 	.globl _AES0XIN
                                    190 	.globl _AES0BIN
                                    191 	.globl _AES0DCFG
                                    192 	.globl _AES0BCFG
                                    193 	.globl _PC0TH
                                    194 	.globl _PC0CMP0H
                                    195 	.globl _PC0CMP0M
                                    196 	.globl _PC0CMP0L
                                    197 	.globl _PC0CTR1H
                                    198 	.globl _PC0CTR1M
                                    199 	.globl _PC0CTR1L
                                    200 	.globl _PC0CTR0H
                                    201 	.globl _PC0CTR0M
                                    202 	.globl _PC0CTR0L
                                    203 	.globl _PC0MD
                                    204 	.globl _PC0PCF
                                    205 	.globl _DMA0NMD
                                    206 	.globl _DMA0BUSY
                                    207 	.globl _DMA0MINT
                                    208 	.globl _DMA0INT
                                    209 	.globl _DMA0EN
                                    210 	.globl _DMA0SEL
                                    211 	.globl _DMA0NSZH
                                    212 	.globl _DMA0NSZL
                                    213 	.globl _DMA0NAOH
                                    214 	.globl _DMA0NAOL
                                    215 	.globl _DMA0NBAH
                                    216 	.globl _DMA0NBAL
                                    217 	.globl _DMA0NCF
                                    218 	.globl _VREGINSDH
                                    219 	.globl _VREGINSDL
                                    220 	.globl _ENC0CN
                                    221 	.globl _ENC0H
                                    222 	.globl _ENC0M
                                    223 	.globl _ENC0L
                                    224 	.globl _PC0STAT
                                    225 	.globl _CRC1CN
                                    226 	.globl _CRC1POLH
                                    227 	.globl _CRC1POLL
                                    228 	.globl _CRC1OUTH
                                    229 	.globl _CRC1OUTL
                                    230 	.globl _CRC1IN
                                    231 	.globl _LCD0BUFMD
                                    232 	.globl _LCD0CHPCN
                                    233 	.globl _DC0MD
                                    234 	.globl _DC0CF
                                    235 	.globl _DC0CN
                                    236 	.globl _LCD0VBMCF
                                    237 	.globl _LCD0CHPMD
                                    238 	.globl _LCD0CHPCF
                                    239 	.globl _LCD0MSCF
                                    240 	.globl _LCD0MSCN
                                    241 	.globl _LCD0CLKDIVH
                                    242 	.globl _LCD0CLKDIVL
                                    243 	.globl _LCD0VBMCN
                                    244 	.globl _LCD0CF
                                    245 	.globl _LCD0PWR
                                    246 	.globl _SPI1DAT
                                    247 	.globl _SPI1CKR
                                    248 	.globl _SPI1CFG
                                    249 	.globl _LCD0TOGR
                                    250 	.globl _LCD0BLINK
                                    251 	.globl _LCD0CN
                                    252 	.globl _LCD0CNTRST
                                    253 	.globl _LCD0DF
                                    254 	.globl _LCD0DE
                                    255 	.globl _LCD0DD
                                    256 	.globl _LCD0DC
                                    257 	.globl _LCD0DB
                                    258 	.globl _LCD0DA
                                    259 	.globl _LCD0D9
                                    260 	.globl _LCD0D8
                                    261 	.globl _LCD0D7
                                    262 	.globl _LCD0D6
                                    263 	.globl _LCD0D5
                                    264 	.globl _LCD0D4
                                    265 	.globl _LCD0D3
                                    266 	.globl _LCD0D2
                                    267 	.globl _LCD0D1
                                    268 	.globl _LCD0D0
                                    269 	.globl _VDM0CN
                                    270 	.globl _PCA0CPH4
                                    271 	.globl _PCA0CPL4
                                    272 	.globl _PCA0CPH0
                                    273 	.globl _PCA0CPL0
                                    274 	.globl _PCA0H
                                    275 	.globl _PCA0L
                                    276 	.globl _SPI0CN
                                    277 	.globl _EIP2
                                    278 	.globl _EIP1
                                    279 	.globl _SMB0ADM
                                    280 	.globl _SMB0ADR
                                    281 	.globl _P2MDIN
                                    282 	.globl _P1MDIN
                                    283 	.globl _P0MDIN
                                    284 	.globl _B
                                    285 	.globl _RSTSRC
                                    286 	.globl _PCA0CPH3
                                    287 	.globl _PCA0CPL3
                                    288 	.globl _PCA0CPH2
                                    289 	.globl _PCA0CPL2
                                    290 	.globl _PCA0CPH1
                                    291 	.globl _PCA0CPL1
                                    292 	.globl _ADC0CN
                                    293 	.globl _EIE2
                                    294 	.globl _EIE1
                                    295 	.globl _FLWR
                                    296 	.globl _IT01CF
                                    297 	.globl _XBR2
                                    298 	.globl _XBR1
                                    299 	.globl _XBR0
                                    300 	.globl _ACC
                                    301 	.globl _PCA0PWM
                                    302 	.globl _PCA0CPM4
                                    303 	.globl _PCA0CPM3
                                    304 	.globl _PCA0CPM2
                                    305 	.globl _PCA0CPM1
                                    306 	.globl _PCA0CPM0
                                    307 	.globl _PCA0MD
                                    308 	.globl _PCA0CN
                                    309 	.globl _P0MAT
                                    310 	.globl _P2SKIP
                                    311 	.globl _P1SKIP
                                    312 	.globl _P0SKIP
                                    313 	.globl _PCA0CPH5
                                    314 	.globl _PCA0CPL5
                                    315 	.globl _REF0CN
                                    316 	.globl _PSW
                                    317 	.globl _P1MAT
                                    318 	.globl _PCA0CPM5
                                    319 	.globl _TMR2H
                                    320 	.globl _TMR2L
                                    321 	.globl _TMR2RLH
                                    322 	.globl _TMR2RLL
                                    323 	.globl _REG0CN
                                    324 	.globl _TMR2CN
                                    325 	.globl _P0MASK
                                    326 	.globl _ADC0LTH
                                    327 	.globl _ADC0LTL
                                    328 	.globl _ADC0GTH
                                    329 	.globl _ADC0GTL
                                    330 	.globl _SMB0DAT
                                    331 	.globl _SMB0CF
                                    332 	.globl _SMB0CN
                                    333 	.globl _P1MASK
                                    334 	.globl _ADC0H
                                    335 	.globl _ADC0L
                                    336 	.globl _ADC0CF
                                    337 	.globl _ADC0MX
                                    338 	.globl _ADC0AC
                                    339 	.globl _IREF0CN
                                    340 	.globl _IP
                                    341 	.globl _FLKEY
                                    342 	.globl _PMU0FL
                                    343 	.globl _PMU0CF
                                    344 	.globl _PMU0MD
                                    345 	.globl _OSCICN
                                    346 	.globl _OSCXCN
                                    347 	.globl _P3
                                    348 	.globl _EMI0TC
                                    349 	.globl _RTC0KEY
                                    350 	.globl _RTC0DAT
                                    351 	.globl _RTC0ADR
                                    352 	.globl _EMI0CF
                                    353 	.globl _EMI0CN
                                    354 	.globl _CLKSEL
                                    355 	.globl _IE
                                    356 	.globl _SFRPAGE
                                    357 	.globl _P2MDOUT
                                    358 	.globl _P1MDOUT
                                    359 	.globl _P0MDOUT
                                    360 	.globl _SPI0DAT
                                    361 	.globl _SPI0CKR
                                    362 	.globl _SPI0CFG
                                    363 	.globl _P2
                                    364 	.globl _CPT0MX
                                    365 	.globl _CPT1MX
                                    366 	.globl _CPT0MD
                                    367 	.globl _CPT1MD
                                    368 	.globl _CPT0CN
                                    369 	.globl _CPT1CN
                                    370 	.globl _SBUF0
                                    371 	.globl _SCON0
                                    372 	.globl _TMR3H
                                    373 	.globl _TMR3L
                                    374 	.globl _TMR3RLH
                                    375 	.globl _TMR3RLL
                                    376 	.globl _TMR3CN
                                    377 	.globl _P1
                                    378 	.globl _PSCTL
                                    379 	.globl _CKCON
                                    380 	.globl _TH1
                                    381 	.globl _TH0
                                    382 	.globl _TL1
                                    383 	.globl _TL0
                                    384 	.globl _TMOD
                                    385 	.globl _TCON
                                    386 	.globl _PCON
                                    387 	.globl _SFRLAST
                                    388 	.globl _SFRNEXT
                                    389 	.globl _PSBANK
                                    390 	.globl _DPH
                                    391 	.globl _DPL
                                    392 	.globl _SP
                                    393 	.globl _P0
                                    394 	.globl _radio_buffer
                                    395 	.globl _radio_transmit_PARM_3
                                    396 	.globl _radio_transmit_PARM_2
                                    397 	.globl _radio_receive_packet_PARM_2
                                    398 	.globl _settings
                                    399 	.globl _netid
                                    400 	.globl _last_rssi
                                    401 	.globl _partial_packet_length
                                    402 	.globl _receive_packet_length
                                    403 	.globl _radio_receive_packet
                                    404 	.globl _radio_receive_in_progress
                                    405 	.globl _radio_preamble_detected
                                    406 	.globl _radio_last_rssi
                                    407 	.globl _radio_current_rssi
                                    408 	.globl _radio_air_rate
                                    409 	.globl _radio_transmit
                                    410 	.globl _radio_receiver_on
                                    411 	.globl _radio_initialise
                                    412 	.globl _radio_set_frequency
                                    413 	.globl _radio_set_channel_spacing
                                    414 	.globl _radio_set_channel
                                    415 	.globl _radio_get_channel
                                    416 	.globl _radio_configure
                                    417 	.globl _radio_set_transmit_power
                                    418 	.globl _radio_get_transmit_power
                                    419 	.globl _radio_set_network_id
                                    420 	.globl _radio_temperature
                                    421 	.globl _radio_set_diversity
                                    422 ;--------------------------------------------------------
                                    423 ; special function registers
                                    424 ;--------------------------------------------------------
                                    425 	.area RSEG    (ABS,DATA)
      000000                        426 	.org 0x0000
                           000080   427 _P0	=	0x0080
                           000081   428 _SP	=	0x0081
                           000082   429 _DPL	=	0x0082
                           000083   430 _DPH	=	0x0083
                           000084   431 _PSBANK	=	0x0084
                           000085   432 _SFRNEXT	=	0x0085
                           000086   433 _SFRLAST	=	0x0086
                           000087   434 _PCON	=	0x0087
                           000088   435 _TCON	=	0x0088
                           000089   436 _TMOD	=	0x0089
                           00008A   437 _TL0	=	0x008a
                           00008B   438 _TL1	=	0x008b
                           00008C   439 _TH0	=	0x008c
                           00008D   440 _TH1	=	0x008d
                           00008E   441 _CKCON	=	0x008e
                           00008F   442 _PSCTL	=	0x008f
                           000090   443 _P1	=	0x0090
                           000091   444 _TMR3CN	=	0x0091
                           000092   445 _TMR3RLL	=	0x0092
                           000093   446 _TMR3RLH	=	0x0093
                           000094   447 _TMR3L	=	0x0094
                           000095   448 _TMR3H	=	0x0095
                           000098   449 _SCON0	=	0x0098
                           000099   450 _SBUF0	=	0x0099
                           00009A   451 _CPT1CN	=	0x009a
                           00009B   452 _CPT0CN	=	0x009b
                           00009C   453 _CPT1MD	=	0x009c
                           00009D   454 _CPT0MD	=	0x009d
                           00009E   455 _CPT1MX	=	0x009e
                           00009F   456 _CPT0MX	=	0x009f
                           0000A0   457 _P2	=	0x00a0
                           0000A1   458 _SPI0CFG	=	0x00a1
                           0000A2   459 _SPI0CKR	=	0x00a2
                           0000A3   460 _SPI0DAT	=	0x00a3
                           0000A4   461 _P0MDOUT	=	0x00a4
                           0000A5   462 _P1MDOUT	=	0x00a5
                           0000A6   463 _P2MDOUT	=	0x00a6
                           0000A7   464 _SFRPAGE	=	0x00a7
                           0000A8   465 _IE	=	0x00a8
                           0000A9   466 _CLKSEL	=	0x00a9
                           0000AA   467 _EMI0CN	=	0x00aa
                           0000AB   468 _EMI0CF	=	0x00ab
                           0000AC   469 _RTC0ADR	=	0x00ac
                           0000AD   470 _RTC0DAT	=	0x00ad
                           0000AE   471 _RTC0KEY	=	0x00ae
                           0000AF   472 _EMI0TC	=	0x00af
                           0000B0   473 _P3	=	0x00b0
                           0000B1   474 _OSCXCN	=	0x00b1
                           0000B2   475 _OSCICN	=	0x00b2
                           0000B3   476 _PMU0MD	=	0x00b3
                           0000B5   477 _PMU0CF	=	0x00b5
                           0000B6   478 _PMU0FL	=	0x00b6
                           0000B7   479 _FLKEY	=	0x00b7
                           0000B8   480 _IP	=	0x00b8
                           0000B9   481 _IREF0CN	=	0x00b9
                           0000BA   482 _ADC0AC	=	0x00ba
                           0000BB   483 _ADC0MX	=	0x00bb
                           0000BC   484 _ADC0CF	=	0x00bc
                           0000BD   485 _ADC0L	=	0x00bd
                           0000BE   486 _ADC0H	=	0x00be
                           0000BF   487 _P1MASK	=	0x00bf
                           0000C0   488 _SMB0CN	=	0x00c0
                           0000C1   489 _SMB0CF	=	0x00c1
                           0000C2   490 _SMB0DAT	=	0x00c2
                           0000C3   491 _ADC0GTL	=	0x00c3
                           0000C4   492 _ADC0GTH	=	0x00c4
                           0000C5   493 _ADC0LTL	=	0x00c5
                           0000C6   494 _ADC0LTH	=	0x00c6
                           0000C7   495 _P0MASK	=	0x00c7
                           0000C8   496 _TMR2CN	=	0x00c8
                           0000C9   497 _REG0CN	=	0x00c9
                           0000CA   498 _TMR2RLL	=	0x00ca
                           0000CB   499 _TMR2RLH	=	0x00cb
                           0000CC   500 _TMR2L	=	0x00cc
                           0000CD   501 _TMR2H	=	0x00cd
                           0000CE   502 _PCA0CPM5	=	0x00ce
                           0000CF   503 _P1MAT	=	0x00cf
                           0000D0   504 _PSW	=	0x00d0
                           0000D1   505 _REF0CN	=	0x00d1
                           0000D2   506 _PCA0CPL5	=	0x00d2
                           0000D3   507 _PCA0CPH5	=	0x00d3
                           0000D4   508 _P0SKIP	=	0x00d4
                           0000D5   509 _P1SKIP	=	0x00d5
                           0000D6   510 _P2SKIP	=	0x00d6
                           0000D7   511 _P0MAT	=	0x00d7
                           0000D8   512 _PCA0CN	=	0x00d8
                           0000D9   513 _PCA0MD	=	0x00d9
                           0000DA   514 _PCA0CPM0	=	0x00da
                           0000DB   515 _PCA0CPM1	=	0x00db
                           0000DC   516 _PCA0CPM2	=	0x00dc
                           0000DD   517 _PCA0CPM3	=	0x00dd
                           0000DE   518 _PCA0CPM4	=	0x00de
                           0000DF   519 _PCA0PWM	=	0x00df
                           0000E0   520 _ACC	=	0x00e0
                           0000E1   521 _XBR0	=	0x00e1
                           0000E2   522 _XBR1	=	0x00e2
                           0000E3   523 _XBR2	=	0x00e3
                           0000E4   524 _IT01CF	=	0x00e4
                           0000E5   525 _FLWR	=	0x00e5
                           0000E6   526 _EIE1	=	0x00e6
                           0000E7   527 _EIE2	=	0x00e7
                           0000E8   528 _ADC0CN	=	0x00e8
                           0000E9   529 _PCA0CPL1	=	0x00e9
                           0000EA   530 _PCA0CPH1	=	0x00ea
                           0000EB   531 _PCA0CPL2	=	0x00eb
                           0000EC   532 _PCA0CPH2	=	0x00ec
                           0000ED   533 _PCA0CPL3	=	0x00ed
                           0000EE   534 _PCA0CPH3	=	0x00ee
                           0000EF   535 _RSTSRC	=	0x00ef
                           0000F0   536 _B	=	0x00f0
                           0000F1   537 _P0MDIN	=	0x00f1
                           0000F2   538 _P1MDIN	=	0x00f2
                           0000F3   539 _P2MDIN	=	0x00f3
                           0000F4   540 _SMB0ADR	=	0x00f4
                           0000F5   541 _SMB0ADM	=	0x00f5
                           0000F6   542 _EIP1	=	0x00f6
                           0000F7   543 _EIP2	=	0x00f7
                           0000F8   544 _SPI0CN	=	0x00f8
                           0000F9   545 _PCA0L	=	0x00f9
                           0000FA   546 _PCA0H	=	0x00fa
                           0000FB   547 _PCA0CPL0	=	0x00fb
                           0000FC   548 _PCA0CPH0	=	0x00fc
                           0000FD   549 _PCA0CPL4	=	0x00fd
                           0000FE   550 _PCA0CPH4	=	0x00fe
                           0000FF   551 _VDM0CN	=	0x00ff
                           000089   552 _LCD0D0	=	0x0089
                           00008A   553 _LCD0D1	=	0x008a
                           00008B   554 _LCD0D2	=	0x008b
                           00008C   555 _LCD0D3	=	0x008c
                           00008D   556 _LCD0D4	=	0x008d
                           00008E   557 _LCD0D5	=	0x008e
                           000091   558 _LCD0D6	=	0x0091
                           000092   559 _LCD0D7	=	0x0092
                           000093   560 _LCD0D8	=	0x0093
                           000094   561 _LCD0D9	=	0x0094
                           000095   562 _LCD0DA	=	0x0095
                           000096   563 _LCD0DB	=	0x0096
                           000097   564 _LCD0DC	=	0x0097
                           000099   565 _LCD0DD	=	0x0099
                           00009A   566 _LCD0DE	=	0x009a
                           00009B   567 _LCD0DF	=	0x009b
                           00009C   568 _LCD0CNTRST	=	0x009c
                           00009D   569 _LCD0CN	=	0x009d
                           00009E   570 _LCD0BLINK	=	0x009e
                           00009F   571 _LCD0TOGR	=	0x009f
                           0000A1   572 _SPI1CFG	=	0x00a1
                           0000A2   573 _SPI1CKR	=	0x00a2
                           0000A3   574 _SPI1DAT	=	0x00a3
                           0000A4   575 _LCD0PWR	=	0x00a4
                           0000A5   576 _LCD0CF	=	0x00a5
                           0000A6   577 _LCD0VBMCN	=	0x00a6
                           0000A9   578 _LCD0CLKDIVL	=	0x00a9
                           0000AA   579 _LCD0CLKDIVH	=	0x00aa
                           0000AB   580 _LCD0MSCN	=	0x00ab
                           0000AC   581 _LCD0MSCF	=	0x00ac
                           0000AD   582 _LCD0CHPCF	=	0x00ad
                           0000AE   583 _LCD0CHPMD	=	0x00ae
                           0000AF   584 _LCD0VBMCF	=	0x00af
                           0000B1   585 _DC0CN	=	0x00b1
                           0000B2   586 _DC0CF	=	0x00b2
                           0000B3   587 _DC0MD	=	0x00b3
                           0000B5   588 _LCD0CHPCN	=	0x00b5
                           0000B6   589 _LCD0BUFMD	=	0x00b6
                           0000B9   590 _CRC1IN	=	0x00b9
                           0000BA   591 _CRC1OUTL	=	0x00ba
                           0000BB   592 _CRC1OUTH	=	0x00bb
                           0000BC   593 _CRC1POLL	=	0x00bc
                           0000BD   594 _CRC1POLH	=	0x00bd
                           0000BE   595 _CRC1CN	=	0x00be
                           0000C1   596 _PC0STAT	=	0x00c1
                           0000C2   597 _ENC0L	=	0x00c2
                           0000C3   598 _ENC0M	=	0x00c3
                           0000C4   599 _ENC0H	=	0x00c4
                           0000C5   600 _ENC0CN	=	0x00c5
                           0000C6   601 _VREGINSDL	=	0x00c6
                           0000C7   602 _VREGINSDH	=	0x00c7
                           0000C9   603 _DMA0NCF	=	0x00c9
                           0000CA   604 _DMA0NBAL	=	0x00ca
                           0000CB   605 _DMA0NBAH	=	0x00cb
                           0000CC   606 _DMA0NAOL	=	0x00cc
                           0000CD   607 _DMA0NAOH	=	0x00cd
                           0000CE   608 _DMA0NSZL	=	0x00ce
                           0000CF   609 _DMA0NSZH	=	0x00cf
                           0000D1   610 _DMA0SEL	=	0x00d1
                           0000D2   611 _DMA0EN	=	0x00d2
                           0000D3   612 _DMA0INT	=	0x00d3
                           0000D4   613 _DMA0MINT	=	0x00d4
                           0000D5   614 _DMA0BUSY	=	0x00d5
                           0000D6   615 _DMA0NMD	=	0x00d6
                           0000D7   616 _PC0PCF	=	0x00d7
                           0000D9   617 _PC0MD	=	0x00d9
                           0000DA   618 _PC0CTR0L	=	0x00da
                           0000DB   619 _PC0CTR0M	=	0x00db
                           0000DC   620 _PC0CTR0H	=	0x00dc
                           0000DD   621 _PC0CTR1L	=	0x00dd
                           0000DE   622 _PC0CTR1M	=	0x00de
                           0000DF   623 _PC0CTR1H	=	0x00df
                           0000E1   624 _PC0CMP0L	=	0x00e1
                           0000E2   625 _PC0CMP0M	=	0x00e2
                           0000E3   626 _PC0CMP0H	=	0x00e3
                           0000E4   627 _PC0TH	=	0x00e4
                           0000E9   628 _AES0BCFG	=	0x00e9
                           0000EA   629 _AES0DCFG	=	0x00ea
                           0000EB   630 _AES0BIN	=	0x00eb
                           0000EC   631 _AES0XIN	=	0x00ec
                           0000ED   632 _AES0KIN	=	0x00ed
                           0000EE   633 _AES0DBA	=	0x00ee
                           0000EF   634 _AES0KBA	=	0x00ef
                           0000F1   635 _PC0CMP1L	=	0x00f1
                           0000F2   636 _PC0CMP1M	=	0x00f2
                           0000F3   637 _PC0CMP1H	=	0x00f3
                           0000F4   638 _PC0HIST	=	0x00f4
                           0000F5   639 _AES0YOUT	=	0x00f5
                           0000F8   640 _SPI1CN	=	0x00f8
                           0000F9   641 _PC0DCL	=	0x00f9
                           0000FA   642 _PC0DCH	=	0x00fa
                           0000FB   643 _PC0INT0	=	0x00fb
                           0000FC   644 _PC0INT1	=	0x00fc
                           0000FD   645 _DC0RDY	=	0x00fd
                           00008E   646 _SFRPGCN	=	0x008e
                           000091   647 _CRC0DAT	=	0x0091
                           000092   648 _CRC0CN	=	0x0092
                           000093   649 _CRC0IN	=	0x0093
                           000094   650 _CRC0FLIP	=	0x0094
                           000096   651 _CRC0AUTO	=	0x0096
                           000097   652 _CRC0CNT	=	0x0097
                           00009C   653 _LCD0BUFCN	=	0x009c
                           0000A1   654 _P3DRV	=	0x00a1
                           0000A2   655 _P4DRV	=	0x00a2
                           0000A3   656 _P5DRV	=	0x00a3
                           0000A4   657 _P0DRV	=	0x00a4
                           0000A5   658 _P1DRV	=	0x00a5
                           0000A6   659 _P2DRV	=	0x00a6
                           0000AA   660 _P6DRV	=	0x00aa
                           0000AB   661 _P7DRV	=	0x00ab
                           0000AC   662 _LCD0BUFCF	=	0x00ac
                           0000B1   663 _P3MDOUT	=	0x00b1
                           0000B2   664 _OSCIFL	=	0x00b2
                           0000B3   665 _OSCICL	=	0x00b3
                           0000B6   666 _FLSCL	=	0x00b6
                           0000B9   667 _IREF0CF	=	0x00b9
                           0000BB   668 _ADC0PWR	=	0x00bb
                           0000BC   669 _ADC0TK	=	0x00bc
                           0000BD   670 _TOFFL	=	0x00bd
                           0000BE   671 _TOFFH	=	0x00be
                           0000D9   672 _P4	=	0x00d9
                           0000DA   673 _P5	=	0x00da
                           0000DB   674 _P6	=	0x00db
                           0000DC   675 _P7	=	0x00dc
                           0000E9   676 _HWID	=	0x00e9
                           0000EA   677 _REVID	=	0x00ea
                           0000EB   678 _DEVICEID	=	0x00eb
                           0000F1   679 _P3MDIN	=	0x00f1
                           0000F2   680 _P4MDIN	=	0x00f2
                           0000F3   681 _P5MDIN	=	0x00f3
                           0000F4   682 _P6MDIN	=	0x00f4
                           0000F5   683 _PCLKACT	=	0x00f5
                           0000F9   684 _P4MDOUT	=	0x00f9
                           0000FA   685 _P5MDOUT	=	0x00fa
                           0000FB   686 _P6MDOUT	=	0x00fb
                           0000FC   687 _P7MDOUT	=	0x00fc
                           0000FD   688 _CLKMODE	=	0x00fd
                           0000FE   689 _PCLKEN	=	0x00fe
                           008382   690 _DP	=	0x8382
                           008685   691 _TOFF	=	0x8685
                           009392   692 _TMR3RL	=	0x9392
                           009594   693 _TMR3	=	0x9594
                           00BEBD   694 _ADC0	=	0xbebd
                           00C4C3   695 _ADC0GT	=	0xc4c3
                           00C6C5   696 _ADC0LT	=	0xc6c5
                           00CBCA   697 _TMR2RL	=	0xcbca
                           00CDCC   698 _TMR2	=	0xcdcc
                           00D3D2   699 _PCA0CP5	=	0xd3d2
                           00EAE9   700 _PCA0CP1	=	0xeae9
                           00ECEB   701 _PCA0CP2	=	0xeceb
                           00EEED   702 _PCA0CP3	=	0xeeed
                           00FAF9   703 _PCA0	=	0xfaf9
                           00FCFB   704 _PCA0CP0	=	0xfcfb
                           00FEFD   705 _PCA0CP4	=	0xfefd
                           0000AA   706 __XPAGE	=	0x00aa
                                    707 ;--------------------------------------------------------
                                    708 ; special function bits
                                    709 ;--------------------------------------------------------
                                    710 	.area RSEG    (ABS,DATA)
      000000                        711 	.org 0x0000
                           00008F   712 _TF1	=	0x008f
                           00008E   713 _TR1	=	0x008e
                           00008D   714 _TF0	=	0x008d
                           00008C   715 _TR0	=	0x008c
                           00008B   716 _IE1	=	0x008b
                           00008A   717 _IT1	=	0x008a
                           000089   718 _IE0	=	0x0089
                           000088   719 _IT0	=	0x0088
                           00009F   720 _S0MODE	=	0x009f
                           00009D   721 _MCE0	=	0x009d
                           00009C   722 _REN0	=	0x009c
                           00009B   723 _TB80	=	0x009b
                           00009A   724 _RB80	=	0x009a
                           000099   725 _TI0	=	0x0099
                           000098   726 _RI0	=	0x0098
                           0000AF   727 _EA	=	0x00af
                           0000AE   728 _ESPI0	=	0x00ae
                           0000AD   729 _ET2	=	0x00ad
                           0000AC   730 _ES0	=	0x00ac
                           0000AB   731 _ET1	=	0x00ab
                           0000AA   732 _EX1	=	0x00aa
                           0000A9   733 _ET0	=	0x00a9
                           0000A8   734 _EX0	=	0x00a8
                           0000BE   735 _PSPI0	=	0x00be
                           0000BD   736 _PT2	=	0x00bd
                           0000BC   737 _PS0	=	0x00bc
                           0000BB   738 _PT1	=	0x00bb
                           0000BA   739 _PX1	=	0x00ba
                           0000B9   740 _PT0	=	0x00b9
                           0000B8   741 _PX0	=	0x00b8
                           0000C7   742 _MASTER	=	0x00c7
                           0000C6   743 _TXMODE	=	0x00c6
                           0000C5   744 _STA	=	0x00c5
                           0000C4   745 _STO	=	0x00c4
                           0000C3   746 _ACKRQ	=	0x00c3
                           0000C2   747 _ARBLOST	=	0x00c2
                           0000C1   748 _ACK	=	0x00c1
                           0000C0   749 _SI	=	0x00c0
                           0000CF   750 _TF2H	=	0x00cf
                           0000CE   751 _TF2L	=	0x00ce
                           0000CD   752 _TF2LEN	=	0x00cd
                           0000CC   753 _TF2CEN	=	0x00cc
                           0000CB   754 _T2SPLIT	=	0x00cb
                           0000CA   755 _TR2	=	0x00ca
                           0000C9   756 _T2RCLK	=	0x00c9
                           0000C8   757 _T2XCLK	=	0x00c8
                           0000D7   758 _CY	=	0x00d7
                           0000D6   759 _AC	=	0x00d6
                           0000D5   760 _F0	=	0x00d5
                           0000D4   761 _RS1	=	0x00d4
                           0000D3   762 _RS0	=	0x00d3
                           0000D2   763 _OV	=	0x00d2
                           0000D1   764 _F1	=	0x00d1
                           0000D0   765 _P	=	0x00d0
                           0000DF   766 _CF	=	0x00df
                           0000DE   767 _CR	=	0x00de
                           0000DD   768 _CCF5	=	0x00dd
                           0000DC   769 _CCF4	=	0x00dc
                           0000DB   770 _CCF3	=	0x00db
                           0000DA   771 _CCF2	=	0x00da
                           0000D9   772 _CCF1	=	0x00d9
                           0000D8   773 _CCF0	=	0x00d8
                           0000EF   774 _AD0EN	=	0x00ef
                           0000EE   775 _BURSTEN	=	0x00ee
                           0000ED   776 _AD0INT	=	0x00ed
                           0000EC   777 _AD0BUSY	=	0x00ec
                           0000EB   778 _AD0WINT	=	0x00eb
                           0000EA   779 _AD0CM2	=	0x00ea
                           0000E9   780 _AD0CM1	=	0x00e9
                           0000E8   781 _AD0CM0	=	0x00e8
                           0000FF   782 _SPIF0	=	0x00ff
                           0000FE   783 _WCOL0	=	0x00fe
                           0000FD   784 _MODF0	=	0x00fd
                           0000FC   785 _RXOVRN0	=	0x00fc
                           0000FB   786 _NSS0MD1	=	0x00fb
                           0000FA   787 _NSS0MD0	=	0x00fa
                           0000F9   788 _TXBMT0	=	0x00f9
                           0000F8   789 _SPI0EN	=	0x00f8
                           0000FF   790 _SPIF1	=	0x00ff
                           0000FE   791 _WCOL1	=	0x00fe
                           0000FD   792 _MODF1	=	0x00fd
                           0000FC   793 _RXOVRN1	=	0x00fc
                           0000FB   794 _NSS1MD1	=	0x00fb
                           0000FA   795 _NSS1MD0	=	0x00fa
                           0000F9   796 _TXBMT1	=	0x00f9
                           0000F8   797 _SPI1EN	=	0x00f8
                           0000B6   798 _LED_RED	=	0x00b6
                           0000B7   799 _LED_GREEN	=	0x00b7
                           000082   800 _PIN_CONFIG	=	0x0082
                           000083   801 _PIN_ENABLE	=	0x0083
                           0000A5   802 _PA_ENABLE	=	0x00a5
                           000081   803 _IRQ	=	0x0081
                           0000A3   804 _NSS1	=	0x00a3
                                    805 ;--------------------------------------------------------
                                    806 ; overlayable register banks
                                    807 ;--------------------------------------------------------
                                    808 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        809 	.ds 8
                                    810 ;--------------------------------------------------------
                                    811 ; overlayable bit register bank
                                    812 ;--------------------------------------------------------
                                    813 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        814 bits:
      000000                        815 	.ds 1
                           008000   816 	b0 = bits[0]
                           008100   817 	b1 = bits[1]
                           008200   818 	b2 = bits[2]
                           008300   819 	b3 = bits[3]
                           008400   820 	b4 = bits[4]
                           008500   821 	b5 = bits[5]
                           008600   822 	b6 = bits[6]
                           008700   823 	b7 = bits[7]
                                    824 ;--------------------------------------------------------
                                    825 ; internal ram data
                                    826 ;--------------------------------------------------------
                                    827 	.area DSEG    (DATA)
                                    828 ;--------------------------------------------------------
                                    829 ; overlayable items in internal ram 
                                    830 ;--------------------------------------------------------
                                    831 	.area	OSEG    (OVR,DATA)
                                    832 ;--------------------------------------------------------
                                    833 ; indirectly addressable internal ram data
                                    834 ;--------------------------------------------------------
                                    835 	.area ISEG    (DATA)
                                    836 ;--------------------------------------------------------
                                    837 ; absolute internal ram data
                                    838 ;--------------------------------------------------------
                                    839 	.area IABS    (ABS,DATA)
                                    840 	.area IABS    (ABS,DATA)
                                    841 ;--------------------------------------------------------
                                    842 ; bit data
                                    843 ;--------------------------------------------------------
                                    844 	.area BSEG    (BIT)
      000000                        845 _packet_received:
      000000                        846 	.ds 1
      000001                        847 _preamble_detected:
      000001                        848 	.ds 1
      000002                        849 _radio_preamble_detected_EX0_saved_1_159:
      000002                        850 	.ds 1
      000003                        851 _radio_transmit_simple_transmit_started_1_172:
      000003                        852 	.ds 1
      000004                        853 _radio_transmit_ret_1_188:
      000004                        854 	.ds 1
      000005                        855 _radio_transmit_EX0_saved_1_188:
      000005                        856 	.ds 1
      000006                        857 _radio_initialise_sloc0_1_0:
      000006                        858 	.ds 1
                                    859 ;--------------------------------------------------------
                                    860 ; paged external ram data
                                    861 ;--------------------------------------------------------
                                    862 	.area PSEG    (PAG,XDATA)
      000000                        863 _receive_packet_length::
      000000                        864 	.ds 1
      000001                        865 _partial_packet_length::
      000001                        866 	.ds 1
      000002                        867 _last_rssi::
      000002                        868 	.ds 1
      000003                        869 _netid::
      000003                        870 	.ds 2
      000005                        871 _settings::
      000005                        872 	.ds 12
      000011                        873 _radio_receive_packet_PARM_2:
      000011                        874 	.ds 2
      000013                        875 _radio_write_transmit_fifo_PARM_2:
      000013                        876 	.ds 2
      000015                        877 _radio_transmit_simple_PARM_2:
      000015                        878 	.ds 2
      000017                        879 _radio_transmit_simple_PARM_3:
      000017                        880 	.ds 2
      000019                        881 _radio_transmit_PARM_2:
      000019                        882 	.ds 2
      00001B                        883 _radio_transmit_PARM_3:
      00001B                        884 	.ds 2
      00001D                        885 _scale_uint32_PARM_2:
      00001D                        886 	.ds 4
      000021                        887 _scale_uint32_value_1_243:
      000021                        888 	.ds 4
      000025                        889 _set_frequency_registers_frequency_1_251:
      000025                        890 	.ds 4
                                    891 ;--------------------------------------------------------
                                    892 ; external ram data
                                    893 ;--------------------------------------------------------
                                    894 	.area XSEG    (XDATA)
      000000                        895 _radio_buffer::
      000000                        896 	.ds 252
      0000FC                        897 _radio_receive_packet_length_1_145:
      0000FC                        898 	.ds 3
      0000FF                        899 _radio_transmit_length_1_187:
      0000FF                        900 	.ds 1
      000100                        901 _radio_set_channel_channel_1_201:
      000100                        902 	.ds 1
      000101                        903 _radio_set_transmit_power_power_1_225:
      000101                        904 	.ds 1
      000102                        905 _radio_set_network_id_id_1_231:
      000102                        906 	.ds 2
      000104                        907 _set_frequency_registers_band_1_252:
      000104                        908 	.ds 1
      000105                        909 _radio_set_diversity_state_1_257:
      000105                        910 	.ds 1
                                    911 ;--------------------------------------------------------
                                    912 ; absolute external ram data
                                    913 ;--------------------------------------------------------
                                    914 	.area XABS    (ABS,XDATA)
                                    915 ;--------------------------------------------------------
                                    916 ; external initialized ram data
                                    917 ;--------------------------------------------------------
                                    918 	.area XISEG   (XDATA)
                                    919 	.area HOME    (CODE)
                                    920 	.area GSINIT0 (CODE)
                                    921 	.area GSINIT1 (CODE)
                                    922 	.area GSINIT2 (CODE)
                                    923 	.area GSINIT3 (CODE)
                                    924 	.area GSINIT4 (CODE)
                                    925 	.area GSINIT5 (CODE)
                                    926 	.area GSINIT  (CODE)
                                    927 	.area GSFINAL (CODE)
                                    928 	.area CSEG    (CODE)
                                    929 ;--------------------------------------------------------
                                    930 ; global & static initialisations
                                    931 ;--------------------------------------------------------
                                    932 	.area HOME    (CODE)
                                    933 	.area GSINIT  (CODE)
                                    934 	.area GSFINAL (CODE)
                                    935 	.area GSINIT  (CODE)
                                    936 ;--------------------------------------------------------
                                    937 ; Home
                                    938 ;--------------------------------------------------------
                                    939 	.area HOME    (CODE)
                                    940 	.area HOME    (CODE)
                                    941 ;--------------------------------------------------------
                                    942 ; code
                                    943 ;--------------------------------------------------------
                                    944 	.area CSEG    (CODE)
                                    945 ;------------------------------------------------------------
                                    946 ;Allocation info for local variables in function 'radio_receive_packet'
                                    947 ;------------------------------------------------------------
                                    948 ;length                    Allocated with name '_radio_receive_packet_length_1_145'
                                    949 ;------------------------------------------------------------
                                    950 ;	radio/radio.c:78: radio_receive_packet(uint8_t *length, __xdata uint8_t * __pdata buf)
                                    951 ;	-----------------------------------------
                                    952 ;	 function radio_receive_packet
                                    953 ;	-----------------------------------------
      000000                        954 _radio_receive_packet:
                           000007   955 	ar7 = 0x07
                           000006   956 	ar6 = 0x06
                           000005   957 	ar5 = 0x05
                           000004   958 	ar4 = 0x04
                           000003   959 	ar3 = 0x03
                           000002   960 	ar2 = 0x02
                           000001   961 	ar1 = 0x01
                           000000   962 	ar0 = 0x00
      000000 AF F0            [24]  963 	mov	r7,b
      000002 AE 83            [24]  964 	mov	r6,dph
      000004 E5 82            [12]  965 	mov	a,dpl
      000006 90r00rFC         [24]  966 	mov	dptr,#_radio_receive_packet_length_1_145
      000009 F0               [24]  967 	movx	@dptr,a
      00000A EE               [12]  968 	mov	a,r6
      00000B A3               [24]  969 	inc	dptr
      00000C F0               [24]  970 	movx	@dptr,a
      00000D EF               [12]  971 	mov	a,r7
      00000E A3               [24]  972 	inc	dptr
      00000F F0               [24]  973 	movx	@dptr,a
                                    974 ;	radio/radio.c:87: if (!packet_received) {
      000010 20*00 02         [24]  975 	jb	_packet_received,00102$
                                    976 ;	radio/radio.c:88: return false;
      000013 C3               [12]  977 	clr	c
      000014 22               [24]  978 	ret
      000015                        979 00102$:
                                    980 ;	radio/radio.c:91: if (receive_packet_length > MAX_PACKET_LENGTH) {
      000015 78r00            [12]  981 	mov	r0,#_receive_packet_length
      000017 C3               [12]  982 	clr	c
      000018 E2               [24]  983 	movx	a,@r0
      000019 F5 F0            [12]  984 	mov	b,a
      00001B 74 FC            [12]  985 	mov	a,#0xFC
      00001D 95 F0            [12]  986 	subb	a,b
      00001F 50 05            [24]  987 	jnc	00104$
                                    988 ;	radio/radio.c:92: radio_receiver_on();
      000021 12r03r79         [24]  989 	lcall	_radio_receiver_on
                                    990 ;	radio/radio.c:93: goto failed;
      000024 80 45            [24]  991 	sjmp	00105$
      000026                        992 00104$:
                                    993 ;	radio/radio.c:108: *length = receive_packet_length;
      000026 90r00rFC         [24]  994 	mov	dptr,#_radio_receive_packet_length_1_145
      000029 E0               [24]  995 	movx	a,@dptr
      00002A FD               [12]  996 	mov	r5,a
      00002B A3               [24]  997 	inc	dptr
      00002C E0               [24]  998 	movx	a,@dptr
      00002D FE               [12]  999 	mov	r6,a
      00002E A3               [24] 1000 	inc	dptr
      00002F E0               [24] 1001 	movx	a,@dptr
      000030 FF               [12] 1002 	mov	r7,a
      000031 8D 82            [24] 1003 	mov	dpl,r5
      000033 8E 83            [24] 1004 	mov	dph,r6
      000035 8F F0            [24] 1005 	mov	b,r7
      000037 78r00            [12] 1006 	mov	r0,#_receive_packet_length
      000039 E2               [24] 1007 	movx	a,@r0
      00003A 12r00r00         [24] 1008 	lcall	__gptrput
                                   1009 ;	radio/radio.c:109: memcpy(buf, radio_buffer, receive_packet_length);
      00003D 78r11            [12] 1010 	mov	r0,#_radio_receive_packet_PARM_2
      00003F E2               [24] 1011 	movx	a,@r0
      000040 FD               [12] 1012 	mov	r5,a
      000041 08               [12] 1013 	inc	r0
      000042 E2               [24] 1014 	movx	a,@r0
      000043 FE               [12] 1015 	mov	r6,a
      000044 7F 00            [12] 1016 	mov	r7,#0x00
      000046 90r00r00         [24] 1017 	mov	dptr,#_memcpy_PARM_2
      000049 74r00            [12] 1018 	mov	a,#_radio_buffer
      00004B F0               [24] 1019 	movx	@dptr,a
      00004C 74s00            [12] 1020 	mov	a,#(_radio_buffer >> 8)
      00004E A3               [24] 1021 	inc	dptr
      00004F F0               [24] 1022 	movx	@dptr,a
      000050 E4               [12] 1023 	clr	a
      000051 A3               [24] 1024 	inc	dptr
      000052 F0               [24] 1025 	movx	@dptr,a
      000053 78r00            [12] 1026 	mov	r0,#_receive_packet_length
      000055 90r00r00         [24] 1027 	mov	dptr,#_memcpy_PARM_3
      000058 E2               [24] 1028 	movx	a,@r0
      000059 F0               [24] 1029 	movx	@dptr,a
      00005A E4               [12] 1030 	clr	a
      00005B A3               [24] 1031 	inc	dptr
      00005C F0               [24] 1032 	movx	@dptr,a
      00005D 8D 82            [24] 1033 	mov	dpl,r5
      00005F 8E 83            [24] 1034 	mov	dph,r6
      000061 8F F0            [24] 1035 	mov	b,r7
      000063 12r00r00         [24] 1036 	lcall	_memcpy
                                   1037 ;	radio/radio.c:112: radio_receiver_on();
      000066 12r03r79         [24] 1038 	lcall	_radio_receiver_on
                                   1039 ;	radio/radio.c:113: return true;
      000069 D3               [12] 1040 	setb	c
                                   1041 ;	radio/radio.c:187: failed:
      00006A 22               [24] 1042 	ret
      00006B                       1043 00105$:
                                   1044 ;	radio/radio.c:188: if (errors.rx_errors != 0xFFFF) {
      00006B 78r00            [12] 1045 	mov	r0,#_errors
      00006D E2               [24] 1046 	movx	a,@r0
      00006E FE               [12] 1047 	mov	r6,a
      00006F 08               [12] 1048 	inc	r0
      000070 E2               [24] 1049 	movx	a,@r0
      000071 FF               [12] 1050 	mov	r7,a
      000072 BE FF 05         [24] 1051 	cjne	r6,#0xFF,00121$
      000075 BF FF 02         [24] 1052 	cjne	r7,#0xFF,00121$
      000078 80 0C            [24] 1053 	sjmp	00107$
      00007A                       1054 00121$:
                                   1055 ;	radio/radio.c:189: errors.rx_errors++;
      00007A 0E               [12] 1056 	inc	r6
      00007B BE 00 01         [24] 1057 	cjne	r6,#0x00,00122$
      00007E 0F               [12] 1058 	inc	r7
      00007F                       1059 00122$:
      00007F 78r00            [12] 1060 	mov	r0,#_errors
      000081 EE               [12] 1061 	mov	a,r6
      000082 F2               [24] 1062 	movx	@r0,a
      000083 08               [12] 1063 	inc	r0
      000084 EF               [12] 1064 	mov	a,r7
      000085 F2               [24] 1065 	movx	@r0,a
      000086                       1066 00107$:
                                   1067 ;	radio/radio.c:191: return false;
      000086 C3               [12] 1068 	clr	c
      000087 22               [24] 1069 	ret
                                   1070 ;------------------------------------------------------------
                                   1071 ;Allocation info for local variables in function 'radio_write_transmit_fifo'
                                   1072 ;------------------------------------------------------------
                                   1073 ;n                         Allocated to registers r7 
                                   1074 ;------------------------------------------------------------
                                   1075 ;	radio/radio.c:198: radio_write_transmit_fifo(register uint8_t n, __xdata uint8_t * __pdata buffer)
                                   1076 ;	-----------------------------------------
                                   1077 ;	 function radio_write_transmit_fifo
                                   1078 ;	-----------------------------------------
      000088                       1079 _radio_write_transmit_fifo:
      000088 AF 82            [24] 1080 	mov	r7,dpl
                                   1081 ;	radio/radio.c:200: RADIO_PAGE();
      00008A 75 A7 02         [24] 1082 	mov	_SFRPAGE,#0x02
                                   1083 ;	radio/radio.c:202: NSS1 = 0;
      00008D C2 A3            [12] 1084 	clr	_NSS1
                                   1085 ;	radio/radio.c:203: SPIF1 = 0;
      00008F C2 FF            [12] 1086 	clr	_SPIF1
                                   1087 ;	radio/radio.c:204: SPI1DAT = (0x80 | EZRADIOPRO_FIFO_ACCESS);
      000091 75 A3 FF         [24] 1088 	mov	_SPI1DAT,#0xFF
                                   1089 ;	radio/radio.c:206: while (n--) {
      000094 78r13            [12] 1090 	mov	r0,#_radio_write_transmit_fifo_PARM_2
      000096 E2               [24] 1091 	movx	a,@r0
      000097 FD               [12] 1092 	mov	r5,a
      000098 08               [12] 1093 	inc	r0
      000099 E2               [24] 1094 	movx	a,@r0
      00009A FE               [12] 1095 	mov	r6,a
      00009B                       1096 00104$:
      00009B 8F 04            [24] 1097 	mov	ar4,r7
      00009D 1F               [12] 1098 	dec	r7
      00009E EC               [12] 1099 	mov	a,r4
      00009F 60 11            [24] 1100 	jz	00107$
                                   1101 ;	radio/radio.c:207: while (!TXBMT1) /* noop */;
      0000A1                       1102 00101$:
      0000A1 30 F9 FD         [24] 1103 	jnb	_TXBMT1,00101$
                                   1104 ;	radio/radio.c:208: SPI1DAT = *buffer++;
      0000A4 8D 82            [24] 1105 	mov	dpl,r5
      0000A6 8E 83            [24] 1106 	mov	dph,r6
      0000A8 E0               [24] 1107 	movx	a,@dptr
      0000A9 F5 A3            [12] 1108 	mov	_SPI1DAT,a
      0000AB A3               [24] 1109 	inc	dptr
      0000AC AD 82            [24] 1110 	mov	r5,dpl
      0000AE AE 83            [24] 1111 	mov	r6,dph
                                   1112 ;	radio/radio.c:211: while (!TXBMT1) /* noop */;
      0000B0 80 E9            [24] 1113 	sjmp	00104$
      0000B2                       1114 00107$:
      0000B2 30 F9 FD         [24] 1115 	jnb	_TXBMT1,00107$
                                   1116 ;	radio/radio.c:212: while ((SPI1CFG & 0x80) == 0x80);
      0000B5                       1117 00110$:
      0000B5 74 80            [12] 1118 	mov	a,#0x80
      0000B7 55 A1            [12] 1119 	anl	a,_SPI1CFG
      0000B9 FF               [12] 1120 	mov	r7,a
      0000BA BF 80 02         [24] 1121 	cjne	r7,#0x80,00137$
      0000BD 80 F6            [24] 1122 	sjmp	00110$
      0000BF                       1123 00137$:
                                   1124 ;	radio/radio.c:214: SPIF1 = 0;
      0000BF C2 FF            [12] 1125 	clr	_SPIF1
                                   1126 ;	radio/radio.c:215: NSS1 = 1;
      0000C1 D2 A3            [12] 1127 	setb	_NSS1
                                   1128 ;	radio/radio.c:217: SFRPAGE = LEGACY_PAGE;
      0000C3 75 A7 00         [24] 1129 	mov	_SFRPAGE,#0x00
      0000C6 22               [24] 1130 	ret
                                   1131 ;------------------------------------------------------------
                                   1132 ;Allocation info for local variables in function 'radio_receive_in_progress'
                                   1133 ;------------------------------------------------------------
                                   1134 ;	radio/radio.c:223: radio_receive_in_progress(void)
                                   1135 ;	-----------------------------------------
                                   1136 ;	 function radio_receive_in_progress
                                   1137 ;	-----------------------------------------
      0000C7                       1138 _radio_receive_in_progress:
                                   1139 ;	radio/radio.c:225: if (packet_received ||
      0000C7 20*00 05         [24] 1140 	jb	_packet_received,00101$
                                   1141 ;	radio/radio.c:226: partial_packet_length != 0) {
      0000CA 78r01            [12] 1142 	mov	r0,#_partial_packet_length
      0000CC E2               [24] 1143 	movx	a,@r0
      0000CD 60 02            [24] 1144 	jz	00102$
      0000CF                       1145 00101$:
                                   1146 ;	radio/radio.c:227: return true;
      0000CF D3               [12] 1147 	setb	c
      0000D0 22               [24] 1148 	ret
      0000D1                       1149 00102$:
                                   1150 ;	radio/radio.c:231: if (register_read(EZRADIOPRO_EZMAC_STATUS) & EZRADIOPRO_PKRX) {
      0000D1 75 82 31         [24] 1151 	mov	dpl,#0x31
      0000D4 12r08r4D         [24] 1152 	lcall	_register_read
      0000D7 E5 82            [12] 1153 	mov	a,dpl
      0000D9 30 E4 02         [24] 1154 	jnb	acc.4,00105$
                                   1155 ;	radio/radio.c:232: return true;
      0000DC D3               [12] 1156 	setb	c
      0000DD 22               [24] 1157 	ret
      0000DE                       1158 00105$:
                                   1159 ;	radio/radio.c:234: return false;
      0000DE C3               [12] 1160 	clr	c
      0000DF 22               [24] 1161 	ret
                                   1162 ;------------------------------------------------------------
                                   1163 ;Allocation info for local variables in function 'radio_preamble_detected'
                                   1164 ;------------------------------------------------------------
                                   1165 ;	radio/radio.c:241: radio_preamble_detected(void)
                                   1166 ;	-----------------------------------------
                                   1167 ;	 function radio_preamble_detected
                                   1168 ;	-----------------------------------------
      0000E0                       1169 _radio_preamble_detected:
                                   1170 ;	radio/radio.c:243: EX0_SAVE_DISABLE;
      0000E0 A2 A8            [12] 1171 	mov	c,_EX0
      0000E2 92*02            [24] 1172 	mov	_radio_preamble_detected_EX0_saved_1_159,c
      0000E4 C2 A8            [12] 1173 	clr	_EX0
                                   1174 ;	radio/radio.c:244: if (preamble_detected) {
                                   1175 ;	radio/radio.c:245: preamble_detected = 0;
      0000E6 10*01 02         [24] 1176 	jbc	_preamble_detected,00108$
      0000E9 80 06            [24] 1177 	sjmp	00102$
      0000EB                       1178 00108$:
                                   1179 ;	radio/radio.c:246: EX0_RESTORE;
      0000EB A2*02            [12] 1180 	mov	c,_radio_preamble_detected_EX0_saved_1_159
      0000ED 92 A8            [24] 1181 	mov	_EX0,c
                                   1182 ;	radio/radio.c:247: return true;
      0000EF D3               [12] 1183 	setb	c
      0000F0 22               [24] 1184 	ret
      0000F1                       1185 00102$:
                                   1186 ;	radio/radio.c:249: EX0_RESTORE;
      0000F1 A2*02            [12] 1187 	mov	c,_radio_preamble_detected_EX0_saved_1_159
      0000F3 92 A8            [24] 1188 	mov	_EX0,c
                                   1189 ;	radio/radio.c:250: return false;
      0000F5 C3               [12] 1190 	clr	c
      0000F6 22               [24] 1191 	ret
                                   1192 ;------------------------------------------------------------
                                   1193 ;Allocation info for local variables in function 'radio_last_rssi'
                                   1194 ;------------------------------------------------------------
                                   1195 ;	radio/radio.c:258: radio_last_rssi(void)
                                   1196 ;	-----------------------------------------
                                   1197 ;	 function radio_last_rssi
                                   1198 ;	-----------------------------------------
      0000F7                       1199 _radio_last_rssi:
                                   1200 ;	radio/radio.c:260: return last_rssi;
      0000F7 78r02            [12] 1201 	mov	r0,#_last_rssi
      0000F9 E2               [24] 1202 	movx	a,@r0
      0000FA F5 82            [12] 1203 	mov	dpl,a
      0000FC 22               [24] 1204 	ret
                                   1205 ;------------------------------------------------------------
                                   1206 ;Allocation info for local variables in function 'radio_current_rssi'
                                   1207 ;------------------------------------------------------------
                                   1208 ;	radio/radio.c:266: radio_current_rssi(void)
                                   1209 ;	-----------------------------------------
                                   1210 ;	 function radio_current_rssi
                                   1211 ;	-----------------------------------------
      0000FD                       1212 _radio_current_rssi:
                                   1213 ;	radio/radio.c:268: return register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
      0000FD 75 82 26         [24] 1214 	mov	dpl,#0x26
      000100 02r08r4D         [24] 1215 	ljmp	_register_read
                                   1216 ;------------------------------------------------------------
                                   1217 ;Allocation info for local variables in function 'radio_air_rate'
                                   1218 ;------------------------------------------------------------
                                   1219 ;	radio/radio.c:274: radio_air_rate(void)
                                   1220 ;	-----------------------------------------
                                   1221 ;	 function radio_air_rate
                                   1222 ;	-----------------------------------------
      000103                       1223 _radio_air_rate:
                                   1224 ;	radio/radio.c:276: return settings.air_data_rate;
      000103 78r0D            [12] 1225 	mov	r0,#(_settings + 0x0008)
      000105 E2               [24] 1226 	movx	a,@r0
      000106 F5 82            [12] 1227 	mov	dpl,a
      000108 22               [24] 1228 	ret
                                   1229 ;------------------------------------------------------------
                                   1230 ;Allocation info for local variables in function 'radio_clear_transmit_fifo'
                                   1231 ;------------------------------------------------------------
                                   1232 ;control                   Allocated to registers r7 
                                   1233 ;------------------------------------------------------------
                                   1234 ;	radio/radio.c:282: radio_clear_transmit_fifo(void)
                                   1235 ;	-----------------------------------------
                                   1236 ;	 function radio_clear_transmit_fifo
                                   1237 ;	-----------------------------------------
      000109                       1238 _radio_clear_transmit_fifo:
                                   1239 ;	radio/radio.c:285: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
      000109 75 82 08         [24] 1240 	mov	dpl,#0x08
      00010C 12r08r4D         [24] 1241 	lcall	_register_read
      00010F AF 82            [24] 1242 	mov	r7,dpl
                                   1243 ;	radio/radio.c:286: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRTX);
      000111 74 01            [12] 1244 	mov	a,#0x01
      000113 4F               [12] 1245 	orl	a,r7
      000114 FE               [12] 1246 	mov	r6,a
      000115 C0 07            [24] 1247 	push	ar7
      000117 C0 06            [24] 1248 	push	ar6
      000119 75 82 08         [24] 1249 	mov	dpl,#0x08
      00011C 12r08r17         [24] 1250 	lcall	_register_write
      00011F 15 81            [12] 1251 	dec	sp
      000121 D0 07            [24] 1252 	pop	ar7
                                   1253 ;	radio/radio.c:287: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRTX);
      000123 53 07 FE         [24] 1254 	anl	ar7,#0xFE
      000126 C0 07            [24] 1255 	push	ar7
      000128 75 82 08         [24] 1256 	mov	dpl,#0x08
      00012B 12r08r17         [24] 1257 	lcall	_register_write
      00012E 15 81            [12] 1258 	dec	sp
      000130 22               [24] 1259 	ret
                                   1260 ;------------------------------------------------------------
                                   1261 ;Allocation info for local variables in function 'radio_clear_receive_fifo'
                                   1262 ;------------------------------------------------------------
                                   1263 ;control                   Allocated to registers r7 
                                   1264 ;------------------------------------------------------------
                                   1265 ;	radio/radio.c:294: radio_clear_receive_fifo(void) __reentrant
                                   1266 ;	-----------------------------------------
                                   1267 ;	 function radio_clear_receive_fifo
                                   1268 ;	-----------------------------------------
      000131                       1269 _radio_clear_receive_fifo:
                                   1270 ;	radio/radio.c:297: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
      000131 75 82 08         [24] 1271 	mov	dpl,#0x08
      000134 12r08r4D         [24] 1272 	lcall	_register_read
      000137 AF 82            [24] 1273 	mov	r7,dpl
                                   1274 ;	radio/radio.c:298: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRRX);
      000139 74 02            [12] 1275 	mov	a,#0x02
      00013B 4F               [12] 1276 	orl	a,r7
      00013C FE               [12] 1277 	mov	r6,a
      00013D C0 07            [24] 1278 	push	ar7
      00013F C0 06            [24] 1279 	push	ar6
      000141 75 82 08         [24] 1280 	mov	dpl,#0x08
      000144 12r08r17         [24] 1281 	lcall	_register_write
      000147 15 81            [12] 1282 	dec	sp
      000149 D0 07            [24] 1283 	pop	ar7
                                   1284 ;	radio/radio.c:299: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRRX);
      00014B 53 07 FD         [24] 1285 	anl	ar7,#0xFD
      00014E C0 07            [24] 1286 	push	ar7
      000150 75 82 08         [24] 1287 	mov	dpl,#0x08
      000153 12r08r17         [24] 1288 	lcall	_register_write
      000156 15 81            [12] 1289 	dec	sp
      000158 22               [24] 1290 	ret
                                   1291 ;------------------------------------------------------------
                                   1292 ;Allocation info for local variables in function 'radio_transmit_simple'
                                   1293 ;------------------------------------------------------------
                                   1294 ;length                    Allocated to registers r7 
                                   1295 ;n                         Allocated to registers r6 
                                   1296 ;status                    Allocated to registers r3 
                                   1297 ;------------------------------------------------------------
                                   1298 ;	radio/radio.c:311: radio_transmit_simple(__data uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                                   1299 ;	-----------------------------------------
                                   1300 ;	 function radio_transmit_simple
                                   1301 ;	-----------------------------------------
      000159                       1302 _radio_transmit_simple:
                                   1303 ;	radio/radio.c:317: if (length > sizeof(radio_buffer)) {
      000159 E5 82            [12] 1304 	mov	a,dpl
      00015B FF               [12] 1305 	mov	r7,a
      00015C 24 03            [12] 1306 	add	a,#0xff - 0xFC
      00015E 50 19            [24] 1307 	jnc	00102$
                                   1308 ;	radio/radio.c:318: panic("oversized packet");
      000160 C0 07            [24] 1309 	push	ar7
      000162 74r00            [12] 1310 	mov	a,#___str_0
      000164 C0 E0            [24] 1311 	push	acc
      000166 74s00            [12] 1312 	mov	a,#(___str_0 >> 8)
      000168 C0 E0            [24] 1313 	push	acc
      00016A 74 80            [12] 1314 	mov	a,#0x80
      00016C C0 E0            [24] 1315 	push	acc
      00016E 12r00r00         [24] 1316 	lcall	_panic
      000171 15 81            [12] 1317 	dec	sp
      000173 15 81            [12] 1318 	dec	sp
      000175 15 81            [12] 1319 	dec	sp
      000177 D0 07            [24] 1320 	pop	ar7
      000179                       1321 00102$:
                                   1322 ;	radio/radio.c:321: radio_clear_transmit_fifo();
      000179 C0 07            [24] 1323 	push	ar7
      00017B 12r01r09         [24] 1324 	lcall	_radio_clear_transmit_fifo
      00017E D0 07            [24] 1325 	pop	ar7
                                   1326 ;	radio/radio.c:323: register_write(EZRADIOPRO_TRANSMIT_PACKET_LENGTH, length);
      000180 C0 07            [24] 1327 	push	ar7
      000182 C0 07            [24] 1328 	push	ar7
      000184 75 82 3E         [24] 1329 	mov	dpl,#0x3E
      000187 12r08r17         [24] 1330 	lcall	_register_write
      00018A 15 81            [12] 1331 	dec	sp
      00018C D0 07            [24] 1332 	pop	ar7
                                   1333 ;	radio/radio.c:326: n = length;
                                   1334 ;	radio/radio.c:327: if (n > TX_FIFO_THRESHOLD_LOW) {
      00018E EF               [12] 1335 	mov	a,r7
      00018F FE               [12] 1336 	mov	r6,a
      000190 24 DF            [12] 1337 	add	a,#0xff - 0x20
      000192 50 02            [24] 1338 	jnc	00104$
                                   1339 ;	radio/radio.c:328: n = TX_FIFO_THRESHOLD_LOW;
      000194 7E 20            [12] 1340 	mov	r6,#0x20
      000196                       1341 00104$:
                                   1342 ;	radio/radio.c:330: radio_write_transmit_fifo(n, buf);
      000196 78r15            [12] 1343 	mov	r0,#_radio_transmit_simple_PARM_2
      000198 79r13            [12] 1344 	mov	r1,#_radio_write_transmit_fifo_PARM_2
      00019A E2               [24] 1345 	movx	a,@r0
      00019B F3               [24] 1346 	movx	@r1,a
      00019C 08               [12] 1347 	inc	r0
      00019D E2               [24] 1348 	movx	a,@r0
      00019E 09               [12] 1349 	inc	r1
      00019F F3               [24] 1350 	movx	@r1,a
      0001A0 8E 82            [24] 1351 	mov	dpl,r6
      0001A2 C0 07            [24] 1352 	push	ar7
      0001A4 C0 06            [24] 1353 	push	ar6
      0001A6 12r00r88         [24] 1354 	lcall	_radio_write_transmit_fifo
      0001A9 D0 06            [24] 1355 	pop	ar6
      0001AB D0 07            [24] 1356 	pop	ar7
                                   1357 ;	radio/radio.c:331: length -= n;
      0001AD EF               [12] 1358 	mov	a,r7
      0001AE C3               [12] 1359 	clr	c
      0001AF 9E               [12] 1360 	subb	a,r6
      0001B0 FF               [12] 1361 	mov	r7,a
                                   1362 ;	radio/radio.c:332: buf += n;
      0001B1 78r15            [12] 1363 	mov	r0,#_radio_transmit_simple_PARM_2
      0001B3 E2               [24] 1364 	movx	a,@r0
      0001B4 2E               [12] 1365 	add	a,r6
      0001B5 F2               [24] 1366 	movx	@r0,a
      0001B6 08               [12] 1367 	inc	r0
      0001B7 E2               [24] 1368 	movx	a,@r0
      0001B8 34 00            [12] 1369 	addc	a,#0x00
      0001BA F2               [24] 1370 	movx	@r0,a
                                   1371 ;	radio/radio.c:335: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
      0001BB C0 07            [24] 1372 	push	ar7
      0001BD E4               [12] 1373 	clr	a
      0001BE C0 E0            [24] 1374 	push	acc
      0001C0 75 82 05         [24] 1375 	mov	dpl,#0x05
      0001C3 12r08r17         [24] 1376 	lcall	_register_write
      0001C6 15 81            [12] 1377 	dec	sp
                                   1378 ;	radio/radio.c:336: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
      0001C8 E4               [12] 1379 	clr	a
      0001C9 C0 E0            [24] 1380 	push	acc
      0001CB 75 82 06         [24] 1381 	mov	dpl,#0x06
      0001CE 12r08r17         [24] 1382 	lcall	_register_write
      0001D1 15 81            [12] 1383 	dec	sp
                                   1384 ;	radio/radio.c:338: preamble_detected = 0;
      0001D3 C2*01            [12] 1385 	clr	_preamble_detected
                                   1386 ;	radio/radio.c:339: transmit_started = false;
      0001D5 C2*03            [12] 1387 	clr	_radio_transmit_simple_transmit_started_1_172
                                   1388 ;	radio/radio.c:342: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_TXON | EZRADIOPRO_XTON);
      0001D7 74 09            [12] 1389 	mov	a,#0x09
      0001D9 C0 E0            [24] 1390 	push	acc
      0001DB 75 82 07         [24] 1391 	mov	dpl,#0x07
      0001DE 12r08r17         [24] 1392 	lcall	_register_write
      0001E1 15 81            [12] 1393 	dec	sp
                                   1394 ;	radio/radio.c:348: tstart = timer2_tick();
      0001E3 12r00r00         [24] 1395 	lcall	_timer2_tick
      0001E6 AC 82            [24] 1396 	mov	r4,dpl
      0001E8 AD 83            [24] 1397 	mov	r5,dph
      0001EA D0 07            [24] 1398 	pop	ar7
                                   1399 ;	radio/radio.c:349: while ((uint16_t)(timer2_tick() - tstart) < timeout_ticks) {
      0001EC                       1400 00130$:
      0001EC C0 07            [24] 1401 	push	ar7
      0001EE C0 05            [24] 1402 	push	ar5
      0001F0 C0 04            [24] 1403 	push	ar4
      0001F2 12r00r00         [24] 1404 	lcall	_timer2_tick
      0001F5 AA 82            [24] 1405 	mov	r2,dpl
      0001F7 AB 83            [24] 1406 	mov	r3,dph
      0001F9 D0 04            [24] 1407 	pop	ar4
      0001FB D0 05            [24] 1408 	pop	ar5
      0001FD D0 07            [24] 1409 	pop	ar7
      0001FF EA               [12] 1410 	mov	a,r2
      000200 C3               [12] 1411 	clr	c
      000201 9C               [12] 1412 	subb	a,r4
      000202 FA               [12] 1413 	mov	r2,a
      000203 EB               [12] 1414 	mov	a,r3
      000204 9D               [12] 1415 	subb	a,r5
      000205 FB               [12] 1416 	mov	r3,a
      000206 78r17            [12] 1417 	mov	r0,#_radio_transmit_simple_PARM_3
      000208 C3               [12] 1418 	clr	c
      000209 E2               [24] 1419 	movx	a,@r0
      00020A F5 F0            [12] 1420 	mov	b,a
      00020C EA               [12] 1421 	mov	a,r2
      00020D 95 F0            [12] 1422 	subb	a,b
      00020F 08               [12] 1423 	inc	r0
      000210 E2               [24] 1424 	movx	a,@r0
      000211 F5 F0            [12] 1425 	mov	b,a
      000213 EB               [12] 1426 	mov	a,r3
      000214 95 F0            [12] 1427 	subb	a,b
      000216 40 03            [24] 1428 	jc	00199$
      000218 02r03r25         [24] 1429 	ljmp	00132$
      00021B                       1430 00199$:
                                   1431 ;	radio/radio.c:353: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
      00021B 75 82 03         [24] 1432 	mov	dpl,#0x03
      00021E C0 07            [24] 1433 	push	ar7
      000220 C0 05            [24] 1434 	push	ar5
      000222 C0 04            [24] 1435 	push	ar4
      000224 12r08r4D         [24] 1436 	lcall	_register_read
      000227 AB 82            [24] 1437 	mov	r3,dpl
      000229 D0 04            [24] 1438 	pop	ar4
      00022B D0 05            [24] 1439 	pop	ar5
      00022D D0 07            [24] 1440 	pop	ar7
                                   1441 ;	radio/radio.c:354: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAEM)) {
      00022F 30*03 40         [24] 1442 	jnb	_radio_transmit_simple_transmit_started_1_172,00108$
      000232 EF               [12] 1443 	mov	a,r7
      000233 60 3D            [24] 1444 	jz	00108$
      000235 EB               [12] 1445 	mov	a,r3
      000236 30 E5 39         [24] 1446 	jnb	acc.5,00108$
                                   1447 ;	radio/radio.c:361: n = 4;
      000239 7E 04            [12] 1448 	mov	r6,#0x04
                                   1449 ;	radio/radio.c:362: if (n > length) {
      00023B BF 04 00         [24] 1450 	cjne	r7,#0x04,00203$
      00023E                       1451 00203$:
      00023E 50 02            [24] 1452 	jnc	00106$
                                   1453 ;	radio/radio.c:363: n = length;
      000240 8F 06            [24] 1454 	mov	ar6,r7
      000242                       1455 00106$:
                                   1456 ;	radio/radio.c:365: radio_write_transmit_fifo(n, buf);
      000242 78r15            [12] 1457 	mov	r0,#_radio_transmit_simple_PARM_2
      000244 79r13            [12] 1458 	mov	r1,#_radio_write_transmit_fifo_PARM_2
      000246 E2               [24] 1459 	movx	a,@r0
      000247 F3               [24] 1460 	movx	@r1,a
      000248 08               [12] 1461 	inc	r0
      000249 E2               [24] 1462 	movx	a,@r0
      00024A 09               [12] 1463 	inc	r1
      00024B F3               [24] 1464 	movx	@r1,a
      00024C 8E 82            [24] 1465 	mov	dpl,r6
      00024E C0 07            [24] 1466 	push	ar7
      000250 C0 06            [24] 1467 	push	ar6
      000252 C0 05            [24] 1468 	push	ar5
      000254 C0 04            [24] 1469 	push	ar4
      000256 12r00r88         [24] 1470 	lcall	_radio_write_transmit_fifo
      000259 D0 04            [24] 1471 	pop	ar4
      00025B D0 05            [24] 1472 	pop	ar5
      00025D D0 06            [24] 1473 	pop	ar6
      00025F D0 07            [24] 1474 	pop	ar7
                                   1475 ;	radio/radio.c:366: length -= n;
      000261 EF               [12] 1476 	mov	a,r7
      000262 C3               [12] 1477 	clr	c
      000263 9E               [12] 1478 	subb	a,r6
      000264 FF               [12] 1479 	mov	r7,a
                                   1480 ;	radio/radio.c:367: buf += n;
      000265 78r15            [12] 1481 	mov	r0,#_radio_transmit_simple_PARM_2
      000267 E2               [24] 1482 	movx	a,@r0
      000268 2E               [12] 1483 	add	a,r6
      000269 F2               [24] 1484 	movx	@r0,a
      00026A 08               [12] 1485 	inc	r0
      00026B E2               [24] 1486 	movx	a,@r0
      00026C 34 00            [12] 1487 	addc	a,#0x00
      00026E F2               [24] 1488 	movx	@r0,a
                                   1489 ;	radio/radio.c:368: continue;
      00026F 02r01rEC         [24] 1490 	ljmp	00130$
      000272                       1491 00108$:
                                   1492 ;	radio/radio.c:370: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAFULL) == 0) {
      000272 30*03 40         [24] 1493 	jnb	_radio_transmit_simple_transmit_started_1_172,00114$
      000275 EF               [12] 1494 	mov	a,r7
      000276 60 3D            [24] 1495 	jz	00114$
      000278 EB               [12] 1496 	mov	a,r3
      000279 20 E6 39         [24] 1497 	jb	acc.6,00114$
                                   1498 ;	radio/radio.c:374: n = 4;
      00027C 7E 04            [12] 1499 	mov	r6,#0x04
                                   1500 ;	radio/radio.c:375: if (n > length) {
      00027E BF 04 00         [24] 1501 	cjne	r7,#0x04,00208$
      000281                       1502 00208$:
      000281 50 02            [24] 1503 	jnc	00112$
                                   1504 ;	radio/radio.c:376: n = length;
      000283 8F 06            [24] 1505 	mov	ar6,r7
      000285                       1506 00112$:
                                   1507 ;	radio/radio.c:378: radio_write_transmit_fifo(n, buf);
      000285 78r15            [12] 1508 	mov	r0,#_radio_transmit_simple_PARM_2
      000287 79r13            [12] 1509 	mov	r1,#_radio_write_transmit_fifo_PARM_2
      000289 E2               [24] 1510 	movx	a,@r0
      00028A F3               [24] 1511 	movx	@r1,a
      00028B 08               [12] 1512 	inc	r0
      00028C E2               [24] 1513 	movx	a,@r0
      00028D 09               [12] 1514 	inc	r1
      00028E F3               [24] 1515 	movx	@r1,a
      00028F 8E 82            [24] 1516 	mov	dpl,r6
      000291 C0 07            [24] 1517 	push	ar7
      000293 C0 06            [24] 1518 	push	ar6
      000295 C0 05            [24] 1519 	push	ar5
      000297 C0 04            [24] 1520 	push	ar4
      000299 12r00r88         [24] 1521 	lcall	_radio_write_transmit_fifo
      00029C D0 04            [24] 1522 	pop	ar4
      00029E D0 05            [24] 1523 	pop	ar5
      0002A0 D0 06            [24] 1524 	pop	ar6
      0002A2 D0 07            [24] 1525 	pop	ar7
                                   1526 ;	radio/radio.c:379: length -= n;
      0002A4 EF               [12] 1527 	mov	a,r7
      0002A5 C3               [12] 1528 	clr	c
      0002A6 9E               [12] 1529 	subb	a,r6
      0002A7 FF               [12] 1530 	mov	r7,a
                                   1531 ;	radio/radio.c:380: buf += n;
      0002A8 78r15            [12] 1532 	mov	r0,#_radio_transmit_simple_PARM_2
      0002AA E2               [24] 1533 	movx	a,@r0
      0002AB 2E               [12] 1534 	add	a,r6
      0002AC F2               [24] 1535 	movx	@r0,a
      0002AD 08               [12] 1536 	inc	r0
      0002AE E2               [24] 1537 	movx	a,@r0
      0002AF 34 00            [12] 1538 	addc	a,#0x00
      0002B1 F2               [24] 1539 	movx	@r0,a
                                   1540 ;	radio/radio.c:381: continue;
      0002B2 02r01rEC         [24] 1541 	ljmp	00130$
      0002B5                       1542 00114$:
                                   1543 ;	radio/radio.c:384: if (status & EZRADIOPRO_IFFERR) {
      0002B5 EB               [12] 1544 	mov	a,r3
      0002B6 30 E7 20         [24] 1545 	jnb	acc.7,00120$
                                   1546 ;	radio/radio.c:386: radio_clear_transmit_fifo();
      0002B9 12r01r09         [24] 1547 	lcall	_radio_clear_transmit_fifo
                                   1548 ;	radio/radio.c:388: if (errors.tx_errors != 0xFFFF) {
      0002BC 78r02            [12] 1549 	mov	r0,#(_errors + 0x0002)
      0002BE E2               [24] 1550 	movx	a,@r0
      0002BF FA               [12] 1551 	mov	r2,a
      0002C0 08               [12] 1552 	inc	r0
      0002C1 E2               [24] 1553 	movx	a,@r0
      0002C2 FE               [12] 1554 	mov	r6,a
      0002C3 BA FF 05         [24] 1555 	cjne	r2,#0xFF,00211$
      0002C6 BE FF 02         [24] 1556 	cjne	r6,#0xFF,00211$
      0002C9 80 0C            [24] 1557 	sjmp	00118$
      0002CB                       1558 00211$:
                                   1559 ;	radio/radio.c:389: errors.tx_errors++;
      0002CB 0A               [12] 1560 	inc	r2
      0002CC BA 00 01         [24] 1561 	cjne	r2,#0x00,00212$
      0002CF 0E               [12] 1562 	inc	r6
      0002D0                       1563 00212$:
      0002D0 78r02            [12] 1564 	mov	r0,#(_errors + 0x0002)
      0002D2 EA               [12] 1565 	mov	a,r2
      0002D3 F2               [24] 1566 	movx	@r0,a
      0002D4 08               [12] 1567 	inc	r0
      0002D5 EE               [12] 1568 	mov	a,r6
      0002D6 F2               [24] 1569 	movx	@r0,a
      0002D7                       1570 00118$:
                                   1571 ;	radio/radio.c:394: return false;
      0002D7 C3               [12] 1572 	clr	c
      0002D8 22               [24] 1573 	ret
      0002D9                       1574 00120$:
                                   1575 ;	radio/radio.c:399: status = register_read(EZRADIOPRO_DEVICE_STATUS);
      0002D9 75 82 02         [24] 1576 	mov	dpl,#0x02
      0002DC C0 07            [24] 1577 	push	ar7
      0002DE C0 05            [24] 1578 	push	ar5
      0002E0 C0 04            [24] 1579 	push	ar4
      0002E2 12r08r4D         [24] 1580 	lcall	_register_read
      0002E5 AB 82            [24] 1581 	mov	r3,dpl
      0002E7 D0 04            [24] 1582 	pop	ar4
      0002E9 D0 05            [24] 1583 	pop	ar5
      0002EB D0 07            [24] 1584 	pop	ar7
                                   1585 ;	radio/radio.c:400: if (status & 0x02) {
      0002ED EB               [12] 1586 	mov	a,r3
      0002EE 30 E1 05         [24] 1587 	jnb	acc.1,00122$
                                   1588 ;	radio/radio.c:402: transmit_started = true;
      0002F1 D2*03            [12] 1589 	setb	_radio_transmit_simple_transmit_started_1_172
                                   1590 ;	radio/radio.c:403: continue;
      0002F3 02r01rEC         [24] 1591 	ljmp	00130$
      0002F6                       1592 00122$:
                                   1593 ;	radio/radio.c:405: if (transmit_started && (status & 0x02) == 0) {
      0002F6 20*03 03         [24] 1594 	jb	_radio_transmit_simple_transmit_started_1_172,00214$
      0002F9 02r01rEC         [24] 1595 	ljmp	00130$
      0002FC                       1596 00214$:
      0002FC EB               [12] 1597 	mov	a,r3
      0002FD 30 E1 03         [24] 1598 	jnb	acc.1,00215$
      000300 02r01rEC         [24] 1599 	ljmp	00130$
      000303                       1600 00215$:
                                   1601 ;	radio/radio.c:408: if (length != 0) {
      000303 EF               [12] 1602 	mov	a,r7
      000304 60 1D            [24] 1603 	jz	00126$
                                   1604 ;	radio/radio.c:410: if (errors.tx_errors != 0xFFFF) {
      000306 78r02            [12] 1605 	mov	r0,#(_errors + 0x0002)
      000308 E2               [24] 1606 	movx	a,@r0
      000309 FE               [12] 1607 	mov	r6,a
      00030A 08               [12] 1608 	inc	r0
      00030B E2               [24] 1609 	movx	a,@r0
      00030C FF               [12] 1610 	mov	r7,a
      00030D BE FF 05         [24] 1611 	cjne	r6,#0xFF,00217$
      000310 BF FF 02         [24] 1612 	cjne	r7,#0xFF,00217$
      000313 80 0C            [24] 1613 	sjmp	00124$
      000315                       1614 00217$:
                                   1615 ;	radio/radio.c:411: errors.tx_errors++;
      000315 0E               [12] 1616 	inc	r6
      000316 BE 00 01         [24] 1617 	cjne	r6,#0x00,00218$
      000319 0F               [12] 1618 	inc	r7
      00031A                       1619 00218$:
      00031A 78r02            [12] 1620 	mov	r0,#(_errors + 0x0002)
      00031C EE               [12] 1621 	mov	a,r6
      00031D F2               [24] 1622 	movx	@r0,a
      00031E 08               [12] 1623 	inc	r0
      00031F EF               [12] 1624 	mov	a,r7
      000320 F2               [24] 1625 	movx	@r0,a
      000321                       1626 00124$:
                                   1627 ;	radio/radio.c:416: return false;
      000321 C3               [12] 1628 	clr	c
      000322 22               [24] 1629 	ret
      000323                       1630 00126$:
                                   1631 ;	radio/radio.c:421: return true;
      000323 D3               [12] 1632 	setb	c
      000324 22               [24] 1633 	ret
      000325                       1634 00132$:
                                   1635 ;	radio/radio.c:435: if (errors.tx_errors != 0xFFFF) {
      000325 78r02            [12] 1636 	mov	r0,#(_errors + 0x0002)
      000327 E2               [24] 1637 	movx	a,@r0
      000328 FE               [12] 1638 	mov	r6,a
      000329 08               [12] 1639 	inc	r0
      00032A E2               [24] 1640 	movx	a,@r0
      00032B FF               [12] 1641 	mov	r7,a
      00032C BE FF 05         [24] 1642 	cjne	r6,#0xFF,00219$
      00032F BF FF 02         [24] 1643 	cjne	r7,#0xFF,00219$
      000332 80 0C            [24] 1644 	sjmp	00134$
      000334                       1645 00219$:
                                   1646 ;	radio/radio.c:436: errors.tx_errors++;
      000334 0E               [12] 1647 	inc	r6
      000335 BE 00 01         [24] 1648 	cjne	r6,#0x00,00220$
      000338 0F               [12] 1649 	inc	r7
      000339                       1650 00220$:
      000339 78r02            [12] 1651 	mov	r0,#(_errors + 0x0002)
      00033B EE               [12] 1652 	mov	a,r6
      00033C F2               [24] 1653 	movx	@r0,a
      00033D 08               [12] 1654 	inc	r0
      00033E EF               [12] 1655 	mov	a,r7
      00033F F2               [24] 1656 	movx	@r0,a
      000340                       1657 00134$:
                                   1658 ;	radio/radio.c:439: return false;
      000340 C3               [12] 1659 	clr	c
      000341 22               [24] 1660 	ret
                                   1661 ;------------------------------------------------------------
                                   1662 ;Allocation info for local variables in function 'radio_transmit'
                                   1663 ;------------------------------------------------------------
                                   1664 ;length                    Allocated with name '_radio_transmit_length_1_187'
                                   1665 ;------------------------------------------------------------
                                   1666 ;	radio/radio.c:503: radio_transmit(uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                                   1667 ;	-----------------------------------------
                                   1668 ;	 function radio_transmit
                                   1669 ;	-----------------------------------------
      000342                       1670 _radio_transmit:
      000342 E5 82            [12] 1671 	mov	a,dpl
      000344 90r00rFF         [24] 1672 	mov	dptr,#_radio_transmit_length_1_187
      000347 F0               [24] 1673 	movx	@dptr,a
                                   1674 ;	radio/radio.c:507: EX0_SAVE_DISABLE;
      000348 A2 A8            [12] 1675 	mov	c,_EX0
      00034A 92*05            [24] 1676 	mov	_radio_transmit_EX0_saved_1_188,c
      00034C C2 A8            [12] 1677 	clr	_EX0
                                   1678 ;	radio/radio.c:510: PA_ENABLE = 1;		// Set PA_Enable to turn on PA prior to TX cycle
      00034E D2 A5            [12] 1679 	setb	_PA_ENABLE
                                   1680 ;	radio/radio.c:520: ret = radio_transmit_simple(length, buf, timeout_ticks);
      000350 90r00rFF         [24] 1681 	mov	dptr,#_radio_transmit_length_1_187
      000353 E0               [24] 1682 	movx	a,@dptr
      000354 FF               [12] 1683 	mov	r7,a
      000355 78r19            [12] 1684 	mov	r0,#_radio_transmit_PARM_2
      000357 79r15            [12] 1685 	mov	r1,#_radio_transmit_simple_PARM_2
      000359 E2               [24] 1686 	movx	a,@r0
      00035A F3               [24] 1687 	movx	@r1,a
      00035B 08               [12] 1688 	inc	r0
      00035C E2               [24] 1689 	movx	a,@r0
      00035D 09               [12] 1690 	inc	r1
      00035E F3               [24] 1691 	movx	@r1,a
      00035F 78r1B            [12] 1692 	mov	r0,#_radio_transmit_PARM_3
      000361 79r17            [12] 1693 	mov	r1,#_radio_transmit_simple_PARM_3
      000363 E2               [24] 1694 	movx	a,@r0
      000364 F3               [24] 1695 	movx	@r1,a
      000365 08               [12] 1696 	inc	r0
      000366 E2               [24] 1697 	movx	a,@r0
      000367 09               [12] 1698 	inc	r1
      000368 F3               [24] 1699 	movx	@r1,a
      000369 8F 82            [24] 1700 	mov	dpl,r7
      00036B 12r01r59         [24] 1701 	lcall	_radio_transmit_simple
      00036E 92*04            [24] 1702 	mov	_radio_transmit_ret_1_188,c
                                   1703 ;	radio/radio.c:524: PA_ENABLE = 0;		// Set PA_Enable to off the PA after TX cycle
      000370 C2 A5            [12] 1704 	clr	_PA_ENABLE
                                   1705 ;	radio/radio.c:526: EX0_RESTORE;
      000372 A2*05            [12] 1706 	mov	c,_radio_transmit_EX0_saved_1_188
      000374 92 A8            [24] 1707 	mov	_EX0,c
                                   1708 ;	radio/radio.c:527: return ret;
      000376 A2*04            [12] 1709 	mov	c,_radio_transmit_ret_1_188
      000378 22               [24] 1710 	ret
                                   1711 ;------------------------------------------------------------
                                   1712 ;Allocation info for local variables in function 'radio_receiver_on'
                                   1713 ;------------------------------------------------------------
                                   1714 ;	radio/radio.c:534: radio_receiver_on(void)
                                   1715 ;	-----------------------------------------
                                   1716 ;	 function radio_receiver_on
                                   1717 ;	-----------------------------------------
      000379                       1718 _radio_receiver_on:
                                   1719 ;	radio/radio.c:536: EX0 = 0;
      000379 C2 A8            [12] 1720 	clr	_EX0
                                   1721 ;	radio/radio.c:538: packet_received = 0;
      00037B C2*00            [12] 1722 	clr	_packet_received
                                   1723 ;	radio/radio.c:539: receive_packet_length = 0;
      00037D 78r00            [12] 1724 	mov	r0,#_receive_packet_length
      00037F E4               [12] 1725 	clr	a
      000380 F2               [24] 1726 	movx	@r0,a
                                   1727 ;	radio/radio.c:540: preamble_detected = 0;
      000381 C2*01            [12] 1728 	clr	_preamble_detected
                                   1729 ;	radio/radio.c:541: partial_packet_length = 0;
      000383 78r01            [12] 1730 	mov	r0,#_partial_packet_length
      000385 E4               [12] 1731 	clr	a
      000386 F2               [24] 1732 	movx	@r0,a
                                   1733 ;	radio/radio.c:544: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, RADIO_RX_INTERRUPTS);
      000387 74 13            [12] 1734 	mov	a,#0x13
      000389 C0 E0            [24] 1735 	push	acc
      00038B 75 82 05         [24] 1736 	mov	dpl,#0x05
      00038E 12r08r17         [24] 1737 	lcall	_register_write
      000391 15 81            [12] 1738 	dec	sp
                                   1739 ;	radio/radio.c:545: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENPREAVAL);
      000393 74 40            [12] 1740 	mov	a,#0x40
      000395 C0 E0            [24] 1741 	push	acc
      000397 75 82 06         [24] 1742 	mov	dpl,#0x06
      00039A 12r08r17         [24] 1743 	lcall	_register_write
      00039D 15 81            [12] 1744 	dec	sp
                                   1745 ;	radio/radio.c:547: clear_status_registers();
      00039F 12r08rC1         [24] 1746 	lcall	_clear_status_registers
                                   1747 ;	radio/radio.c:548: radio_clear_transmit_fifo();
      0003A2 12r01r09         [24] 1748 	lcall	_radio_clear_transmit_fifo
                                   1749 ;	radio/radio.c:549: radio_clear_receive_fifo();
      0003A5 12r01r31         [24] 1750 	lcall	_radio_clear_receive_fifo
                                   1751 ;	radio/radio.c:552: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_RXON | EZRADIOPRO_XTON);
      0003A8 74 05            [12] 1752 	mov	a,#0x05
      0003AA C0 E0            [24] 1753 	push	acc
      0003AC 75 82 07         [24] 1754 	mov	dpl,#0x07
      0003AF 12r08r17         [24] 1755 	lcall	_register_write
      0003B2 15 81            [12] 1756 	dec	sp
                                   1757 ;	radio/radio.c:555: EX0 = 1;
      0003B4 D2 A8            [12] 1758 	setb	_EX0
                                   1759 ;	radio/radio.c:557: return true;
      0003B6 D3               [12] 1760 	setb	c
      0003B7 22               [24] 1761 	ret
                                   1762 ;------------------------------------------------------------
                                   1763 ;Allocation info for local variables in function 'radio_initialise'
                                   1764 ;------------------------------------------------------------
                                   1765 ;status                    Allocated with name '_radio_initialise_status_1_192'
                                   1766 ;------------------------------------------------------------
                                   1767 ;	radio/radio.c:564: radio_initialise(void)
                                   1768 ;	-----------------------------------------
                                   1769 ;	 function radio_initialise
                                   1770 ;	-----------------------------------------
      0003B8                       1771 _radio_initialise:
                                   1772 ;	radio/radio.c:568: delay_msec(50);
      0003B8 90 00 32         [24] 1773 	mov	dptr,#0x0032
      0003BB 12r00r00         [24] 1774 	lcall	_delay_msec
                                   1775 ;	radio/radio.c:571: status = register_read(EZRADIOPRO_DEVICE_VERSION);
      0003BE 75 82 01         [24] 1776 	mov	dpl,#0x01
      0003C1 12r08r4D         [24] 1777 	lcall	_register_read
      0003C4 AF 82            [24] 1778 	mov	r7,dpl
                                   1779 ;	radio/radio.c:572: if (status == 0xFF || status < 5) {
      0003C6 BF FF 02         [24] 1780 	cjne	r7,#0xFF,00119$
      0003C9 80 05            [24] 1781 	sjmp	00101$
      0003CB                       1782 00119$:
      0003CB BF 05 00         [24] 1783 	cjne	r7,#0x05,00120$
      0003CE                       1784 00120$:
      0003CE 50 02            [24] 1785 	jnc	00102$
      0003D0                       1786 00101$:
                                   1787 ;	radio/radio.c:574: return false;
      0003D0 C3               [12] 1788 	clr	c
      0003D1 22               [24] 1789 	ret
      0003D2                       1790 00102$:
                                   1791 ;	radio/radio.c:578: software_reset();
      0003D2 12r09r21         [24] 1792 	lcall	_software_reset
                                   1793 ;	radio/radio.c:580: status = register_read(EZRADIOPRO_DEVICE_VERSION);
      0003D5 75 82 01         [24] 1794 	mov	dpl,#0x01
      0003D8 12r08r4D         [24] 1795 	lcall	_register_read
                                   1796 ;	radio/radio.c:582: if ((status & EZRADIOPRO_IPOR) == 0) {
      0003DB E5 82            [12] 1797 	mov	a,dpl
      0003DD FF               [12] 1798 	mov	r7,a
      0003DE 20 E0 06         [24] 1799 	jb	acc.0,00105$
                                   1800 ;	radio/radio.c:584: return software_reset();
      0003E1 12r09r21         [24] 1801 	lcall	_software_reset
      0003E4 92*06            [24] 1802 	mov  _radio_initialise_sloc0_1_0,c
      0003E6 22               [24] 1803 	ret
      0003E7                       1804 00105$:
                                   1805 ;	radio/radio.c:587: if (status & EZRADIOPRO_ICHIPRDY) {
      0003E7 EF               [12] 1806 	mov	a,r7
      0003E8 30 E1 02         [24] 1807 	jnb	acc.1,00107$
                                   1808 ;	radio/radio.c:589: return true;
      0003EB D3               [12] 1809 	setb	c
      0003EC 22               [24] 1810 	ret
      0003ED                       1811 00107$:
                                   1812 ;	radio/radio.c:592: return false;
      0003ED C3               [12] 1813 	clr	c
      0003EE 22               [24] 1814 	ret
                                   1815 ;------------------------------------------------------------
                                   1816 ;Allocation info for local variables in function 'radio_set_frequency'
                                   1817 ;------------------------------------------------------------
                                   1818 ;	radio/radio.c:599: radio_set_frequency(__pdata uint32_t value)
                                   1819 ;	-----------------------------------------
                                   1820 ;	 function radio_set_frequency
                                   1821 ;	-----------------------------------------
      0003EF                       1822 _radio_set_frequency:
      0003EF AC 82            [24] 1823 	mov	r4,dpl
      0003F1 AD 83            [24] 1824 	mov	r5,dph
      0003F3 AE F0            [24] 1825 	mov	r6,b
      0003F5 FF               [12] 1826 	mov	r7,a
                                   1827 ;	radio/radio.c:601: if (value < 240000000UL || value > 935000000UL) {
      0003F6 C3               [12] 1828 	clr	c
      0003F7 ED               [12] 1829 	mov	a,r5
      0003F8 94 1C            [12] 1830 	subb	a,#0x1C
      0003FA EE               [12] 1831 	mov	a,r6
      0003FB 94 4E            [12] 1832 	subb	a,#0x4E
      0003FD EF               [12] 1833 	mov	a,r7
      0003FE 94 0E            [12] 1834 	subb	a,#0x0E
      000400 40 0E            [24] 1835 	jc	00101$
      000402 74 C0            [12] 1836 	mov	a,#0xC0
      000404 9C               [12] 1837 	subb	a,r4
      000405 74 F7            [12] 1838 	mov	a,#0xF7
      000407 9D               [12] 1839 	subb	a,r5
      000408 74 BA            [12] 1840 	mov	a,#0xBA
      00040A 9E               [12] 1841 	subb	a,r6
      00040B 74 37            [12] 1842 	mov	a,#0x37
      00040D 9F               [12] 1843 	subb	a,r7
      00040E 50 02            [24] 1844 	jnc	00102$
      000410                       1845 00101$:
                                   1846 ;	radio/radio.c:602: return false;
      000410 C3               [12] 1847 	clr	c
      000411 22               [24] 1848 	ret
      000412                       1849 00102$:
                                   1850 ;	radio/radio.c:604: settings.frequency = value;
      000412 78r05            [12] 1851 	mov	r0,#_settings
      000414 EC               [12] 1852 	mov	a,r4
      000415 F2               [24] 1853 	movx	@r0,a
      000416 08               [12] 1854 	inc	r0
      000417 ED               [12] 1855 	mov	a,r5
      000418 F2               [24] 1856 	movx	@r0,a
      000419 08               [12] 1857 	inc	r0
      00041A EE               [12] 1858 	mov	a,r6
      00041B F2               [24] 1859 	movx	@r0,a
      00041C 08               [12] 1860 	inc	r0
      00041D EF               [12] 1861 	mov	a,r7
      00041E F2               [24] 1862 	movx	@r0,a
                                   1863 ;	radio/radio.c:605: set_frequency_registers(value);
      00041F 8C 82            [24] 1864 	mov	dpl,r4
      000421 8D 83            [24] 1865 	mov	dph,r5
      000423 8E F0            [24] 1866 	mov	b,r6
      000425 EF               [12] 1867 	mov	a,r7
      000426 12r09r8D         [24] 1868 	lcall	_set_frequency_registers
                                   1869 ;	radio/radio.c:606: return true;
      000429 D3               [12] 1870 	setb	c
      00042A 22               [24] 1871 	ret
                                   1872 ;------------------------------------------------------------
                                   1873 ;Allocation info for local variables in function 'radio_set_channel_spacing'
                                   1874 ;------------------------------------------------------------
                                   1875 ;	radio/radio.c:613: radio_set_channel_spacing(__pdata uint32_t value)
                                   1876 ;	-----------------------------------------
                                   1877 ;	 function radio_set_channel_spacing
                                   1878 ;	-----------------------------------------
      00042B                       1879 _radio_set_channel_spacing:
      00042B AC 82            [24] 1880 	mov	r4,dpl
      00042D AD 83            [24] 1881 	mov	r5,dph
      00042F AE F0            [24] 1882 	mov	r6,b
      000431 FF               [12] 1883 	mov	r7,a
                                   1884 ;	radio/radio.c:615: if (value > 2550000L)
      000432 C3               [12] 1885 	clr	c
      000433 74 F0            [12] 1886 	mov	a,#0xF0
      000435 9C               [12] 1887 	subb	a,r4
      000436 74 E8            [12] 1888 	mov	a,#0xE8
      000438 9D               [12] 1889 	subb	a,r5
      000439 74 26            [12] 1890 	mov	a,#0x26
      00043B 9E               [12] 1891 	subb	a,r6
      00043C E4               [12] 1892 	clr	a
      00043D 9F               [12] 1893 	subb	a,r7
      00043E 50 02            [24] 1894 	jnc	00102$
                                   1895 ;	radio/radio.c:616: return false;
      000440 C3               [12] 1896 	clr	c
      000441 22               [24] 1897 	ret
      000442                       1898 00102$:
                                   1899 ;	radio/radio.c:617: value = scale_uint32(value, 10000);
      000442 78r1D            [12] 1900 	mov	r0,#_scale_uint32_PARM_2
      000444 74 10            [12] 1901 	mov	a,#0x10
      000446 F2               [24] 1902 	movx	@r0,a
      000447 08               [12] 1903 	inc	r0
      000448 74 27            [12] 1904 	mov	a,#0x27
      00044A F2               [24] 1905 	movx	@r0,a
      00044B 08               [12] 1906 	inc	r0
      00044C E4               [12] 1907 	clr	a
      00044D F2               [24] 1908 	movx	@r0,a
      00044E 08               [12] 1909 	inc	r0
      00044F F2               [24] 1910 	movx	@r0,a
      000450 8C 82            [24] 1911 	mov	dpl,r4
      000452 8D 83            [24] 1912 	mov	dph,r5
      000454 8E F0            [24] 1913 	mov	b,r6
      000456 EF               [12] 1914 	mov	a,r7
      000457 12r08rCD         [24] 1915 	lcall	_scale_uint32
      00045A AC 82            [24] 1916 	mov	r4,dpl
      00045C AD 83            [24] 1917 	mov	r5,dph
      00045E AE F0            [24] 1918 	mov	r6,b
      000460 FF               [12] 1919 	mov	r7,a
                                   1920 ;	radio/radio.c:618: settings.channel_spacing = value;
      000461 78r09            [12] 1921 	mov	r0,#(_settings + 0x0004)
      000463 EC               [12] 1922 	mov	a,r4
      000464 F2               [24] 1923 	movx	@r0,a
      000465 08               [12] 1924 	inc	r0
      000466 ED               [12] 1925 	mov	a,r5
      000467 F2               [24] 1926 	movx	@r0,a
      000468 08               [12] 1927 	inc	r0
      000469 EE               [12] 1928 	mov	a,r6
      00046A F2               [24] 1929 	movx	@r0,a
      00046B 08               [12] 1930 	inc	r0
      00046C EF               [12] 1931 	mov	a,r7
      00046D F2               [24] 1932 	movx	@r0,a
                                   1933 ;	radio/radio.c:619: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, value);
      00046E C0 04            [24] 1934 	push	ar4
      000470 75 82 7A         [24] 1935 	mov	dpl,#0x7A
      000473 12r08r17         [24] 1936 	lcall	_register_write
      000476 15 81            [12] 1937 	dec	sp
                                   1938 ;	radio/radio.c:620: return true;
      000478 D3               [12] 1939 	setb	c
      000479 22               [24] 1940 	ret
                                   1941 ;------------------------------------------------------------
                                   1942 ;Allocation info for local variables in function 'radio_set_channel'
                                   1943 ;------------------------------------------------------------
                                   1944 ;channel                   Allocated with name '_radio_set_channel_channel_1_201'
                                   1945 ;------------------------------------------------------------
                                   1946 ;	radio/radio.c:626: radio_set_channel(uint8_t channel)
                                   1947 ;	-----------------------------------------
                                   1948 ;	 function radio_set_channel
                                   1949 ;	-----------------------------------------
      00047A                       1950 _radio_set_channel:
      00047A E5 82            [12] 1951 	mov	a,dpl
      00047C 90r01r00         [24] 1952 	mov	dptr,#_radio_set_channel_channel_1_201
      00047F F0               [24] 1953 	movx	@dptr,a
                                   1954 ;	radio/radio.c:628: if (channel != settings.current_channel) {
      000480 78r0E            [12] 1955 	mov	r0,#(_settings + 0x0009)
      000482 E2               [24] 1956 	movx	a,@r0
      000483 FF               [12] 1957 	mov	r7,a
      000484 E0               [24] 1958 	movx	a,@dptr
      000485 FE               [12] 1959 	mov	r6,a
      000486 B5 07 01         [24] 1960 	cjne	a,ar7,00108$
      000489 22               [24] 1961 	ret
      00048A                       1962 00108$:
                                   1963 ;	radio/radio.c:629: settings.current_channel = channel;
      00048A 78r0E            [12] 1964 	mov	r0,#(_settings + 0x0009)
      00048C EE               [12] 1965 	mov	a,r6
      00048D F2               [24] 1966 	movx	@r0,a
                                   1967 ;	radio/radio.c:630: register_write(EZRADIOPRO_FREQUENCY_HOPPING_CHANNEL_SELECT, channel);
      00048E C0 06            [24] 1968 	push	ar6
      000490 75 82 79         [24] 1969 	mov	dpl,#0x79
      000493 12r08r17         [24] 1970 	lcall	_register_write
      000496 15 81            [12] 1971 	dec	sp
                                   1972 ;	radio/radio.c:631: preamble_detected = 0;
      000498 C2*01            [12] 1973 	clr	_preamble_detected
      00049A 22               [24] 1974 	ret
                                   1975 ;------------------------------------------------------------
                                   1976 ;Allocation info for local variables in function 'radio_get_channel'
                                   1977 ;------------------------------------------------------------
                                   1978 ;	radio/radio.c:638: radio_get_channel(void)
                                   1979 ;	-----------------------------------------
                                   1980 ;	 function radio_get_channel
                                   1981 ;	-----------------------------------------
      00049B                       1982 _radio_get_channel:
                                   1983 ;	radio/radio.c:640: return settings.current_channel;
      00049B 78r0E            [12] 1984 	mov	r0,#(_settings + 0x0009)
      00049D E2               [24] 1985 	movx	a,@r0
      00049E F5 82            [12] 1986 	mov	dpl,a
      0004A0 22               [24] 1987 	ret
                                   1988 ;------------------------------------------------------------
                                   1989 ;Allocation info for local variables in function 'radio_configure'
                                   1990 ;------------------------------------------------------------
                                   1991 ;	radio/radio.c:737: radio_configure(__pdata uint8_t air_rate)
                                   1992 ;	-----------------------------------------
                                   1993 ;	 function radio_configure
                                   1994 ;	-----------------------------------------
      0004A1                       1995 _radio_configure:
      0004A1 AF 82            [24] 1996 	mov	r7,dpl
                                   1997 ;	radio/radio.c:742: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0x00);
      0004A3 C0 07            [24] 1998 	push	ar7
      0004A5 E4               [12] 1999 	clr	a
      0004A6 C0 E0            [24] 2000 	push	acc
      0004A8 75 82 05         [24] 2001 	mov	dpl,#0x05
      0004AB 12r08r17         [24] 2002 	lcall	_register_write
      0004AE 15 81            [12] 2003 	dec	sp
                                   2004 ;	radio/radio.c:743: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0x00);
      0004B0 E4               [12] 2005 	clr	a
      0004B1 C0 E0            [24] 2006 	push	acc
      0004B3 75 82 06         [24] 2007 	mov	dpl,#0x06
      0004B6 12r08r17         [24] 2008 	lcall	_register_write
      0004B9 15 81            [12] 2009 	dec	sp
                                   2010 ;	radio/radio.c:745: clear_status_registers();
      0004BB 12r08rC1         [24] 2011 	lcall	_clear_status_registers
                                   2012 ;	radio/radio.c:759: register_write(EZRADIOPRO_GPIO0_CONFIGURATION, 0x15);	// RX data (output)
      0004BE 74 15            [12] 2013 	mov	a,#0x15
      0004C0 C0 E0            [24] 2014 	push	acc
      0004C2 75 82 0B         [24] 2015 	mov	dpl,#0x0B
      0004C5 12r08r17         [24] 2016 	lcall	_register_write
      0004C8 15 81            [12] 2017 	dec	sp
                                   2018 ;	radio/radio.c:760: register_write(EZRADIOPRO_GPIO1_CONFIGURATION, 0x12);	// RX data (output)
      0004CA 74 12            [12] 2019 	mov	a,#0x12
      0004CC C0 E0            [24] 2020 	push	acc
      0004CE 75 82 0C         [24] 2021 	mov	dpl,#0x0C
      0004D1 12r08r17         [24] 2022 	lcall	_register_write
      0004D4 15 81            [12] 2023 	dec	sp
                                   2024 ;	radio/radio.c:762: radio_set_diversity(DIVERSITY_ENABLED);
      0004D6 75 82 00         [24] 2025 	mov	dpl,#0x00
      0004D9 12r0BrE1         [24] 2026 	lcall	_radio_set_diversity
                                   2027 ;	radio/radio.c:774: register_write(EZRADIOPRO_CRYSTAL_OSCILLATOR_LOAD_CAPACITANCE, EZRADIOPRO_OSC_CAP_VALUE);
      0004DC 74 B6            [12] 2028 	mov	a,#0xB6
      0004DE C0 E0            [24] 2029 	push	acc
      0004E0 75 82 09         [24] 2030 	mov	dpl,#0x09
      0004E3 12r08r17         [24] 2031 	lcall	_register_write
      0004E6 15 81            [12] 2032 	dec	sp
      0004E8 D0 07            [24] 2033 	pop	ar7
                                   2034 ;	radio/radio.c:777: if (air_rate > 100) {
      0004EA EF               [12] 2035 	mov	a,r7
      0004EB 24 9B            [12] 2036 	add	a,#0xff - 0x64
      0004ED 50 10            [24] 2037 	jnc	00102$
                                   2038 ;	radio/radio.c:778: register_write(EZRADIOPRO_CHARGEPUMP_CURRENT_TRIMMING_OVERRIDE, 0xC0);
      0004EF C0 07            [24] 2039 	push	ar7
      0004F1 74 C0            [12] 2040 	mov	a,#0xC0
      0004F3 C0 E0            [24] 2041 	push	acc
      0004F5 75 82 58         [24] 2042 	mov	dpl,#0x58
      0004F8 12r08r17         [24] 2043 	lcall	_register_write
      0004FB 15 81            [12] 2044 	dec	sp
      0004FD D0 07            [24] 2045 	pop	ar7
      0004FF                       2046 00102$:
                                   2047 ;	radio/radio.c:782: set_frequency_registers(settings.frequency);
      0004FF 78r05            [12] 2048 	mov	r0,#_settings
      000501 E2               [24] 2049 	movx	a,@r0
      000502 FB               [12] 2050 	mov	r3,a
      000503 08               [12] 2051 	inc	r0
      000504 E2               [24] 2052 	movx	a,@r0
      000505 FC               [12] 2053 	mov	r4,a
      000506 08               [12] 2054 	inc	r0
      000507 E2               [24] 2055 	movx	a,@r0
      000508 FD               [12] 2056 	mov	r5,a
      000509 08               [12] 2057 	inc	r0
      00050A E2               [24] 2058 	movx	a,@r0
      00050B 8B 82            [24] 2059 	mov	dpl,r3
      00050D 8C 83            [24] 2060 	mov	dph,r4
      00050F 8D F0            [24] 2061 	mov	b,r5
      000511 C0 07            [24] 2062 	push	ar7
      000513 12r09r8D         [24] 2063 	lcall	_set_frequency_registers
                                   2064 ;	radio/radio.c:783: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, settings.channel_spacing);
      000516 78r09            [12] 2065 	mov	r0,#(_settings + 0x0004)
      000518 E2               [24] 2066 	movx	a,@r0
      000519 FB               [12] 2067 	mov	r3,a
      00051A 08               [12] 2068 	inc	r0
      00051B E2               [24] 2069 	movx	a,@r0
      00051C 08               [12] 2070 	inc	r0
      00051D E2               [24] 2071 	movx	a,@r0
      00051E 08               [12] 2072 	inc	r0
      00051F E2               [24] 2073 	movx	a,@r0
      000520 C0 03            [24] 2074 	push	ar3
      000522 75 82 7A         [24] 2075 	mov	dpl,#0x7A
      000525 12r08r17         [24] 2076 	lcall	_register_write
      000528 15 81            [12] 2077 	dec	sp
      00052A D0 07            [24] 2078 	pop	ar7
                                   2079 ;	radio/radio.c:785: if (feature_golay) {
      00052C 30*00 29         [24] 2080 	jnb	_feature_golay,00104$
                                   2081 ;	radio/radio.c:789: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
      00052F C0 07            [24] 2082 	push	ar7
      000531 74 88            [12] 2083 	mov	a,#0x88
      000533 C0 E0            [24] 2084 	push	acc
      000535 75 82 30         [24] 2085 	mov	dpl,#0x30
      000538 12r08r17         [24] 2086 	lcall	_register_write
      00053B 15 81            [12] 2087 	dec	sp
                                   2088 ;	radio/radio.c:793: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_0BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
      00053D 74 02            [12] 2089 	mov	a,#0x02
      00053F C0 E0            [24] 2090 	push	acc
      000541 75 82 33         [24] 2091 	mov	dpl,#0x33
      000544 12r08r17         [24] 2092 	lcall	_register_write
      000547 15 81            [12] 2093 	dec	sp
                                   2094 ;	radio/radio.c:796: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x00);
      000549 E4               [12] 2095 	clr	a
      00054A C0 E0            [24] 2096 	push	acc
      00054C 75 82 32         [24] 2097 	mov	dpl,#0x32
      00054F 12r08r17         [24] 2098 	lcall	_register_write
      000552 15 81            [12] 2099 	dec	sp
      000554 D0 07            [24] 2100 	pop	ar7
      000556 80 40            [24] 2101 	sjmp	00105$
      000558                       2102 00104$:
                                   2103 ;	radio/radio.c:798: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
      000558 C0 07            [24] 2104 	push	ar7
      00055A 74 8D            [12] 2105 	mov	a,#0x8D
      00055C C0 E0            [24] 2106 	push	acc
      00055E 75 82 30         [24] 2107 	mov	dpl,#0x30
      000561 12r08r17         [24] 2108 	lcall	_register_write
      000564 15 81            [12] 2109 	dec	sp
                                   2110 ;	radio/radio.c:804: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_2BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
      000566 74 22            [12] 2111 	mov	a,#0x22
      000568 C0 E0            [24] 2112 	push	acc
      00056A 75 82 33         [24] 2113 	mov	dpl,#0x33
      00056D 12r08r17         [24] 2114 	lcall	_register_write
      000570 15 81            [12] 2115 	dec	sp
                                   2116 ;	radio/radio.c:806: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x0C);
      000572 74 0C            [12] 2117 	mov	a,#0x0C
      000574 C0 E0            [24] 2118 	push	acc
      000576 75 82 32         [24] 2119 	mov	dpl,#0x32
      000579 12r08r17         [24] 2120 	lcall	_register_write
      00057C 15 81            [12] 2121 	dec	sp
                                   2122 ;	radio/radio.c:807: register_write(EZRADIOPRO_HEADER_ENABLE_3, 0xFF);
      00057E 74 FF            [12] 2123 	mov	a,#0xFF
      000580 C0 E0            [24] 2124 	push	acc
      000582 75 82 43         [24] 2125 	mov	dpl,#0x43
      000585 12r08r17         [24] 2126 	lcall	_register_write
      000588 15 81            [12] 2127 	dec	sp
                                   2128 ;	radio/radio.c:808: register_write(EZRADIOPRO_HEADER_ENABLE_2, 0xFF);
      00058A 74 FF            [12] 2129 	mov	a,#0xFF
      00058C C0 E0            [24] 2130 	push	acc
      00058E 75 82 44         [24] 2131 	mov	dpl,#0x44
      000591 12r08r17         [24] 2132 	lcall	_register_write
      000594 15 81            [12] 2133 	dec	sp
      000596 D0 07            [24] 2134 	pop	ar7
      000598                       2135 00105$:
                                   2136 ;	radio/radio.c:813: register_write(EZRADIOPRO_TX_FIFO_CONTROL_1, TX_FIFO_THRESHOLD_HIGH);
      000598 C0 07            [24] 2137 	push	ar7
      00059A 74 3C            [12] 2138 	mov	a,#0x3C
      00059C C0 E0            [24] 2139 	push	acc
      00059E 75 82 7C         [24] 2140 	mov	dpl,#0x7C
      0005A1 12r08r17         [24] 2141 	lcall	_register_write
      0005A4 15 81            [12] 2142 	dec	sp
                                   2143 ;	radio/radio.c:814: register_write(EZRADIOPRO_TX_FIFO_CONTROL_2, TX_FIFO_THRESHOLD_LOW);
      0005A6 74 20            [12] 2144 	mov	a,#0x20
      0005A8 C0 E0            [24] 2145 	push	acc
      0005AA 75 82 7D         [24] 2146 	mov	dpl,#0x7D
      0005AD 12r08r17         [24] 2147 	lcall	_register_write
      0005B0 15 81            [12] 2148 	dec	sp
                                   2149 ;	radio/radio.c:815: register_write(EZRADIOPRO_RX_FIFO_CONTROL, RX_FIFO_THRESHOLD_HIGH);
      0005B2 74 32            [12] 2150 	mov	a,#0x32
      0005B4 C0 E0            [24] 2151 	push	acc
      0005B6 75 82 7E         [24] 2152 	mov	dpl,#0x7E
      0005B9 12r08r17         [24] 2153 	lcall	_register_write
      0005BC 15 81            [12] 2154 	dec	sp
                                   2155 ;	radio/radio.c:817: settings.preamble_length = 16;
      0005BE 78r10            [12] 2156 	mov	r0,#(_settings + 0x000b)
      0005C0 74 10            [12] 2157 	mov	a,#0x10
      0005C2 F2               [24] 2158 	movx	@r0,a
                                   2159 ;	radio/radio.c:819: register_write(EZRADIOPRO_PREAMBLE_LENGTH, settings.preamble_length); // nibbles 
      0005C3 78r10            [12] 2160 	mov	r0,#(_settings + 0x000b)
      0005C5 E2               [24] 2161 	movx	a,@r0
      0005C6 FE               [12] 2162 	mov	r6,a
      0005C7 C0 06            [24] 2163 	push	ar6
      0005C9 75 82 34         [24] 2164 	mov	dpl,#0x34
      0005CC 12r08r17         [24] 2165 	lcall	_register_write
      0005CF 15 81            [12] 2166 	dec	sp
                                   2167 ;	radio/radio.c:820: register_write(EZRADIOPRO_PREAMBLE_DETECTION_CONTROL, 5<<3); // 5 nibbles
      0005D1 74 28            [12] 2168 	mov	a,#0x28
      0005D3 C0 E0            [24] 2169 	push	acc
      0005D5 75 82 35         [24] 2170 	mov	dpl,#0x35
      0005D8 12r08r17         [24] 2171 	lcall	_register_write
      0005DB 15 81            [12] 2172 	dec	sp
                                   2173 ;	radio/radio.c:823: radio_set_transmit_power(0);
      0005DD 75 82 00         [24] 2174 	mov	dpl,#0x00
      0005E0 12r07r7A         [24] 2175 	lcall	_radio_set_transmit_power
      0005E3 D0 07            [24] 2176 	pop	ar7
                                   2177 ;	radio/radio.c:826: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
      0005E5 7E 00            [12] 2178 	mov	r6,#0x00
      0005E7                       2179 00131$:
                                   2180 ;	radio/radio.c:827: if (air_data_rates[i] >= air_rate) break;
      0005E7 EE               [12] 2181 	mov	a,r6
      0005E8 90r00r1D         [24] 2182 	mov	dptr,#_air_data_rates
      0005EB 93               [24] 2183 	movc	a,@a+dptr
      0005EC FD               [12] 2184 	mov	r5,a
      0005ED C3               [12] 2185 	clr	c
      0005EE 9F               [12] 2186 	subb	a,r7
      0005EF 50 06            [24] 2187 	jnc	00108$
                                   2188 ;	radio/radio.c:826: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
      0005F1 0E               [12] 2189 	inc	r6
      0005F2 BE 0C 00         [24] 2190 	cjne	r6,#0x0C,00205$
      0005F5                       2191 00205$:
      0005F5 40 F0            [24] 2192 	jc	00131$
      0005F7                       2193 00108$:
                                   2194 ;	radio/radio.c:829: rate_selection = i;
                                   2195 ;	radio/radio.c:831: settings.air_data_rate = air_data_rates[rate_selection];
      0005F7 EE               [12] 2196 	mov	a,r6
      0005F8 FF               [12] 2197 	mov	r7,a
      0005F9 90r00r1D         [24] 2198 	mov	dptr,#_air_data_rates
      0005FC 93               [24] 2199 	movc	a,@a+dptr
      0005FD FE               [12] 2200 	mov	r6,a
      0005FE 78r0D            [12] 2201 	mov	r0,#(_settings + 0x0008)
      000600 F2               [24] 2202 	movx	@r0,a
                                   2203 ;	radio/radio.c:833: if (settings.air_data_rate >= 32) {
      000601 BE 20 00         [24] 2204 	cjne	r6,#0x20,00207$
      000604                       2205 00207$:
      000604 40 04            [24] 2206 	jc	00110$
                                   2207 ;	radio/radio.c:834: control = 0x0D;
      000606 7E 0D            [12] 2208 	mov	r6,#0x0D
      000608 80 02            [24] 2209 	sjmp	00111$
      00060A                       2210 00110$:
                                   2211 ;	radio/radio.c:836: control = 0x2D;
      00060A 7E 2D            [12] 2212 	mov	r6,#0x2D
      00060C                       2213 00111$:
                                   2214 ;	radio/radio.c:838: if (param_get(PARAM_MANCHESTER) && settings.air_data_rate <= 128) {
      00060C 75 82 0D         [24] 2215 	mov	dpl,#0x0D
      00060F C0 07            [24] 2216 	push	ar7
      000611 C0 06            [24] 2217 	push	ar6
      000613 12r00r00         [24] 2218 	lcall	_param_get
      000616 AA 82            [24] 2219 	mov	r2,dpl
      000618 AB 83            [24] 2220 	mov	r3,dph
      00061A AC F0            [24] 2221 	mov	r4,b
      00061C FD               [12] 2222 	mov	r5,a
      00061D D0 06            [24] 2223 	pop	ar6
      00061F D0 07            [24] 2224 	pop	ar7
      000621 EA               [12] 2225 	mov	a,r2
      000622 4B               [12] 2226 	orl	a,r3
      000623 4C               [12] 2227 	orl	a,r4
      000624 4D               [12] 2228 	orl	a,r5
      000625 60 0B            [24] 2229 	jz	00113$
      000627 78r0D            [12] 2230 	mov	r0,#(_settings + 0x0008)
      000629 E2               [24] 2231 	movx	a,@r0
      00062A FD               [12] 2232 	mov  r5,a
      00062B 24 7F            [12] 2233 	add	a,#0xff - 0x80
      00062D 40 03            [24] 2234 	jc	00113$
                                   2235 ;	radio/radio.c:840: control |= EZRADIOPRO_ENMANCH;
      00062F 43 06 02         [24] 2236 	orl	ar6,#0x02
      000632                       2237 00113$:
                                   2238 ;	radio/radio.c:842: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_1, control);
      000632 C0 07            [24] 2239 	push	ar7
      000634 C0 06            [24] 2240 	push	ar6
      000636 75 82 70         [24] 2241 	mov	dpl,#0x70
      000639 12r08r17         [24] 2242 	lcall	_register_write
      00063C 15 81            [12] 2243 	dec	sp
                                   2244 ;	radio/radio.c:844: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_2, 0x23);
      00063E 74 23            [12] 2245 	mov	a,#0x23
      000640 C0 E0            [24] 2246 	push	acc
      000642 75 82 71         [24] 2247 	mov	dpl,#0x71
      000645 12r08r17         [24] 2248 	lcall	_register_write
      000648 15 81            [12] 2249 	dec	sp
                                   2250 ;	radio/radio.c:848: register_write(EZRADIOPRO_AFC_LOOP_GEARSHIFT_OVERRIDE, 0x44);
      00064A 74 44            [12] 2251 	mov	a,#0x44
      00064C C0 E0            [24] 2252 	push	acc
      00064E 75 82 1D         [24] 2253 	mov	dpl,#0x1D
      000651 12r08r17         [24] 2254 	lcall	_register_write
      000654 15 81            [12] 2255 	dec	sp
      000656 D0 07            [24] 2256 	pop	ar7
                                   2257 ;	radio/radio.c:852: if (settings.air_data_rate < 200) {
      000658 78r0D            [12] 2258 	mov	r0,#(_settings + 0x0008)
      00065A E2               [24] 2259 	movx	a,@r0
      00065B FE               [12] 2260 	mov	r6,a
      00065C BE C8 00         [24] 2261 	cjne	r6,#0xC8,00211$
      00065F                       2262 00211$:
      00065F 50 12            [24] 2263 	jnc	00116$
                                   2264 ;	radio/radio.c:853: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x0A);
      000661 C0 07            [24] 2265 	push	ar7
      000663 74 0A            [12] 2266 	mov	a,#0x0A
      000665 C0 E0            [24] 2267 	push	acc
      000667 75 82 1E         [24] 2268 	mov	dpl,#0x1E
      00066A 12r08r17         [24] 2269 	lcall	_register_write
      00066D 15 81            [12] 2270 	dec	sp
      00066F D0 07            [24] 2271 	pop	ar7
      000671 80 10            [24] 2272 	sjmp	00117$
      000673                       2273 00116$:
                                   2274 ;	radio/radio.c:855: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x02);
      000673 C0 07            [24] 2275 	push	ar7
      000675 74 02            [12] 2276 	mov	a,#0x02
      000677 C0 E0            [24] 2277 	push	acc
      000679 75 82 1E         [24] 2278 	mov	dpl,#0x1E
      00067C 12r08r17         [24] 2279 	lcall	_register_write
      00067F 15 81            [12] 2280 	dec	sp
      000681 D0 07            [24] 2281 	pop	ar7
      000683                       2282 00117$:
                                   2283 ;	radio/radio.c:859: if (g_board_frequency == FREQ_433) {
      000683 78r00            [12] 2284 	mov	r0,#_g_board_frequency
      000685 E2               [24] 2285 	movx	a,@r0
      000686 B4 43 3A         [24] 2286 	cjne	a,#0x43,00129$
                                   2287 ;	radio/radio.c:860: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      000689 7E 00            [12] 2288 	mov	r6,#0x00
      00068B                       2289 00133$:
                                   2290 ;	radio/radio.c:862: reg_table_433[i][rate_selection]);
      00068B EE               [12] 2291 	mov	a,r6
      00068C 75 F0 0D         [24] 2292 	mov	b,#0x0D
      00068F A4               [48] 2293 	mul	ab
      000690 24r2A            [12] 2294 	add	a,#_reg_table_433
      000692 FC               [12] 2295 	mov	r4,a
      000693 74s00            [12] 2296 	mov	a,#(_reg_table_433 >> 8)
      000695 35 F0            [12] 2297 	addc	a,b
      000697 FD               [12] 2298 	mov	r5,a
      000698 EF               [12] 2299 	mov	a,r7
      000699 2C               [12] 2300 	add	a,r4
      00069A F5 82            [12] 2301 	mov	dpl,a
      00069C E4               [12] 2302 	clr	a
      00069D 3D               [12] 2303 	addc	a,r5
      00069E F5 83            [12] 2304 	mov	dph,a
      0006A0 E4               [12] 2305 	clr	a
      0006A1 93               [24] 2306 	movc	a,@a+dptr
      0006A2 FD               [12] 2307 	mov	r5,a
                                   2308 ;	radio/radio.c:861: register_write(reg_index[i],
      0006A3 EE               [12] 2309 	mov	a,r6
      0006A4 90r00r11         [24] 2310 	mov	dptr,#_reg_index
      0006A7 93               [24] 2311 	movc	a,@a+dptr
      0006A8 FC               [12] 2312 	mov	r4,a
      0006A9 C0 07            [24] 2313 	push	ar7
      0006AB C0 06            [24] 2314 	push	ar6
      0006AD C0 05            [24] 2315 	push	ar5
      0006AF 8C 82            [24] 2316 	mov	dpl,r4
      0006B1 12r08r17         [24] 2317 	lcall	_register_write
      0006B4 15 81            [12] 2318 	dec	sp
      0006B6 D0 06            [24] 2319 	pop	ar6
      0006B8 D0 07            [24] 2320 	pop	ar7
                                   2321 ;	radio/radio.c:860: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      0006BA 0E               [12] 2322 	inc	r6
      0006BB BE 0C 00         [24] 2323 	cjne	r6,#0x0C,00215$
      0006BE                       2324 00215$:
      0006BE 40 CB            [24] 2325 	jc	00133$
      0006C0 02r07r78         [24] 2326 	ljmp	00130$
      0006C3                       2327 00129$:
                                   2328 ;	radio/radio.c:864: } else if (g_board_frequency == FREQ_470) {
      0006C3 78r00            [12] 2329 	mov	r0,#_g_board_frequency
      0006C5 E2               [24] 2330 	movx	a,@r0
      0006C6 B4 47 39         [24] 2331 	cjne	a,#0x47,00126$
                                   2332 ;	radio/radio.c:865: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      0006C9 7E 00            [12] 2333 	mov	r6,#0x00
      0006CB                       2334 00135$:
                                   2335 ;	radio/radio.c:867: reg_table_470[i][rate_selection]);
      0006CB EE               [12] 2336 	mov	a,r6
      0006CC 75 F0 0D         [24] 2337 	mov	b,#0x0D
      0006CF A4               [48] 2338 	mul	ab
      0006D0 24rC6            [12] 2339 	add	a,#_reg_table_470
      0006D2 FC               [12] 2340 	mov	r4,a
      0006D3 74s00            [12] 2341 	mov	a,#(_reg_table_470 >> 8)
      0006D5 35 F0            [12] 2342 	addc	a,b
      0006D7 FD               [12] 2343 	mov	r5,a
      0006D8 EF               [12] 2344 	mov	a,r7
      0006D9 2C               [12] 2345 	add	a,r4
      0006DA F5 82            [12] 2346 	mov	dpl,a
      0006DC E4               [12] 2347 	clr	a
      0006DD 3D               [12] 2348 	addc	a,r5
      0006DE F5 83            [12] 2349 	mov	dph,a
      0006E0 E4               [12] 2350 	clr	a
      0006E1 93               [24] 2351 	movc	a,@a+dptr
      0006E2 FD               [12] 2352 	mov	r5,a
                                   2353 ;	radio/radio.c:866: register_write(reg_index[i],
      0006E3 EE               [12] 2354 	mov	a,r6
      0006E4 90r00r11         [24] 2355 	mov	dptr,#_reg_index
      0006E7 93               [24] 2356 	movc	a,@a+dptr
      0006E8 FC               [12] 2357 	mov	r4,a
      0006E9 C0 07            [24] 2358 	push	ar7
      0006EB C0 06            [24] 2359 	push	ar6
      0006ED C0 05            [24] 2360 	push	ar5
      0006EF 8C 82            [24] 2361 	mov	dpl,r4
      0006F1 12r08r17         [24] 2362 	lcall	_register_write
      0006F4 15 81            [12] 2363 	dec	sp
      0006F6 D0 06            [24] 2364 	pop	ar6
      0006F8 D0 07            [24] 2365 	pop	ar7
                                   2366 ;	radio/radio.c:865: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      0006FA 0E               [12] 2367 	inc	r6
      0006FB BE 0C 00         [24] 2368 	cjne	r6,#0x0C,00219$
      0006FE                       2369 00219$:
      0006FE 40 CB            [24] 2370 	jc	00135$
      000700 80 76            [24] 2371 	sjmp	00130$
      000702                       2372 00126$:
                                   2373 ;	radio/radio.c:869: } else if (g_board_frequency == FREQ_868) {
      000702 78r00            [12] 2374 	mov	r0,#_g_board_frequency
      000704 E2               [24] 2375 	movx	a,@r0
      000705 B4 86 39         [24] 2376 	cjne	a,#0x86,00160$
                                   2377 ;	radio/radio.c:870: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      000708 7E 00            [12] 2378 	mov	r6,#0x00
      00070A                       2379 00137$:
                                   2380 ;	radio/radio.c:872: reg_table_868[i][rate_selection]);
      00070A EE               [12] 2381 	mov	a,r6
      00070B 75 F0 0D         [24] 2382 	mov	b,#0x0D
      00070E A4               [48] 2383 	mul	ab
      00070F 24r62            [12] 2384 	add	a,#_reg_table_868
      000711 FC               [12] 2385 	mov	r4,a
      000712 74s01            [12] 2386 	mov	a,#(_reg_table_868 >> 8)
      000714 35 F0            [12] 2387 	addc	a,b
      000716 FD               [12] 2388 	mov	r5,a
      000717 EF               [12] 2389 	mov	a,r7
      000718 2C               [12] 2390 	add	a,r4
      000719 F5 82            [12] 2391 	mov	dpl,a
      00071B E4               [12] 2392 	clr	a
      00071C 3D               [12] 2393 	addc	a,r5
      00071D F5 83            [12] 2394 	mov	dph,a
      00071F E4               [12] 2395 	clr	a
      000720 93               [24] 2396 	movc	a,@a+dptr
      000721 FD               [12] 2397 	mov	r5,a
                                   2398 ;	radio/radio.c:871: register_write(reg_index[i],
      000722 EE               [12] 2399 	mov	a,r6
      000723 90r00r11         [24] 2400 	mov	dptr,#_reg_index
      000726 93               [24] 2401 	movc	a,@a+dptr
      000727 FC               [12] 2402 	mov	r4,a
      000728 C0 07            [24] 2403 	push	ar7
      00072A C0 06            [24] 2404 	push	ar6
      00072C C0 05            [24] 2405 	push	ar5
      00072E 8C 82            [24] 2406 	mov	dpl,r4
      000730 12r08r17         [24] 2407 	lcall	_register_write
      000733 15 81            [12] 2408 	dec	sp
      000735 D0 06            [24] 2409 	pop	ar6
      000737 D0 07            [24] 2410 	pop	ar7
                                   2411 ;	radio/radio.c:870: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      000739 0E               [12] 2412 	inc	r6
      00073A BE 0C 00         [24] 2413 	cjne	r6,#0x0C,00223$
      00073D                       2414 00223$:
      00073D 40 CB            [24] 2415 	jc	00137$
                                   2416 ;	radio/radio.c:875: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      00073F 80 37            [24] 2417 	sjmp	00130$
      000741                       2418 00160$:
      000741 7E 00            [12] 2419 	mov	r6,#0x00
      000743                       2420 00139$:
                                   2421 ;	radio/radio.c:877: reg_table_915[i][rate_selection]);
      000743 EE               [12] 2422 	mov	a,r6
      000744 75 F0 0D         [24] 2423 	mov	b,#0x0D
      000747 A4               [48] 2424 	mul	ab
      000748 24rFE            [12] 2425 	add	a,#_reg_table_915
      00074A FC               [12] 2426 	mov	r4,a
      00074B 74s01            [12] 2427 	mov	a,#(_reg_table_915 >> 8)
      00074D 35 F0            [12] 2428 	addc	a,b
      00074F FD               [12] 2429 	mov	r5,a
      000750 EF               [12] 2430 	mov	a,r7
      000751 2C               [12] 2431 	add	a,r4
      000752 F5 82            [12] 2432 	mov	dpl,a
      000754 E4               [12] 2433 	clr	a
      000755 3D               [12] 2434 	addc	a,r5
      000756 F5 83            [12] 2435 	mov	dph,a
      000758 E4               [12] 2436 	clr	a
      000759 93               [24] 2437 	movc	a,@a+dptr
      00075A FD               [12] 2438 	mov	r5,a
                                   2439 ;	radio/radio.c:876: register_write(reg_index[i],
      00075B EE               [12] 2440 	mov	a,r6
      00075C 90r00r11         [24] 2441 	mov	dptr,#_reg_index
      00075F 93               [24] 2442 	movc	a,@a+dptr
      000760 FC               [12] 2443 	mov	r4,a
      000761 C0 07            [24] 2444 	push	ar7
      000763 C0 06            [24] 2445 	push	ar6
      000765 C0 05            [24] 2446 	push	ar5
      000767 8C 82            [24] 2447 	mov	dpl,r4
      000769 12r08r17         [24] 2448 	lcall	_register_write
      00076C 15 81            [12] 2449 	dec	sp
      00076E D0 06            [24] 2450 	pop	ar6
      000770 D0 07            [24] 2451 	pop	ar7
                                   2452 ;	radio/radio.c:875: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
      000772 0E               [12] 2453 	inc	r6
      000773 BE 0C 00         [24] 2454 	cjne	r6,#0x0C,00225$
      000776                       2455 00225$:
      000776 40 CB            [24] 2456 	jc	00139$
      000778                       2457 00130$:
                                   2458 ;	radio/radio.c:881: return true;
      000778 D3               [12] 2459 	setb	c
      000779 22               [24] 2460 	ret
                                   2461 ;------------------------------------------------------------
                                   2462 ;Allocation info for local variables in function 'radio_set_transmit_power'
                                   2463 ;------------------------------------------------------------
                                   2464 ;power                     Allocated with name '_radio_set_transmit_power_power_1_225'
                                   2465 ;i                         Allocated with name '_radio_set_transmit_power_i_1_226'
                                   2466 ;------------------------------------------------------------
                                   2467 ;	radio/radio.c:902: radio_set_transmit_power(uint8_t power)
                                   2468 ;	-----------------------------------------
                                   2469 ;	 function radio_set_transmit_power
                                   2470 ;	-----------------------------------------
      00077A                       2471 _radio_set_transmit_power:
      00077A E5 82            [12] 2472 	mov	a,dpl
      00077C 90r01r01         [24] 2473 	mov	dptr,#_radio_set_transmit_power_power_1_225
      00077F F0               [24] 2474 	movx	@dptr,a
                                   2475 ;	radio/radio.c:907: register_write(EZRADIOPRO_TX_POWER, RFD900_INT_TX_POW); // Set output power of Si1002 to 6 = +10dBm as a nominal level
      000780 74 04            [12] 2476 	mov	a,#0x04
      000782 C0 E0            [24] 2477 	push	acc
      000784 75 82 6D         [24] 2478 	mov	dpl,#0x6D
      000787 12r08r17         [24] 2479 	lcall	_register_write
      00078A 15 81            [12] 2480 	dec	sp
                                   2481 ;	radio/radio.c:908: i = calibration_get(power);
      00078C 90r01r01         [24] 2482 	mov	dptr,#_radio_set_transmit_power_power_1_225
      00078F E0               [24] 2483 	movx	a,@dptr
      000790 FF               [12] 2484 	mov	r7,a
      000791 F5 82            [12] 2485 	mov	dpl,a
      000793 C0 07            [24] 2486 	push	ar7
      000795 12r00r00         [24] 2487 	lcall	_calibration_get
      000798 AE 82            [24] 2488 	mov	r6,dpl
      00079A D0 07            [24] 2489 	pop	ar7
                                   2490 ;	radio/radio.c:909: if (i != 0xFF)
      00079C BE FF 02         [24] 2491 	cjne	r6,#0xFF,00109$
      00079F 80 07            [24] 2492 	sjmp	00102$
      0007A1                       2493 00109$:
                                   2494 ;	radio/radio.c:911: PCA0CPH0 = i;     // Set PWM for PA to correct duty cycle
      0007A1 8E FC            [24] 2495 	mov	_PCA0CPH0,r6
                                   2496 ;	radio/radio.c:912: settings.transmit_power = power;
      0007A3 78r0F            [12] 2497 	mov	r0,#(_settings + 0x000a)
      0007A5 EF               [12] 2498 	mov	a,r7
      0007A6 F2               [24] 2499 	movx	@r0,a
      0007A7 22               [24] 2500 	ret
      0007A8                       2501 00102$:
                                   2502 ;	radio/radio.c:916: i = power / POWER_LEVEL_STEP;
      0007A8 EF               [12] 2503 	mov	a,r7
      0007A9 C3               [12] 2504 	clr	c
      0007AA 13               [12] 2505 	rrc	a
                                   2506 ;	radio/radio.c:917: PCA0CPH0 = power_levels[i];     // Set PWM for PA to correct duty cycle
      0007AB FF               [12] 2507 	mov	r7,a
      0007AC 90r02r9A         [24] 2508 	mov	dptr,#_power_levels
      0007AF 93               [24] 2509 	movc	a,@a+dptr
      0007B0 F5 FC            [12] 2510 	mov	_PCA0CPH0,a
                                   2511 ;	radio/radio.c:918: settings.transmit_power = i * POWER_LEVEL_STEP;
      0007B2 EF               [12] 2512 	mov	a,r7
      0007B3 2F               [12] 2513 	add	a,r7
      0007B4 FF               [12] 2514 	mov	r7,a
      0007B5 78r0F            [12] 2515 	mov	r0,#(_settings + 0x000a)
      0007B7 EF               [12] 2516 	mov	a,r7
      0007B8 F2               [24] 2517 	movx	@r0,a
      0007B9 22               [24] 2518 	ret
                                   2519 ;------------------------------------------------------------
                                   2520 ;Allocation info for local variables in function 'radio_get_transmit_power'
                                   2521 ;------------------------------------------------------------
                                   2522 ;	radio/radio.c:935: radio_get_transmit_power(void)
                                   2523 ;	-----------------------------------------
                                   2524 ;	 function radio_get_transmit_power
                                   2525 ;	-----------------------------------------
      0007BA                       2526 _radio_get_transmit_power:
                                   2527 ;	radio/radio.c:937: return settings.transmit_power;
      0007BA 78r0F            [12] 2528 	mov	r0,#(_settings + 0x000a)
      0007BC E2               [24] 2529 	movx	a,@r0
      0007BD F5 82            [12] 2530 	mov	dpl,a
      0007BF 22               [24] 2531 	ret
                                   2532 ;------------------------------------------------------------
                                   2533 ;Allocation info for local variables in function 'radio_set_network_id'
                                   2534 ;------------------------------------------------------------
                                   2535 ;id                        Allocated with name '_radio_set_network_id_id_1_231'
                                   2536 ;------------------------------------------------------------
                                   2537 ;	radio/radio.c:943: radio_set_network_id(uint16_t id)
                                   2538 ;	-----------------------------------------
                                   2539 ;	 function radio_set_network_id
                                   2540 ;	-----------------------------------------
      0007C0                       2541 _radio_set_network_id:
      0007C0 AF 83            [24] 2542 	mov	r7,dph
      0007C2 E5 82            [12] 2543 	mov	a,dpl
      0007C4 90r01r02         [24] 2544 	mov	dptr,#_radio_set_network_id_id_1_231
      0007C7 F0               [24] 2545 	movx	@dptr,a
      0007C8 EF               [12] 2546 	mov	a,r7
      0007C9 A3               [24] 2547 	inc	dptr
      0007CA F0               [24] 2548 	movx	@dptr,a
                                   2549 ;	radio/radio.c:945: netid[0] = id&0xFF;
      0007CB 90r01r02         [24] 2550 	mov	dptr,#_radio_set_network_id_id_1_231
      0007CE E0               [24] 2551 	movx	a,@dptr
      0007CF FE               [12] 2552 	mov	r6,a
      0007D0 A3               [24] 2553 	inc	dptr
      0007D1 E0               [24] 2554 	movx	a,@dptr
      0007D2 FF               [12] 2555 	mov	r7,a
      0007D3 8E 04            [24] 2556 	mov	ar4,r6
      0007D5 78r03            [12] 2557 	mov	r0,#_netid
      0007D7 EC               [12] 2558 	mov	a,r4
      0007D8 F2               [24] 2559 	movx	@r0,a
                                   2560 ;	radio/radio.c:946: netid[1] = id>>8;
      0007D9 8F 05            [24] 2561 	mov	ar5,r7
      0007DB 78r04            [12] 2562 	mov	r0,#(_netid + 0x0001)
      0007DD ED               [12] 2563 	mov	a,r5
      0007DE F2               [24] 2564 	movx	@r0,a
                                   2565 ;	radio/radio.c:947: if (!feature_golay) {
      0007DF 20*00 34         [24] 2566 	jb	_feature_golay,00103$
                                   2567 ;	radio/radio.c:950: register_write(EZRADIOPRO_TRANSMIT_HEADER_3, id >> 8);
      0007E2 C0 07            [24] 2568 	push	ar7
      0007E4 C0 06            [24] 2569 	push	ar6
      0007E6 C0 05            [24] 2570 	push	ar5
      0007E8 C0 05            [24] 2571 	push	ar5
      0007EA 75 82 3A         [24] 2572 	mov	dpl,#0x3A
      0007ED 12r08r17         [24] 2573 	lcall	_register_write
      0007F0 15 81            [12] 2574 	dec	sp
      0007F2 D0 05            [24] 2575 	pop	ar5
      0007F4 D0 06            [24] 2576 	pop	ar6
      0007F6 D0 07            [24] 2577 	pop	ar7
                                   2578 ;	radio/radio.c:951: register_write(EZRADIOPRO_TRANSMIT_HEADER_2, id & 0xFF);
      0007F8 C0 06            [24] 2579 	push	ar6
      0007FA C0 05            [24] 2580 	push	ar5
      0007FC C0 06            [24] 2581 	push	ar6
      0007FE 75 82 3B         [24] 2582 	mov	dpl,#0x3B
      000801 12r08r17         [24] 2583 	lcall	_register_write
      000804 15 81            [12] 2584 	dec	sp
                                   2585 ;	radio/radio.c:952: register_write(EZRADIOPRO_CHECK_HEADER_3, id >> 8);
      000806 75 82 3F         [24] 2586 	mov	dpl,#0x3F
      000809 12r08r17         [24] 2587 	lcall	_register_write
      00080C 15 81            [12] 2588 	dec	sp
                                   2589 ;	radio/radio.c:953: register_write(EZRADIOPRO_CHECK_HEADER_2, id & 0xFF);
      00080E 75 82 40         [24] 2590 	mov	dpl,#0x40
      000811 12r08r17         [24] 2591 	lcall	_register_write
      000814 15 81            [12] 2592 	dec	sp
      000816                       2593 00103$:
      000816 22               [24] 2594 	ret
                                   2595 ;------------------------------------------------------------
                                   2596 ;Allocation info for local variables in function 'register_write'
                                   2597 ;------------------------------------------------------------
                                   2598 ;value                     Allocated to stack - sp -2
                                   2599 ;reg                       Allocated to registers r7 
                                   2600 ;EX0_saved                 Allocated to registers b0 
                                   2601 ;------------------------------------------------------------
                                   2602 ;	radio/radio.c:964: register_write(uint8_t reg, uint8_t value) __reentrant
                                   2603 ;	-----------------------------------------
                                   2604 ;	 function register_write
                                   2605 ;	-----------------------------------------
      000817                       2606 _register_write:
      000817 AF 82            [24] 2607 	mov	r7,dpl
                                   2608 ;	radio/radio.c:966: EX0_SAVE_DISABLE;
      000819 A2 A8            [12] 2609 	mov	c,_EX0
      00081B 92*00            [24] 2610 	mov	b0,c
      00081D C2 A8            [12] 2611 	clr	_EX0
                                   2612 ;	radio/radio.c:968: RADIO_PAGE();
      00081F 75 A7 02         [24] 2613 	mov	_SFRPAGE,#0x02
                                   2614 ;	radio/radio.c:969: NSS1 = 0;                           // drive NSS low
      000822 C2 A3            [12] 2615 	clr	_NSS1
                                   2616 ;	radio/radio.c:970: SPIF1 = 0;                          // clear SPIF
      000824 C2 FF            [12] 2617 	clr	_SPIF1
                                   2618 ;	radio/radio.c:971: SPI1DAT = (reg | 0x80);             // write reg address
      000826 74 80            [12] 2619 	mov	a,#0x80
      000828 4F               [12] 2620 	orl	a,r7
      000829 F5 A3            [12] 2621 	mov	_SPI1DAT,a
                                   2622 ;	radio/radio.c:972: while (!TXBMT1);                    // wait on TXBMT
      00082B                       2623 00101$:
      00082B 30 F9 FD         [24] 2624 	jnb	_TXBMT1,00101$
                                   2625 ;	radio/radio.c:973: SPI1DAT = value;                    // write value
      00082E A8 81            [24] 2626 	mov	r0,sp
      000830 18               [12] 2627 	dec	r0
      000831 18               [12] 2628 	dec	r0
      000832 86 A3            [24] 2629 	mov	_SPI1DAT,@r0
                                   2630 ;	radio/radio.c:974: while (!TXBMT1);                    // wait on TXBMT
      000834                       2631 00104$:
      000834 30 F9 FD         [24] 2632 	jnb	_TXBMT1,00104$
                                   2633 ;	radio/radio.c:975: while ((SPI1CFG & 0x80) == 0x80);   // wait on SPIBSY
      000837                       2634 00107$:
      000837 74 80            [12] 2635 	mov	a,#0x80
      000839 55 A1            [12] 2636 	anl	a,_SPI1CFG
      00083B FF               [12] 2637 	mov	r7,a
      00083C BF 80 02         [24] 2638 	cjne	r7,#0x80,00129$
      00083F 80 F6            [24] 2639 	sjmp	00107$
      000841                       2640 00129$:
                                   2641 ;	radio/radio.c:977: SPIF1 = 0;                          // leave SPIF cleared
      000841 C2 FF            [12] 2642 	clr	_SPIF1
                                   2643 ;	radio/radio.c:978: NSS1 = 1;                           // drive NSS high
      000843 D2 A3            [12] 2644 	setb	_NSS1
                                   2645 ;	radio/radio.c:979: SFRPAGE = LEGACY_PAGE;
      000845 75 A7 00         [24] 2646 	mov	_SFRPAGE,#0x00
                                   2647 ;	radio/radio.c:981: EX0_RESTORE;
      000848 A2*00            [12] 2648 	mov	c,b0
      00084A 92 A8            [24] 2649 	mov	_EX0,c
      00084C 22               [24] 2650 	ret
                                   2651 ;------------------------------------------------------------
                                   2652 ;Allocation info for local variables in function 'register_read'
                                   2653 ;------------------------------------------------------------
                                   2654 ;reg                       Allocated to registers r7 
                                   2655 ;value                     Allocated to registers r7 
                                   2656 ;EX0_saved                 Allocated to registers b0 
                                   2657 ;------------------------------------------------------------
                                   2658 ;	radio/radio.c:991: register_read(uint8_t reg) __reentrant
                                   2659 ;	-----------------------------------------
                                   2660 ;	 function register_read
                                   2661 ;	-----------------------------------------
      00084D                       2662 _register_read:
      00084D AF 82            [24] 2663 	mov	r7,dpl
                                   2664 ;	radio/radio.c:994: EX0_SAVE_DISABLE;
      00084F A2 A8            [12] 2665 	mov	c,_EX0
      000851 92*00            [24] 2666 	mov	b0,c
      000853 C2 A8            [12] 2667 	clr	_EX0
                                   2668 ;	radio/radio.c:996: RADIO_PAGE();
      000855 75 A7 02         [24] 2669 	mov	_SFRPAGE,#0x02
                                   2670 ;	radio/radio.c:997: NSS1 = 0;				// dsrive NSS low
      000858 C2 A3            [12] 2671 	clr	_NSS1
                                   2672 ;	radio/radio.c:998: SPIF1 = 0;				// clear SPIF
      00085A C2 FF            [12] 2673 	clr	_SPIF1
                                   2674 ;	radio/radio.c:999: SPI1DAT = (reg);			// write reg address
      00085C 8F A3            [24] 2675 	mov	_SPI1DAT,r7
                                   2676 ;	radio/radio.c:1000: while (!TXBMT1);			// wait on TXBMT
      00085E                       2677 00101$:
      00085E 30 F9 FD         [24] 2678 	jnb	_TXBMT1,00101$
                                   2679 ;	radio/radio.c:1001: SPI1DAT = 0x00;				// write anything
      000861 75 A3 00         [24] 2680 	mov	_SPI1DAT,#0x00
                                   2681 ;	radio/radio.c:1002: while (!TXBMT1);			// wait on TXBMT
      000864                       2682 00104$:
      000864 30 F9 FD         [24] 2683 	jnb	_TXBMT1,00104$
                                   2684 ;	radio/radio.c:1003: while ((SPI1CFG & 0x80) == 0x80);	// wait on SPIBSY
      000867                       2685 00107$:
      000867 74 80            [12] 2686 	mov	a,#0x80
      000869 55 A1            [12] 2687 	anl	a,_SPI1CFG
      00086B FF               [12] 2688 	mov	r7,a
      00086C BF 80 02         [24] 2689 	cjne	r7,#0x80,00129$
      00086F 80 F6            [24] 2690 	sjmp	00107$
      000871                       2691 00129$:
                                   2692 ;	radio/radio.c:1004: value = SPI1DAT;			// read value
      000871 AF A3            [24] 2693 	mov	r7,_SPI1DAT
                                   2694 ;	radio/radio.c:1005: SPIF1 = 0;				// leave SPIF cleared
      000873 C2 FF            [12] 2695 	clr	_SPIF1
                                   2696 ;	radio/radio.c:1006: NSS1 = 1;				// drive NSS high
      000875 D2 A3            [12] 2697 	setb	_NSS1
                                   2698 ;	radio/radio.c:1007: SFRPAGE = LEGACY_PAGE;
      000877 75 A7 00         [24] 2699 	mov	_SFRPAGE,#0x00
                                   2700 ;	radio/radio.c:1009: EX0_RESTORE;
      00087A A2*00            [12] 2701 	mov	c,b0
      00087C 92 A8            [24] 2702 	mov	_EX0,c
                                   2703 ;	radio/radio.c:1011: return value;
      00087E 8F 82            [24] 2704 	mov	dpl,r7
      000880 22               [24] 2705 	ret
                                   2706 ;------------------------------------------------------------
                                   2707 ;Allocation info for local variables in function 'read_receive_fifo'
                                   2708 ;------------------------------------------------------------
                                   2709 ;buf                       Allocated to stack - sp -3
                                   2710 ;n                         Allocated to registers r7 
                                   2711 ;------------------------------------------------------------
                                   2712 ;	radio/radio.c:1018: read_receive_fifo(register uint8_t n, __xdata uint8_t * buf) __reentrant
                                   2713 ;	-----------------------------------------
                                   2714 ;	 function read_receive_fifo
                                   2715 ;	-----------------------------------------
      000881                       2716 _read_receive_fifo:
      000881 AF 82            [24] 2717 	mov	r7,dpl
                                   2718 ;	radio/radio.c:1020: RADIO_PAGE();
      000883 75 A7 02         [24] 2719 	mov	_SFRPAGE,#0x02
                                   2720 ;	radio/radio.c:1021: NSS1 = 0;				// drive NSS low
      000886 C2 A3            [12] 2721 	clr	_NSS1
                                   2722 ;	radio/radio.c:1022: SPIF1 = 0;				// clear SPIF
      000888 C2 FF            [12] 2723 	clr	_SPIF1
                                   2724 ;	radio/radio.c:1023: SPI1DAT = EZRADIOPRO_FIFO_ACCESS;
      00088A 75 A3 7F         [24] 2725 	mov	_SPI1DAT,#0x7F
                                   2726 ;	radio/radio.c:1024: while (!SPIF1);				// wait on SPIF
      00088D                       2727 00101$:
      00088D 30 FF FD         [24] 2728 	jnb	_SPIF1,00101$
                                   2729 ;	radio/radio.c:1025: ACC = SPI1DAT;				// discard first byte
      000890 85 A3 E0         [24] 2730 	mov	_ACC,_SPI1DAT
                                   2731 ;	radio/radio.c:1027: while (n--) {
      000893 E5 81            [12] 2732 	mov	a,sp
      000895 24 FD            [12] 2733 	add	a,#0xfd
      000897 F8               [12] 2734 	mov	r0,a
      000898 86 05            [24] 2735 	mov	ar5,@r0
      00089A 08               [12] 2736 	inc	r0
      00089B 86 06            [24] 2737 	mov	ar6,@r0
      00089D                       2738 00107$:
      00089D 8F 04            [24] 2739 	mov	ar4,r7
      00089F 1F               [12] 2740 	dec	r7
      0008A0 EC               [12] 2741 	mov	a,r4
      0008A1 60 16            [24] 2742 	jz	00109$
                                   2743 ;	radio/radio.c:1028: SPIF1 = 0;			// clear SPIF
      0008A3 C2 FF            [12] 2744 	clr	_SPIF1
                                   2745 ;	radio/radio.c:1029: SPI1DAT = 0x00;			// write anything
      0008A5 75 A3 00         [24] 2746 	mov	_SPI1DAT,#0x00
                                   2747 ;	radio/radio.c:1030: while (!SPIF1);			// wait on SPIF
      0008A8                       2748 00104$:
      0008A8 30 FF FD         [24] 2749 	jnb	_SPIF1,00104$
                                   2750 ;	radio/radio.c:1031: *buf++ = SPI1DAT;		// copy to buffer
      0008AB 8D 82            [24] 2751 	mov	dpl,r5
      0008AD 8E 83            [24] 2752 	mov	dph,r6
      0008AF E5 A3            [12] 2753 	mov	a,_SPI1DAT
      0008B1 F0               [24] 2754 	movx	@dptr,a
      0008B2 A3               [24] 2755 	inc	dptr
      0008B3 AD 82            [24] 2756 	mov	r5,dpl
      0008B5 AE 83            [24] 2757 	mov	r6,dph
      0008B7 80 E4            [24] 2758 	sjmp	00107$
      0008B9                       2759 00109$:
                                   2760 ;	radio/radio.c:1034: SPIF1 = 0;				// leave SPIF cleared
      0008B9 C2 FF            [12] 2761 	clr	_SPIF1
                                   2762 ;	radio/radio.c:1035: NSS1 = 1;				// drive NSS high
      0008BB D2 A3            [12] 2763 	setb	_NSS1
                                   2764 ;	radio/radio.c:1036: SFRPAGE = LEGACY_PAGE;
      0008BD 75 A7 00         [24] 2765 	mov	_SFRPAGE,#0x00
      0008C0 22               [24] 2766 	ret
                                   2767 ;------------------------------------------------------------
                                   2768 ;Allocation info for local variables in function 'clear_status_registers'
                                   2769 ;------------------------------------------------------------
                                   2770 ;	radio/radio.c:1042: clear_status_registers(void)
                                   2771 ;	-----------------------------------------
                                   2772 ;	 function clear_status_registers
                                   2773 ;	-----------------------------------------
      0008C1                       2774 _clear_status_registers:
                                   2775 ;	radio/radio.c:1044: register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
      0008C1 75 82 03         [24] 2776 	mov	dpl,#0x03
      0008C4 12r08r4D         [24] 2777 	lcall	_register_read
                                   2778 ;	radio/radio.c:1045: register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
      0008C7 75 82 04         [24] 2779 	mov	dpl,#0x04
      0008CA 02r08r4D         [24] 2780 	ljmp	_register_read
                                   2781 ;------------------------------------------------------------
                                   2782 ;Allocation info for local variables in function 'scale_uint32'
                                   2783 ;------------------------------------------------------------
                                   2784 ;	radio/radio.c:1055: scale_uint32(__pdata uint32_t value, __pdata uint32_t scale)
                                   2785 ;	-----------------------------------------
                                   2786 ;	 function scale_uint32
                                   2787 ;	-----------------------------------------
      0008CD                       2788 _scale_uint32:
      0008CD AF 82            [24] 2789 	mov	r7,dpl
      0008CF AE 83            [24] 2790 	mov	r6,dph
      0008D1 AD F0            [24] 2791 	mov	r5,b
      0008D3 FC               [12] 2792 	mov	r4,a
      0008D4 78r21            [12] 2793 	mov	r0,#_scale_uint32_value_1_243
      0008D6 EF               [12] 2794 	mov	a,r7
      0008D7 F2               [24] 2795 	movx	@r0,a
      0008D8 08               [12] 2796 	inc	r0
      0008D9 EE               [12] 2797 	mov	a,r6
      0008DA F2               [24] 2798 	movx	@r0,a
      0008DB 08               [12] 2799 	inc	r0
      0008DC ED               [12] 2800 	mov	a,r5
      0008DD F2               [24] 2801 	movx	@r0,a
      0008DE 08               [12] 2802 	inc	r0
      0008DF EC               [12] 2803 	mov	a,r4
      0008E0 F2               [24] 2804 	movx	@r0,a
                                   2805 ;	radio/radio.c:1057: return (value + (scale >> 1)) / scale;
      0008E1 78r20            [12] 2806 	mov	r0,#(_scale_uint32_PARM_2 + 3)
      0008E3 E2               [24] 2807 	movx	a,@r0
      0008E4 C3               [12] 2808 	clr	c
      0008E5 13               [12] 2809 	rrc	a
      0008E6 FF               [12] 2810 	mov	r7,a
      0008E7 18               [12] 2811 	dec	r0
      0008E8 E2               [24] 2812 	movx	a,@r0
      0008E9 13               [12] 2813 	rrc	a
      0008EA FE               [12] 2814 	mov	r6,a
      0008EB 18               [12] 2815 	dec	r0
      0008EC E2               [24] 2816 	movx	a,@r0
      0008ED 13               [12] 2817 	rrc	a
      0008EE FB               [12] 2818 	mov	r3,a
      0008EF 18               [12] 2819 	dec	r0
      0008F0 E2               [24] 2820 	movx	a,@r0
      0008F1 13               [12] 2821 	rrc	a
      0008F2 FA               [12] 2822 	mov	r2,a
      0008F3 78r21            [12] 2823 	mov	r0,#_scale_uint32_value_1_243
      0008F5 E2               [24] 2824 	movx	a,@r0
      0008F6 2A               [12] 2825 	add	a,r2
      0008F7 FA               [12] 2826 	mov	r2,a
      0008F8 08               [12] 2827 	inc	r0
      0008F9 E2               [24] 2828 	movx	a,@r0
      0008FA 3B               [12] 2829 	addc	a,r3
      0008FB FB               [12] 2830 	mov	r3,a
      0008FC 08               [12] 2831 	inc	r0
      0008FD E2               [24] 2832 	movx	a,@r0
      0008FE 3E               [12] 2833 	addc	a,r6
      0008FF FE               [12] 2834 	mov	r6,a
      000900 08               [12] 2835 	inc	r0
      000901 E2               [24] 2836 	movx	a,@r0
      000902 3F               [12] 2837 	addc	a,r7
      000903 FF               [12] 2838 	mov	r7,a
      000904 78r1D            [12] 2839 	mov	r0,#_scale_uint32_PARM_2
      000906 90r00r00         [24] 2840 	mov	dptr,#__divulong_PARM_2
      000909 E2               [24] 2841 	movx	a,@r0
      00090A F0               [24] 2842 	movx	@dptr,a
      00090B 08               [12] 2843 	inc	r0
      00090C E2               [24] 2844 	movx	a,@r0
      00090D A3               [24] 2845 	inc	dptr
      00090E F0               [24] 2846 	movx	@dptr,a
      00090F 08               [12] 2847 	inc	r0
      000910 E2               [24] 2848 	movx	a,@r0
      000911 A3               [24] 2849 	inc	dptr
      000912 F0               [24] 2850 	movx	@dptr,a
      000913 08               [12] 2851 	inc	r0
      000914 E2               [24] 2852 	movx	a,@r0
      000915 A3               [24] 2853 	inc	dptr
      000916 F0               [24] 2854 	movx	@dptr,a
      000917 8A 82            [24] 2855 	mov	dpl,r2
      000919 8B 83            [24] 2856 	mov	dph,r3
      00091B 8E F0            [24] 2857 	mov	b,r6
      00091D EF               [12] 2858 	mov	a,r7
      00091E 02r00r00         [24] 2859 	ljmp	__divulong
                                   2860 ;------------------------------------------------------------
                                   2861 ;Allocation info for local variables in function 'software_reset'
                                   2862 ;------------------------------------------------------------
                                   2863 ;status                    Allocated with name '_software_reset_status_1_246'
                                   2864 ;------------------------------------------------------------
                                   2865 ;	radio/radio.c:1065: software_reset(void)
                                   2866 ;	-----------------------------------------
                                   2867 ;	 function software_reset
                                   2868 ;	-----------------------------------------
      000921                       2869 _software_reset:
                                   2870 ;	radio/radio.c:1070: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
      000921 E4               [12] 2871 	clr	a
      000922 C0 E0            [24] 2872 	push	acc
      000924 75 82 05         [24] 2873 	mov	dpl,#0x05
      000927 12r08r17         [24] 2874 	lcall	_register_write
      00092A 15 81            [12] 2875 	dec	sp
                                   2876 ;	radio/radio.c:1071: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
      00092C E4               [12] 2877 	clr	a
      00092D C0 E0            [24] 2878 	push	acc
      00092F 75 82 06         [24] 2879 	mov	dpl,#0x06
      000932 12r08r17         [24] 2880 	lcall	_register_write
      000935 15 81            [12] 2881 	dec	sp
                                   2882 ;	radio/radio.c:1073: clear_status_registers();
      000937 12r08rC1         [24] 2883 	lcall	_clear_status_registers
                                   2884 ;	radio/radio.c:1076: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, (EZRADIOPRO_SWRES | EZRADIOPRO_XTON));
      00093A 74 81            [12] 2885 	mov	a,#0x81
      00093C C0 E0            [24] 2886 	push	acc
      00093E 75 82 07         [24] 2887 	mov	dpl,#0x07
      000941 12r08r17         [24] 2888 	lcall	_register_write
      000944 15 81            [12] 2889 	dec	sp
                                   2890 ;	radio/radio.c:1079: delay_set(2);
      000946 90 00 02         [24] 2891 	mov	dptr,#0x0002
      000949 12r00r00         [24] 2892 	lcall	_delay_set
                                   2893 ;	radio/radio.c:1080: while (IRQ) {
      00094C                       2894 00103$:
      00094C 30 81 07         [24] 2895 	jnb	_IRQ,00105$
                                   2896 ;	radio/radio.c:1081: if (delay_expired()) {
      00094F 12r00r00         [24] 2897 	lcall	_delay_expired
      000952 50 F8            [24] 2898 	jnc	00103$
                                   2899 ;	radio/radio.c:1082: return false;
      000954 C3               [12] 2900 	clr	c
      000955 22               [24] 2901 	ret
      000956                       2902 00105$:
                                   2903 ;	radio/radio.c:1087: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
      000956 E4               [12] 2904 	clr	a
      000957 C0 E0            [24] 2905 	push	acc
      000959 75 82 05         [24] 2906 	mov	dpl,#0x05
      00095C 12r08r17         [24] 2907 	lcall	_register_write
      00095F 15 81            [12] 2908 	dec	sp
                                   2909 ;	radio/radio.c:1088: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
      000961 74 02            [12] 2910 	mov	a,#0x02
      000963 C0 E0            [24] 2911 	push	acc
      000965 75 82 06         [24] 2912 	mov	dpl,#0x06
      000968 12r08r17         [24] 2913 	lcall	_register_write
      00096B 15 81            [12] 2914 	dec	sp
                                   2915 ;	radio/radio.c:1090: delay_set(20);
      00096D 90 00 14         [24] 2916 	mov	dptr,#0x0014
      000970 12r00r00         [24] 2917 	lcall	_delay_set
                                   2918 ;	radio/radio.c:1091: while (!delay_expired()) {
      000973                       2919 00108$:
      000973 12r00r00         [24] 2920 	lcall	_delay_expired
      000976 40 13            [24] 2921 	jc	00110$
                                   2922 ;	radio/radio.c:1092: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
      000978 75 82 03         [24] 2923 	mov	dpl,#0x03
      00097B 12r08r4D         [24] 2924 	lcall	_register_read
                                   2925 ;	radio/radio.c:1093: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
      00097E 75 82 04         [24] 2926 	mov	dpl,#0x04
      000981 12r08r4D         [24] 2927 	lcall	_register_read
      000984 E5 82            [12] 2928 	mov	a,dpl
                                   2929 ;	radio/radio.c:1094: if (status & EZRADIOPRO_ICHIPRDY) {
      000986 30 E1 EA         [24] 2930 	jnb	acc.1,00108$
                                   2931 ;	radio/radio.c:1095: return true;
      000989 D3               [12] 2932 	setb	c
      00098A 22               [24] 2933 	ret
      00098B                       2934 00110$:
                                   2935 ;	radio/radio.c:1098: return false;
      00098B C3               [12] 2936 	clr	c
      00098C 22               [24] 2937 	ret
                                   2938 ;------------------------------------------------------------
                                   2939 ;Allocation info for local variables in function 'set_frequency_registers'
                                   2940 ;------------------------------------------------------------
                                   2941 ;band                      Allocated with name '_set_frequency_registers_band_1_252'
                                   2942 ;carrier                   Allocated with name '_set_frequency_registers_carrier_1_252'
                                   2943 ;------------------------------------------------------------
                                   2944 ;	radio/radio.c:1105: set_frequency_registers(__pdata uint32_t frequency)
                                   2945 ;	-----------------------------------------
                                   2946 ;	 function set_frequency_registers
                                   2947 ;	-----------------------------------------
      00098D                       2948 _set_frequency_registers:
      00098D AF 82            [24] 2949 	mov	r7,dpl
      00098F AE 83            [24] 2950 	mov	r6,dph
      000991 AD F0            [24] 2951 	mov	r5,b
      000993 FC               [12] 2952 	mov	r4,a
      000994 78r25            [12] 2953 	mov	r0,#_set_frequency_registers_frequency_1_251
      000996 EF               [12] 2954 	mov	a,r7
      000997 F2               [24] 2955 	movx	@r0,a
      000998 08               [12] 2956 	inc	r0
      000999 EE               [12] 2957 	mov	a,r6
      00099A F2               [24] 2958 	movx	@r0,a
      00099B 08               [12] 2959 	inc	r0
      00099C ED               [12] 2960 	mov	a,r5
      00099D F2               [24] 2961 	movx	@r0,a
      00099E 08               [12] 2962 	inc	r0
      00099F EC               [12] 2963 	mov	a,r4
      0009A0 F2               [24] 2964 	movx	@r0,a
                                   2965 ;	radio/radio.c:1110: if (frequency > 480000000UL) {
      0009A1 78r25            [12] 2966 	mov	r0,#_set_frequency_registers_frequency_1_251
      0009A3 C3               [12] 2967 	clr	c
      0009A4 E2               [24] 2968 	movx	a,@r0
      0009A5 F5 F0            [12] 2969 	mov	b,a
      0009A7 E4               [12] 2970 	clr	a
      0009A8 95 F0            [12] 2971 	subb	a,b
      0009AA 08               [12] 2972 	inc	r0
      0009AB E2               [24] 2973 	movx	a,@r0
      0009AC F5 F0            [12] 2974 	mov	b,a
      0009AE 74 38            [12] 2975 	mov	a,#0x38
      0009B0 95 F0            [12] 2976 	subb	a,b
      0009B2 08               [12] 2977 	inc	r0
      0009B3 E2               [24] 2978 	movx	a,@r0
      0009B4 F5 F0            [12] 2979 	mov	b,a
      0009B6 74 9C            [12] 2980 	mov	a,#0x9C
      0009B8 95 F0            [12] 2981 	subb	a,b
      0009BA 08               [12] 2982 	inc	r0
      0009BB E2               [24] 2983 	movx	a,@r0
      0009BC F5 F0            [12] 2984 	mov	b,a
      0009BE 74 1C            [12] 2985 	mov	a,#0x1C
      0009C0 95 F0            [12] 2986 	subb	a,b
      0009C2 40 03            [24] 2987 	jc	00109$
      0009C4 02r0Ar82         [24] 2988 	ljmp	00102$
      0009C7                       2989 00109$:
                                   2990 ;	radio/radio.c:1111: frequency -= 480000000UL;
      0009C7 78r26            [12] 2991 	mov	r0,#(_set_frequency_registers_frequency_1_251 + 1)
      0009C9 E2               [24] 2992 	movx	a,@r0
      0009CA 24 C8            [12] 2993 	add	a,#0xC8
      0009CC F2               [24] 2994 	movx	@r0,a
      0009CD 08               [12] 2995 	inc	r0
      0009CE E2               [24] 2996 	movx	a,@r0
      0009CF 34 63            [12] 2997 	addc	a,#0x63
      0009D1 F2               [24] 2998 	movx	@r0,a
      0009D2 08               [12] 2999 	inc	r0
      0009D3 E2               [24] 3000 	movx	a,@r0
      0009D4 34 E3            [12] 3001 	addc	a,#0xE3
      0009D6 F2               [24] 3002 	movx	@r0,a
                                   3003 ;	radio/radio.c:1112: band  = frequency / 20000000UL;
      0009D7 90r00r00         [24] 3004 	mov	dptr,#__divulong_PARM_2
      0009DA E4               [12] 3005 	clr	a
      0009DB F0               [24] 3006 	movx	@dptr,a
      0009DC 74 2D            [12] 3007 	mov	a,#0x2D
      0009DE A3               [24] 3008 	inc	dptr
      0009DF F0               [24] 3009 	movx	@dptr,a
      0009E0 74 31            [12] 3010 	mov	a,#0x31
      0009E2 A3               [24] 3011 	inc	dptr
      0009E3 F0               [24] 3012 	movx	@dptr,a
      0009E4 74 01            [12] 3013 	mov	a,#0x01
      0009E6 A3               [24] 3014 	inc	dptr
      0009E7 F0               [24] 3015 	movx	@dptr,a
      0009E8 78r25            [12] 3016 	mov	r0,#_set_frequency_registers_frequency_1_251
      0009EA E2               [24] 3017 	movx	a,@r0
      0009EB F5 82            [12] 3018 	mov	dpl,a
      0009ED 08               [12] 3019 	inc	r0
      0009EE E2               [24] 3020 	movx	a,@r0
      0009EF F5 83            [12] 3021 	mov	dph,a
      0009F1 08               [12] 3022 	inc	r0
      0009F2 E2               [24] 3023 	movx	a,@r0
      0009F3 F5 F0            [12] 3024 	mov	b,a
      0009F5 08               [12] 3025 	inc	r0
      0009F6 E2               [24] 3026 	movx	a,@r0
      0009F7 12r00r00         [24] 3027 	lcall	__divulong
      0009FA AA 82            [24] 3028 	mov	r2,dpl
      0009FC 90r01r04         [24] 3029 	mov	dptr,#_set_frequency_registers_band_1_252
      0009FF EA               [12] 3030 	mov	a,r2
      000A00 F0               [24] 3031 	movx	@dptr,a
                                   3032 ;	radio/radio.c:1113: frequency -= (uint32_t)band * 20000000UL;
      000A01 90r00r00         [24] 3033 	mov	dptr,#__mullong_PARM_2
      000A04 EA               [12] 3034 	mov	a,r2
      000A05 F0               [24] 3035 	movx	@dptr,a
      000A06 E4               [12] 3036 	clr	a
      000A07 A3               [24] 3037 	inc	dptr
      000A08 F0               [24] 3038 	movx	@dptr,a
      000A09 A3               [24] 3039 	inc	dptr
      000A0A F0               [24] 3040 	movx	@dptr,a
      000A0B A3               [24] 3041 	inc	dptr
      000A0C F0               [24] 3042 	movx	@dptr,a
      000A0D 90 2D 00         [24] 3043 	mov	dptr,#0x2D00
      000A10 75 F0 31         [24] 3044 	mov	b,#0x31
      000A13 74 01            [12] 3045 	mov	a,#0x01
      000A15 12r00r00         [24] 3046 	lcall	__mullong
      000A18 AC 82            [24] 3047 	mov	r4,dpl
      000A1A AD 83            [24] 3048 	mov	r5,dph
      000A1C AE F0            [24] 3049 	mov	r6,b
      000A1E FF               [12] 3050 	mov	r7,a
      000A1F 78r25            [12] 3051 	mov	r0,#_set_frequency_registers_frequency_1_251
      000A21 E2               [24] 3052 	movx	a,@r0
      000A22 C3               [12] 3053 	clr	c
      000A23 9C               [12] 3054 	subb	a,r4
      000A24 F2               [24] 3055 	movx	@r0,a
      000A25 08               [12] 3056 	inc	r0
      000A26 E2               [24] 3057 	movx	a,@r0
      000A27 9D               [12] 3058 	subb	a,r5
      000A28 F2               [24] 3059 	movx	@r0,a
      000A29 08               [12] 3060 	inc	r0
      000A2A E2               [24] 3061 	movx	a,@r0
      000A2B 9E               [12] 3062 	subb	a,r6
      000A2C F2               [24] 3063 	movx	@r0,a
      000A2D 08               [12] 3064 	inc	r0
      000A2E E2               [24] 3065 	movx	a,@r0
      000A2F 9F               [12] 3066 	subb	a,r7
      000A30 F2               [24] 3067 	movx	@r0,a
                                   3068 ;	radio/radio.c:1114: frequency  = scale_uint32(frequency, 625);
      000A31 78r1D            [12] 3069 	mov	r0,#_scale_uint32_PARM_2
      000A33 74 71            [12] 3070 	mov	a,#0x71
      000A35 F2               [24] 3071 	movx	@r0,a
      000A36 08               [12] 3072 	inc	r0
      000A37 74 02            [12] 3073 	mov	a,#0x02
      000A39 F2               [24] 3074 	movx	@r0,a
      000A3A 08               [12] 3075 	inc	r0
      000A3B E4               [12] 3076 	clr	a
      000A3C F2               [24] 3077 	movx	@r0,a
      000A3D 08               [12] 3078 	inc	r0
      000A3E F2               [24] 3079 	movx	@r0,a
      000A3F 78r25            [12] 3080 	mov	r0,#_set_frequency_registers_frequency_1_251
      000A41 E2               [24] 3081 	movx	a,@r0
      000A42 F5 82            [12] 3082 	mov	dpl,a
      000A44 08               [12] 3083 	inc	r0
      000A45 E2               [24] 3084 	movx	a,@r0
      000A46 F5 83            [12] 3085 	mov	dph,a
      000A48 08               [12] 3086 	inc	r0
      000A49 E2               [24] 3087 	movx	a,@r0
      000A4A F5 F0            [12] 3088 	mov	b,a
      000A4C 08               [12] 3089 	inc	r0
      000A4D E2               [24] 3090 	movx	a,@r0
      000A4E 12r08rCD         [24] 3091 	lcall	_scale_uint32
      000A51 78r25            [12] 3092 	mov	r0,#_set_frequency_registers_frequency_1_251
      000A53 C0 E0            [24] 3093 	push	acc
      000A55 E5 82            [12] 3094 	mov	a,dpl
      000A57 F2               [24] 3095 	movx	@r0,a
      000A58 08               [12] 3096 	inc	r0
      000A59 E5 83            [12] 3097 	mov	a,dph
      000A5B F2               [24] 3098 	movx	@r0,a
      000A5C 08               [12] 3099 	inc	r0
      000A5D E5 F0            [12] 3100 	mov	a,b
      000A5F F2               [24] 3101 	movx	@r0,a
      000A60 D0 E0            [24] 3102 	pop	acc
      000A62 08               [12] 3103 	inc	r0
      000A63 F2               [24] 3104 	movx	@r0,a
                                   3105 ;	radio/radio.c:1115: frequency <<= 1;
      000A64 78r25            [12] 3106 	mov	r0,#_set_frequency_registers_frequency_1_251
      000A66 E2               [24] 3107 	movx	a,@r0
      000A67 25 E0            [12] 3108 	add	a,acc
      000A69 F2               [24] 3109 	movx	@r0,a
      000A6A 08               [12] 3110 	inc	r0
      000A6B E2               [24] 3111 	movx	a,@r0
      000A6C 33               [12] 3112 	rlc	a
      000A6D F2               [24] 3113 	movx	@r0,a
      000A6E 08               [12] 3114 	inc	r0
      000A6F E2               [24] 3115 	movx	a,@r0
      000A70 33               [12] 3116 	rlc	a
      000A71 F2               [24] 3117 	movx	@r0,a
      000A72 08               [12] 3118 	inc	r0
      000A73 E2               [24] 3119 	movx	a,@r0
      000A74 33               [12] 3120 	rlc	a
      000A75 F2               [24] 3121 	movx	@r0,a
                                   3122 ;	radio/radio.c:1116: band |= EZRADIOPRO_HBSEL;
      000A76 90r01r04         [24] 3123 	mov	dptr,#_set_frequency_registers_band_1_252
      000A79 E0               [24] 3124 	movx	a,@dptr
      000A7A FF               [12] 3125 	mov	r7,a
      000A7B 74 20            [12] 3126 	mov	a,#0x20
      000A7D 4F               [12] 3127 	orl	a,r7
      000A7E F0               [24] 3128 	movx	@dptr,a
      000A7F 02r0Br43         [24] 3129 	ljmp	00103$
      000A82                       3130 00102$:
                                   3131 ;	radio/radio.c:1118: frequency -= 240000000UL;
      000A82 78r26            [12] 3132 	mov	r0,#(_set_frequency_registers_frequency_1_251 + 1)
      000A84 E2               [24] 3133 	movx	a,@r0
      000A85 24 E4            [12] 3134 	add	a,#0xE4
      000A87 F2               [24] 3135 	movx	@r0,a
      000A88 08               [12] 3136 	inc	r0
      000A89 E2               [24] 3137 	movx	a,@r0
      000A8A 34 B1            [12] 3138 	addc	a,#0xB1
      000A8C F2               [24] 3139 	movx	@r0,a
      000A8D 08               [12] 3140 	inc	r0
      000A8E E2               [24] 3141 	movx	a,@r0
      000A8F 34 F1            [12] 3142 	addc	a,#0xF1
      000A91 F2               [24] 3143 	movx	@r0,a
                                   3144 ;	radio/radio.c:1119: band  = frequency / 10000000UL;
      000A92 90r00r00         [24] 3145 	mov	dptr,#__divulong_PARM_2
      000A95 74 80            [12] 3146 	mov	a,#0x80
      000A97 F0               [24] 3147 	movx	@dptr,a
      000A98 74 96            [12] 3148 	mov	a,#0x96
      000A9A A3               [24] 3149 	inc	dptr
      000A9B F0               [24] 3150 	movx	@dptr,a
      000A9C 74 98            [12] 3151 	mov	a,#0x98
      000A9E A3               [24] 3152 	inc	dptr
      000A9F F0               [24] 3153 	movx	@dptr,a
      000AA0 E4               [12] 3154 	clr	a
      000AA1 A3               [24] 3155 	inc	dptr
      000AA2 F0               [24] 3156 	movx	@dptr,a
      000AA3 78r25            [12] 3157 	mov	r0,#_set_frequency_registers_frequency_1_251
      000AA5 E2               [24] 3158 	movx	a,@r0
      000AA6 F5 82            [12] 3159 	mov	dpl,a
      000AA8 08               [12] 3160 	inc	r0
      000AA9 E2               [24] 3161 	movx	a,@r0
      000AAA F5 83            [12] 3162 	mov	dph,a
      000AAC 08               [12] 3163 	inc	r0
      000AAD E2               [24] 3164 	movx	a,@r0
      000AAE F5 F0            [12] 3165 	mov	b,a
      000AB0 08               [12] 3166 	inc	r0
      000AB1 E2               [24] 3167 	movx	a,@r0
      000AB2 12r00r00         [24] 3168 	lcall	__divulong
      000AB5 AC 82            [24] 3169 	mov	r4,dpl
      000AB7 90r01r04         [24] 3170 	mov	dptr,#_set_frequency_registers_band_1_252
      000ABA EC               [12] 3171 	mov	a,r4
      000ABB F0               [24] 3172 	movx	@dptr,a
                                   3173 ;	radio/radio.c:1120: frequency -= (uint32_t)band * 10000000UL;
      000ABC 90r00r00         [24] 3174 	mov	dptr,#__mullong_PARM_2
      000ABF EC               [12] 3175 	mov	a,r4
      000AC0 F0               [24] 3176 	movx	@dptr,a
      000AC1 E4               [12] 3177 	clr	a
      000AC2 A3               [24] 3178 	inc	dptr
      000AC3 F0               [24] 3179 	movx	@dptr,a
      000AC4 A3               [24] 3180 	inc	dptr
      000AC5 F0               [24] 3181 	movx	@dptr,a
      000AC6 A3               [24] 3182 	inc	dptr
      000AC7 F0               [24] 3183 	movx	@dptr,a
      000AC8 90 96 80         [24] 3184 	mov	dptr,#0x9680
      000ACB 75 F0 98         [24] 3185 	mov	b,#0x98
      000ACE E4               [12] 3186 	clr	a
      000ACF 12r00r00         [24] 3187 	lcall	__mullong
      000AD2 AC 82            [24] 3188 	mov	r4,dpl
      000AD4 AD 83            [24] 3189 	mov	r5,dph
      000AD6 AE F0            [24] 3190 	mov	r6,b
      000AD8 FF               [12] 3191 	mov	r7,a
      000AD9 78r25            [12] 3192 	mov	r0,#_set_frequency_registers_frequency_1_251
      000ADB E2               [24] 3193 	movx	a,@r0
      000ADC C3               [12] 3194 	clr	c
      000ADD 9C               [12] 3195 	subb	a,r4
      000ADE F2               [24] 3196 	movx	@r0,a
      000ADF 08               [12] 3197 	inc	r0
      000AE0 E2               [24] 3198 	movx	a,@r0
      000AE1 9D               [12] 3199 	subb	a,r5
      000AE2 F2               [24] 3200 	movx	@r0,a
      000AE3 08               [12] 3201 	inc	r0
      000AE4 E2               [24] 3202 	movx	a,@r0
      000AE5 9E               [12] 3203 	subb	a,r6
      000AE6 F2               [24] 3204 	movx	@r0,a
      000AE7 08               [12] 3205 	inc	r0
      000AE8 E2               [24] 3206 	movx	a,@r0
      000AE9 9F               [12] 3207 	subb	a,r7
      000AEA F2               [24] 3208 	movx	@r0,a
                                   3209 ;	radio/radio.c:1121: frequency  = scale_uint32(frequency, 625);
      000AEB 78r1D            [12] 3210 	mov	r0,#_scale_uint32_PARM_2
      000AED 74 71            [12] 3211 	mov	a,#0x71
      000AEF F2               [24] 3212 	movx	@r0,a
      000AF0 08               [12] 3213 	inc	r0
      000AF1 74 02            [12] 3214 	mov	a,#0x02
      000AF3 F2               [24] 3215 	movx	@r0,a
      000AF4 08               [12] 3216 	inc	r0
      000AF5 E4               [12] 3217 	clr	a
      000AF6 F2               [24] 3218 	movx	@r0,a
      000AF7 08               [12] 3219 	inc	r0
      000AF8 F2               [24] 3220 	movx	@r0,a
      000AF9 78r25            [12] 3221 	mov	r0,#_set_frequency_registers_frequency_1_251
      000AFB E2               [24] 3222 	movx	a,@r0
      000AFC F5 82            [12] 3223 	mov	dpl,a
      000AFE 08               [12] 3224 	inc	r0
      000AFF E2               [24] 3225 	movx	a,@r0
      000B00 F5 83            [12] 3226 	mov	dph,a
      000B02 08               [12] 3227 	inc	r0
      000B03 E2               [24] 3228 	movx	a,@r0
      000B04 F5 F0            [12] 3229 	mov	b,a
      000B06 08               [12] 3230 	inc	r0
      000B07 E2               [24] 3231 	movx	a,@r0
      000B08 12r08rCD         [24] 3232 	lcall	_scale_uint32
      000B0B 78r25            [12] 3233 	mov	r0,#_set_frequency_registers_frequency_1_251
      000B0D C0 E0            [24] 3234 	push	acc
      000B0F E5 82            [12] 3235 	mov	a,dpl
      000B11 F2               [24] 3236 	movx	@r0,a
      000B12 08               [12] 3237 	inc	r0
      000B13 E5 83            [12] 3238 	mov	a,dph
      000B15 F2               [24] 3239 	movx	@r0,a
      000B16 08               [12] 3240 	inc	r0
      000B17 E5 F0            [12] 3241 	mov	a,b
      000B19 F2               [24] 3242 	movx	@r0,a
      000B1A D0 E0            [24] 3243 	pop	acc
      000B1C 08               [12] 3244 	inc	r0
      000B1D F2               [24] 3245 	movx	@r0,a
                                   3246 ;	radio/radio.c:1122: frequency <<= 2;
      000B1E 78r25            [12] 3247 	mov	r0,#_set_frequency_registers_frequency_1_251
      000B20 E2               [24] 3248 	movx	a,@r0
      000B21 25 E0            [12] 3249 	add	a,acc
      000B23 F2               [24] 3250 	movx	@r0,a
      000B24 08               [12] 3251 	inc	r0
      000B25 E2               [24] 3252 	movx	a,@r0
      000B26 33               [12] 3253 	rlc	a
      000B27 F2               [24] 3254 	movx	@r0,a
      000B28 08               [12] 3255 	inc	r0
      000B29 E2               [24] 3256 	movx	a,@r0
      000B2A 33               [12] 3257 	rlc	a
      000B2B F2               [24] 3258 	movx	@r0,a
      000B2C 08               [12] 3259 	inc	r0
      000B2D E2               [24] 3260 	movx	a,@r0
      000B2E 33               [12] 3261 	rlc	a
      000B2F F2               [24] 3262 	movx	@r0,a
      000B30 18               [12] 3263 	dec	r0
      000B31 18               [12] 3264 	dec	r0
      000B32 18               [12] 3265 	dec	r0
      000B33 E2               [24] 3266 	movx	a,@r0
      000B34 25 E0            [12] 3267 	add	a,acc
      000B36 F2               [24] 3268 	movx	@r0,a
      000B37 08               [12] 3269 	inc	r0
      000B38 E2               [24] 3270 	movx	a,@r0
      000B39 33               [12] 3271 	rlc	a
      000B3A F2               [24] 3272 	movx	@r0,a
      000B3B 08               [12] 3273 	inc	r0
      000B3C E2               [24] 3274 	movx	a,@r0
      000B3D 33               [12] 3275 	rlc	a
      000B3E F2               [24] 3276 	movx	@r0,a
      000B3F 08               [12] 3277 	inc	r0
      000B40 E2               [24] 3278 	movx	a,@r0
      000B41 33               [12] 3279 	rlc	a
      000B42 F2               [24] 3280 	movx	@r0,a
      000B43                       3281 00103$:
                                   3282 ;	radio/radio.c:1125: band |= EZRADIOPRO_SBSEL;
      000B43 90r01r04         [24] 3283 	mov	dptr,#_set_frequency_registers_band_1_252
      000B46 E0               [24] 3284 	movx	a,@dptr
      000B47 FF               [12] 3285 	mov	r7,a
      000B48 74 40            [12] 3286 	mov	a,#0x40
      000B4A 4F               [12] 3287 	orl	a,r7
      000B4B F0               [24] 3288 	movx	@dptr,a
                                   3289 ;	radio/radio.c:1126: carrier = (uint16_t)frequency;
      000B4C 78r25            [12] 3290 	mov	r0,#_set_frequency_registers_frequency_1_251
      000B4E E2               [24] 3291 	movx	a,@r0
      000B4F FC               [12] 3292 	mov	r4,a
      000B50 08               [12] 3293 	inc	r0
      000B51 E2               [24] 3294 	movx	a,@r0
      000B52 FD               [12] 3295 	mov	r5,a
                                   3296 ;	radio/radio.c:1128: register_write(EZRADIOPRO_FREQUENCY_BAND_SELECT, band);
      000B53 C0 05            [24] 3297 	push	ar5
      000B55 C0 04            [24] 3298 	push	ar4
      000B57 E0               [24] 3299 	movx	a,@dptr
      000B58 C0 E0            [24] 3300 	push	acc
      000B5A 75 82 75         [24] 3301 	mov	dpl,#0x75
      000B5D 12r08r17         [24] 3302 	lcall	_register_write
      000B60 15 81            [12] 3303 	dec	sp
      000B62 D0 04            [24] 3304 	pop	ar4
      000B64 D0 05            [24] 3305 	pop	ar5
                                   3306 ;	radio/radio.c:1129: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_1, carrier >> 8);
      000B66 8D 07            [24] 3307 	mov	ar7,r5
      000B68 C0 05            [24] 3308 	push	ar5
      000B6A C0 04            [24] 3309 	push	ar4
      000B6C C0 07            [24] 3310 	push	ar7
      000B6E 75 82 76         [24] 3311 	mov	dpl,#0x76
      000B71 12r08r17         [24] 3312 	lcall	_register_write
      000B74 15 81            [12] 3313 	dec	sp
      000B76 D0 04            [24] 3314 	pop	ar4
      000B78 D0 05            [24] 3315 	pop	ar5
                                   3316 ;	radio/radio.c:1130: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_0, carrier & 0xFF);
      000B7A C0 04            [24] 3317 	push	ar4
      000B7C 75 82 77         [24] 3318 	mov	dpl,#0x77
      000B7F 12r08r17         [24] 3319 	lcall	_register_write
      000B82 15 81            [12] 3320 	dec	sp
      000B84 22               [24] 3321 	ret
                                   3322 ;------------------------------------------------------------
                                   3323 ;Allocation info for local variables in function 'radio_temperature'
                                   3324 ;------------------------------------------------------------
                                   3325 ;temp_local                Allocated to registers r4 r5 
                                   3326 ;temp_offset               Allocated to registers r6 r7 
                                   3327 ;------------------------------------------------------------
                                   3328 ;	radio/radio.c:1139: radio_temperature(void)
                                   3329 ;	-----------------------------------------
                                   3330 ;	 function radio_temperature
                                   3331 ;	-----------------------------------------
      000B85                       3332 _radio_temperature:
                                   3333 ;	radio/radio.c:1144: SFRPAGE	 = TOFF_PAGE;
      000B85 75 A7 0F         [24] 3334 	mov	_SFRPAGE,#0x0F
                                   3335 ;	radio/radio.c:1145: temp_offset = (TOFFH << 2) | (TOFFL >> 6);
      000B88 AE BE            [24] 3336 	mov	r6,_TOFFH
      000B8A E4               [12] 3337 	clr	a
      000B8B CE               [12] 3338 	xch	a,r6
      000B8C 25 E0            [12] 3339 	add	a,acc
      000B8E CE               [12] 3340 	xch	a,r6
      000B8F 33               [12] 3341 	rlc	a
      000B90 CE               [12] 3342 	xch	a,r6
      000B91 25 E0            [12] 3343 	add	a,acc
      000B93 CE               [12] 3344 	xch	a,r6
      000B94 33               [12] 3345 	rlc	a
      000B95 FF               [12] 3346 	mov	r7,a
      000B96 E5 BD            [12] 3347 	mov	a,_TOFFL
      000B98 23               [12] 3348 	rl	a
      000B99 23               [12] 3349 	rl	a
      000B9A 54 03            [12] 3350 	anl	a,#0x03
      000B9C FD               [12] 3351 	mov	r5,a
      000B9D 7C 00            [12] 3352 	mov	r4,#0x00
      000B9F 42 06            [12] 3353 	orl	ar6,a
      000BA1 EC               [12] 3354 	mov	a,r4
      000BA2 42 07            [12] 3355 	orl	ar7,a
                                   3356 ;	radio/radio.c:1146: SFRPAGE	 = LEGACY_PAGE;
      000BA4 75 A7 00         [24] 3357 	mov	_SFRPAGE,#0x00
                                   3358 ;	radio/radio.c:1148: AD0BUSY = 1;		// Start ADC conversion
      000BA7 D2 EC            [12] 3359 	setb	_AD0BUSY
                                   3360 ;	radio/radio.c:1149: while (AD0BUSY) ;  	// Wait for completion of conversion
      000BA9                       3361 00101$:
      000BA9 20 EC FD         [24] 3362 	jb	_AD0BUSY,00101$
                                   3363 ;	radio/radio.c:1151: temp_local = (ADC0H << 8) | ADC0L;
      000BAC AD BE            [24] 3364 	mov	r5,_ADC0H
      000BAE 7C 00            [12] 3365 	mov	r4,#0x00
      000BB0 AA BD            [24] 3366 	mov	r2,_ADC0L
      000BB2 7B 00            [12] 3367 	mov	r3,#0x00
      000BB4 EA               [12] 3368 	mov	a,r2
      000BB5 42 04            [12] 3369 	orl	ar4,a
      000BB7 EB               [12] 3370 	mov	a,r3
      000BB8 42 05            [12] 3371 	orl	ar5,a
                                   3372 ;	radio/radio.c:1152: temp_local = TEMP_OFFSET + (temp_local - temp_offset) / 2; // convert reading into degC.
      000BBA EC               [12] 3373 	mov	a,r4
      000BBB C3               [12] 3374 	clr	c
      000BBC 9E               [12] 3375 	subb	a,r6
      000BBD FE               [12] 3376 	mov	r6,a
      000BBE ED               [12] 3377 	mov	a,r5
      000BBF 9F               [12] 3378 	subb	a,r7
      000BC0 FF               [12] 3379 	mov	r7,a
      000BC1 90r00r00         [24] 3380 	mov	dptr,#__divsint_PARM_2
      000BC4 74 02            [12] 3381 	mov	a,#0x02
      000BC6 F0               [24] 3382 	movx	@dptr,a
      000BC7 E4               [12] 3383 	clr	a
      000BC8 A3               [24] 3384 	inc	dptr
      000BC9 F0               [24] 3385 	movx	@dptr,a
      000BCA 8E 82            [24] 3386 	mov	dpl,r6
      000BCC 8F 83            [24] 3387 	mov	dph,r7
      000BCE 12r00r00         [24] 3388 	lcall	__divsint
      000BD1 E5 82            [12] 3389 	mov	a,dpl
      000BD3 85 83 F0         [24] 3390 	mov	b,dph
      000BD6 24 2D            [12] 3391 	add	a,#0x2D
      000BD8 FC               [12] 3392 	mov	r4,a
      000BD9 E4               [12] 3393 	clr	a
      000BDA 35 F0            [12] 3394 	addc	a,b
                                   3395 ;	radio/radio.c:1163: return temp_local;
      000BDC 8C 82            [24] 3396 	mov	dpl,r4
      000BDE F5 83            [12] 3397 	mov	dph,a
      000BE0 22               [24] 3398 	ret
                                   3399 ;------------------------------------------------------------
                                   3400 ;Allocation info for local variables in function 'radio_set_diversity'
                                   3401 ;------------------------------------------------------------
                                   3402 ;state                     Allocated with name '_radio_set_diversity_state_1_257'
                                   3403 ;------------------------------------------------------------
                                   3404 ;	radio/radio.c:1169: radio_set_diversity(enum DIVERSITY_Enum state)
                                   3405 ;	-----------------------------------------
                                   3406 ;	 function radio_set_diversity
                                   3407 ;	-----------------------------------------
      000BE1                       3408 _radio_set_diversity:
      000BE1 E5 82            [12] 3409 	mov	a,dpl
      000BE3 90r01r05         [24] 3410 	mov	dptr,#_radio_set_diversity_state_1_257
      000BE6 F0               [24] 3411 	movx	@dptr,a
                                   3412 ;	radio/radio.c:1171: switch (state) {
      000BE7 E0               [24] 3413 	movx	a,@dptr
      000BE8 FF               [12] 3414 	mov  r7,a
      000BE9 24 FC            [12] 3415 	add	a,#0xff - 0x03
      000BEB 40 68            [24] 3416 	jc	00105$
      000BED EF               [12] 3417 	mov	a,r7
      000BEE 2F               [12] 3418 	add	a,r7
      000BEF 2F               [12] 3419 	add	a,r7
      000BF0 90r0BrF4         [24] 3420 	mov	dptr,#00113$
      000BF3 73               [24] 3421 	jmp	@a+dptr
      000BF4                       3422 00113$:
      000BF4 02r0Cr00         [24] 3423 	ljmp	00101$
      000BF7 02r0Cr55         [24] 3424 	ljmp	00103$
      000BFA 02r0Cr55         [24] 3425 	ljmp	00104$
      000BFD 02r0Cr25         [24] 3426 	ljmp	00102$
                                   3427 ;	radio/radio.c:1172: case DIVERSITY_ENABLED:
      000C00                       3428 00101$:
                                   3429 ;	radio/radio.c:1173: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x18);
      000C00 74 18            [12] 3430 	mov	a,#0x18
      000C02 C0 E0            [24] 3431 	push	acc
      000C04 75 82 0D         [24] 3432 	mov	dpl,#0x0D
      000C07 12r08r17         [24] 3433 	lcall	_register_write
      000C0A 15 81            [12] 3434 	dec	sp
                                   3435 ;	radio/radio.c:1175: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK) | 0x80);
      000C0C 75 82 08         [24] 3436 	mov	dpl,#0x08
      000C0F 12r08r4D         [24] 3437 	lcall	_register_read
      000C12 AF 82            [24] 3438 	mov	r7,dpl
      000C14 74 1F            [12] 3439 	mov	a,#0x1F
      000C16 5F               [12] 3440 	anl	a,r7
      000C17 44 80            [12] 3441 	orl	a,#0x80
      000C19 FF               [12] 3442 	mov	r7,a
      000C1A C0 07            [24] 3443 	push	ar7
      000C1C 75 82 08         [24] 3444 	mov	dpl,#0x08
      000C1F 12r08r17         [24] 3445 	lcall	_register_write
      000C22 15 81            [12] 3446 	dec	sp
                                   3447 ;	radio/radio.c:1176: break;
                                   3448 ;	radio/radio.c:1178: case DIVERSITY_ANT2:
      000C24 22               [24] 3449 	ret
      000C25                       3450 00102$:
                                   3451 ;	radio/radio.c:1180: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK) | 0x20);
      000C25 75 82 08         [24] 3452 	mov	dpl,#0x08
      000C28 12r08r4D         [24] 3453 	lcall	_register_read
      000C2B AF 82            [24] 3454 	mov	r7,dpl
      000C2D 74 1F            [12] 3455 	mov	a,#0x1F
      000C2F 5F               [12] 3456 	anl	a,r7
      000C30 44 20            [12] 3457 	orl	a,#0x20
      000C32 FF               [12] 3458 	mov	r7,a
      000C33 C0 07            [24] 3459 	push	ar7
      000C35 75 82 08         [24] 3460 	mov	dpl,#0x08
      000C38 12r08r17         [24] 3461 	lcall	_register_write
      000C3B 15 81            [12] 3462 	dec	sp
                                   3463 ;	radio/radio.c:1182: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x0A);	// GPIO2 output set high fixed
      000C3D 74 0A            [12] 3464 	mov	a,#0x0A
      000C3F C0 E0            [24] 3465 	push	acc
      000C41 75 82 0D         [24] 3466 	mov	dpl,#0x0D
      000C44 12r08r17         [24] 3467 	lcall	_register_write
      000C47 15 81            [12] 3468 	dec	sp
                                   3469 ;	radio/radio.c:1183: register_write(EZRADIOPRO_IO_PORT_CONFIGURATION, 0x00);	// GPIO2 output set low (fixed on ant 2)
      000C49 E4               [12] 3470 	clr	a
      000C4A C0 E0            [24] 3471 	push	acc
      000C4C 75 82 0E         [24] 3472 	mov	dpl,#0x0E
      000C4F 12r08r17         [24] 3473 	lcall	_register_write
      000C52 15 81            [12] 3474 	dec	sp
                                   3475 ;	radio/radio.c:1184: break;
                                   3476 ;	radio/radio.c:1186: case DIVERSITY_DISABLED:
      000C54 22               [24] 3477 	ret
      000C55                       3478 00103$:
                                   3479 ;	radio/radio.c:1187: case DIVERSITY_ANT1:
      000C55                       3480 00104$:
                                   3481 ;	radio/radio.c:1188: default:
      000C55                       3482 00105$:
                                   3483 ;	radio/radio.c:1190: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK));
      000C55 75 82 08         [24] 3484 	mov	dpl,#0x08
      000C58 12r08r4D         [24] 3485 	lcall	_register_read
      000C5B AF 82            [24] 3486 	mov	r7,dpl
      000C5D 53 07 1F         [24] 3487 	anl	ar7,#0x1F
      000C60 C0 07            [24] 3488 	push	ar7
      000C62 75 82 08         [24] 3489 	mov	dpl,#0x08
      000C65 12r08r17         [24] 3490 	lcall	_register_write
      000C68 15 81            [12] 3491 	dec	sp
                                   3492 ;	radio/radio.c:1192: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x0A);	// GPIO2 output set high fixed
      000C6A 74 0A            [12] 3493 	mov	a,#0x0A
      000C6C C0 E0            [24] 3494 	push	acc
      000C6E 75 82 0D         [24] 3495 	mov	dpl,#0x0D
      000C71 12r08r17         [24] 3496 	lcall	_register_write
      000C74 15 81            [12] 3497 	dec	sp
                                   3498 ;	radio/radio.c:1193: register_write(EZRADIOPRO_IO_PORT_CONFIGURATION, 0x04);	// GPIO2 output set high (fixed on ant 1)
      000C76 74 04            [12] 3499 	mov	a,#0x04
      000C78 C0 E0            [24] 3500 	push	acc
      000C7A 75 82 0E         [24] 3501 	mov	dpl,#0x0E
      000C7D 12r08r17         [24] 3502 	lcall	_register_write
      000C80 15 81            [12] 3503 	dec	sp
                                   3504 ;	radio/radio.c:1195: }
      000C82 22               [24] 3505 	ret
                                   3506 ;------------------------------------------------------------
                                   3507 ;Allocation info for local variables in function 'Receiver_ISR'
                                   3508 ;------------------------------------------------------------
                                   3509 ;status                    Allocated to registers r6 
                                   3510 ;status2                   Allocated to registers r7 
                                   3511 ;len                       Allocated to registers r7 
                                   3512 ;------------------------------------------------------------
                                   3513 ;	radio/radio.c:1206: INTERRUPT(Receiver_ISR, INTERRUPT_INT0)
                                   3514 ;	-----------------------------------------
                                   3515 ;	 function Receiver_ISR
                                   3516 ;	-----------------------------------------
      000C83                       3517 _Receiver_ISR:
      000C83 C0*00            [24] 3518 	push	bits
      000C85 C0 E0            [24] 3519 	push	acc
      000C87 C0 F0            [24] 3520 	push	b
      000C89 C0 82            [24] 3521 	push	dpl
      000C8B C0 83            [24] 3522 	push	dph
      000C8D C0 07            [24] 3523 	push	(0+7)
      000C8F C0 06            [24] 3524 	push	(0+6)
      000C91 C0 05            [24] 3525 	push	(0+5)
      000C93 C0 04            [24] 3526 	push	(0+4)
      000C95 C0 03            [24] 3527 	push	(0+3)
      000C97 C0 02            [24] 3528 	push	(0+2)
      000C99 C0 01            [24] 3529 	push	(0+1)
      000C9B C0 00            [24] 3530 	push	(0+0)
      000C9D C0 D0            [24] 3531 	push	psw
      000C9F 75 D0 00         [24] 3532 	mov	psw,#0x00
                                   3533 ;	radio/radio.c:1214: status2 = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
      000CA2 75 82 04         [24] 3534 	mov	dpl,#0x04
      000CA5 12r08r4D         [24] 3535 	lcall	_register_read
      000CA8 AF 82            [24] 3536 	mov	r7,dpl
                                   3537 ;	radio/radio.c:1215: status  = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
      000CAA 75 82 03         [24] 3538 	mov	dpl,#0x03
      000CAD C0 07            [24] 3539 	push	ar7
      000CAF 12r08r4D         [24] 3540 	lcall	_register_read
      000CB2 AE 82            [24] 3541 	mov	r6,dpl
      000CB4 D0 07            [24] 3542 	pop	ar7
                                   3543 ;	radio/radio.c:1217: if (status & EZRADIOPRO_IRXFFAFULL) {
      000CB6 EE               [12] 3544 	mov	a,r6
      000CB7 30 E4 49         [24] 3545 	jnb	acc.4,00104$
                                   3546 ;	radio/radio.c:1218: if (RX_FIFO_THRESHOLD_HIGH + (uint16_t)partial_packet_length > MAX_PACKET_LENGTH) {
      000CBA 78r01            [12] 3547 	mov	r0,#_partial_packet_length
      000CBC E2               [24] 3548 	movx	a,@r0
      000CBD FC               [12] 3549 	mov	r4,a
      000CBE 7D 00            [12] 3550 	mov	r5,#0x00
      000CC0 74 32            [12] 3551 	mov	a,#0x32
      000CC2 2C               [12] 3552 	add	a,r4
      000CC3 FC               [12] 3553 	mov	r4,a
      000CC4 E4               [12] 3554 	clr	a
      000CC5 3D               [12] 3555 	addc	a,r5
      000CC6 FD               [12] 3556 	mov	r5,a
      000CC7 C3               [12] 3557 	clr	c
      000CC8 74 FC            [12] 3558 	mov	a,#0xFC
      000CCA 9C               [12] 3559 	subb	a,r4
      000CCB E4               [12] 3560 	clr	a
      000CCC 9D               [12] 3561 	subb	a,r5
      000CCD 50 03            [24] 3562 	jnc	00150$
      000CCF 02r0Dr8E         [24] 3563 	ljmp	00117$
      000CD2                       3564 00150$:
                                   3565 ;	radio/radio.c:1222: read_receive_fifo(RX_FIFO_THRESHOLD_HIGH, &radio_buffer[partial_packet_length]);
      000CD2 78r01            [12] 3566 	mov	r0,#_partial_packet_length
      000CD4 E2               [24] 3567 	movx	a,@r0
      000CD5 24r00            [12] 3568 	add	a,#_radio_buffer
      000CD7 FC               [12] 3569 	mov	r4,a
      000CD8 E4               [12] 3570 	clr	a
      000CD9 34s00            [12] 3571 	addc	a,#(_radio_buffer >> 8)
      000CDB FD               [12] 3572 	mov	r5,a
      000CDC C0 07            [24] 3573 	push	ar7
      000CDE C0 06            [24] 3574 	push	ar6
      000CE0 C0 04            [24] 3575 	push	ar4
      000CE2 C0 05            [24] 3576 	push	ar5
      000CE4 75 82 32         [24] 3577 	mov	dpl,#0x32
      000CE7 12r08r81         [24] 3578 	lcall	_read_receive_fifo
      000CEA 15 81            [12] 3579 	dec	sp
      000CEC 15 81            [12] 3580 	dec	sp
                                   3581 ;	radio/radio.c:1223: partial_packet_length += RX_FIFO_THRESHOLD_HIGH;
      000CEE 78r01            [12] 3582 	mov	r0,#_partial_packet_length
      000CF0 E2               [24] 3583 	movx	a,@r0
      000CF1 24 32            [12] 3584 	add	a,#0x32
      000CF3 F2               [24] 3585 	movx	@r0,a
                                   3586 ;	radio/radio.c:1224: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
      000CF4 75 82 26         [24] 3587 	mov	dpl,#0x26
      000CF7 12r08r4D         [24] 3588 	lcall	_register_read
      000CFA E5 82            [12] 3589 	mov	a,dpl
      000CFC D0 06            [24] 3590 	pop	ar6
      000CFE D0 07            [24] 3591 	pop	ar7
      000D00 78r02            [12] 3592 	mov	r0,#_last_rssi
      000D02 F2               [24] 3593 	movx	@r0,a
      000D03                       3594 00104$:
                                   3595 ;	radio/radio.c:1227: if (status2 & EZRADIOPRO_IPREAVAL) {
      000D03 EF               [12] 3596 	mov	a,r7
      000D04 30 E6 11         [24] 3597 	jnb	acc.6,00106$
                                   3598 ;	radio/radio.c:1229: preamble_detected = true;
      000D07 D2*01            [12] 3599 	setb	_preamble_detected
                                   3600 ;	radio/radio.c:1232: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
      000D09 75 82 26         [24] 3601 	mov	dpl,#0x26
      000D0C C0 06            [24] 3602 	push	ar6
      000D0E 12r08r4D         [24] 3603 	lcall	_register_read
      000D11 E5 82            [12] 3604 	mov	a,dpl
      000D13 D0 06            [24] 3605 	pop	ar6
      000D15 78r02            [12] 3606 	mov	r0,#_last_rssi
      000D17 F2               [24] 3607 	movx	@r0,a
      000D18                       3608 00106$:
                                   3609 ;	radio/radio.c:1235: if (feature_golay == false && (status & EZRADIOPRO_ICRCERROR)) {
      000D18 20*00 04         [24] 3610 	jb	_feature_golay,00108$
      000D1B EE               [12] 3611 	mov	a,r6
      000D1C 20 E0 6F         [24] 3612 	jb	acc.0,00117$
                                   3613 ;	radio/radio.c:1236: goto rxfail;
      000D1F                       3614 00108$:
                                   3615 ;	radio/radio.c:1239: if (status & EZRADIOPRO_IPKVALID) {
      000D1F EE               [12] 3616 	mov	a,r6
      000D20 30 E1 69         [24] 3617 	jnb	acc.1,00116$
                                   3618 ;	radio/radio.c:1240: __data uint8_t len = register_read(EZRADIOPRO_RECEIVED_PACKET_LENGTH);
      000D23 75 82 4B         [24] 3619 	mov	dpl,#0x4B
      000D26 12r08r4D         [24] 3620 	lcall	_register_read
                                   3621 ;	radio/radio.c:1241: if (len > MAX_PACKET_LENGTH || partial_packet_length > len) {
      000D29 E5 82            [12] 3622 	mov	a,dpl
      000D2B FF               [12] 3623 	mov	r7,a
      000D2C 24 03            [12] 3624 	add	a,#0xff - 0xFC
      000D2E 40 5E            [24] 3625 	jc	00117$
      000D30 78r01            [12] 3626 	mov	r0,#_partial_packet_length
      000D32 C3               [12] 3627 	clr	c
      000D33 E2               [24] 3628 	movx	a,@r0
      000D34 F5 F0            [12] 3629 	mov	b,a
      000D36 EF               [12] 3630 	mov	a,r7
      000D37 95 F0            [12] 3631 	subb	a,b
      000D39 40 53            [24] 3632 	jc	00117$
                                   3633 ;	radio/radio.c:1245: if (partial_packet_length < len) {
      000D3B 78r01            [12] 3634 	mov	r0,#_partial_packet_length
      000D3D C3               [12] 3635 	clr	c
      000D3E E2               [24] 3636 	movx	a,@r0
      000D3F 9F               [12] 3637 	subb	a,r7
      000D40 50 22            [24] 3638 	jnc	00114$
                                   3639 ;	radio/radio.c:1246: read_receive_fifo(len-partial_packet_length, &radio_buffer[partial_packet_length]);
      000D42 78r01            [12] 3640 	mov	r0,#_partial_packet_length
      000D44 E2               [24] 3641 	movx	a,@r0
      000D45 24r00            [12] 3642 	add	a,#_radio_buffer
      000D47 FD               [12] 3643 	mov	r5,a
      000D48 E4               [12] 3644 	clr	a
      000D49 34s00            [12] 3645 	addc	a,#(_radio_buffer >> 8)
      000D4B FE               [12] 3646 	mov	r6,a
      000D4C 78r01            [12] 3647 	mov	r0,#_partial_packet_length
      000D4E D3               [12] 3648 	setb	c
      000D4F E2               [24] 3649 	movx	a,@r0
      000D50 9F               [12] 3650 	subb	a,r7
      000D51 F4               [12] 3651 	cpl	a
      000D52 FC               [12] 3652 	mov	r4,a
      000D53 C0 07            [24] 3653 	push	ar7
      000D55 C0 05            [24] 3654 	push	ar5
      000D57 C0 06            [24] 3655 	push	ar6
      000D59 8C 82            [24] 3656 	mov	dpl,r4
      000D5B 12r08r81         [24] 3657 	lcall	_read_receive_fifo
      000D5E 15 81            [12] 3658 	dec	sp
      000D60 15 81            [12] 3659 	dec	sp
      000D62 D0 07            [24] 3660 	pop	ar7
      000D64                       3661 00114$:
                                   3662 ;	radio/radio.c:1248: receive_packet_length = len;
      000D64 78r00            [12] 3663 	mov	r0,#_receive_packet_length
      000D66 EF               [12] 3664 	mov	a,r7
      000D67 F2               [24] 3665 	movx	@r0,a
                                   3666 ;	radio/radio.c:1251: packet_received = true;
      000D68 D2*00            [12] 3667 	setb	_packet_received
                                   3668 ;	radio/radio.c:1254: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
      000D6A E4               [12] 3669 	clr	a
      000D6B C0 E0            [24] 3670 	push	acc
      000D6D 75 82 05         [24] 3671 	mov	dpl,#0x05
      000D70 12r08r17         [24] 3672 	lcall	_register_write
      000D73 15 81            [12] 3673 	dec	sp
                                   3674 ;	radio/radio.c:1255: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
      000D75 E4               [12] 3675 	clr	a
      000D76 C0 E0            [24] 3676 	push	acc
      000D78 75 82 06         [24] 3677 	mov	dpl,#0x06
      000D7B 12r08r17         [24] 3678 	lcall	_register_write
      000D7E 15 81            [12] 3679 	dec	sp
                                   3680 ;	radio/radio.c:1258: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_PLLON);
      000D80 74 02            [12] 3681 	mov	a,#0x02
      000D82 C0 E0            [24] 3682 	push	acc
      000D84 75 82 07         [24] 3683 	mov	dpl,#0x07
      000D87 12r08r17         [24] 3684 	lcall	_register_write
      000D8A 15 81            [12] 3685 	dec	sp
      000D8C                       3686 00116$:
                                   3687 ;	radio/radio.c:1263: return;
                                   3688 ;	radio/radio.c:1265: rxfail:
      000D8C 80 1E            [24] 3689 	sjmp	00120$
      000D8E                       3690 00117$:
                                   3691 ;	radio/radio.c:1266: if (errors.rx_errors != 0xFFFF) {
      000D8E 78r00            [12] 3692 	mov	r0,#_errors
      000D90 E2               [24] 3693 	movx	a,@r0
      000D91 FE               [12] 3694 	mov	r6,a
      000D92 08               [12] 3695 	inc	r0
      000D93 E2               [24] 3696 	movx	a,@r0
      000D94 FF               [12] 3697 	mov	r7,a
      000D95 BE FF 05         [24] 3698 	cjne	r6,#0xFF,00158$
      000D98 BF FF 02         [24] 3699 	cjne	r7,#0xFF,00158$
      000D9B 80 0C            [24] 3700 	sjmp	00119$
      000D9D                       3701 00158$:
                                   3702 ;	radio/radio.c:1267: errors.rx_errors++;
      000D9D 0E               [12] 3703 	inc	r6
      000D9E BE 00 01         [24] 3704 	cjne	r6,#0x00,00159$
      000DA1 0F               [12] 3705 	inc	r7
      000DA2                       3706 00159$:
      000DA2 78r00            [12] 3707 	mov	r0,#_errors
      000DA4 EE               [12] 3708 	mov	a,r6
      000DA5 F2               [24] 3709 	movx	@r0,a
      000DA6 08               [12] 3710 	inc	r0
      000DA7 EF               [12] 3711 	mov	a,r7
      000DA8 F2               [24] 3712 	movx	@r0,a
      000DA9                       3713 00119$:
                                   3714 ;	radio/radio.c:1269: radio_receiver_on();
      000DA9 12r03r79         [24] 3715 	lcall	_radio_receiver_on
      000DAC                       3716 00120$:
      000DAC D0 D0            [24] 3717 	pop	psw
      000DAE D0 00            [24] 3718 	pop	(0+0)
      000DB0 D0 01            [24] 3719 	pop	(0+1)
      000DB2 D0 02            [24] 3720 	pop	(0+2)
      000DB4 D0 03            [24] 3721 	pop	(0+3)
      000DB6 D0 04            [24] 3722 	pop	(0+4)
      000DB8 D0 05            [24] 3723 	pop	(0+5)
      000DBA D0 06            [24] 3724 	pop	(0+6)
      000DBC D0 07            [24] 3725 	pop	(0+7)
      000DBE D0 83            [24] 3726 	pop	dph
      000DC0 D0 82            [24] 3727 	pop	dpl
      000DC2 D0 F0            [24] 3728 	pop	b
      000DC4 D0 E0            [24] 3729 	pop	acc
      000DC6 D0*00            [24] 3730 	pop	bits
      000DC8 32               [24] 3731 	reti
                                   3732 	.area CSEG    (CODE)
                                   3733 	.area CONST   (CODE)
      000000                       3734 ___str_0:
      000000 6F 76 65 72 73 69 7A  3735 	.ascii "oversized packet"
             65 64 20 70 61 63 6B
             65 74
      000010 00                    3736 	.db 0x00
      000011                       3737 _reg_index:
      000011 1C                    3738 	.db #0x1C	; 28
      000012 1F                    3739 	.db #0x1F	; 31
      000013 20                    3740 	.db #0x20	; 32
      000014 21                    3741 	.db #0x21	; 33
      000015 22                    3742 	.db #0x22	; 34
      000016 23                    3743 	.db #0x23	; 35
      000017 24                    3744 	.db #0x24	; 36
      000018 25                    3745 	.db #0x25	; 37
      000019 2A                    3746 	.db #0x2A	; 42
      00001A 6E                    3747 	.db #0x6E	; 110	'n'
      00001B 6F                    3748 	.db #0x6F	; 111	'o'
      00001C 72                    3749 	.db #0x72	; 114	'r'
      00001D                       3750 _air_data_rates:
      00001D 02                    3751 	.db #0x02	; 2
      00001E 04                    3752 	.db #0x04	; 4
      00001F 08                    3753 	.db #0x08	; 8
      000020 10                    3754 	.db #0x10	; 16
      000021 13                    3755 	.db #0x13	; 19
      000022 18                    3756 	.db #0x18	; 24
      000023 20                    3757 	.db #0x20	; 32
      000024 30                    3758 	.db #0x30	; 48	'0'
      000025 40                    3759 	.db #0x40	; 64
      000026 60                    3760 	.db #0x60	; 96
      000027 80                    3761 	.db #0x80	; 128
      000028 C0                    3762 	.db #0xC0	; 192
      000029 FA                    3763 	.db #0xFA	; 250
      00002A                       3764 _reg_table_433:
      00002A 27                    3765 	.db #0x27	; 39
      00002B 27                    3766 	.db #0x27	; 39
      00002C 27                    3767 	.db #0x27	; 39
      00002D 2E                    3768 	.db #0x2E	; 46
      00002E 16                    3769 	.db #0x16	; 22
      00002F 01                    3770 	.db #0x01	; 1
      000030 05                    3771 	.db #0x05	; 5
      000031 0B                    3772 	.db #0x0B	; 11
      000032 9A                    3773 	.db #0x9A	; 154
      000033 88                    3774 	.db #0x88	; 136
      000034 8A                    3775 	.db #0x8A	; 138
      000035 8C                    3776 	.db #0x8C	; 140
      000036 8D                    3777 	.db #0x8D	; 141
      000037 03                    3778 	.db #0x03	; 3
      000038 03                    3779 	.db #0x03	; 3
      000039 03                    3780 	.db #0x03	; 3
      00003A 03                    3781 	.db #0x03	; 3
      00003B 03                    3782 	.db #0x03	; 3
      00003C 03                    3783 	.db #0x03	; 3
      00003D 03                    3784 	.db #0x03	; 3
      00003E 03                    3785 	.db #0x03	; 3
      00003F 03                    3786 	.db #0x03	; 3
      000040 03                    3787 	.db #0x03	; 3
      000041 03                    3788 	.db #0x03	; 3
      000042 03                    3789 	.db #0x03	; 3
      000043 03                    3790 	.db #0x03	; 3
      000044 F4                    3791 	.db #0xF4	; 244
      000045 FA                    3792 	.db #0xFA	; 250
      000046 7D                    3793 	.db #0x7D	; 125
      000047 3F                    3794 	.db #0x3F	; 63
      000048 69                    3795 	.db #0x69	; 105	'i'
      000049 A7                    3796 	.db #0xA7	; 167
      00004A 7D                    3797 	.db #0x7D	; 125
      00004B 53                    3798 	.db #0x53	; 83	'S'
      00004C 5E                    3799 	.db #0x5E	; 94
      00004D 7D                    3800 	.db #0x7D	; 125
      00004E 5E                    3801 	.db #0x5E	; 94
      00004F 3F                    3802 	.db #0x3F	; 63
      000050 30                    3803 	.db #0x30	; 48	'0'
      000051 20                    3804 	.db #0x20	; 32
      000052 00                    3805 	.db #0x00	; 0
      000053 01                    3806 	.db #0x01	; 1
      000054 02                    3807 	.db #0x02	; 2
      000055 01                    3808 	.db #0x01	; 1
      000056 00                    3809 	.db #0x00	; 0
      000057 01                    3810 	.db #0x01	; 1
      000058 01                    3811 	.db #0x01	; 1
      000059 01                    3812 	.db #0x01	; 1
      00005A 01                    3813 	.db #0x01	; 1
      00005B 01                    3814 	.db #0x01	; 1
      00005C 02                    3815 	.db #0x02	; 2
      00005D 02                    3816 	.db #0x02	; 2
      00005E 41                    3817 	.db #0x41	; 65	'A'
      00005F 83                    3818 	.db #0x83	; 131
      000060 06                    3819 	.db #0x06	; 6
      000061 0C                    3820 	.db #0x0C	; 12
      000062 37                    3821 	.db #0x37	; 55	'7'
      000063 C4                    3822 	.db #0xC4	; 196
      000064 06                    3823 	.db #0x06	; 6
      000065 89                    3824 	.db #0x89	; 137
      000066 5D                    3825 	.db #0x5D	; 93
      000067 06                    3826 	.db #0x06	; 6
      000068 5D                    3827 	.db #0x5D	; 93
      000069 0C                    3828 	.db #0x0C	; 12
      00006A AA                    3829 	.db #0xAA	; 170
      00006B 89                    3830 	.db #0x89	; 137
      00006C 12                    3831 	.db #0x12	; 18
      00006D 25                    3832 	.db #0x25	; 37
      00006E 4A                    3833 	.db #0x4A	; 74	'J'
      00006F 4C                    3834 	.db #0x4C	; 76	'L'
      000070 9C                    3835 	.db #0x9C	; 156
      000071 25                    3836 	.db #0x25	; 37
      000072 37                    3837 	.db #0x37	; 55	'7'
      000073 86                    3838 	.db #0x86	; 134
      000074 25                    3839 	.db #0x25	; 37
      000075 86                    3840 	.db #0x86	; 134
      000076 4A                    3841 	.db #0x4A	; 74	'J'
      000077 AB                    3842 	.db #0xAB	; 171
      000078 00                    3843 	.db #0x00	; 0
      000079 01                    3844 	.db #0x01	; 1
      00007A 02                    3845 	.db #0x02	; 2
      00007B 04                    3846 	.db #0x04	; 4
      00007C 02                    3847 	.db #0x02	; 2
      00007D 01                    3848 	.db #0x01	; 1
      00007E 02                    3849 	.db #0x02	; 2
      00007F 03                    3850 	.db #0x03	; 3
      000080 02                    3851 	.db #0x02	; 2
      000081 02                    3852 	.db #0x02	; 2
      000082 02                    3853 	.db #0x02	; 2
      000083 04                    3854 	.db #0x04	; 4
      000084 07                    3855 	.db #0x07	; 7
      000085 85                    3856 	.db #0x85	; 133
      000086 08                    3857 	.db #0x08	; 8
      000087 0E                    3858 	.db #0x0E	; 14
      000088 12                    3859 	.db #0x12	; 18
      000089 72                    3860 	.db #0x72	; 114	'r'
      00008A 8A                    3861 	.db #0x8A	; 138
      00008B 0E                    3862 	.db #0x0E	; 14
      00008C 18                    3863 	.db #0x18	; 24
      00008D BB                    3864 	.db #0xBB	; 187
      00008E 0E                    3865 	.db #0x0E	; 14
      00008F BB                    3866 	.db #0xBB	; 187
      000090 EA                    3867 	.db #0xEA	; 234
      000091 FF                    3868 	.db #0xFF	; 255
      000092 1D                    3869 	.db #0x1D	; 29
      000093 1D                    3870 	.db #0x1D	; 29
      000094 1D                    3871 	.db #0x1D	; 29
      000095 1E                    3872 	.db #0x1E	; 30
      000096 1E                    3873 	.db #0x1E	; 30
      000097 1E                    3874 	.db #0x1E	; 30
      000098 20                    3875 	.db #0x20	; 32
      000099 30                    3876 	.db #0x30	; 48	'0'
      00009A 41                    3877 	.db #0x41	; 65	'A'
      00009B 50                    3878 	.db #0x50	; 80	'P'
      00009C 50                    3879 	.db #0x50	; 80	'P'
      00009D 50                    3880 	.db #0x50	; 80	'P'
      00009E 50                    3881 	.db #0x50	; 80	'P'
      00009F 10                    3882 	.db #0x10	; 16
      0000A0 20                    3883 	.db #0x20	; 32
      0000A1 41                    3884 	.db #0x41	; 65	'A'
      0000A2 83                    3885 	.db #0x83	; 131
      0000A3 9B                    3886 	.db #0x9B	; 155
      0000A4 C4                    3887 	.db #0xC4	; 196
      0000A5 08                    3888 	.db #0x08	; 8
      0000A6 0C                    3889 	.db #0x0C	; 12
      0000A7 10                    3890 	.db #0x10	; 16
      0000A8 18                    3891 	.db #0x18	; 24
      0000A9 20                    3892 	.db #0x20	; 32
      0000AA 31                    3893 	.db #0x31	; 49	'1'
      0000AB 40                    3894 	.db #0x40	; 64
      0000AC 62                    3895 	.db #0x62	; 98	'b'
      0000AD C5                    3896 	.db #0xC5	; 197
      0000AE 89                    3897 	.db #0x89	; 137
      0000AF 12                    3898 	.db #0x12	; 18
      0000B0 A6                    3899 	.db #0xA6	; 166
      0000B1 9C                    3900 	.db #0x9C	; 156
      0000B2 31                    3901 	.db #0x31	; 49	'1'
      0000B3 4A                    3902 	.db #0x4A	; 74	'J'
      0000B4 62                    3903 	.db #0x62	; 98	'b'
      0000B5 93                    3904 	.db #0x93	; 147
      0000B6 C5                    3905 	.db #0xC5	; 197
      0000B7 27                    3906 	.db #0x27	; 39
      0000B8 00                    3907 	.db #0x00	; 0
      0000B9 03                    3908 	.db #0x03	; 3
      0000BA 06                    3909 	.db #0x06	; 6
      0000BB 0D                    3910 	.db #0x0D	; 13
      0000BC 1A                    3911 	.db #0x1A	; 26
      0000BD 1E                    3912 	.db #0x1E	; 30
      0000BE 26                    3913 	.db #0x26	; 38
      0000BF 33                    3914 	.db #0x33	; 51	'3'
      0000C0 4D                    3915 	.db #0x4D	; 77	'M'
      0000C1 66                    3916 	.db #0x66	; 102	'f'
      0000C2 9A                    3917 	.db #0x9A	; 154
      0000C3 CD                    3918 	.db #0xCD	; 205
      0000C4 FE                    3919 	.db #0xFE	; 254
      0000C5 FE                    3920 	.db #0xFE	; 254
      0000C6                       3921 _reg_table_470:
      0000C6 2B                    3922 	.db #0x2B	; 43
      0000C7 2B                    3923 	.db #0x2B	; 43
      0000C8 2B                    3924 	.db #0x2B	; 43
      0000C9 2E                    3925 	.db #0x2E	; 46
      0000CA 16                    3926 	.db #0x16	; 22
      0000CB 01                    3927 	.db #0x01	; 1
      0000CC 05                    3928 	.db #0x05	; 5
      0000CD 0B                    3929 	.db #0x0B	; 11
      0000CE 9A                    3930 	.db #0x9A	; 154
      0000CF 88                    3931 	.db #0x88	; 136
      0000D0 8A                    3932 	.db #0x8A	; 138
      0000D1 8C                    3933 	.db #0x8C	; 140
      0000D2 8D                    3934 	.db #0x8D	; 141
      0000D3 03                    3935 	.db #0x03	; 3
      0000D4 03                    3936 	.db #0x03	; 3
      0000D5 03                    3937 	.db #0x03	; 3
      0000D6 03                    3938 	.db #0x03	; 3
      0000D7 03                    3939 	.db #0x03	; 3
      0000D8 03                    3940 	.db #0x03	; 3
      0000D9 03                    3941 	.db #0x03	; 3
      0000DA 03                    3942 	.db #0x03	; 3
      0000DB 03                    3943 	.db #0x03	; 3
      0000DC 03                    3944 	.db #0x03	; 3
      0000DD 03                    3945 	.db #0x03	; 3
      0000DE 03                    3946 	.db #0x03	; 3
      0000DF 03                    3947 	.db #0x03	; 3
      0000E0 F4                    3948 	.db #0xF4	; 244
      0000E1 FA                    3949 	.db #0xFA	; 250
      0000E2 7D                    3950 	.db #0x7D	; 125
      0000E3 3F                    3951 	.db #0x3F	; 63
      0000E4 69                    3952 	.db #0x69	; 105	'i'
      0000E5 A7                    3953 	.db #0xA7	; 167
      0000E6 7D                    3954 	.db #0x7D	; 125
      0000E7 53                    3955 	.db #0x53	; 83	'S'
      0000E8 5E                    3956 	.db #0x5E	; 94
      0000E9 7D                    3957 	.db #0x7D	; 125
      0000EA 5E                    3958 	.db #0x5E	; 94
      0000EB 3F                    3959 	.db #0x3F	; 63
      0000EC 30                    3960 	.db #0x30	; 48	'0'
      0000ED 20                    3961 	.db #0x20	; 32
      0000EE 00                    3962 	.db #0x00	; 0
      0000EF 01                    3963 	.db #0x01	; 1
      0000F0 02                    3964 	.db #0x02	; 2
      0000F1 01                    3965 	.db #0x01	; 1
      0000F2 00                    3966 	.db #0x00	; 0
      0000F3 01                    3967 	.db #0x01	; 1
      0000F4 01                    3968 	.db #0x01	; 1
      0000F5 01                    3969 	.db #0x01	; 1
      0000F6 01                    3970 	.db #0x01	; 1
      0000F7 01                    3971 	.db #0x01	; 1
      0000F8 02                    3972 	.db #0x02	; 2
      0000F9 02                    3973 	.db #0x02	; 2
      0000FA 41                    3974 	.db #0x41	; 65	'A'
      0000FB 83                    3975 	.db #0x83	; 131
      0000FC 06                    3976 	.db #0x06	; 6
      0000FD 0C                    3977 	.db #0x0C	; 12
      0000FE 37                    3978 	.db #0x37	; 55	'7'
      0000FF C4                    3979 	.db #0xC4	; 196
      000100 06                    3980 	.db #0x06	; 6
      000101 89                    3981 	.db #0x89	; 137
      000102 5D                    3982 	.db #0x5D	; 93
      000103 06                    3983 	.db #0x06	; 6
      000104 5D                    3984 	.db #0x5D	; 93
      000105 0C                    3985 	.db #0x0C	; 12
      000106 AA                    3986 	.db #0xAA	; 170
      000107 89                    3987 	.db #0x89	; 137
      000108 12                    3988 	.db #0x12	; 18
      000109 25                    3989 	.db #0x25	; 37
      00010A 4A                    3990 	.db #0x4A	; 74	'J'
      00010B 4C                    3991 	.db #0x4C	; 76	'L'
      00010C 9C                    3992 	.db #0x9C	; 156
      00010D 25                    3993 	.db #0x25	; 37
      00010E 37                    3994 	.db #0x37	; 55	'7'
      00010F 86                    3995 	.db #0x86	; 134
      000110 25                    3996 	.db #0x25	; 37
      000111 86                    3997 	.db #0x86	; 134
      000112 4A                    3998 	.db #0x4A	; 74	'J'
      000113 AB                    3999 	.db #0xAB	; 171
      000114 00                    4000 	.db #0x00	; 0
      000115 01                    4001 	.db #0x01	; 1
      000116 02                    4002 	.db #0x02	; 2
      000117 04                    4003 	.db #0x04	; 4
      000118 02                    4004 	.db #0x02	; 2
      000119 01                    4005 	.db #0x01	; 1
      00011A 02                    4006 	.db #0x02	; 2
      00011B 03                    4007 	.db #0x03	; 3
      00011C 02                    4008 	.db #0x02	; 2
      00011D 02                    4009 	.db #0x02	; 2
      00011E 02                    4010 	.db #0x02	; 2
      00011F 04                    4011 	.db #0x04	; 4
      000120 07                    4012 	.db #0x07	; 7
      000121 85                    4013 	.db #0x85	; 133
      000122 08                    4014 	.db #0x08	; 8
      000123 0E                    4015 	.db #0x0E	; 14
      000124 12                    4016 	.db #0x12	; 18
      000125 72                    4017 	.db #0x72	; 114	'r'
      000126 8A                    4018 	.db #0x8A	; 138
      000127 0E                    4019 	.db #0x0E	; 14
      000128 18                    4020 	.db #0x18	; 24
      000129 BB                    4021 	.db #0xBB	; 187
      00012A 0E                    4022 	.db #0x0E	; 14
      00012B BB                    4023 	.db #0xBB	; 187
      00012C EA                    4024 	.db #0xEA	; 234
      00012D FF                    4025 	.db #0xFF	; 255
      00012E 1E                    4026 	.db #0x1E	; 30
      00012F 1E                    4027 	.db #0x1E	; 30
      000130 1E                    4028 	.db #0x1E	; 30
      000131 21                    4029 	.db #0x21	; 33
      000132 21                    4030 	.db #0x21	; 33
      000133 21                    4031 	.db #0x21	; 33
      000134 21                    4032 	.db #0x21	; 33
      000135 30                    4033 	.db #0x30	; 48	'0'
      000136 41                    4034 	.db #0x41	; 65	'A'
      000137 50                    4035 	.db #0x50	; 80	'P'
      000138 50                    4036 	.db #0x50	; 80	'P'
      000139 50                    4037 	.db #0x50	; 80	'P'
      00013A 50                    4038 	.db #0x50	; 80	'P'
      00013B 10                    4039 	.db #0x10	; 16
      00013C 20                    4040 	.db #0x20	; 32
      00013D 41                    4041 	.db #0x41	; 65	'A'
      00013E 83                    4042 	.db #0x83	; 131
      00013F 9B                    4043 	.db #0x9B	; 155
      000140 C4                    4044 	.db #0xC4	; 196
      000141 08                    4045 	.db #0x08	; 8
      000142 0C                    4046 	.db #0x0C	; 12
      000143 10                    4047 	.db #0x10	; 16
      000144 18                    4048 	.db #0x18	; 24
      000145 20                    4049 	.db #0x20	; 32
      000146 31                    4050 	.db #0x31	; 49	'1'
      000147 40                    4051 	.db #0x40	; 64
      000148 62                    4052 	.db #0x62	; 98	'b'
      000149 C5                    4053 	.db #0xC5	; 197
      00014A 89                    4054 	.db #0x89	; 137
      00014B 12                    4055 	.db #0x12	; 18
      00014C A6                    4056 	.db #0xA6	; 166
      00014D 9C                    4057 	.db #0x9C	; 156
      00014E 31                    4058 	.db #0x31	; 49	'1'
      00014F 4A                    4059 	.db #0x4A	; 74	'J'
      000150 62                    4060 	.db #0x62	; 98	'b'
      000151 93                    4061 	.db #0x93	; 147
      000152 C5                    4062 	.db #0xC5	; 197
      000153 27                    4063 	.db #0x27	; 39
      000154 00                    4064 	.db #0x00	; 0
      000155 03                    4065 	.db #0x03	; 3
      000156 06                    4066 	.db #0x06	; 6
      000157 0D                    4067 	.db #0x0D	; 13
      000158 1A                    4068 	.db #0x1A	; 26
      000159 1E                    4069 	.db #0x1E	; 30
      00015A 26                    4070 	.db #0x26	; 38
      00015B 33                    4071 	.db #0x33	; 51	'3'
      00015C 4D                    4072 	.db #0x4D	; 77	'M'
      00015D 66                    4073 	.db #0x66	; 102	'f'
      00015E 9A                    4074 	.db #0x9A	; 154
      00015F CD                    4075 	.db #0xCD	; 205
      000160 FE                    4076 	.db #0xFE	; 254
      000161 FE                    4077 	.db #0xFE	; 254
      000162                       4078 _reg_table_868:
      000162 01                    4079 	.db #0x01	; 1
      000163 01                    4080 	.db #0x01	; 1
      000164 01                    4081 	.db #0x01	; 1
      000165 01                    4082 	.db #0x01	; 1
      000166 01                    4083 	.db #0x01	; 1
      000167 01                    4084 	.db #0x01	; 1
      000168 05                    4085 	.db #0x05	; 5
      000169 0B                    4086 	.db #0x0B	; 11
      00016A 9A                    4087 	.db #0x9A	; 154
      00016B 88                    4088 	.db #0x88	; 136
      00016C 8A                    4089 	.db #0x8A	; 138
      00016D 8C                    4090 	.db #0x8C	; 140
      00016E 8D                    4091 	.db #0x8D	; 141
      00016F 03                    4092 	.db #0x03	; 3
      000170 03                    4093 	.db #0x03	; 3
      000171 03                    4094 	.db #0x03	; 3
      000172 03                    4095 	.db #0x03	; 3
      000173 03                    4096 	.db #0x03	; 3
      000174 03                    4097 	.db #0x03	; 3
      000175 03                    4098 	.db #0x03	; 3
      000176 03                    4099 	.db #0x03	; 3
      000177 03                    4100 	.db #0x03	; 3
      000178 03                    4101 	.db #0x03	; 3
      000179 03                    4102 	.db #0x03	; 3
      00017A 03                    4103 	.db #0x03	; 3
      00017B 03                    4104 	.db #0x03	; 3
      00017C D0                    4105 	.db #0xD0	; 208
      00017D E8                    4106 	.db #0xE8	; 232
      00017E F4                    4107 	.db #0xF4	; 244
      00017F FA                    4108 	.db #0xFA	; 250
      000180 D3                    4109 	.db #0xD3	; 211
      000181 A7                    4110 	.db #0xA7	; 167
      000182 7D                    4111 	.db #0x7D	; 125
      000183 53                    4112 	.db #0x53	; 83	'S'
      000184 5E                    4113 	.db #0x5E	; 94
      000185 7D                    4114 	.db #0x7D	; 125
      000186 5E                    4115 	.db #0x5E	; 94
      000187 3F                    4116 	.db #0x3F	; 63
      000188 30                    4117 	.db #0x30	; 48	'0'
      000189 E0                    4118 	.db #0xE0	; 224
      00018A 60                    4119 	.db #0x60	; 96
      00018B 20                    4120 	.db #0x20	; 32
      00018C 00                    4121 	.db #0x00	; 0
      00018D 00                    4122 	.db #0x00	; 0
      00018E 00                    4123 	.db #0x00	; 0
      00018F 01                    4124 	.db #0x01	; 1
      000190 01                    4125 	.db #0x01	; 1
      000191 01                    4126 	.db #0x01	; 1
      000192 01                    4127 	.db #0x01	; 1
      000193 01                    4128 	.db #0x01	; 1
      000194 02                    4129 	.db #0x02	; 2
      000195 02                    4130 	.db #0x02	; 2
      000196 10                    4131 	.db #0x10	; 16
      000197 20                    4132 	.db #0x20	; 32
      000198 41                    4133 	.db #0x41	; 65	'A'
      000199 83                    4134 	.db #0x83	; 131
      00019A 9B                    4135 	.db #0x9B	; 155
      00019B C4                    4136 	.db #0xC4	; 196
      00019C 06                    4137 	.db #0x06	; 6
      00019D 89                    4138 	.db #0x89	; 137
      00019E 5D                    4139 	.db #0x5D	; 93
      00019F 06                    4140 	.db #0x06	; 6
      0001A0 5D                    4141 	.db #0x5D	; 93
      0001A1 0C                    4142 	.db #0x0C	; 12
      0001A2 AA                    4143 	.db #0xAA	; 170
      0001A3 62                    4144 	.db #0x62	; 98	'b'
      0001A4 C5                    4145 	.db #0xC5	; 197
      0001A5 89                    4146 	.db #0x89	; 137
      0001A6 12                    4147 	.db #0x12	; 18
      0001A7 A6                    4148 	.db #0xA6	; 166
      0001A8 9C                    4149 	.db #0x9C	; 156
      0001A9 25                    4150 	.db #0x25	; 37
      0001AA 37                    4151 	.db #0x37	; 55	'7'
      0001AB 86                    4152 	.db #0x86	; 134
      0001AC 25                    4153 	.db #0x25	; 37
      0001AD 86                    4154 	.db #0x86	; 134
      0001AE 4A                    4155 	.db #0x4A	; 74	'J'
      0001AF AB                    4156 	.db #0xAB	; 171
      0001B0 00                    4157 	.db #0x00	; 0
      0001B1 00                    4158 	.db #0x00	; 0
      0001B2 00                    4159 	.db #0x00	; 0
      0001B3 01                    4160 	.db #0x01	; 1
      0001B4 01                    4161 	.db #0x01	; 1
      0001B5 01                    4162 	.db #0x01	; 1
      0001B6 02                    4163 	.db #0x02	; 2
      0001B7 03                    4164 	.db #0x03	; 3
      0001B8 02                    4165 	.db #0x02	; 2
      0001B9 02                    4166 	.db #0x02	; 2
      0001BA 02                    4167 	.db #0x02	; 2
      0001BB 04                    4168 	.db #0x04	; 4
      0001BC 07                    4169 	.db #0x07	; 7
      0001BD 23                    4170 	.db #0x23	; 35
      0001BE 44                    4171 	.db #0x44	; 68	'D'
      0001BF 85                    4172 	.db #0x85	; 133
      0001C0 08                    4173 	.db #0x08	; 8
      0001C1 39                    4174 	.db #0x39	; 57	'9'
      0001C2 8A                    4175 	.db #0x8A	; 138
      0001C3 0E                    4176 	.db #0x0E	; 14
      0001C4 18                    4177 	.db #0x18	; 24
      0001C5 BB                    4178 	.db #0xBB	; 187
      0001C6 0E                    4179 	.db #0x0E	; 14
      0001C7 BB                    4180 	.db #0xBB	; 187
      0001C8 EA                    4181 	.db #0xEA	; 234
      0001C9 FF                    4182 	.db #0xFF	; 255
      0001CA 1C                    4183 	.db #0x1C	; 28
      0001CB 1C                    4184 	.db #0x1C	; 28
      0001CC 1C                    4185 	.db #0x1C	; 28
      0001CD 1C                    4186 	.db #0x1C	; 28
      0001CE 1C                    4187 	.db #0x1C	; 28
      0001CF 1E                    4188 	.db #0x1E	; 30
      0001D0 20                    4189 	.db #0x20	; 32
      0001D1 30                    4190 	.db #0x30	; 48	'0'
      0001D2 41                    4191 	.db #0x41	; 65	'A'
      0001D3 50                    4192 	.db #0x50	; 80	'P'
      0001D4 50                    4193 	.db #0x50	; 80	'P'
      0001D5 50                    4194 	.db #0x50	; 80	'P'
      0001D6 50                    4195 	.db #0x50	; 80	'P'
      0001D7 10                    4196 	.db #0x10	; 16
      0001D8 20                    4197 	.db #0x20	; 32
      0001D9 41                    4198 	.db #0x41	; 65	'A'
      0001DA 83                    4199 	.db #0x83	; 131
      0001DB 9B                    4200 	.db #0x9B	; 155
      0001DC C4                    4201 	.db #0xC4	; 196
      0001DD 08                    4202 	.db #0x08	; 8
      0001DE 0C                    4203 	.db #0x0C	; 12
      0001DF 10                    4204 	.db #0x10	; 16
      0001E0 18                    4205 	.db #0x18	; 24
      0001E1 20                    4206 	.db #0x20	; 32
      0001E2 31                    4207 	.db #0x31	; 49	'1'
      0001E3 40                    4208 	.db #0x40	; 64
      0001E4 62                    4209 	.db #0x62	; 98	'b'
      0001E5 C5                    4210 	.db #0xC5	; 197
      0001E6 89                    4211 	.db #0x89	; 137
      0001E7 12                    4212 	.db #0x12	; 18
      0001E8 A6                    4213 	.db #0xA6	; 166
      0001E9 9C                    4214 	.db #0x9C	; 156
      0001EA 31                    4215 	.db #0x31	; 49	'1'
      0001EB 4A                    4216 	.db #0x4A	; 74	'J'
      0001EC 62                    4217 	.db #0x62	; 98	'b'
      0001ED 93                    4218 	.db #0x93	; 147
      0001EE C5                    4219 	.db #0xC5	; 197
      0001EF 27                    4220 	.db #0x27	; 39
      0001F0 00                    4221 	.db #0x00	; 0
      0001F1 03                    4222 	.db #0x03	; 3
      0001F2 06                    4223 	.db #0x06	; 6
      0001F3 0D                    4224 	.db #0x0D	; 13
      0001F4 1A                    4225 	.db #0x1A	; 26
      0001F5 1E                    4226 	.db #0x1E	; 30
      0001F6 26                    4227 	.db #0x26	; 38
      0001F7 33                    4228 	.db #0x33	; 51	'3'
      0001F8 4D                    4229 	.db #0x4D	; 77	'M'
      0001F9 66                    4230 	.db #0x66	; 102	'f'
      0001FA 9A                    4231 	.db #0x9A	; 154
      0001FB CD                    4232 	.db #0xCD	; 205
      0001FC FE                    4233 	.db #0xFE	; 254
      0001FD FE                    4234 	.db #0xFE	; 254
      0001FE                       4235 _reg_table_915:
      0001FE 01                    4236 	.db #0x01	; 1
      0001FF 01                    4237 	.db #0x01	; 1
      000200 01                    4238 	.db #0x01	; 1
      000201 01                    4239 	.db #0x01	; 1
      000202 01                    4240 	.db #0x01	; 1
      000203 01                    4241 	.db #0x01	; 1
      000204 05                    4242 	.db #0x05	; 5
      000205 0B                    4243 	.db #0x0B	; 11
      000206 9A                    4244 	.db #0x9A	; 154
      000207 88                    4245 	.db #0x88	; 136
      000208 8A                    4246 	.db #0x8A	; 138
      000209 8C                    4247 	.db #0x8C	; 140
      00020A 8D                    4248 	.db #0x8D	; 141
      00020B 03                    4249 	.db #0x03	; 3
      00020C 03                    4250 	.db #0x03	; 3
      00020D 03                    4251 	.db #0x03	; 3
      00020E 03                    4252 	.db #0x03	; 3
      00020F 03                    4253 	.db #0x03	; 3
      000210 03                    4254 	.db #0x03	; 3
      000211 03                    4255 	.db #0x03	; 3
      000212 03                    4256 	.db #0x03	; 3
      000213 03                    4257 	.db #0x03	; 3
      000214 03                    4258 	.db #0x03	; 3
      000215 03                    4259 	.db #0x03	; 3
      000216 03                    4260 	.db #0x03	; 3
      000217 03                    4261 	.db #0x03	; 3
      000218 D0                    4262 	.db #0xD0	; 208
      000219 E8                    4263 	.db #0xE8	; 232
      00021A F4                    4264 	.db #0xF4	; 244
      00021B FA                    4265 	.db #0xFA	; 250
      00021C D3                    4266 	.db #0xD3	; 211
      00021D A7                    4267 	.db #0xA7	; 167
      00021E 7D                    4268 	.db #0x7D	; 125
      00021F 53                    4269 	.db #0x53	; 83	'S'
      000220 5E                    4270 	.db #0x5E	; 94
      000221 7D                    4271 	.db #0x7D	; 125
      000222 5E                    4272 	.db #0x5E	; 94
      000223 3F                    4273 	.db #0x3F	; 63
      000224 30                    4274 	.db #0x30	; 48	'0'
      000225 E0                    4275 	.db #0xE0	; 224
      000226 60                    4276 	.db #0x60	; 96
      000227 20                    4277 	.db #0x20	; 32
      000228 00                    4278 	.db #0x00	; 0
      000229 00                    4279 	.db #0x00	; 0
      00022A 00                    4280 	.db #0x00	; 0
      00022B 01                    4281 	.db #0x01	; 1
      00022C 01                    4282 	.db #0x01	; 1
      00022D 01                    4283 	.db #0x01	; 1
      00022E 01                    4284 	.db #0x01	; 1
      00022F 01                    4285 	.db #0x01	; 1
      000230 02                    4286 	.db #0x02	; 2
      000231 02                    4287 	.db #0x02	; 2
      000232 10                    4288 	.db #0x10	; 16
      000233 20                    4289 	.db #0x20	; 32
      000234 41                    4290 	.db #0x41	; 65	'A'
      000235 83                    4291 	.db #0x83	; 131
      000236 9B                    4292 	.db #0x9B	; 155
      000237 C4                    4293 	.db #0xC4	; 196
      000238 06                    4294 	.db #0x06	; 6
      000239 89                    4295 	.db #0x89	; 137
      00023A 5D                    4296 	.db #0x5D	; 93
      00023B 06                    4297 	.db #0x06	; 6
      00023C 5D                    4298 	.db #0x5D	; 93
      00023D 0C                    4299 	.db #0x0C	; 12
      00023E AA                    4300 	.db #0xAA	; 170
      00023F 62                    4301 	.db #0x62	; 98	'b'
      000240 C5                    4302 	.db #0xC5	; 197
      000241 89                    4303 	.db #0x89	; 137
      000242 12                    4304 	.db #0x12	; 18
      000243 A6                    4305 	.db #0xA6	; 166
      000244 9C                    4306 	.db #0x9C	; 156
      000245 25                    4307 	.db #0x25	; 37
      000246 37                    4308 	.db #0x37	; 55	'7'
      000247 86                    4309 	.db #0x86	; 134
      000248 25                    4310 	.db #0x25	; 37
      000249 86                    4311 	.db #0x86	; 134
      00024A 4A                    4312 	.db #0x4A	; 74	'J'
      00024B AB                    4313 	.db #0xAB	; 171
      00024C 00                    4314 	.db #0x00	; 0
      00024D 00                    4315 	.db #0x00	; 0
      00024E 00                    4316 	.db #0x00	; 0
      00024F 01                    4317 	.db #0x01	; 1
      000250 01                    4318 	.db #0x01	; 1
      000251 01                    4319 	.db #0x01	; 1
      000252 02                    4320 	.db #0x02	; 2
      000253 03                    4321 	.db #0x03	; 3
      000254 02                    4322 	.db #0x02	; 2
      000255 02                    4323 	.db #0x02	; 2
      000256 02                    4324 	.db #0x02	; 2
      000257 04                    4325 	.db #0x04	; 4
      000258 07                    4326 	.db #0x07	; 7
      000259 23                    4327 	.db #0x23	; 35
      00025A 44                    4328 	.db #0x44	; 68	'D'
      00025B 85                    4329 	.db #0x85	; 133
      00025C 08                    4330 	.db #0x08	; 8
      00025D 39                    4331 	.db #0x39	; 57	'9'
      00025E 8A                    4332 	.db #0x8A	; 138
      00025F 0E                    4333 	.db #0x0E	; 14
      000260 18                    4334 	.db #0x18	; 24
      000261 BB                    4335 	.db #0xBB	; 187
      000262 0E                    4336 	.db #0x0E	; 14
      000263 BB                    4337 	.db #0xBB	; 187
      000264 EA                    4338 	.db #0xEA	; 234
      000265 FF                    4339 	.db #0xFF	; 255
      000266 1E                    4340 	.db #0x1E	; 30
      000267 1E                    4341 	.db #0x1E	; 30
      000268 1E                    4342 	.db #0x1E	; 30
      000269 1E                    4343 	.db #0x1E	; 30
      00026A 1E                    4344 	.db #0x1E	; 30
      00026B 1E                    4345 	.db #0x1E	; 30
      00026C 20                    4346 	.db #0x20	; 32
      00026D 30                    4347 	.db #0x30	; 48	'0'
      00026E 41                    4348 	.db #0x41	; 65	'A'
      00026F 50                    4349 	.db #0x50	; 80	'P'
      000270 50                    4350 	.db #0x50	; 80	'P'
      000271 50                    4351 	.db #0x50	; 80	'P'
      000272 50                    4352 	.db #0x50	; 80	'P'
      000273 10                    4353 	.db #0x10	; 16
      000274 20                    4354 	.db #0x20	; 32
      000275 41                    4355 	.db #0x41	; 65	'A'
      000276 83                    4356 	.db #0x83	; 131
      000277 9B                    4357 	.db #0x9B	; 155
      000278 C4                    4358 	.db #0xC4	; 196
      000279 08                    4359 	.db #0x08	; 8
      00027A 0C                    4360 	.db #0x0C	; 12
      00027B 10                    4361 	.db #0x10	; 16
      00027C 18                    4362 	.db #0x18	; 24
      00027D 20                    4363 	.db #0x20	; 32
      00027E 31                    4364 	.db #0x31	; 49	'1'
      00027F 40                    4365 	.db #0x40	; 64
      000280 62                    4366 	.db #0x62	; 98	'b'
      000281 C5                    4367 	.db #0xC5	; 197
      000282 89                    4368 	.db #0x89	; 137
      000283 12                    4369 	.db #0x12	; 18
      000284 A6                    4370 	.db #0xA6	; 166
      000285 9C                    4371 	.db #0x9C	; 156
      000286 31                    4372 	.db #0x31	; 49	'1'
      000287 4A                    4373 	.db #0x4A	; 74	'J'
      000288 62                    4374 	.db #0x62	; 98	'b'
      000289 93                    4375 	.db #0x93	; 147
      00028A C5                    4376 	.db #0xC5	; 197
      00028B 27                    4377 	.db #0x27	; 39
      00028C 00                    4378 	.db #0x00	; 0
      00028D 03                    4379 	.db #0x03	; 3
      00028E 06                    4380 	.db #0x06	; 6
      00028F 0D                    4381 	.db #0x0D	; 13
      000290 1A                    4382 	.db #0x1A	; 26
      000291 1E                    4383 	.db #0x1E	; 30
      000292 26                    4384 	.db #0x26	; 38
      000293 33                    4385 	.db #0x33	; 51	'3'
      000294 4D                    4386 	.db #0x4D	; 77	'M'
      000295 66                    4387 	.db #0x66	; 102	'f'
      000296 9A                    4388 	.db #0x9A	; 154
      000297 CD                    4389 	.db #0xCD	; 205
      000298 FE                    4390 	.db #0xFE	; 254
      000299 FE                    4391 	.db #0xFE	; 254
      00029A                       4392 _power_levels:
      00029A EB                    4393 	.db #0xEB	; 235
      00029B E6                    4394 	.db #0xE6	; 230
      00029C E0                    4395 	.db #0xE0	; 224
      00029D DA                    4396 	.db #0xDA	; 218
      00029E D3                    4397 	.db #0xD3	; 211
      00029F CE                    4398 	.db #0xCE	; 206
      0002A0 C9                    4399 	.db #0xC9	; 201
      0002A1 C4                    4400 	.db #0xC4	; 196
      0002A2 BE                    4401 	.db #0xBE	; 190
      0002A3 B8                    4402 	.db #0xB8	; 184
      0002A4 B2                    4403 	.db #0xB2	; 178
      0002A5 AB                    4404 	.db #0xAB	; 171
      0002A6 A4                    4405 	.db #0xA4	; 164
      0002A7 96                    4406 	.db #0x96	; 150
      0002A8 88                    4407 	.db #0x88	; 136
      0002A9 50                    4408 	.db #0x50	; 80	'P'
                                   4409 	.area XINIT   (CODE)
                                   4410 	.area CABS    (ABS,CODE)
